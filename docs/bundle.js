/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/c4rn.js":
/*!*********************!*\
  !*** ./src/c4rn.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "loadC4rn": () => (/* binding */ loadC4rn)
/* harmony export */ });
//http://localhost:8080/?c4rn=64823a5feced9b09e9d4aaf5

function loadC4rn(fishId) {
  function findObjectById(array, id) {
    return _.find(array, {
      id: id
    });
  }
  function convertToJSON(jsonString) {
    try {
      var fixedString = jsonString.replace(/([a-zA-Z0-9]+?):/g, '"$1":');
      var jsonArrayString = "[" + fixedString + "]";
      var data = JSON.parse(jsonArrayString);
      var json = JSON.stringify(data);
      return json;
    } catch (error) {
      console.error('Erreur lors de la conversion en JSON :', error);
      return null;
    }
  }
  function testWindowC4rn() {
    let count = 0;
    const interval = setInterval(() => {
      if (window.c4rn !== undefined) {
        c4rnNote();
        clearInterval(interval);
      } else {
        count++;
        if (count === 50) {
          console.log('window.c4rn introuvable après 50 essais.');
          clearInterval(interval);
        }
      }
    }, 50);
  }
  testWindowC4rn();
  function c4rnNote() {
    const c4rnFish = findObjectById(window.c4rn, fishId);
    if (c4rnFish) {
      if (c4rnFish.note !== null) {
        document.getElementById("positionNote").innerHTML = c4rnFish.note;
      }
      var convertedJSON = convertToJSON(c4rnFish.pos);
      if (convertedJSON) {
        const c4rnPos = JSON.parse(convertedJSON);
        c4rnPos.forEach(pos => {
          const posElem = document.createElement("div");
          posElem.setAttribute("class", "ccross");
          posElem.setAttribute("data-fishid", fishId);
          posElem.setAttribute("style", "background-image:url('./images/c4rn.png')");
          posElem.style.left = pos.x + "%";
          posElem.style.top = pos.y + "%";
          document.getElementById("positions-container").appendChild(posElem);
        });
      }
    }
  }
}

/***/ }),

/***/ "./src/data/fish/alaska.js":
/*!*********************************!*\
  !*** ./src/data/fish/alaska.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "alaskaFish": () => (/* binding */ alaskaFish)
/* harmony export */ });
const alaskaFish = [{
  id: "31",
  type: "common",
  name: {
    en: "arctic char",
    fr: "omble chevalier",
    pt: "truta de àrtico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, false, false, false],
  kgs: {
    min: 3,
    max: 15
  },
  lbs: {
    min: 6.61,
    max: 33.07
  },
  map: "alaska",
  positions: [{
    x: 30,
    y: 85
  }],
  positionNote: ""
}, {
  id: "32",
  type: "common",
  name: {
    en: "atka mackerel",
    fr: "maquereau atka",
    pt: "cavala atka"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 2
  },
  lbs: {
    min: 2.2,
    max: 4.41
  },
  map: "alaska",
  positions: [{
    x: 30,
    y: 55
  }, {
    x: 15,
    y: 15
  }, {
    x: 30,
    y: 85
  }, {
    x: 85,
    y: 85
  }],
  positionNote: ""
}, {
  id: "33",
  type: "common",
  name: {
    en: "yellow irish lord",
    fr: "seigneur irlandais jaune",
    pt: "lord irlandês amarelo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 3
  },
  lbs: {
    min: 2.2,
    max: 6.61
  },
  map: "alaska",
  positions: [{
    x: 65,
    y: 40
  }, {
    x: 45,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 35,
    y: 20
  }],
  positionNote: ""
}, {
  id: "34",
  type: "common",
  name: {
    en: "lancetfish",
    fr: "cavalo féroce",
    pt: "lirio ferro"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 9
  },
  lbs: {
    min: 2.2,
    max: 19.84
  },
  map: "alaska",
  positions: [{
    x: 30,
    y: 55
  }, {
    x: 65,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 85,
    y: 65
  }],
  positionNote: ""
}, {
  id: "35",
  type: "common",
  name: {
    en: "steelhead",
    fr: "truite arc-en-ciel",
    pt: "truita arco-iris"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, false, false, false, false, true, true, true, true],
  kgs: {
    min: 3,
    max: 25
  },
  lbs: {
    min: 6.61,
    max: 55.12
  },
  map: "alaska",
  positions: [{
    x: 65,
    y: 40
  }, {
    x: 65,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 35,
    y: 20
  }],
  positionNote: ""
}, {
  id: "36",
  type: "common",
  name: {
    en: "silver salmon",
    fr: "saumon coho",
    pt: "salmão prateado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, false, false, true, true, true, true, false, false],
  kgs: {
    min: 1,
    max: 15
  },
  lbs: {
    min: 2.20,
    max: 33.07
  },
  map: "alaska",
  positions: [{
    x: 50,
    y: 70
  }, {
    x: 65,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 35,
    y: 20
  }],
  positionNote: ""
}, {
  id: "37",
  type: "common",
  name: {
    en: "rougheye rockfish",
    fr: "sébaste à oeil épineux",
    pt: "peixe-rock rougheye"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 7
  },
  lbs: {
    min: 4.41,
    max: 15.43
  },
  map: "alaska",
  positions: [{
    x: 45,
    y: 85
  }, {
    x: 65,
    y: 85
  }, {
    x: 85,
    y: 15
  }, {
    x: 15,
    y: 50
  }],
  positionNote: ""
}, {
  id: "38",
  type: "common",
  name: {
    en: "pacific herring",
    fr: "hareng du pacifique",
    pt: "arenque de pacifico"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, false, false, false, false, false, false, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.3
  },
  lbs: {
    min: 0.22,
    max: 0.66
  },
  map: "alaska",
  positions: [{
    x: 10,
    y: 85
  }, {
    x: 10,
    y: 35
  }, {
    x: 50,
    y: 70
  }, {
    x: 15,
    y: 50
  }],
  positionNote: ""
}, {
  id: "39",
  type: "common",
  name: {
    en: "sockeye salmon",
    fr: "saumon rouge",
    pt: "salmão-vermelho"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "alaska",
  positions: [{
    x: 64,
    y: 40
  }, {
    x: 70,
    y: 60
  }, {
    x: 50,
    y: 70
  }, {
    x: 85,
    y: 40
  }],
  positionNote: ""
}, {
  id: "310",
  type: "common",
  name: {
    en: "dolly varden",
    fr: "dolly varden",
    pt: "truta dolly varden"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 18
  },
  lbs: {
    min: 6.61,
    max: 39.68
  },
  map: "alaska",
  positions: [{
    x: 64,
    y: 40
  }, {
    x: 85,
    y: 65
  }, {
    x: 70,
    y: 85
  }, {
    x: 80,
    y: 40
  }],
  positionNote: ""
}, {
  id: "311",
  type: "common",
  name: {
    en: "coalfish",
    fr: "charbonnier",
    pt: "peixe-carvão de pacifico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, false, false, false, false],
  kgs: {
    min: 3,
    max: 18
  },
  lbs: {
    min: 11.02,
    max: 68.34
  },
  map: "alaska",
  positions: [{
    x: 64,
    y: 40
  }, {
    x: 85,
    y: 45
  }, {
    x: 30,
    y: 55
  }, {
    x: 40,
    y: 15
  }],
  positionNote: ""
}, {
  id: "312",
  type: "common",
  name: {
    en: "chum salmon",
    fr: "saumon chien",
    pt: "salmão cão"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, true, true, false],
  kgs: {
    min: 2,
    max: 16
  },
  lbs: {
    min: 4.41,
    max: 35.27
  },
  map: "alaska",
  positions: [{
    x: 50,
    y: 70
  }, {
    x: 85,
    y: 15
  }, {
    x: 30,
    y: 55
  }, {
    x: 15,
    y: 50
  }],
  positionNote: ""
}, {
  id: "313",
  type: "common",
  name: {
    en: "capelin",
    fr: "capelan",
    pt: "capelim"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.01,
    max: 0.1
  },
  lbs: {
    min: 0.02,
    max: 0.22
  },
  map: "alaska",
  positions: [{
    x: 90,
    y: 85
  }, {
    x: 85,
    y: 15
  }, {
    x: 30,
    y: 85
  }, {
    x: 15,
    y: 50
  }],
  positionNote: ""
}, {
  id: "314",
  type: "common",
  name: {
    en: "burbot",
    fr: "lotte",
    pt: "burbot"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, false, false, false, false, false, false, false, true, true, true],
  kgs: {
    min: 5,
    max: 34
  },
  lbs: {
    min: 11.02,
    max: 74.96
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 65
  }, {
    x: 80,
    y: 45
  }, {
    x: 30,
    y: 85
  }, {
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "315",
  type: "common",
  name: {
    en: "bigmouth sculpin",
    fr: "chabot à grande-bouche",
    pt: "escultor de bigmouth"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.5,
    max: 3
  },
  lbs: {
    min: 1.10,
    max: 6.61
  },
  map: "alaska",
  positions: [{
    x: 65,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 50,
    y: 70
  }, {
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "316",
  type: "common",
  name: {
    en: "arctic greyling",
    fr: "ombre arctique",
    pt: "grayling àrtico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, false, true, true, false, false, false, false, false],
  kgs: {
    min: 2,
    max: 4
  },
  lbs: {
    min: 4.41,
    max: 8.82
  },
  map: "alaska",
  positions: [{
    x: 30,
    y: 85
  }, {
    x: 85,
    y: 85
  }, {
    x: 25,
    y: 55
  }, {
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "317",
  type: "common",
  name: {
    en: "humpback salmon",
    fr: "saumon rose à bosse",
    pt: "salmão rosado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, true, true, true, true, true, false, false, false, false],
  kgs: {
    min: 2,
    max: 7
  },
  lbs: {
    min: 4.41,
    max: 15.43
  },
  map: "alaska",
  positions: [{
    x: 50,
    y: 70
  }, {
    x: 85,
    y: 15
  }, {
    x: 65,
    y: 40
  }, {
    x: 40,
    y: 20
  }],
  positionNote: ""
}, {
  id: "318",
  type: "rare",
  name: {
    en: "halibut",
    fr: "flétan du pacifique",
    pt: "halibute"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 20,
    max: 363
  },
  lbs: {
    min: 44.09,
    max: 800.28
  },
  map: "alaska",
  positions: [{
    x: 90,
    y: 25
  }, {
    x: 30,
    y: 55
  }],
  positionNote: ""
}, {
  id: "319",
  type: "rare",
  name: {
    en: "blue lingcod",
    fr: "morue-lingue bleue",
    pt: "bacalhau ling"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 20,
    max: 363
  },
  lbs: {
    min: 11.02,
    max: 130.07
  },
  map: "alaska",
  positions: [{
    x: 45,
    y: 85
  }, {
    x: 70,
    y: 85
  }, {
    x: 15,
    y: 50
  }, {
    x: 75,
    y: 15
  }],
  positionNote: ""
}, {
  id: "320",
  type: "rare",
  name: {
    en: "spiny skate",
    fr: "raie blanche du pacifique",
    pt: "arraia branco de pacifico"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 60
  },
  lbs: {
    min: 2.20,
    max: 132.28
  },
  map: "alaska",
  positions: [{
    x: 45,
    y: 85
  }, {
    x: 70,
    y: 85
  }, {
    x: 15,
    y: 50
  }, {
    x: 75,
    y: 15
  }, {
    x: 50,
    y: 70
  }, {
    x: 85,
    y: 15
  }, {
    x: 30,
    y: 55
  }, {
    x: 85,
    y: 40
  }],
  positionNote: "Is basically everywhere..."
}, {
  id: "321",
  type: "rare",
  name: {
    en: "wolf eel",
    fr: "poisson loup à ocelles",
    pt: "enguia-lobo"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 18
  },
  lbs: {
    min: 6.61,
    max: 39.68
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 65
  }, {
    x: 70,
    y: 85
  }, {
    x: 80,
    y: 45
  }],
  positionNote: ""
}, {
  id: "322",
  type: "epic",
  name: {
    en: "king salmon",
    fr: "saumon royal",
    pt: "salmão-rei"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 5,
    max: 61
  },
  lbs: {
    min: 11.02,
    max: 134.48
  },
  map: "alaska",
  positions: [{
    x: 65,
    y: 40
  }, {
    x: 50,
    y: 75
  }],
  positionNote: ""
}, {
  id: "323",
  type: "epic",
  name: {
    en: "salmon shark",
    fr: "requin saumon",
    pt: "tubarão-salmão"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 40,
    max: 175
  },
  lbs: {
    min: 88.18,
    max: 385.81
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 40
  }, {
    x: 50,
    y: 75
  }, {
    x: 55,
    y: 15
  }],
  positionNote: "position has been changed recently.<br>Try the west spot first.<br>Please send a message if you have found a solid spot."
}, {
  id: "324",
  type: "epic",
  name: {
    en: "pacific sleeper shark",
    fr: "requin dormeur du pacifique",
    pt: "tubarão-dormedor de pacifico"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 363
  },
  lbs: {
    min: 22.05,
    max: 800.28
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 40
  }, {
    x: 50,
    y: 75
  }, {
    x: 30,
    y: 85
  }, {
    x: 80,
    y: 15
  }],
  positionNote: ""
}, {
  id: "325",
  type: "epic",
  name: {
    en: "sunfish",
    fr: "môle",
    pt: "peixe-luna"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, false, false, false],
  kgs: {
    min: 100,
    max: 2400
  },
  lbs: {
    min: 220.46,
    max: 5291.09
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 15
  }],
  positionNote: "Very difficult to find. Be patient."
}, {
  id: "326",
  type: "monster",
  name: {
    en: "kraken",
    fr: "kraken",
    pt: "kraken"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, false, true, false, true, false, true, false, true, false, true, false],
  kgs: {
    min: 200,
    max: 500
  },
  lbs: {
    min: 440.92,
    max: 1102.31
  },
  map: "alaska",
  positions: [{
    x: 14,
    y: 66
  }, {
    x: 17,
    y: 74
  }, {
    x: 17,
    y: 88
  }, {
    x: 29,
    y: 85
  }],
  positionNote: "MONSTER<br>Spot rotation: it changes every day.<br>Try monster baits to find the bubbles, then cast and wait into the bubbles.<br>If you don't have any monster baits, try cast and reel and wait (and be patient)."
}];

/***/ }),

/***/ "./src/data/fish/allfish.js":
/*!**********************************!*\
  !*** ./src/data/fish/allfish.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fishes": () => (/* binding */ fishes)
/* harmony export */ });
/* harmony import */ var _paradise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paradise.js */ "./src/data/fish/paradise.js");
/* harmony import */ var _gl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gl.js */ "./src/data/fish/gl.js");
/* harmony import */ var _cr_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cr.js */ "./src/data/fish/cr.js");
/* harmony import */ var _alaska_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./alaska.js */ "./src/data/fish/alaska.js");
/* harmony import */ var _australia_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./australia.js */ "./src/data/fish/australia.js");
/* harmony import */ var _scotland_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scotland.js */ "./src/data/fish/scotland.js");






const fishes = [..._paradise_js__WEBPACK_IMPORTED_MODULE_0__.paradiseFish, ..._gl_js__WEBPACK_IMPORTED_MODULE_1__.glFish, ..._cr_js__WEBPACK_IMPORTED_MODULE_2__.crFish, ..._alaska_js__WEBPACK_IMPORTED_MODULE_3__.alaskaFish, ..._australia_js__WEBPACK_IMPORTED_MODULE_4__.australiaFish, ..._scotland_js__WEBPACK_IMPORTED_MODULE_5__.scotlandFish];


/***/ }),

/***/ "./src/data/fish/australia.js":
/*!************************************!*\
  !*** ./src/data/fish/australia.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "australiaFish": () => (/* binding */ australiaFish)
/* harmony export */ });
const australiaFish = [{
  id: "40",
  type: "common",
  name: {
    en: "Black Bream",
    fr: "daurade noire",
    pt: "sargo-preto"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 4
  },
  lbs: {
    min: 2.2,
    max: 8.82
  },
  map: "australia",
  positions: [{
    x: 5,
    y: 95
  }, {
    x: 85,
    y: 47
  }, {
    x: 70,
    y: 30
  }],
  positionNote: ""
}, {
  id: "41",
  type: "common",
  name: {
    en: "dusky flathead",
    fr: "poisson-crocodile",
    pt: "flathead"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, false, false, false, false, false, true, true, true],
  kgs: {
    min: 3,
    max: 15
  },
  lbs: {
    min: 6.61,
    max: 33.07
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 95,
    y: 30
  }],
  positionNote: ""
}, {
  id: "42",
  type: "common",
  name: {
    en: "Red Emperor Snapper",
    fr: "vivaneau bourgeois",
    pt: "jenahak"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 12,
    max: 32
  },
  lbs: {
    min: 26.46,
    max: 70.55
  },
  map: "australia",
  positions: [{
    x: 85,
    y: 47
  }],
  positionNote: " "
}, {
  id: "43",
  type: "common",
  name: {
    en: "Shortfin Mako Shark",
    fr: "requin mako",
    pt: "tubarão-mako"
  },
  difficulty: 1,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 114,
    max: 505
  },
  lbs: {
    min: 251.33,
    max: 1113.33
  },
  map: "australia",
  positions: [{
    x: 5,
    y: 95
  }],
  positionNote: " "
}, {
  id: "44",
  type: "common",
  name: {
    en: "Carpet Shark",
    fr: "requin-tapis barbu",
    pt: "tubarão tapete"
  },
  attributes: [{
    shadow: [2, 3, 4]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 15,
    max: 70
  },
  lbs: {
    min: 33.07,
    max: 154.32
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 60
  }, {
    x: 55,
    y: 80
  }, {
    x: 82,
    y: 90
  }],
  positionNote: ""
}, {
  id: "45",
  type: "common",
  name: {
    en: "port Jackson Shark",
    fr: "requin de port-jackson",
    pt: "tubarão de port jackson"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 1,
  seasons: [false, false, false, false, true, true, true, true, true, true, false, false],
  kgs: {
    min: 5,
    max: 16
  },
  lbs: {
    min: 11.02,
    max: 35.27
  },
  map: "australia",
  positions: [{
    x: 75,
    y: 20
  }, {
    x: 10,
    y: 40
  }],
  positionNote: ""
}, {
  id: "46",
  type: "common",
  name: {
    en: "Spanish Mackerel",
    fr: "thazard rayé",
    pt: "cavala espanhola de barreiras estreitas"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 20,
    max: 70
  },
  lbs: {
    min: 44.09,
    max: 154.32
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 50,
    y: 30
  }, {
    x: 60,
    y: 95
  }],
  positionNote: ""
}, {
  id: "47",
  type: "common",
  name: {
    en: "Albacore",
    fr: "thon blanc",
    pt: "albacora"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 12,
    max: 60
  },
  lbs: {
    min: 26.46,
    max: 132.28
  },
  map: "australia",
  positions: [{
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }, {
    x: 60,
    y: 55
  }],
  positionNote: " "
}, {
  id: "48",
  type: "common",
  name: {
    en: "Barramundi",
    fr: "barramundi",
    pt: "perca-gigante"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, true, true, true, true, false, false, false, false, false, false, false],
  kgs: {
    min: 12,
    max: 60
  },
  lbs: {
    min: 26.46,
    max: 132.28
  },
  map: "australia",
  positions: [{
    x: 50,
    y: 30
  }, {
    x: 25,
    y: 55
  }],
  positionNote: " .<br>(Steve required 90kgs of it for the main quest)"
}, {
  id: "49",
  type: "common",
  name: {
    en: "Unicorn Leatherjacket",
    fr: "bourse loulou",
    pt: "porco liso"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, false, false, false, false, false, false, false, true, true, true],
  kgs: {
    min: 0.5,
    max: 2.7
  },
  lbs: {
    min: 1.1,
    max: 5.95
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }],
  positionNote: ""
}, {
  id: "410",
  type: "common",
  name: {
    en: "Tailor",
    fr: "tassergal",
    pt: "enchova"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, true, true, true, true, true, false, false, false, false, false, false],
  kgs: {
    min: 3,
    max: 14.4
  },
  lbs: {
    min: 6.61,
    max: 31.75
  },
  map: "australia",
  positions: [{
    x: 35,
    y: 40
  }, {
    x: 50,
    y: 30
  }],
  positionNote: " "
}, {
  id: "411",
  type: "common",
  name: {
    en: "Leafy Seadragon",
    fr: "dragon de mer feuillu",
    pt: "dragão marinho folhado"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.05,
    max: 0.1
  },
  lbs: {
    min: 0.11,
    max: 0.22
  },
  map: "australia",
  positions: [{
    x: 50,
    y: 30
  }],
  positionNote: ""
}, {
  id: "412",
  type: "common",
  name: {
    en: "Rock Flagtail",
    fr: "doule de roche",
    pt: "truta de montanha"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: []
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 1000
  },
  lbs: {
    min: 0.1,
    max: 1000
  },
  map: "australia",
  positions: [{
    x: 5,
    y: 95
  }, {
    x: 30,
    y: 65
  }, {
    x: 10,
    y: 45
  }],
  positionNote: "!!BUG!!<br>No data about this fish. It carasteristics are not available in the in game bestiary."
}, {
  id: "413",
  type: "common",
  name: {
    en: "Black-Saddler Coral Grouper",
    fr: "mérou corallien à selle noire",
    pt: "garoupa de sela negra"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 8,
    max: 24
  },
  lbs: {
    min: 17.64,
    max: 52.91
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }, {
    x: 55,
    y: 80
  }],
  positionNote: ""
}, {
  id: "414",
  type: "common",
  name: {
    en: "Common Stargazer",
    fr: "stragazer",
    pt: "stragazer"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 9
  },
  lbs: {
    min: 4.41,
    max: 19.84
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }, {
    x: 70,
    y: 30
  }],
  positionNote: ""
}, {
  id: "415",
  type: "common",
  name: {
    en: "Skipjack Tuna",
    fr: "bonite à ventre rayé",
    pt: "bonito"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 40
  },
  lbs: {
    min: 22.05,
    max: 88.18
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 5,
    y: 95
  }],
  positionNote: ""
}, {
  id: "416",
  type: "common",
  name: {
    en: "Fingermark",
    fr: "vivaneau ziebelo",
    pt: "pargo de joão"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 10
  },
  lbs: {
    min: 4.41,
    max: 22.05
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 60
  }],
  positionNote: ""
}, {
  id: "417",
  type: "common",
  name: {
    en: "Coral Trout",
    fr: "saumonée léopard",
    pt: "garoupa coral leopardo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, true, true, false],
  kgs: {
    min: 10,
    max: 23
  },
  lbs: {
    min: 22.05,
    max: 50.71
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }],
  positionNote: ""
}, {
  id: "418",
  type: "common",
  name: {
    en: "John Dory",
    fr: "saint pierre",
    pt: "peixe galo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }, {
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }, {
    x: 85,
    y: 47
  }, {
    x: 5,
    y: 95
  }],
  positionNote: ""
}, {
  id: "419",
  type: "common",
  name: {
    en: "Luderick",
    fr: "parore",
    pt: "perca preta"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, true, true, false],
  kgs: {
    min: 1,
    max: 4
  },
  lbs: {
    min: 2.2,
    max: 8.82
  },
  map: "australia",
  positions: [{
    x: 95,
    y: 30
  }],
  positionNote: ""
}, {
  id: "420",
  type: "common",
  name: {
    en: "Mangrove Jack",
    fr: "vivaneau des mangroves",
    pt: "pargo vermelho do mangue"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 8.70
  },
  lbs: {
    min: 6.61,
    max: 19.18
  },
  map: "australia",
  positions: [{
    x: 5,
    y: 95
  }, {
    x: 30,
    y: 60
  }, {
    x: 50,
    y: 30
  }],
  positionNote: ""
}, {
  id: "421",
  type: "common",
  name: {
    en: "Golden Trevally",
    fr: "carangue royale",
    pt: "xaréu dourado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 4,
    max: 15
  },
  lbs: {
    min: 8.82,
    max: 33.07
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 5,
    y: 95
  }, {
    x: 85,
    y: 47
  }, {
    x: 70,
    y: 30
  }, {
    x: 30,
    y: 60
  }],
  positionNote: ""
}, {
  id: "422",
  type: "rare",
  name: {
    en: "Queensland Grouper",
    fr: "mérou géant",
    pt: "garoupa gigante"
  },
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 2,
  seasons: [true, true, true, false, false, false, false, false, false, false, false, true],
  kgs: {
    min: 200,
    max: 600
  },
  lbs: {
    min: 440.92,
    max: 1322.77
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 60
  }, {
    x: 80,
    y: 90
  }, {
    x: 50,
    y: 70
  }],
  positionNote: ""
}, {
  id: "423",
  type: "rare",
  name: {
    en: "Smooth Oreo Dory",
    fr: "lompe",
    pt: "oreo dory"
  },
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 1,
  seasons: [true, true, true, true, false, false, false, false, false, true, true, true],
  kgs: {
    min: 2,
    max: 5
  },
  lbs: {
    min: 4.41,
    max: 11.02
  },
  map: "australia",
  positions: [{
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }],
  positionNote: ""
}, {
  id: "424",
  type: "rare",
  name: {
    en: "Swordfish",
    fr: "espadon",
    pt: "espadarte"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 150,
    max: 650
  },
  lbs: {
    min: 330.69,
    max: 1433.01
  },
  map: "australia",
  positions: [{
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }],
  positionNote: ""
}, {
  id: "425",
  type: "rare",
  name: {
    en: "spotted handfish",
    fr: "poisson main tacheté",
    pt: "peixe mão malhado"
  },
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.2,
    max: 0.6
  },
  lbs: {
    min: 0.44,
    max: 1.32
  },
  map: "australia",
  positions: [{
    x: 85,
    y: 45
  }],
  positionNote: ""
}, {
  id: "426",
  type: "rare",
  name: {
    en: "Giant Trevally",
    fr: "carangue à grosse tête",
    pt: "xaréu gigante"
  },
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 21,
    max: 80
  },
  lbs: {
    min: 46.3,
    max: 176.37
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }],
  positionNote: ""
}, {
  id: "427",
  type: "epic",
  name: {
    en: "tiger shark",
    fr: "requin tigre",
    pt: "tubarão tigre"
  },
  difficulty: 2,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 300,
    max: 807
  },
  lbs: {
    min: 661.39,
    max: 1779.13
  },
  map: "australia",
  positions: [{
    x: 40,
    y: 95
  }],
  positionNote: ""
}, {
  id: "428",
  type: "common",
  name: {
    en: "manta ray",
    fr: "raie manta",
    pt: "arraia"
  },
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 2,
  seasons: [true, true, true, false, false, false, false, false, false, true, true, true],
  kgs: {
    min: 400,
    max: 3000
  },
  lbs: {
    min: 881.85,
    max: 6613.87
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }],
  positionNote: ""
}, {
  id: "429",
  type: "epic",
  name: {
    en: "Hoodwinker Sunfish",
    fr: "môle",
    pt: "peixe lua"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 300,
    max: 2000
  },
  lbs: {
    min: 661.39,
    max: 4409.25
  },
  map: "australia",
  positions: [{
    x: 95,
    y: 65
  }],
  positionNote: "Not sure if it has a shadow or not. Please confirm if you want to <3"
}];

/***/ }),

/***/ "./src/data/fish/cr.js":
/*!*****************************!*\
  !*** ./src/data/fish/cr.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "crFish": () => (/* binding */ crFish)
/* harmony export */ });
const crFish = [{
  id: "21",
  type: "common",
  name: {
    en: "barracuda",
    fr: "barracuda",
    pt: "grande barracuda"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 50
  },
  lbs: {
    min: 6.61,
    max: 110.23
  },
  map: "costa-rica",
  positions: [{
    x: 25,
    y: 60
  }, {
    x: 65,
    y: 25
  }],
  positionNote: ""
}, {
  id: "22",
  type: "common",
  name: {
    en: "roosterfish",
    fr: "poisson coq",
    pt: "peixe galo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 51
  },
  lbs: {
    min: 11.02,
    max: 112.44
  },
  map: "costa-rica",
  positions: [{
    x: 45,
    y: 15
  }, {
    x: 85,
    y: 45
  }],
  positionNote: ""
}, {
  id: "23",
  type: "common",
  name: {
    en: "dorado",
    fr: "dorade coryphène",
    pt: "dourado-do-mar"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 40
  },
  lbs: {
    min: 11.02,
    max: 88.18
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 85
  }, {
    x: 90,
    y: 80
  }],
  positionNote: ""
}, {
  id: "24",
  type: "common",
  name: {
    en: "pompano",
    fr: "pompaneau sole",
    pt: "pampo verdadeiro"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 9
  },
  lbs: {
    min: 2.20,
    max: 19.84
  },
  map: "costa-rica",
  positions: [{
    x: 45,
    y: 65
  }, {
    x: 70,
    y: 90
  }],
  positionNote: ""
}, {
  id: "25",
  type: "common",
  name: {
    en: "wahoo",
    fr: "thazard noir",
    pt: "cavala da india"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 250
  },
  lbs: {
    min: 11.02,
    max: 551.16
  },
  map: "costa-rica",
  positions: [{
    x: 85,
    y: 45
  }, {
    x: 85,
    y: 15
  }],
  positionNote: ""
}, {
  id: "26",
  type: "common",
  name: {
    en: "tripletail",
    fr: "croupia roche",
    pt: "prejereba"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, false, false, false],
  kgs: {
    min: 1,
    max: 19
  },
  lbs: {
    min: 2.20,
    max: 41.89
  },
  map: "costa-rica",
  positions: [{
    x: 45,
    y: 15
  }, {
    x: 55,
    y: 35
  }],
  positionNote: ""
}, {
  id: "27",
  type: "common",
  name: {
    en: "tarpon",
    fr: "tarpon de l'atlantique",
    pt: "tarpão"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 161
  },
  lbs: {
    min: 22.05,
    max: 354.94
  },
  map: "costa-rica",
  positions: [{
    x: 30,
    y: 30
  }, {
    x: 55,
    y: 35
  }],
  positionNote: ""
}, {
  id: "28",
  type: "common",
  name: {
    en: "yellowfin tuna",
    fr: "thon jaune",
    pt: "albacora"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 200
  },
  lbs: {
    min: 22.05,
    max: 440.92
  },
  map: "costa-rica",
  positions: [{
    x: 60,
    y: 35
  }, {
    x: 40,
    y: 85
  }, {
    x: 65,
    y: 55
  }],
  positionNote: ""
}, {
  id: "29",
  type: "common",
  name: {
    en: "sierra mackerel",
    fr: "thazard sierra",
    pt: "serra do pacifico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 8.9
  },
  lbs: {
    min: 4.41,
    max: 19.62
  },
  map: "costa-rica",
  positions: [{
    x: 50,
    y: 60
  }, {
    x: 15,
    y: 15
  }, {
    x: 85,
    y: 50
  }],
  positionNote: ""
}, {
  id: "210",
  type: "common",
  name: {
    en: "pacific sailfish",
    fr: "voilier de l'indo-pacifique",
    pt: "agulhão vela"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 100
  },
  lbs: {
    min: 22.05,
    max: 220.46
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 85
  }, {
    x: 15,
    y: 15
  }, {
    x: 85,
    y: 50
  }, {
    x: 85,
    y: 25
  }],
  positionNote: ""
}, {
  id: "211",
  type: "common",
  name: {
    en: "jack crevalle",
    fr: "carangue crevalle",
    pt: "charo-largo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 5,
    max: 32
  },
  lbs: {
    min: 11.02,
    max: 70.55
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 25,
    y: 55
  }, {
    x: 65,
    y: 55
  }],
  positionNote: ""
}, {
  id: "212",
  type: "common",
  name: {
    en: "cubera snapper",
    fr: "vivaneau cubéra",
    pt: "caranha"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, true, true, false],
  kgs: {
    min: 10,
    max: 57
  },
  lbs: {
    min: 22.05,
    max: 125.66
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 25,
    y: 55
  }, {
    x: 70,
    y: 90
  }],
  positionNote: ""
}, {
  id: "213",
  type: "common",
  name: {
    en: "broomtail grouper",
    fr: "mérou genêt-queue",
    pt: "garoupa de mangue"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 91
  },
  lbs: {
    min: 22.05,
    max: 200.62
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 50,
    y: 35
  }, {
    x: 45,
    y: 85
  }, {
    x: 75,
    y: 45
  }, {
    x: 85,
    y: 15
  }],
  positionNote: ""
}, {
  id: "214",
  type: "common",
  name: {
    en: "snook",
    fr: "brochet de mer",
    pt: "robalo branco"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 24
  },
  lbs: {
    min: 4.41,
    max: 52.91
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 70,
    y: 55
  }, {
    x: 25,
    y: 55
  }],
  positionNote: ""
}, {
  id: "215",
  type: "rare",
  name: {
    en: "blue marlin",
    fr: "makaire bleu",
    pt: "marlim azul"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 50,
    max: 636
  },
  lbs: {
    min: 110.23,
    max: 1402.14
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "216",
  type: "rare",
  name: {
    en: "striped marlin",
    fr: "marlin rayé",
    pt: "marlim listrado"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 50,
    max: 440
  },
  lbs: {
    min: 110.23,
    max: 970.03
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "217",
  type: "rare",
  name: {
    en: "nurse shark",
    fr: "requin nourrice atlantique",
    pt: "tubarão enfermeiro"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 50,
    max: 440
  },
  lbs: {
    min: 44.09,
    max: 240.30
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 25
  }, {
    x: 45,
    y: 85
  }],
  positionNote: ""
}, {
  id: "218",
  type: "rare",
  name: {
    en: "black marlin",
    fr: "makaire noir",
    pt: "marlim preto"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, false, false, false, true, true, true, true, false, false],
  kgs: {
    min: 50,
    max: 750
  },
  lbs: {
    min: 110.23,
    max: 1653.47
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 45,
    y: 85
  }],
  positionNote: ""
}, {
  id: "219",
  type: "epic",
  name: {
    en: "bull shark",
    fr: "requin-bouledogue",
    pt: "tubarão cabeça chata"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, false, false, false],
  kgs: {
    min: 10,
    max: 316
  },
  lbs: {
    min: 22.05,
    max: 696.66
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 45,
    y: 85
  }],
  positionNote: ""
}, {
  id: "220",
  type: "epic",
  name: {
    en: "hammerhead shark",
    fr: "requin-marteau halicorne",
    pt: "tubarão-martelo- recortado"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 20,
    max: 152
  },
  lbs: {
    min: 44.09,
    max: 335.10
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 25
  }],
  positionNote: ""
}, {
  id: "221",
  type: "epic",
  name: {
    en: "whale shark",
    fr: "requin-baleine",
    pt: "tubarão-baleia"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 200,
    max: 3400
  },
  lbs: {
    min: 440.92,
    max: 7495.72
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 25
  }],
  positionNote: ""
}, {
  id: "222",
  type: "epic",
  name: {
    en: "whitetip shark",
    fr: "requin longimane",
    pt: "galha branca oceânico"
  },
  difficulty: 2,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 20,
    max: 167
  },
  lbs: {
    min: 44.09,
    max: 368.17
  },
  map: "costa-rica",
  positions: [{
    x: 10,
    y: 15
  }],
  positionNote: ""
}, {
  id: "223",
  type: "monster",
  name: {
    en: "don pedro",
    fr: "don pedro",
    pt: "don pedro"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, true, false, true, false, true, false, true, false, true, false, true],
  kgs: {
    min: 850,
    max: 1400
  },
  lbs: {
    min: 1873.93,
    max: 3086.47
  },
  map: "costa-rica",
  positions: [{
    x: 85,
    y: 45
  }, {
    x: 85,
    y: 30
  }, {
    x: 85,
    y: 15
  }],
  positionNote: "MONSTER<br>Spot rotation: it changes every day.<br>Try monster baits to find the bubbles, then cast and wait into the bubbles.<br>If you don't have any monster baits, try cast and reel and wait (and be patient)."
}];

/***/ }),

/***/ "./src/data/fish/gl.js":
/*!*****************************!*\
  !*** ./src/data/fish/gl.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "glFish": () => (/* binding */ glFish)
/* harmony export */ });
const glFish = [{
  id: "11",
  type: "common",
  name: {
    en: "alewife",
    fr: "gaspareau",
    pt: "alosa cinzenta"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.2
  },
  lbs: {
    min: 0.22,
    max: 0.44
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 20
  }, {
    x: 30,
    y: 45
  }, {
    x: 50,
    y: 70
  }, {
    x: 75,
    y: 80
  }],
  positionNote: ""
}, {
  id: "12",
  type: "common",
  name: {
    en: "brook trout",
    fr: "omble des fontaines",
    pt: "truta de riacho"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 45
  }],
  positionNote: ""
}, {
  id: "13",
  type: "common",
  name: {
    en: "brown trout",
    fr: "truite brune",
    pt: "truta marisca"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 8.82,
    max: 110.23
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 45
  }, {
    x: 85,
    y: 30
  }],
  positionNote: ""
}, {
  id: "14",
  type: "common",
  name: {
    en: "largemouth bass",
    fr: "achigan à grande bouche",
    pt: "achigã"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, false, false, false, false, false, true, true, true],
  kgs: {
    min: 2,
    max: 10
  },
  lbs: {
    min: 4.41,
    max: 22.05
  },
  map: "great-lakes",
  positions: [{
    x: 60,
    y: 15
  }],
  positionNote: ""
}, {
  id: "15",
  type: "common",
  name: {
    en: "yellow perch",
    fr: "perchaude",
    pt: "perca amarela"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 0.5,
    max: 1.9
  },
  lbs: {
    min: 1.10,
    max: 4.19
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 15
  }, {
    x: 35,
    y: 40
  }, {
    x: 20,
    y: 80
  }, {
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "16",
  type: "common",
  name: {
    en: "white crappie",
    fr: "crapet calicot",
    pt: "promoxis"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 2.4
  },
  lbs: {
    min: 2.20,
    max: 5.29
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 15
  }, {
    x: 75,
    y: 80
  }, {
    x: 20,
    y: 75
  }, {
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "17",
  type: "common",
  name: {
    en: "white bass",
    fr: "bar blanc",
    pt: "bass branco"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, true, true, true, true, true, true, false, false, false, false, false],
  kgs: {
    min: 1,
    max: 3.2
  },
  lbs: {
    min: 2.20,
    max: 7.05
  },
  map: "great-lakes",
  positions: [{
    x: 65,
    y: 15
  }, {
    x: 90,
    y: 30
  }],
  positionNote: ""
}, {
  id: "18",
  type: "common",
  name: {
    en: "walleye",
    fr: "doré jaune",
    pt: "picão-verde"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 2,
    max: 11.3
  },
  lbs: {
    min: 4.41,
    max: 24.91
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 40
  }, {
    x: 80,
    y: 15
  }, {
    x: 75,
    y: 80
  }],
  positionNote: ""
}, {
  id: "19",
  type: "common",
  name: {
    en: "sea lamprey",
    fr: "lamproie marine",
    pt: "lampreia-marinha"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.5,
    max: 2.5
  },
  lbs: {
    min: 1.10,
    max: 5.51
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 40
  }, {
    x: 65,
    y: 15
  }, {
    x: 75,
    y: 80
  }, {
    x: 80,
    y: 50
  }],
  positionNote: ""
}, {
  id: "110",
  type: "common",
  name: {
    en: "pink salmon",
    fr: "saumon rose à bosse",
    pt: "salmão-rosado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 7
  },
  lbs: {
    min: 4.41,
    max: 15.43
  },
  map: "great-lakes",
  positions: [{
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "111",
  type: "common",
  name: {
    en: "smallmouth bass",
    fr: "achigan à petite bouche",
    pt: "achigã-boca-pequena"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, false, false, false, false, false, true, true, true],
  kgs: {
    min: 1,
    max: 5.4
  },
  lbs: {
    min: 2.20,
    max: 11.90
  },
  map: "great-lakes",
  positions: [{
    x: 60,
    y: 15
  }],
  positionNote: ""
}, {
  id: "112",
  type: "common",
  name: {
    en: "round whitefish",
    fr: "ménomini rond",
    pt: "peixe branco redondo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 1,
    max: 2.7
  },
  lbs: {
    min: 2.20,
    max: 5.95
  },
  map: "great-lakes",
  positions: [{
    x: 60,
    y: 15
  }, {
    x: 75,
    y: 70
  }, {
    x: 15,
    y: 75
  }],
  positionNote: ""
}, {
  id: "113",
  type: "common",
  name: {
    en: "redear sunfish",
    fr: "crapet à oreilles rouges",
    pt: "poleiro do sol"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, false, false, false, false, false, false, false, false, true],
  kgs: {
    min: 0.1,
    max: 3
  },
  lbs: {
    min: 0.22,
    max: 6.61
  },
  map: "great-lakes",
  positions: [{
    x: 60,
    y: 15
  }],
  positionNote: ""
}, {
  id: "114",
  type: "common",
  name: {
    en: "channel catfish",
    fr: "barbue de rivière",
    pt: "bagre-americano"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 26
  },
  lbs: {
    min: 11.02,
    max: 57.32
  },
  map: "great-lakes",
  positions: [{
    x: 25,
    y: 75
  }],
  positionNote: ""
}, {
  id: "115",
  type: "common",
  name: {
    en: "bloater",
    fr: "bloater",
    pt: "inchado"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.5
  },
  lbs: {
    min: 0.22,
    max: 1.10
  },
  map: "great-lakes",
  positions: [{
    x: 25,
    y: 75
  }, {
    x: 40,
    y: 15
  }, {
    x: 30,
    y: 40
  }, {
    x: 90,
    y: 30
  }, {
    x: 70,
    y: 75
  }],
  positionNote: ""
}, {
  id: "116",
  type: "common",
  name: {
    en: "coho salmon",
    fr: "saumon coho",
    pt: "salmão-prateado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, true, true, false],
  kgs: {
    min: 1,
    max: 15
  },
  lbs: {
    min: 2.20,
    max: 33.07
  },
  map: "great-lakes",
  positions: [{
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "117",
  type: "rare",
  name: {
    en: "chinook salmon",
    fr: "saumon royal",
    pt: "salmão-rei"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 5,
    max: 61
  },
  lbs: {
    min: 11.02,
    max: 134.48
  },
  map: "great-lakes",
  positions: [{
    x: 75,
    y: 55
  }],
  positionNote: ""
}, {
  id: "118",
  type: "rare",
  name: {
    en: "muskie",
    fr: "maskinongé",
    pt: "lùcio-almiscarado"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, true, true, true, true, true, true, true, false, false, false, false],
  kgs: {
    min: 2,
    max: 31
  },
  lbs: {
    min: 4.41,
    max: 68.34
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 15
  }, {
    x: 50,
    y: 75
  }, {
    x: 40,
    y: 45
  }, {
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "119",
  type: "rare",
  name: {
    en: "flathead catfish",
    fr: "poisson-chat à tête plate",
    pt: "peixe-gato amarelo"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 5,
    max: 55
  },
  lbs: {
    min: 11.02,
    max: 121.25
  },
  day: false,
  night: true,
  map: "great-lakes",
  positions: [{
    x: 45,
    y: 45
  }, {
    x: 85,
    y: 25
  }, {
    x: 15,
    y: 78
  }],
  positionNote: ""
}, {
  id: "120",
  type: "rare",
  name: {
    en: "lake trout",
    fr: "le touladi",
    pt: "truta de lago"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, false, false, false, false, false, false, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 32
  },
  lbs: {
    min: 11.02,
    max: 70.55
  },
  map: "great-lakes",
  positions: [{
    x: 15,
    y: 80
  }, {
    x: 40,
    y: 40
  }],
  positionNote: ""
}, {
  id: "121",
  type: "epic",
  name: {
    en: "longnose gar",
    fr: "lépisosté osseux",
    pt: "lepisosteus"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 22
  },
  lbs: {
    min: 11.02,
    max: 48.50
  },
  map: "great-lakes",
  positions: [{
    x: 80,
    y: 10
  }],
  positionNote: ""
}, {
  id: "122",
  type: "epic",
  name: {
    en: "american eel",
    fr: "anguille d'amérique",
    pt: "enguia-americana"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, false, false, true],
  kgs: {
    min: 2,
    max: 7.3
  },
  lbs: {
    min: 4.41,
    max: 16.09
  },
  map: "great-lakes",
  positions: [{
    x: 90,
    y: 65
  }],
  positionNote: ""
}, {
  id: "123",
  type: "epic",
  name: {
    en: "goldfish",
    fr: "poisson rouge",
    pt: "quinguio"
  },
  difficulty: 1,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.7
  },
  lbs: {
    min: 0.22,
    max: 1.54
  },
  map: "great-lakes",
  positions: [{
    x: 50,
    y: 70
  }],
  positionNote: ""
}, {
  id: "124",
  type: "epic",
  name: {
    en: "lake sturgeon",
    fr: "esturgeon jaune",
    pt: "esturjão de lago"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, false, false, false, false],
  kgs: {
    min: 5,
    max: 125
  },
  lbs: {
    min: 11.02,
    max: 275.58
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 15
  }],
  positionNote: ""
}, {
  id: "125",
  type: "monster",
  name: {
    en: "bessie",
    fr: "bessie",
    pt: "bessie"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, false, false, true, true, false, false, true, true, false, true],
  kgs: {
    min: 200,
    max: 500
  },
  lbs: {
    min: 440.92,
    max: 1102.31
  },
  map: "great-lakes",
  positions: [{
    x: 70,
    y: 90
  }, {
    x: 75,
    y: 80
  }, {
    x: 75,
    y: 65
  }, {
    x: 90,
    y: 65
  }],
  positionNote: "MONSTER<br>Spot rotation: it changes every day.<br>Try monster baits to find the bubbles, then cast and wait into the bubbles.<br>If you don't have any monster baits, try cast and reel and wait (and be patient)."
}];

/***/ }),

/***/ "./src/data/fish/paradise.js":
/*!***********************************!*\
  !*** ./src/data/fish/paradise.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paradiseFish": () => (/* binding */ paradiseFish)
/* harmony export */ });
const paradiseFish = [{
  id: "01",
  type: "common",
  name: {
    en: "bluefish",
    fr: "tassergal",
    pt: "anchova"
  },
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 14.4
  },
  lbs: {
    min: 6.61,
    max: 31.75
  },
  map: "paradise",
  positions: [{
    x: 30,
    y: 50
  }],
  positionNote: ""
}, {
  id: "02",
  type: "common",
  name: {
    en: "spot-fin porcupinefish",
    fr: "poisson porc-épic",
    pt: "peixe-ouriço"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 2.8
  },
  lbs: {
    min: 2.2,
    max: 6.17
  },
  map: "paradise",
  positions: [{
    x: 50,
    y: 75
  }],
  positionNote: ""
}, {
  id: "03",
  type: "common",
  name: {
    en: "snubnose pompano",
    fr: "pompaneau lune",
    pt: "pampo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 9
  },
  lbs: {
    min: 2.2,
    max: 19.84
  },
  map: "paradise",
  positions: [{
    x: 60,
    y: 60
  }, {
    x: 75,
    y: 50
  }, {
    x: 20,
    y: 75
  }, {
    x: 50,
    y: 75
  }],
  positionNote: ""
}, {
  id: "04",
  type: "common",
  trusted: true,
  name: {
    en: "largetooth flounder",
    fr: "flet",
    pt: "linguando grande"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 3
  },
  lbs: {
    min: 2.2,
    max: 6.61
  },
  map: "paradise",
  positions: [{
    x: 75,
    y: 50
  }],
  shadow: [1, 2],
  rods: [0, 1, 2, 3, 4, 5],
  positionNote: ""
}, {
  id: "05",
  type: "common",
  trusted: true,
  name: {
    en: "blue trevally",
    fr: "carangue rayée",
    pt: "xaréu gigante"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "paradise",
  positions: [{
    x: 50,
    y: 75
  }, {
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "06",
  type: "common",
  trusted: true,
  name: {
    en: "bonefish",
    fr: "bonefish",
    pt: "ubarana-focinho-de-rato"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 10
  },
  lbs: {
    min: 2.2,
    max: 22.05
  },
  map: "paradise",
  positions: [{
    x: 30,
    y: 45
  }, {
    x: 75,
    y: 10
  }, {
    x: 90,
    y: 15
  }, {
    x: 90,
    y: 85
  }],
  shadow: [2],
  rods: [0, 1, 2, 3, 4, 5],
  positionNote: ""
}, {
  id: "07",
  type: "common",
  trusted: true,
  name: {
    en: "longtail tuna",
    fr: "thon tonggol",
    pt: "atum-do-indico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 35.9
  },
  lbs: {
    min: 11.02,
    max: 79.15
  },
  map: "paradise",
  positions: [{
    x: 50,
    y: 25
  }],
  positionNote: ""
}, {
  id: "08",
  type: "common",
  trusted: true,
  name: {
    en: "clownfish",
    fr: "poisson-clown du pacific",
    pt: "peixe-palhaço-percula"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.01,
    max: 0.05
  },
  lbs: {
    min: 0.02,
    max: 0.11
  },
  map: "paradise",
  positions: [{
    x: 70,
    y: 70
  }],
  positionNote: ""
}, {
  id: "09",
  type: "rare",
  trusted: true,
  name: {
    en: "green humphead parrotfish",
    fr: "poisson-perroquet à bosse",
    pt: "peixe-papagaio"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 43
  },
  lbs: {
    min: 4.41,
    max: 94.8
  },
  day: true,
  night: false,
  map: "paradise",
  positions: [{
    x: 70,
    y: 70
  }, {
    x: 50,
    y: 75
  }, {
    x: 75,
    y: 50
  }, {
    x: 50,
    y: 20
  }, {
    x: 20,
    y: 80
  }, {
    x: 20,
    y: 10
  }],
  positionNote: ""
}, {
  id: "010",
  type: "rare",
  name: {
    en: "white-tuna",
    fr: "thon à dents de chien",
    pt: "atum branco"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 40,
    max: 131
  },
  lbs: {
    min: 88.18,
    max: 288.81
  },
  day: true,
  night: true,
  map: "paradise",
  positions: [{
    x: 50,
    y: 25
  }],
  positionNote: ""
}, {
  id: "011",
  type: "epic",
  name: {
    en: "pelagic stingray",
    fr: "pastenague violette",
    pt: "arraia pelàgica"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 4,
    max: 49
  },
  lbs: {
    min: 8.82,
    max: 108.03
  },
  map: "paradise",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 15,
    y: 75
  }, {
    x: 90,
    y: 15
  }],
  shadow: [3],
  rods: [2, 3, 5],
  positionNote: ""
}, {
  id: "012",
  type: "epic",
  trusted: true,
  name: {
    en: "pacific footballfish",
    fr: "poisson-football",
    pt: "peixe-futebol de pacifico"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 2
  },
  lbs: {
    min: 2.2,
    max: 4.41
  },
  map: "paradise",
  positions: [{
    x: 20,
    y: 70
  }, {
    x: 90,
    y: 10
  }, {
    x: 20,
    y: 15
  }],
  positionNote: ""
}, {
  id: "013",
  type: "monster",
  trusted: true,
  name: {
    en: "shredder",
    fr: "shredder",
    pt: "shredder"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 150,
    max: 200
  },
  lbs: {
    min: 330.69,
    max: 440.92
  },
  map: "paradise",
  positions: [{
    spot: "Spot 1 - North of Garbage Patch",
    x: 15,
    y: 15
  }, {
    spot: "Spot 2 - Bluefish Point",
    x: 15,
    y: 45
  }, {
    spot: "Spot 3 - Dark Water",
    x: 15,
    y: 75
  }],
  shadow: [],
  rods: [2, 3, 5],
  positionNote: "MONSTER<br>Spot rotation: it changes every day.<br>Try monster baits to find the bubbles, then cast and wait into the bubbles.<br>If you don't have any monster baits, try cast and reel and wait (and be patient)."
}];

/***/ }),

/***/ "./src/data/fish/scotland.js":
/*!***********************************!*\
  !*** ./src/data/fish/scotland.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scotlandFish": () => (/* binding */ scotlandFish)
/* harmony export */ });
const scotlandFish = [{
  id: "51",
  type: "common",
  name: {
    en: "AllisShad",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 4
  },
  lbs: {
    min: 2.20,
    max: 8.82
  },
  map: "scotland",
  positions: [{
    x: 65,
    y: 10
  }],
  positionNote: ""
}, {
  id: "52",
  type: "epic",
  name: {
    en: "Bull Trout",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 4,
    max: 14.5
  },
  lbs: {
    min: 8.82,
    max: 31.97
  },
  map: "scotland",
  positions: [{
    x: 90,
    y: 50
  }],
  positionNote: ""
}, {
  id: "53",
  type: "common",
  name: {
    en: "Chub",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, false, false, false, false, true, true, true, true],
  kgs: {
    min: 1,
    max: 8
  },
  lbs: {
    min: 2.20,
    max: 17.64
  },
  map: "scotland",
  positions: [{
    x: 20,
    y: 45
  }],
  positionNote: ""
}, {
  id: "54",
  type: "common",
  name: {
    en: "Carp",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 40
  },
  lbs: {
    min: 4.41,
    max: 88.18
  },
  map: "scotland",
  positions: [{
    x: 50,
    y: 90
  }],
  positionNote: ""
}, {
  id: "55",
  type: "epic",
  name: {
    en: "Common Sturgeon",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 112,
    max: 400
  },
  lbs: {
    min: 246.92,
    max: 881.85
  },
  map: "scotland",
  positions: [{
    x: 55,
    y: 15
  }],
  positionNote: ""
}, {
  id: "56",
  type: "common",
  name: {
    en: "Dace",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [false, true, true, true, true, true, false, false, false, false, false, false],
  kgs: {
    min: 0.2,
    max: 1.0
  },
  lbs: {
    min: 0.44,
    max: 2.2
  },
  map: "scotland",
  positions: [{
    x: 0,
    y: 0
  }],
  positionNote: ""
}, {
  id: "57",
  type: "rare",
  name: {
    en: "European Eel",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [false, false, false, false, false, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "scotland",
  positions: [{
    x: 90,
    y: 20
  }, {
    x: 90,
    y: 50
  }],
  positionNote: ""
}, {
  id: "58",
  type: "rare",
  name: {
    en: "European Grayling",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [false, false, false, false, false, false, false, false, true, true, true, true],
  kgs: {
    min: 1,
    max: 6.7
  },
  lbs: {
    min: 2.20,
    max: 14.77
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 90
  }, {
    x: 65,
    y: 10
  }],
  positionNote: ""
}, {
  id: "59",
  type: "common",
  name: {
    en: "European Perch",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 4.8
  },
  lbs: {
    min: 2.20,
    max: 10.58
  },
  map: "scotland",
  positions: [{
    x: 0,
    y: 0
  }],
  positionNote: ""
}, {
  id: "510",
  type: "common",
  name: {
    en: "European Smelt",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.17
  },
  lbs: {
    min: 0.22,
    max: 0.37
  },
  map: "scotland",
  positions: [{
    x: 65,
    y: 10
  }],
  positionNote: ""
}, {
  id: "511",
  type: "rare",
  name: {
    en: "European Whitefish",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 10
  },
  lbs: {
    min: 2.20,
    max: 22.05
  },
  map: "scotland",
  positions: [{
    x: 85,
    y: 45
  }],
  positionNote: ""
}, {
  id: "512",
  type: "common",
  name: {
    en: "Freshwater Bream",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [false, false, true, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 1,
    max: 6
  },
  lbs: {
    min: 2.20,
    max: 13.23
  },
  map: "scotland",
  positions: [{
    x: 85,
    y: 60
  }],
  positionNote: ""
}, {
  id: "513",
  type: "common",
  name: {
    en: "Gray Trout",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, false, false, false, false, false, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 32
  },
  lbs: {
    min: 22.05,
    max: 70.55
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 90
  }, {
    x: 65,
    y: 10
  }],
  positionNote: ""
}, {
  id: "514",
  type: "common",
  name: {
    en: "Gudgeon",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.2
  },
  lbs: {
    min: 0.22,
    max: 0.44
  },
  map: "scotland",
  positions: [{
    x: 0,
    y: 0
  }],
  positionNote: ""
}, {
  id: "515",
  type: "common",
  name: {
    en: "Lamprey",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.5,
    max: 2.5
  },
  lbs: {
    min: 1.10,
    max: 5.51
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 10
  }],
  positionNote: ""
}, {
  id: "516",
  type: "common",
  name: {
    en: "Northern Pike",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 9,
    max: 28
  },
  lbs: {
    min: 19.84,
    max: 61.73
  },
  map: "scotland",
  positions: [{
    x: 85,
    y: 60
  }],
  positionNote: ""
}, {
  id: "517",
  type: "common",
  name: {
    en: "Powan",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 4,
    max: 11
  },
  lbs: {
    min: 8.82,
    max: 24.25
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 10
  }],
  positionNote: ""
}, {
  id: "518",
  type: "common",
  name: {
    en: "Rainbow Trout",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, false, false, false, false, true, true, true, true],
  kgs: {
    min: 9,
    max: 25
  },
  lbs: {
    min: 19.84,
    max: 55.12
  },
  map: "scotland",
  positions: [{
    x: 65,
    y: 10
  }],
  positionNote: ""
}, {
  id: "519",
  type: "common",
  name: {
    en: "Roach",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.2,
    max: 1.8
  },
  lbs: {
    min: 0.44,
    max: 3.97
  },
  map: "scotland",
  positions: [{
    x: 20,
    y: 45
  }],
  positionNote: ""
}, {
  id: "520",
  type: "common",
  name: {
    en: "Rudd",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.4,
    max: 1.2
  },
  lbs: {
    min: 0.88,
    max: 2.65
  },
  map: "scotland",
  positions: [{
    x: 20,
    y: 45
  }],
  positionNote: ""
}, {
  id: "521",
  type: "epic",
  name: {
    en: "Scottish Salmon",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [false, false, false, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 12,
    max: 46
  },
  lbs: {
    min: 24.46,
    max: 101.41
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 90
  }],
  positionNote: ""
}, {
  id: "522",
  type: "common",
  name: {
    en: "Sea Trout",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 15,
    max: 50
  },
  lbs: {
    min: 33.07,
    max: 110.23
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 90
  }],
  positionNote: ""
}, {
  id: "523",
  type: "common",
  name: {
    en: "Tench",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [false, false, false, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 7.5
  },
  lbs: {
    min: 4.41,
    max: 16.53
  },
  map: "scotland",
  positions: [{
    x: 90,
    y: 40
  }],
  positionNote: ""
}, {
  id: "524",
  type: "common",
  name: {
    en: "ThreeSpinedStickleback",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0,
    max: 0
  },
  lbs: {
    min: 0,
    max: 0
  },
  map: "scotland",
  positions: [{
    x: 90,
    y: 40
  }],
  positionNote: ""
}, {
  id: "525",
  type: "common",
  name: {
    en: "Twaite Shad",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0,
    max: 0
  },
  lbs: {
    min: 0,
    max: 0
  },
  map: "scotland",
  positions: [{
    x: 0,
    y: 0
  }],
  positionNote: ""
}, {
  id: "526",
  type: "common",
  name: {
    en: "Vendace",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.2,
    max: 1
  },
  lbs: {
    min: 0.44,
    max: 2.20
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 10
  }],
  positionNote: ""
}];

/***/ }),

/***/ "./src/module.js":
/*!***********************!*\
  !*** ./src/module.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createList": () => (/* binding */ createList)
/* harmony export */ });
function createList(fish, language) {
  if (!document.querySelector(`#list-${fish.map}`)) {
    const listContainer = document.createElement("div");
    listContainer.setAttribute("class", "list-container hidden-list");
    listContainer.setAttribute("id", `list-${fish.map}`);
    document.querySelector("#fish-list").appendChild(listContainer);
    const listTitle = document.createElement("div");
    listTitle.setAttribute("class", "is-flex my-2 is-align-items-center list-title");
    listContainer.appendChild(listTitle);
    const xhr = new XMLHttpRequest();
    const url = `images/${fish.map}.svg`;
    xhr.open("GET", url, true);
    xhr.setRequestHeader("Content-Type", "image/svg+xml");
    xhr.onload = function () {
      if (xhr.status === 200) {
        const svgElement = xhr.responseXML.documentElement;
        listTitle.appendChild(svgElement);
      }
    };
    xhr.send();
    const iconArrow = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    iconArrow.setAttribute("class", "icon-arrow");
    iconArrow.setAttribute("width", "24");
    iconArrow.setAttribute("height", "24");
    iconArrow.setAttribute("viewBox", "0 0 24 24");
    listTitle.appendChild(iconArrow);
    const pathArrow = document.createElementNS("http://www.w3.org/2000/svg", "path");
    pathArrow.setAttribute("fill", "currentColor");
    pathArrow.setAttribute("d", "M16.59 8.59004L12 13.17L7.41 8.59004L6 10L12 16L18 10L16.59 8.59004Z");
    iconArrow.appendChild(pathArrow);
    const titleText = document.createElement("span");
    titleText.innerHTML = fish.map;
    listTitle.appendChild(titleText);
    const innerList = document.createElement("div");
    innerList.setAttribute("class", "inner-list");
    listContainer.appendChild(innerList);
  }
  const item = document.createElement("div");
  item.setAttribute("class", `item is-flex is-align-items-center py-1 px-4 map-${fish.map} ${fish.type}`);
  item.setAttribute("data-id", fish.id);
  item.setAttribute("data-season", fish.seasons[new Date().getMonth()] ? "in" : "out");
  if (fish.inprogress) {
    item.setAttribute("style", "pointer-events:none;background-color: #191919;color: #853535;");
  }
  const figure = document.createElement("figure");
  figure.setAttribute("class", "image is-24x24 mr-3");
  item.appendChild(figure);
  const img = document.createElement("img");
  img.setAttribute("src", `./images/${fish.id}.png`);
  img.setAttribute("class", "is-rounded");
  figure.appendChild(img);
  const p = document.createElement("p");
  p.setAttribute("class", "is-size-6 fishp");
  p.innerHTML = fish.name[language] ? fish.name[language] : fish.name.en;
  item.appendChild(p);
  document.querySelector(`#list-${fish.map} .inner-list`).appendChild(item);
}

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/bulma/bulma.sass":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/bulma/bulma.sass ***!
  \********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@charset \"UTF-8\";\n/*! bulma.io v0.9.4 | MIT License | github.com/jgthms/bulma */\n/* Bulma Utilities */\n.pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis, .file-cta,\n.file-name, .select select, .textarea, .input, .button {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  align-items: center;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  box-shadow: none;\n  display: inline-flex;\n  font-size: 1rem;\n  height: 2.5em;\n  justify-content: flex-start;\n  line-height: 1.5;\n  padding-bottom: calc(0.5em - 1px);\n  padding-left: calc(0.75em - 1px);\n  padding-right: calc(0.75em - 1px);\n  padding-top: calc(0.5em - 1px);\n  position: relative;\n  vertical-align: top;\n}\n.pagination-previous:focus,\n.pagination-next:focus,\n.pagination-link:focus,\n.pagination-ellipsis:focus, .file-cta:focus,\n.file-name:focus, .select select:focus, .textarea:focus, .input:focus, .button:focus, .is-focused.pagination-previous,\n.is-focused.pagination-next,\n.is-focused.pagination-link,\n.is-focused.pagination-ellipsis, .is-focused.file-cta,\n.is-focused.file-name, .select select.is-focused, .is-focused.textarea, .is-focused.input, .is-focused.button, .pagination-previous:active,\n.pagination-next:active,\n.pagination-link:active,\n.pagination-ellipsis:active, .file-cta:active,\n.file-name:active, .select select:active, .textarea:active, .input:active, .button:active, .is-active.pagination-previous,\n.is-active.pagination-next,\n.is-active.pagination-link,\n.is-active.pagination-ellipsis, .is-active.file-cta,\n.is-active.file-name, .select select.is-active, .is-active.textarea, .is-active.input, .is-active.button {\n  outline: none;\n}\n[disabled].pagination-previous,\n[disabled].pagination-next,\n[disabled].pagination-link,\n[disabled].pagination-ellipsis, [disabled].file-cta,\n[disabled].file-name, .select select[disabled], [disabled].textarea, [disabled].input, [disabled].button, fieldset[disabled] .pagination-previous,\nfieldset[disabled] .pagination-next,\nfieldset[disabled] .pagination-link,\nfieldset[disabled] .pagination-ellipsis, fieldset[disabled] .file-cta,\nfieldset[disabled] .file-name, fieldset[disabled] .select select, .select fieldset[disabled] select, fieldset[disabled] .textarea, fieldset[disabled] .input, fieldset[disabled] .button {\n  cursor: not-allowed;\n}\n\n.is-unselectable, .tabs, .pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis, .breadcrumb, .file, .button {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.navbar-link:not(.is-arrowless)::after, .select:not(.is-multiple):not(.is-loading)::after {\n  border: 3px solid transparent;\n  border-radius: 2px;\n  border-right: 0;\n  border-top: 0;\n  content: \" \";\n  display: block;\n  height: 0.625em;\n  margin-top: -0.4375em;\n  pointer-events: none;\n  position: absolute;\n  top: 50%;\n  transform: rotate(-45deg);\n  transform-origin: center;\n  width: 0.625em;\n}\n\n.tabs:not(:last-child), .pagination:not(:last-child), .message:not(:last-child), .level:not(:last-child), .breadcrumb:not(:last-child), .block:not(:last-child), .title:not(:last-child),\n.subtitle:not(:last-child), .table-container:not(:last-child), .table:not(:last-child), .progress:not(:last-child), .notification:not(:last-child), .content:not(:last-child), .box:not(:last-child) {\n  margin-bottom: 1.5rem;\n}\n\n.modal-close, .delete {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  background-color: rgba(10, 10, 10, 0.2);\n  border: none;\n  border-radius: 9999px;\n  cursor: pointer;\n  pointer-events: auto;\n  display: inline-block;\n  flex-grow: 0;\n  flex-shrink: 0;\n  font-size: 0;\n  height: 20px;\n  max-height: 20px;\n  max-width: 20px;\n  min-height: 20px;\n  min-width: 20px;\n  outline: none;\n  position: relative;\n  vertical-align: top;\n  width: 20px;\n}\n.modal-close::before, .delete::before, .modal-close::after, .delete::after {\n  background-color: hsl(0, 0%, 100%);\n  content: \"\";\n  display: block;\n  left: 50%;\n  position: absolute;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%) rotate(45deg);\n  transform-origin: center center;\n}\n.modal-close::before, .delete::before {\n  height: 2px;\n  width: 50%;\n}\n.modal-close::after, .delete::after {\n  height: 50%;\n  width: 2px;\n}\n.modal-close:hover, .delete:hover, .modal-close:focus, .delete:focus {\n  background-color: rgba(10, 10, 10, 0.3);\n}\n.modal-close:active, .delete:active {\n  background-color: rgba(10, 10, 10, 0.4);\n}\n.is-small.modal-close, .is-small.delete {\n  height: 16px;\n  max-height: 16px;\n  max-width: 16px;\n  min-height: 16px;\n  min-width: 16px;\n  width: 16px;\n}\n.is-medium.modal-close, .is-medium.delete {\n  height: 24px;\n  max-height: 24px;\n  max-width: 24px;\n  min-height: 24px;\n  min-width: 24px;\n  width: 24px;\n}\n.is-large.modal-close, .is-large.delete {\n  height: 32px;\n  max-height: 32px;\n  max-width: 32px;\n  min-height: 32px;\n  min-width: 32px;\n  width: 32px;\n}\n\n.control.is-loading::after, .select.is-loading::after, .loader, .button.is-loading::after {\n  animation: spinAround 500ms infinite linear;\n  border: 2px solid hsl(0, 0%, 86%);\n  border-radius: 9999px;\n  border-right-color: transparent;\n  border-top-color: transparent;\n  content: \"\";\n  display: block;\n  height: 1em;\n  position: relative;\n  width: 1em;\n}\n\n.hero-video, .is-overlay, .modal-background, .modal, .image.is-square img,\n.image.is-square .has-ratio, .image.is-1by1 img,\n.image.is-1by1 .has-ratio, .image.is-5by4 img,\n.image.is-5by4 .has-ratio, .image.is-4by3 img,\n.image.is-4by3 .has-ratio, .image.is-3by2 img,\n.image.is-3by2 .has-ratio, .image.is-5by3 img,\n.image.is-5by3 .has-ratio, .image.is-16by9 img,\n.image.is-16by9 .has-ratio, .image.is-2by1 img,\n.image.is-2by1 .has-ratio, .image.is-3by1 img,\n.image.is-3by1 .has-ratio, .image.is-4by5 img,\n.image.is-4by5 .has-ratio, .image.is-3by4 img,\n.image.is-3by4 .has-ratio, .image.is-2by3 img,\n.image.is-2by3 .has-ratio, .image.is-3by5 img,\n.image.is-3by5 .has-ratio, .image.is-9by16 img,\n.image.is-9by16 .has-ratio, .image.is-1by2 img,\n.image.is-1by2 .has-ratio, .image.is-1by3 img,\n.image.is-1by3 .has-ratio {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.navbar-burger {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n  background: none;\n  border: none;\n  color: currentColor;\n  font-family: inherit;\n  font-size: 1em;\n  margin: 0;\n  padding: 0;\n}\n\n/* Bulma Base */ /*! minireset.css v0.0.6 | MIT License | github.com/jgthms/minireset.css */\nhtml,\nbody,\np,\nol,\nul,\nli,\ndl,\ndt,\ndd,\nblockquote,\nfigure,\nfieldset,\nlegend,\ntextarea,\npre,\niframe,\nhr,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n  padding: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: 100%;\n  font-weight: normal;\n}\n\nul {\n  list-style: none;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  margin: 0;\n}\n\nhtml {\n  box-sizing: border-box;\n}\n\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n\nimg,\nvideo {\n  height: auto;\n  max-width: 100%;\n}\n\niframe {\n  border: 0;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd,\nth {\n  padding: 0;\n}\ntd:not([align]),\nth:not([align]) {\n  text-align: inherit;\n}\n\nhtml {\n  background-color: hsl(0, 0%, 100%);\n  font-size: 16px;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  min-width: 300px;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  text-rendering: optimizeLegibility;\n  text-size-adjust: 100%;\n}\n\narticle,\naside,\nfigure,\nfooter,\nheader,\nhgroup,\nsection {\n  display: block;\n}\n\nbody,\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n}\n\ncode,\npre {\n  -moz-osx-font-smoothing: auto;\n  -webkit-font-smoothing: auto;\n  font-family: monospace;\n}\n\nbody {\n  color: hsl(0, 0%, 29%);\n  font-size: 1em;\n  font-weight: 400;\n  line-height: 1.5;\n}\n\na {\n  color: hsl(229, 53%, 53%);\n  cursor: pointer;\n  text-decoration: none;\n}\na strong {\n  color: currentColor;\n}\na:hover {\n  color: hsl(0, 0%, 21%);\n}\n\ncode {\n  background-color: hsl(0, 0%, 96%);\n  color: #da1039;\n  font-size: 0.875em;\n  font-weight: normal;\n  padding: 0.25em 0.5em 0.25em;\n}\n\nhr {\n  background-color: hsl(0, 0%, 96%);\n  border: none;\n  display: block;\n  height: 2px;\n  margin: 1.5rem 0;\n}\n\nimg {\n  height: auto;\n  max-width: 100%;\n}\n\ninput[type=checkbox],\ninput[type=radio] {\n  vertical-align: baseline;\n}\n\nsmall {\n  font-size: 0.875em;\n}\n\nspan {\n  font-style: inherit;\n  font-weight: inherit;\n}\n\nstrong {\n  color: hsl(0, 0%, 21%);\n  font-weight: 700;\n}\n\nfieldset {\n  border: none;\n}\n\npre {\n  -webkit-overflow-scrolling: touch;\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 29%);\n  font-size: 0.875em;\n  overflow-x: auto;\n  padding: 1.25rem 1.5rem;\n  white-space: pre;\n  word-wrap: normal;\n}\npre code {\n  background-color: transparent;\n  color: currentColor;\n  font-size: 1em;\n  padding: 0;\n}\n\ntable td,\ntable th {\n  vertical-align: top;\n}\ntable td:not([align]),\ntable th:not([align]) {\n  text-align: inherit;\n}\ntable th {\n  color: hsl(0, 0%, 21%);\n}\n\n@keyframes spinAround {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(359deg);\n  }\n}\n/* Bulma Elements */\n.box {\n  background-color: hsl(0, 0%, 100%);\n  border-radius: 6px;\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\n  color: hsl(0, 0%, 29%);\n  display: block;\n  padding: 1.25rem;\n}\n\na.box:hover, a.box:focus {\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0 0 1px hsl(229, 53%, 53%);\n}\na.box:active {\n  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.2), 0 0 0 1px hsl(229, 53%, 53%);\n}\n\n.button {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 86%);\n  border-width: 1px;\n  color: hsl(0, 0%, 21%);\n  cursor: pointer;\n  justify-content: center;\n  padding-bottom: calc(0.5em - 1px);\n  padding-left: 1em;\n  padding-right: 1em;\n  padding-top: calc(0.5em - 1px);\n  text-align: center;\n  white-space: nowrap;\n}\n.button strong {\n  color: inherit;\n}\n.button .icon, .button .icon.is-small, .button .icon.is-medium, .button .icon.is-large {\n  height: 1.5em;\n  width: 1.5em;\n}\n.button .icon:first-child:not(:last-child) {\n  margin-left: calc(-0.5em - 1px);\n  margin-right: 0.25em;\n}\n.button .icon:last-child:not(:first-child) {\n  margin-left: 0.25em;\n  margin-right: calc(-0.5em - 1px);\n}\n.button .icon:first-child:last-child {\n  margin-left: calc(-0.5em - 1px);\n  margin-right: calc(-0.5em - 1px);\n}\n.button:hover, .button.is-hovered {\n  border-color: hsl(0, 0%, 71%);\n  color: hsl(0, 0%, 21%);\n}\n.button:focus, .button.is-focused {\n  border-color: hsl(229, 53%, 53%);\n  color: hsl(0, 0%, 21%);\n}\n.button:focus:not(:active), .button.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.button:active, .button.is-active {\n  border-color: hsl(0, 0%, 29%);\n  color: hsl(0, 0%, 21%);\n}\n.button.is-text {\n  background-color: transparent;\n  border-color: transparent;\n  color: hsl(0, 0%, 29%);\n  text-decoration: underline;\n}\n.button.is-text:hover, .button.is-text.is-hovered, .button.is-text:focus, .button.is-text.is-focused {\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 21%);\n}\n.button.is-text:active, .button.is-text.is-active {\n  background-color: #e8e8e8;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-text[disabled], fieldset[disabled] .button.is-text {\n  background-color: transparent;\n  border-color: transparent;\n  box-shadow: none;\n}\n.button.is-ghost {\n  background: none;\n  border-color: transparent;\n  color: hsl(229, 53%, 53%);\n  text-decoration: none;\n}\n.button.is-ghost:hover, .button.is-ghost.is-hovered {\n  color: hsl(229, 53%, 53%);\n  text-decoration: underline;\n}\n.button.is-white {\n  background-color: hsl(0, 0%, 100%);\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white:hover, .button.is-white.is-hovered {\n  background-color: #f9f9f9;\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white:focus, .button.is-white.is-focused {\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white:focus:not(:active), .button.is-white.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25);\n}\n.button.is-white:active, .button.is-white.is-active {\n  background-color: #f2f2f2;\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white[disabled], fieldset[disabled] .button.is-white {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 100%);\n  box-shadow: none;\n}\n.button.is-white.is-inverted {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-inverted:hover, .button.is-white.is-inverted.is-hovered {\n  background-color: black;\n}\n.button.is-white.is-inverted[disabled], fieldset[disabled] .button.is-white.is-inverted {\n  background-color: hsl(0, 0%, 4%);\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 4%) hsl(0, 0%, 4%) !important;\n}\n.button.is-white.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-outlined:hover, .button.is-white.is-outlined.is-hovered, .button.is-white.is-outlined:focus, .button.is-white.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 100%) hsl(0, 0%, 100%) !important;\n}\n.button.is-white.is-outlined.is-loading:hover::after, .button.is-white.is-outlined.is-loading.is-hovered::after, .button.is-white.is-outlined.is-loading:focus::after, .button.is-white.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 4%) hsl(0, 0%, 4%) !important;\n}\n.button.is-white.is-outlined[disabled], fieldset[disabled] .button.is-white.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 100%);\n  box-shadow: none;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white.is-inverted.is-outlined:hover, .button.is-white.is-inverted.is-outlined.is-hovered, .button.is-white.is-inverted.is-outlined:focus, .button.is-white.is-inverted.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-inverted.is-outlined.is-loading:hover::after, .button.is-white.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-white.is-inverted.is-outlined.is-loading:focus::after, .button.is-white.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 100%) hsl(0, 0%, 100%) !important;\n}\n.button.is-white.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-white.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 4%);\n  box-shadow: none;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black {\n  background-color: hsl(0, 0%, 4%);\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black:hover, .button.is-black.is-hovered {\n  background-color: #040404;\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black:focus, .button.is-black.is-focused {\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black:focus:not(:active), .button.is-black.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25);\n}\n.button.is-black:active, .button.is-black.is-active {\n  background-color: black;\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black[disabled], fieldset[disabled] .button.is-black {\n  background-color: hsl(0, 0%, 4%);\n  border-color: hsl(0, 0%, 4%);\n  box-shadow: none;\n}\n.button.is-black.is-inverted {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-inverted:hover, .button.is-black.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-black.is-inverted[disabled], fieldset[disabled] .button.is-black.is-inverted {\n  background-color: hsl(0, 0%, 100%);\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 100%) hsl(0, 0%, 100%) !important;\n}\n.button.is-black.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-outlined:hover, .button.is-black.is-outlined.is-hovered, .button.is-black.is-outlined:focus, .button.is-black.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 4%);\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 4%) hsl(0, 0%, 4%) !important;\n}\n.button.is-black.is-outlined.is-loading:hover::after, .button.is-black.is-outlined.is-loading.is-hovered::after, .button.is-black.is-outlined.is-loading:focus::after, .button.is-black.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 100%) hsl(0, 0%, 100%) !important;\n}\n.button.is-black.is-outlined[disabled], fieldset[disabled] .button.is-black.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 4%);\n  box-shadow: none;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black.is-inverted.is-outlined:hover, .button.is-black.is-inverted.is-outlined.is-hovered, .button.is-black.is-inverted.is-outlined:focus, .button.is-black.is-inverted.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-inverted.is-outlined.is-loading:hover::after, .button.is-black.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-black.is-inverted.is-outlined.is-loading:focus::after, .button.is-black.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 4%) hsl(0, 0%, 4%) !important;\n}\n.button.is-black.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-black.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 100%);\n  box-shadow: none;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-light {\n  background-color: hsl(0, 0%, 96%);\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light:hover, .button.is-light.is-hovered {\n  background-color: #eeeeee;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light:focus, .button.is-light.is-focused {\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light:focus:not(:active), .button.is-light.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25);\n}\n.button.is-light:active, .button.is-light.is-active {\n  background-color: #e8e8e8;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light[disabled], fieldset[disabled] .button.is-light {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 96%);\n  box-shadow: none;\n}\n.button.is-light.is-inverted {\n  background-color: rgba(0, 0, 0, 0.7);\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-inverted:hover, .button.is-light.is-inverted.is-hovered {\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light.is-inverted[disabled], fieldset[disabled] .button.is-light.is-inverted {\n  background-color: rgba(0, 0, 0, 0.7);\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-loading::after {\n  border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;\n}\n.button.is-light.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-outlined:hover, .button.is-light.is-outlined.is-hovered, .button.is-light.is-outlined:focus, .button.is-light.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 96%) hsl(0, 0%, 96%) !important;\n}\n.button.is-light.is-outlined.is-loading:hover::after, .button.is-light.is-outlined.is-loading.is-hovered::after, .button.is-light.is-outlined.is-loading:focus::after, .button.is-light.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;\n}\n.button.is-light.is-outlined[disabled], fieldset[disabled] .button.is-light.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 96%);\n  box-shadow: none;\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.7);\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light.is-inverted.is-outlined:hover, .button.is-light.is-inverted.is-outlined.is-hovered, .button.is-light.is-inverted.is-outlined:focus, .button.is-light.is-inverted.is-outlined.is-focused {\n  background-color: rgba(0, 0, 0, 0.7);\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-inverted.is-outlined.is-loading:hover::after, .button.is-light.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-light.is-inverted.is-outlined.is-loading:focus::after, .button.is-light.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 96%) hsl(0, 0%, 96%) !important;\n}\n.button.is-light.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-light.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.7);\n  box-shadow: none;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-dark:hover, .button.is-dark.is-hovered {\n  background-color: #2f2f2f;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-dark:focus, .button.is-dark.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-dark:focus:not(:active), .button.is-dark.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25);\n}\n.button.is-dark:active, .button.is-dark.is-active {\n  background-color: #292929;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-dark[disabled], fieldset[disabled] .button.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  border-color: hsl(0, 0%, 21%);\n  box-shadow: none;\n}\n.button.is-dark.is-inverted {\n  background-color: #fff;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-inverted:hover, .button.is-dark.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-dark.is-inverted[disabled], fieldset[disabled] .button.is-dark.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-dark.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 21%);\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-outlined:hover, .button.is-dark.is-outlined.is-hovered, .button.is-dark.is-outlined:focus, .button.is-dark.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 21%);\n  border-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.button.is-dark.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 21%) hsl(0, 0%, 21%) !important;\n}\n.button.is-dark.is-outlined.is-loading:hover::after, .button.is-dark.is-outlined.is-loading.is-hovered::after, .button.is-dark.is-outlined.is-loading:focus::after, .button.is-dark.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-dark.is-outlined[disabled], fieldset[disabled] .button.is-dark.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 21%);\n  box-shadow: none;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-dark.is-inverted.is-outlined:hover, .button.is-dark.is-inverted.is-outlined.is-hovered, .button.is-dark.is-inverted.is-outlined:focus, .button.is-dark.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-inverted.is-outlined.is-loading:hover::after, .button.is-dark.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-dark.is-inverted.is-outlined.is-loading:focus::after, .button.is-dark.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 21%) hsl(0, 0%, 21%) !important;\n}\n.button.is-dark.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-dark.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-primary:hover, .button.is-primary.is-hovered {\n  background-color: #00c4a7;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-primary:focus, .button.is-primary.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-primary:focus:not(:active), .button.is-primary.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25);\n}\n.button.is-primary:active, .button.is-primary.is-active {\n  background-color: #00b89c;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-primary[disabled], fieldset[disabled] .button.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  border-color: hsl(171, 100%, 41%);\n  box-shadow: none;\n}\n.button.is-primary.is-inverted {\n  background-color: #fff;\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-inverted:hover, .button.is-primary.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-primary.is-inverted[disabled], fieldset[disabled] .button.is-primary.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-primary.is-outlined {\n  background-color: transparent;\n  border-color: hsl(171, 100%, 41%);\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-outlined:hover, .button.is-primary.is-outlined.is-hovered, .button.is-primary.is-outlined:focus, .button.is-primary.is-outlined.is-focused {\n  background-color: hsl(171, 100%, 41%);\n  border-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.button.is-primary.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(171, 100%, 41%) hsl(171, 100%, 41%) !important;\n}\n.button.is-primary.is-outlined.is-loading:hover::after, .button.is-primary.is-outlined.is-loading.is-hovered::after, .button.is-primary.is-outlined.is-loading:focus::after, .button.is-primary.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-primary.is-outlined[disabled], fieldset[disabled] .button.is-primary.is-outlined {\n  background-color: transparent;\n  border-color: hsl(171, 100%, 41%);\n  box-shadow: none;\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-primary.is-inverted.is-outlined:hover, .button.is-primary.is-inverted.is-outlined.is-hovered, .button.is-primary.is-inverted.is-outlined:focus, .button.is-primary.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-inverted.is-outlined.is-loading:hover::after, .button.is-primary.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-primary.is-inverted.is-outlined.is-loading:focus::after, .button.is-primary.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(171, 100%, 41%) hsl(171, 100%, 41%) !important;\n}\n.button.is-primary.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-primary.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-primary.is-light {\n  background-color: #ebfffc;\n  color: #00947e;\n}\n.button.is-primary.is-light:hover, .button.is-primary.is-light.is-hovered {\n  background-color: #defffa;\n  border-color: transparent;\n  color: #00947e;\n}\n.button.is-primary.is-light:active, .button.is-primary.is-light.is-active {\n  background-color: #d1fff8;\n  border-color: transparent;\n  color: #00947e;\n}\n.button.is-link {\n  background-color: hsl(229, 53%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-link:hover, .button.is-link.is-hovered {\n  background-color: #3e56c4;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-link:focus, .button.is-link.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-link:focus:not(:active), .button.is-link.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.button.is-link:active, .button.is-link.is-active {\n  background-color: #3a51bb;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-link[disabled], fieldset[disabled] .button.is-link {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  box-shadow: none;\n}\n.button.is-link.is-inverted {\n  background-color: #fff;\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-inverted:hover, .button.is-link.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-link.is-inverted[disabled], fieldset[disabled] .button.is-link.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-link.is-outlined {\n  background-color: transparent;\n  border-color: hsl(229, 53%, 53%);\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-outlined:hover, .button.is-link.is-outlined.is-hovered, .button.is-link.is-outlined:focus, .button.is-link.is-outlined.is-focused {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.button.is-link.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(229, 53%, 53%) hsl(229, 53%, 53%) !important;\n}\n.button.is-link.is-outlined.is-loading:hover::after, .button.is-link.is-outlined.is-loading.is-hovered::after, .button.is-link.is-outlined.is-loading:focus::after, .button.is-link.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-link.is-outlined[disabled], fieldset[disabled] .button.is-link.is-outlined {\n  background-color: transparent;\n  border-color: hsl(229, 53%, 53%);\n  box-shadow: none;\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-link.is-inverted.is-outlined:hover, .button.is-link.is-inverted.is-outlined.is-hovered, .button.is-link.is-inverted.is-outlined:focus, .button.is-link.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-inverted.is-outlined.is-loading:hover::after, .button.is-link.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-link.is-inverted.is-outlined.is-loading:focus::after, .button.is-link.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(229, 53%, 53%) hsl(229, 53%, 53%) !important;\n}\n.button.is-link.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-link.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-link.is-light {\n  background-color: #eff1fa;\n  color: #3850b7;\n}\n.button.is-link.is-light:hover, .button.is-link.is-light.is-hovered {\n  background-color: #e6e9f7;\n  border-color: transparent;\n  color: #3850b7;\n}\n.button.is-link.is-light:active, .button.is-link.is-light.is-active {\n  background-color: #dce0f4;\n  border-color: transparent;\n  color: #3850b7;\n}\n.button.is-info {\n  background-color: hsl(207, 61%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-info:hover, .button.is-info.is-hovered {\n  background-color: #3488ce;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-info:focus, .button.is-info.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-info:focus:not(:active), .button.is-info.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(62, 142, 208, 0.25);\n}\n.button.is-info:active, .button.is-info.is-active {\n  background-color: #3082c5;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-info[disabled], fieldset[disabled] .button.is-info {\n  background-color: hsl(207, 61%, 53%);\n  border-color: hsl(207, 61%, 53%);\n  box-shadow: none;\n}\n.button.is-info.is-inverted {\n  background-color: #fff;\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-inverted:hover, .button.is-info.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-info.is-inverted[disabled], fieldset[disabled] .button.is-info.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-info.is-outlined {\n  background-color: transparent;\n  border-color: hsl(207, 61%, 53%);\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-outlined:hover, .button.is-info.is-outlined.is-hovered, .button.is-info.is-outlined:focus, .button.is-info.is-outlined.is-focused {\n  background-color: hsl(207, 61%, 53%);\n  border-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.button.is-info.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(207, 61%, 53%) hsl(207, 61%, 53%) !important;\n}\n.button.is-info.is-outlined.is-loading:hover::after, .button.is-info.is-outlined.is-loading.is-hovered::after, .button.is-info.is-outlined.is-loading:focus::after, .button.is-info.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-info.is-outlined[disabled], fieldset[disabled] .button.is-info.is-outlined {\n  background-color: transparent;\n  border-color: hsl(207, 61%, 53%);\n  box-shadow: none;\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-info.is-inverted.is-outlined:hover, .button.is-info.is-inverted.is-outlined.is-hovered, .button.is-info.is-inverted.is-outlined:focus, .button.is-info.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-inverted.is-outlined.is-loading:hover::after, .button.is-info.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-info.is-inverted.is-outlined.is-loading:focus::after, .button.is-info.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(207, 61%, 53%) hsl(207, 61%, 53%) !important;\n}\n.button.is-info.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-info.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-info.is-light {\n  background-color: #eff5fb;\n  color: #296fa8;\n}\n.button.is-info.is-light:hover, .button.is-info.is-light.is-hovered {\n  background-color: #e4eff9;\n  border-color: transparent;\n  color: #296fa8;\n}\n.button.is-info.is-light:active, .button.is-info.is-light.is-active {\n  background-color: #dae9f6;\n  border-color: transparent;\n  color: #296fa8;\n}\n.button.is-success {\n  background-color: hsl(153, 53%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-success:hover, .button.is-success.is-hovered {\n  background-color: #3ec487;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-success:focus, .button.is-success.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-success:focus:not(:active), .button.is-success.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(72, 199, 142, 0.25);\n}\n.button.is-success:active, .button.is-success.is-active {\n  background-color: #3abb81;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-success[disabled], fieldset[disabled] .button.is-success {\n  background-color: hsl(153, 53%, 53%);\n  border-color: hsl(153, 53%, 53%);\n  box-shadow: none;\n}\n.button.is-success.is-inverted {\n  background-color: #fff;\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-inverted:hover, .button.is-success.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-success.is-inverted[disabled], fieldset[disabled] .button.is-success.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-success.is-outlined {\n  background-color: transparent;\n  border-color: hsl(153, 53%, 53%);\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-outlined:hover, .button.is-success.is-outlined.is-hovered, .button.is-success.is-outlined:focus, .button.is-success.is-outlined.is-focused {\n  background-color: hsl(153, 53%, 53%);\n  border-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.button.is-success.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(153, 53%, 53%) hsl(153, 53%, 53%) !important;\n}\n.button.is-success.is-outlined.is-loading:hover::after, .button.is-success.is-outlined.is-loading.is-hovered::after, .button.is-success.is-outlined.is-loading:focus::after, .button.is-success.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-success.is-outlined[disabled], fieldset[disabled] .button.is-success.is-outlined {\n  background-color: transparent;\n  border-color: hsl(153, 53%, 53%);\n  box-shadow: none;\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-success.is-inverted.is-outlined:hover, .button.is-success.is-inverted.is-outlined.is-hovered, .button.is-success.is-inverted.is-outlined:focus, .button.is-success.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-inverted.is-outlined.is-loading:hover::after, .button.is-success.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-success.is-inverted.is-outlined.is-loading:focus::after, .button.is-success.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(153, 53%, 53%) hsl(153, 53%, 53%) !important;\n}\n.button.is-success.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-success.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-success.is-light {\n  background-color: #effaf5;\n  color: #257953;\n}\n.button.is-success.is-light:hover, .button.is-success.is-light.is-hovered {\n  background-color: #e6f7ef;\n  border-color: transparent;\n  color: #257953;\n}\n.button.is-success.is-light:active, .button.is-success.is-light.is-active {\n  background-color: #dcf4e9;\n  border-color: transparent;\n  color: #257953;\n}\n.button.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning:hover, .button.is-warning.is-hovered {\n  background-color: #ffdc7d;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning:focus, .button.is-warning.is-focused {\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning:focus:not(:active), .button.is-warning.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(255, 224, 138, 0.25);\n}\n.button.is-warning:active, .button.is-warning.is-active {\n  background-color: #ffd970;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning[disabled], fieldset[disabled] .button.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  border-color: hsl(44, 100%, 77%);\n  box-shadow: none;\n}\n.button.is-warning.is-inverted {\n  background-color: rgba(0, 0, 0, 0.7);\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-inverted:hover, .button.is-warning.is-inverted.is-hovered {\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning.is-inverted[disabled], fieldset[disabled] .button.is-warning.is-inverted {\n  background-color: rgba(0, 0, 0, 0.7);\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-loading::after {\n  border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;\n}\n.button.is-warning.is-outlined {\n  background-color: transparent;\n  border-color: hsl(44, 100%, 77%);\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-outlined:hover, .button.is-warning.is-outlined.is-hovered, .button.is-warning.is-outlined:focus, .button.is-warning.is-outlined.is-focused {\n  background-color: hsl(44, 100%, 77%);\n  border-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(44, 100%, 77%) hsl(44, 100%, 77%) !important;\n}\n.button.is-warning.is-outlined.is-loading:hover::after, .button.is-warning.is-outlined.is-loading.is-hovered::after, .button.is-warning.is-outlined.is-loading:focus::after, .button.is-warning.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;\n}\n.button.is-warning.is-outlined[disabled], fieldset[disabled] .button.is-warning.is-outlined {\n  background-color: transparent;\n  border-color: hsl(44, 100%, 77%);\n  box-shadow: none;\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.7);\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning.is-inverted.is-outlined:hover, .button.is-warning.is-inverted.is-outlined.is-hovered, .button.is-warning.is-inverted.is-outlined:focus, .button.is-warning.is-inverted.is-outlined.is-focused {\n  background-color: rgba(0, 0, 0, 0.7);\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-inverted.is-outlined.is-loading:hover::after, .button.is-warning.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-warning.is-inverted.is-outlined.is-loading:focus::after, .button.is-warning.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(44, 100%, 77%) hsl(44, 100%, 77%) !important;\n}\n.button.is-warning.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-warning.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.7);\n  box-shadow: none;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning.is-light {\n  background-color: #fffaeb;\n  color: #946c00;\n}\n.button.is-warning.is-light:hover, .button.is-warning.is-light.is-hovered {\n  background-color: #fff6de;\n  border-color: transparent;\n  color: #946c00;\n}\n.button.is-warning.is-light:active, .button.is-warning.is-light.is-active {\n  background-color: #fff3d1;\n  border-color: transparent;\n  color: #946c00;\n}\n.button.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-danger:hover, .button.is-danger.is-hovered {\n  background-color: #f03a5f;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-danger:focus, .button.is-danger.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-danger:focus:not(:active), .button.is-danger.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(241, 70, 104, 0.25);\n}\n.button.is-danger:active, .button.is-danger.is-active {\n  background-color: #ef2e55;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-danger[disabled], fieldset[disabled] .button.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  border-color: hsl(348, 86%, 61%);\n  box-shadow: none;\n}\n.button.is-danger.is-inverted {\n  background-color: #fff;\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-inverted:hover, .button.is-danger.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-danger.is-inverted[disabled], fieldset[disabled] .button.is-danger.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-danger.is-outlined {\n  background-color: transparent;\n  border-color: hsl(348, 86%, 61%);\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-outlined:hover, .button.is-danger.is-outlined.is-hovered, .button.is-danger.is-outlined:focus, .button.is-danger.is-outlined.is-focused {\n  background-color: hsl(348, 86%, 61%);\n  border-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.button.is-danger.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(348, 86%, 61%) hsl(348, 86%, 61%) !important;\n}\n.button.is-danger.is-outlined.is-loading:hover::after, .button.is-danger.is-outlined.is-loading.is-hovered::after, .button.is-danger.is-outlined.is-loading:focus::after, .button.is-danger.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-danger.is-outlined[disabled], fieldset[disabled] .button.is-danger.is-outlined {\n  background-color: transparent;\n  border-color: hsl(348, 86%, 61%);\n  box-shadow: none;\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-danger.is-inverted.is-outlined:hover, .button.is-danger.is-inverted.is-outlined.is-hovered, .button.is-danger.is-inverted.is-outlined:focus, .button.is-danger.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-inverted.is-outlined.is-loading:hover::after, .button.is-danger.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-danger.is-inverted.is-outlined.is-loading:focus::after, .button.is-danger.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(348, 86%, 61%) hsl(348, 86%, 61%) !important;\n}\n.button.is-danger.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-danger.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-danger.is-light {\n  background-color: #feecf0;\n  color: #cc0f35;\n}\n.button.is-danger.is-light:hover, .button.is-danger.is-light.is-hovered {\n  background-color: #fde0e6;\n  border-color: transparent;\n  color: #cc0f35;\n}\n.button.is-danger.is-light:active, .button.is-danger.is-light.is-active {\n  background-color: #fcd4dc;\n  border-color: transparent;\n  color: #cc0f35;\n}\n.button.is-small {\n  font-size: 0.75rem;\n}\n.button.is-small:not(.is-rounded) {\n  border-radius: 2px;\n}\n.button.is-normal {\n  font-size: 1rem;\n}\n.button.is-medium {\n  font-size: 1.25rem;\n}\n.button.is-large {\n  font-size: 1.5rem;\n}\n.button[disabled], fieldset[disabled] .button {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 86%);\n  box-shadow: none;\n  opacity: 0.5;\n}\n.button.is-fullwidth {\n  display: flex;\n  width: 100%;\n}\n.button.is-loading {\n  color: transparent !important;\n  pointer-events: none;\n}\n.button.is-loading::after {\n  position: absolute;\n  left: calc(50% - (1em * 0.5));\n  top: calc(50% - (1em * 0.5));\n  position: absolute !important;\n}\n.button.is-static {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 86%);\n  color: hsl(0, 0%, 48%);\n  box-shadow: none;\n  pointer-events: none;\n}\n.button.is-rounded {\n  border-radius: 9999px;\n  padding-left: calc(1em + 0.25em);\n  padding-right: calc(1em + 0.25em);\n}\n\n.buttons {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n.buttons .button {\n  margin-bottom: 0.5rem;\n}\n.buttons .button:not(:last-child):not(.is-fullwidth) {\n  margin-right: 0.5rem;\n}\n.buttons:last-child {\n  margin-bottom: -0.5rem;\n}\n.buttons:not(:last-child) {\n  margin-bottom: 1rem;\n}\n.buttons.are-small .button:not(.is-normal):not(.is-medium):not(.is-large) {\n  font-size: 0.75rem;\n}\n.buttons.are-small .button:not(.is-normal):not(.is-medium):not(.is-large):not(.is-rounded) {\n  border-radius: 2px;\n}\n.buttons.are-medium .button:not(.is-small):not(.is-normal):not(.is-large) {\n  font-size: 1.25rem;\n}\n.buttons.are-large .button:not(.is-small):not(.is-normal):not(.is-medium) {\n  font-size: 1.5rem;\n}\n.buttons.has-addons .button:not(:first-child) {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.buttons.has-addons .button:not(:last-child) {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n  margin-right: -1px;\n}\n.buttons.has-addons .button:last-child {\n  margin-right: 0;\n}\n.buttons.has-addons .button:hover, .buttons.has-addons .button.is-hovered {\n  z-index: 2;\n}\n.buttons.has-addons .button:focus, .buttons.has-addons .button.is-focused, .buttons.has-addons .button:active, .buttons.has-addons .button.is-active, .buttons.has-addons .button.is-selected {\n  z-index: 3;\n}\n.buttons.has-addons .button:focus:hover, .buttons.has-addons .button.is-focused:hover, .buttons.has-addons .button:active:hover, .buttons.has-addons .button.is-active:hover, .buttons.has-addons .button.is-selected:hover {\n  z-index: 4;\n}\n.buttons.has-addons .button.is-expanded {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.buttons.is-centered {\n  justify-content: center;\n}\n.buttons.is-centered:not(.has-addons) .button:not(.is-fullwidth) {\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n}\n.buttons.is-right {\n  justify-content: flex-end;\n}\n.buttons.is-right:not(.has-addons) .button:not(.is-fullwidth) {\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n}\n\n@media screen and (max-width: 768px) {\n  .button.is-responsive.is-small {\n    font-size: 0.5625rem;\n  }\n  .button.is-responsive,\n  .button.is-responsive.is-normal {\n    font-size: 0.65625rem;\n  }\n  .button.is-responsive.is-medium {\n    font-size: 0.75rem;\n  }\n  .button.is-responsive.is-large {\n    font-size: 1rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .button.is-responsive.is-small {\n    font-size: 0.65625rem;\n  }\n  .button.is-responsive,\n  .button.is-responsive.is-normal {\n    font-size: 0.75rem;\n  }\n  .button.is-responsive.is-medium {\n    font-size: 1rem;\n  }\n  .button.is-responsive.is-large {\n    font-size: 1.25rem;\n  }\n}\n.container {\n  flex-grow: 1;\n  margin: 0 auto;\n  position: relative;\n  width: auto;\n}\n.container.is-fluid {\n  max-width: none !important;\n  padding-left: 32px;\n  padding-right: 32px;\n  width: 100%;\n}\n@media screen and (min-width: 1024px) {\n  .container {\n    max-width: 960px;\n  }\n}\n@media screen and (max-width: 1215px) {\n  .container.is-widescreen:not(.is-max-desktop) {\n    max-width: 1152px;\n  }\n}\n@media screen and (max-width: 1407px) {\n  .container.is-fullhd:not(.is-max-desktop):not(.is-max-widescreen) {\n    max-width: 1344px;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .container:not(.is-max-desktop) {\n    max-width: 1152px;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .container:not(.is-max-desktop):not(.is-max-widescreen) {\n    max-width: 1344px;\n  }\n}\n\n.content li + li {\n  margin-top: 0.25em;\n}\n.content p:not(:last-child),\n.content dl:not(:last-child),\n.content ol:not(:last-child),\n.content ul:not(:last-child),\n.content blockquote:not(:last-child),\n.content pre:not(:last-child),\n.content table:not(:last-child) {\n  margin-bottom: 1em;\n}\n.content h1,\n.content h2,\n.content h3,\n.content h4,\n.content h5,\n.content h6 {\n  color: hsl(0, 0%, 21%);\n  font-weight: 600;\n  line-height: 1.125;\n}\n.content h1 {\n  font-size: 2em;\n  margin-bottom: 0.5em;\n}\n.content h1:not(:first-child) {\n  margin-top: 1em;\n}\n.content h2 {\n  font-size: 1.75em;\n  margin-bottom: 0.5714em;\n}\n.content h2:not(:first-child) {\n  margin-top: 1.1428em;\n}\n.content h3 {\n  font-size: 1.5em;\n  margin-bottom: 0.6666em;\n}\n.content h3:not(:first-child) {\n  margin-top: 1.3333em;\n}\n.content h4 {\n  font-size: 1.25em;\n  margin-bottom: 0.8em;\n}\n.content h5 {\n  font-size: 1.125em;\n  margin-bottom: 0.8888em;\n}\n.content h6 {\n  font-size: 1em;\n  margin-bottom: 1em;\n}\n.content blockquote {\n  background-color: hsl(0, 0%, 96%);\n  border-left: 5px solid hsl(0, 0%, 86%);\n  padding: 1.25em 1.5em;\n}\n.content ol {\n  list-style-position: outside;\n  margin-left: 2em;\n  margin-top: 1em;\n}\n.content ol:not([type]) {\n  list-style-type: decimal;\n}\n.content ol:not([type]).is-lower-alpha {\n  list-style-type: lower-alpha;\n}\n.content ol:not([type]).is-lower-roman {\n  list-style-type: lower-roman;\n}\n.content ol:not([type]).is-upper-alpha {\n  list-style-type: upper-alpha;\n}\n.content ol:not([type]).is-upper-roman {\n  list-style-type: upper-roman;\n}\n.content ul {\n  list-style: disc outside;\n  margin-left: 2em;\n  margin-top: 1em;\n}\n.content ul ul {\n  list-style-type: circle;\n  margin-top: 0.5em;\n}\n.content ul ul ul {\n  list-style-type: square;\n}\n.content dd {\n  margin-left: 2em;\n}\n.content figure {\n  margin-left: 2em;\n  margin-right: 2em;\n  text-align: center;\n}\n.content figure:not(:first-child) {\n  margin-top: 2em;\n}\n.content figure:not(:last-child) {\n  margin-bottom: 2em;\n}\n.content figure img {\n  display: inline-block;\n}\n.content figure figcaption {\n  font-style: italic;\n}\n.content pre {\n  -webkit-overflow-scrolling: touch;\n  overflow-x: auto;\n  padding: 1.25em 1.5em;\n  white-space: pre;\n  word-wrap: normal;\n}\n.content sup,\n.content sub {\n  font-size: 75%;\n}\n.content table {\n  width: 100%;\n}\n.content table td,\n.content table th {\n  border: 1px solid hsl(0, 0%, 86%);\n  border-width: 0 0 1px;\n  padding: 0.5em 0.75em;\n  vertical-align: top;\n}\n.content table th {\n  color: hsl(0, 0%, 21%);\n}\n.content table th:not([align]) {\n  text-align: inherit;\n}\n.content table thead td,\n.content table thead th {\n  border-width: 0 0 2px;\n  color: hsl(0, 0%, 21%);\n}\n.content table tfoot td,\n.content table tfoot th {\n  border-width: 2px 0 0;\n  color: hsl(0, 0%, 21%);\n}\n.content table tbody tr:last-child td,\n.content table tbody tr:last-child th {\n  border-bottom-width: 0;\n}\n.content .tabs li + li {\n  margin-top: 0;\n}\n.content.is-small {\n  font-size: 0.75rem;\n}\n.content.is-normal {\n  font-size: 1rem;\n}\n.content.is-medium {\n  font-size: 1.25rem;\n}\n.content.is-large {\n  font-size: 1.5rem;\n}\n\n.icon {\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  height: 1.5rem;\n  width: 1.5rem;\n}\n.icon.is-small {\n  height: 1rem;\n  width: 1rem;\n}\n.icon.is-medium {\n  height: 2rem;\n  width: 2rem;\n}\n.icon.is-large {\n  height: 3rem;\n  width: 3rem;\n}\n\n.icon-text {\n  align-items: flex-start;\n  color: inherit;\n  display: inline-flex;\n  flex-wrap: wrap;\n  line-height: 1.5rem;\n  vertical-align: top;\n}\n.icon-text .icon {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n.icon-text .icon:not(:last-child) {\n  margin-right: 0.25em;\n}\n.icon-text .icon:not(:first-child) {\n  margin-left: 0.25em;\n}\n\ndiv.icon-text {\n  display: flex;\n}\n\n.image {\n  display: block;\n  position: relative;\n}\n.image img {\n  display: block;\n  height: auto;\n  width: 100%;\n}\n.image img.is-rounded {\n  border-radius: 9999px;\n}\n.image.is-fullwidth {\n  width: 100%;\n}\n.image.is-square img,\n.image.is-square .has-ratio, .image.is-1by1 img,\n.image.is-1by1 .has-ratio, .image.is-5by4 img,\n.image.is-5by4 .has-ratio, .image.is-4by3 img,\n.image.is-4by3 .has-ratio, .image.is-3by2 img,\n.image.is-3by2 .has-ratio, .image.is-5by3 img,\n.image.is-5by3 .has-ratio, .image.is-16by9 img,\n.image.is-16by9 .has-ratio, .image.is-2by1 img,\n.image.is-2by1 .has-ratio, .image.is-3by1 img,\n.image.is-3by1 .has-ratio, .image.is-4by5 img,\n.image.is-4by5 .has-ratio, .image.is-3by4 img,\n.image.is-3by4 .has-ratio, .image.is-2by3 img,\n.image.is-2by3 .has-ratio, .image.is-3by5 img,\n.image.is-3by5 .has-ratio, .image.is-9by16 img,\n.image.is-9by16 .has-ratio, .image.is-1by2 img,\n.image.is-1by2 .has-ratio, .image.is-1by3 img,\n.image.is-1by3 .has-ratio {\n  height: 100%;\n  width: 100%;\n}\n.image.is-square, .image.is-1by1 {\n  padding-top: 100%;\n}\n.image.is-5by4 {\n  padding-top: 80%;\n}\n.image.is-4by3 {\n  padding-top: 75%;\n}\n.image.is-3by2 {\n  padding-top: 66.6666%;\n}\n.image.is-5by3 {\n  padding-top: 60%;\n}\n.image.is-16by9 {\n  padding-top: 56.25%;\n}\n.image.is-2by1 {\n  padding-top: 50%;\n}\n.image.is-3by1 {\n  padding-top: 33.3333%;\n}\n.image.is-4by5 {\n  padding-top: 125%;\n}\n.image.is-3by4 {\n  padding-top: 133.3333%;\n}\n.image.is-2by3 {\n  padding-top: 150%;\n}\n.image.is-3by5 {\n  padding-top: 166.6666%;\n}\n.image.is-9by16 {\n  padding-top: 177.7777%;\n}\n.image.is-1by2 {\n  padding-top: 200%;\n}\n.image.is-1by3 {\n  padding-top: 300%;\n}\n.image.is-16x16 {\n  height: 16px;\n  width: 16px;\n}\n.image.is-24x24 {\n  height: 24px;\n  width: 24px;\n}\n.image.is-32x32 {\n  height: 32px;\n  width: 32px;\n}\n.image.is-48x48 {\n  height: 48px;\n  width: 48px;\n}\n.image.is-64x64 {\n  height: 64px;\n  width: 64px;\n}\n.image.is-96x96 {\n  height: 96px;\n  width: 96px;\n}\n.image.is-128x128 {\n  height: 128px;\n  width: 128px;\n}\n\n.notification {\n  background-color: hsl(0, 0%, 96%);\n  border-radius: 4px;\n  position: relative;\n  padding: 1.25rem 2.5rem 1.25rem 1.5rem;\n}\n.notification a:not(.button):not(.dropdown-item) {\n  color: currentColor;\n  text-decoration: underline;\n}\n.notification strong {\n  color: currentColor;\n}\n.notification code,\n.notification pre {\n  background: hsl(0, 0%, 100%);\n}\n.notification pre code {\n  background: transparent;\n}\n.notification > .delete {\n  right: 0.5rem;\n  position: absolute;\n  top: 0.5rem;\n}\n.notification .title,\n.notification .subtitle,\n.notification .content {\n  color: currentColor;\n}\n.notification.is-white {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.notification.is-black {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.notification.is-light {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.notification.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.notification.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.notification.is-primary.is-light {\n  background-color: #ebfffc;\n  color: #00947e;\n}\n.notification.is-link {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.notification.is-link.is-light {\n  background-color: #eff1fa;\n  color: #3850b7;\n}\n.notification.is-info {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.notification.is-info.is-light {\n  background-color: #eff5fb;\n  color: #296fa8;\n}\n.notification.is-success {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.notification.is-success.is-light {\n  background-color: #effaf5;\n  color: #257953;\n}\n.notification.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.notification.is-warning.is-light {\n  background-color: #fffaeb;\n  color: #946c00;\n}\n.notification.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.notification.is-danger.is-light {\n  background-color: #feecf0;\n  color: #cc0f35;\n}\n\n.progress {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  border: none;\n  border-radius: 9999px;\n  display: block;\n  height: 1rem;\n  overflow: hidden;\n  padding: 0;\n  width: 100%;\n}\n.progress::-webkit-progress-bar {\n  background-color: hsl(0, 0%, 93%);\n}\n.progress::-webkit-progress-value {\n  background-color: hsl(0, 0%, 29%);\n}\n.progress::-moz-progress-bar {\n  background-color: hsl(0, 0%, 29%);\n}\n.progress::-ms-fill {\n  background-color: hsl(0, 0%, 29%);\n  border: none;\n}\n.progress.is-white::-webkit-progress-value {\n  background-color: hsl(0, 0%, 100%);\n}\n.progress.is-white::-moz-progress-bar {\n  background-color: hsl(0, 0%, 100%);\n}\n.progress.is-white::-ms-fill {\n  background-color: hsl(0, 0%, 100%);\n}\n.progress.is-white:indeterminate {\n  background-image: linear-gradient(to right, hsl(0, 0%, 100%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-black::-webkit-progress-value {\n  background-color: hsl(0, 0%, 4%);\n}\n.progress.is-black::-moz-progress-bar {\n  background-color: hsl(0, 0%, 4%);\n}\n.progress.is-black::-ms-fill {\n  background-color: hsl(0, 0%, 4%);\n}\n.progress.is-black:indeterminate {\n  background-image: linear-gradient(to right, hsl(0, 0%, 4%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-light::-webkit-progress-value {\n  background-color: hsl(0, 0%, 96%);\n}\n.progress.is-light::-moz-progress-bar {\n  background-color: hsl(0, 0%, 96%);\n}\n.progress.is-light::-ms-fill {\n  background-color: hsl(0, 0%, 96%);\n}\n.progress.is-light:indeterminate {\n  background-image: linear-gradient(to right, hsl(0, 0%, 96%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-dark::-webkit-progress-value {\n  background-color: hsl(0, 0%, 21%);\n}\n.progress.is-dark::-moz-progress-bar {\n  background-color: hsl(0, 0%, 21%);\n}\n.progress.is-dark::-ms-fill {\n  background-color: hsl(0, 0%, 21%);\n}\n.progress.is-dark:indeterminate {\n  background-image: linear-gradient(to right, hsl(0, 0%, 21%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-primary::-webkit-progress-value {\n  background-color: hsl(171, 100%, 41%);\n}\n.progress.is-primary::-moz-progress-bar {\n  background-color: hsl(171, 100%, 41%);\n}\n.progress.is-primary::-ms-fill {\n  background-color: hsl(171, 100%, 41%);\n}\n.progress.is-primary:indeterminate {\n  background-image: linear-gradient(to right, hsl(171, 100%, 41%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-link::-webkit-progress-value {\n  background-color: hsl(229, 53%, 53%);\n}\n.progress.is-link::-moz-progress-bar {\n  background-color: hsl(229, 53%, 53%);\n}\n.progress.is-link::-ms-fill {\n  background-color: hsl(229, 53%, 53%);\n}\n.progress.is-link:indeterminate {\n  background-image: linear-gradient(to right, hsl(229, 53%, 53%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-info::-webkit-progress-value {\n  background-color: hsl(207, 61%, 53%);\n}\n.progress.is-info::-moz-progress-bar {\n  background-color: hsl(207, 61%, 53%);\n}\n.progress.is-info::-ms-fill {\n  background-color: hsl(207, 61%, 53%);\n}\n.progress.is-info:indeterminate {\n  background-image: linear-gradient(to right, hsl(207, 61%, 53%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-success::-webkit-progress-value {\n  background-color: hsl(153, 53%, 53%);\n}\n.progress.is-success::-moz-progress-bar {\n  background-color: hsl(153, 53%, 53%);\n}\n.progress.is-success::-ms-fill {\n  background-color: hsl(153, 53%, 53%);\n}\n.progress.is-success:indeterminate {\n  background-image: linear-gradient(to right, hsl(153, 53%, 53%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-warning::-webkit-progress-value {\n  background-color: hsl(44, 100%, 77%);\n}\n.progress.is-warning::-moz-progress-bar {\n  background-color: hsl(44, 100%, 77%);\n}\n.progress.is-warning::-ms-fill {\n  background-color: hsl(44, 100%, 77%);\n}\n.progress.is-warning:indeterminate {\n  background-image: linear-gradient(to right, hsl(44, 100%, 77%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-danger::-webkit-progress-value {\n  background-color: hsl(348, 86%, 61%);\n}\n.progress.is-danger::-moz-progress-bar {\n  background-color: hsl(348, 86%, 61%);\n}\n.progress.is-danger::-ms-fill {\n  background-color: hsl(348, 86%, 61%);\n}\n.progress.is-danger:indeterminate {\n  background-image: linear-gradient(to right, hsl(348, 86%, 61%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress:indeterminate {\n  animation-duration: 1.5s;\n  animation-iteration-count: infinite;\n  animation-name: moveIndeterminate;\n  animation-timing-function: linear;\n  background-color: hsl(0, 0%, 93%);\n  background-image: linear-gradient(to right, hsl(0, 0%, 29%) 30%, hsl(0, 0%, 93%) 30%);\n  background-position: top left;\n  background-repeat: no-repeat;\n  background-size: 150% 150%;\n}\n.progress:indeterminate::-webkit-progress-bar {\n  background-color: transparent;\n}\n.progress:indeterminate::-moz-progress-bar {\n  background-color: transparent;\n}\n.progress:indeterminate::-ms-fill {\n  animation-name: none;\n}\n.progress.is-small {\n  height: 0.75rem;\n}\n.progress.is-medium {\n  height: 1.25rem;\n}\n.progress.is-large {\n  height: 1.5rem;\n}\n\n@keyframes moveIndeterminate {\n  from {\n    background-position: 200% 0;\n  }\n  to {\n    background-position: -200% 0;\n  }\n}\n.table {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 21%);\n}\n.table td,\n.table th {\n  border: 1px solid hsl(0, 0%, 86%);\n  border-width: 0 0 1px;\n  padding: 0.5em 0.75em;\n  vertical-align: top;\n}\n.table td.is-white,\n.table th.is-white {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.table td.is-black,\n.table th.is-black {\n  background-color: hsl(0, 0%, 4%);\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.table td.is-light,\n.table th.is-light {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.table td.is-dark,\n.table th.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  border-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.table td.is-primary,\n.table th.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  border-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.table td.is-link,\n.table th.is-link {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.table td.is-info,\n.table th.is-info {\n  background-color: hsl(207, 61%, 53%);\n  border-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.table td.is-success,\n.table th.is-success {\n  background-color: hsl(153, 53%, 53%);\n  border-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.table td.is-warning,\n.table th.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  border-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.table td.is-danger,\n.table th.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  border-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.table td.is-narrow,\n.table th.is-narrow {\n  white-space: nowrap;\n  width: 1%;\n}\n.table td.is-selected,\n.table th.is-selected {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.table td.is-selected a,\n.table td.is-selected strong,\n.table th.is-selected a,\n.table th.is-selected strong {\n  color: currentColor;\n}\n.table td.is-vcentered,\n.table th.is-vcentered {\n  vertical-align: middle;\n}\n.table th {\n  color: hsl(0, 0%, 21%);\n}\n.table th:not([align]) {\n  text-align: left;\n}\n.table tr.is-selected {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.table tr.is-selected a,\n.table tr.is-selected strong {\n  color: currentColor;\n}\n.table tr.is-selected td,\n.table tr.is-selected th {\n  border-color: #fff;\n  color: currentColor;\n}\n.table thead {\n  background-color: transparent;\n}\n.table thead td,\n.table thead th {\n  border-width: 0 0 2px;\n  color: hsl(0, 0%, 21%);\n}\n.table tfoot {\n  background-color: transparent;\n}\n.table tfoot td,\n.table tfoot th {\n  border-width: 2px 0 0;\n  color: hsl(0, 0%, 21%);\n}\n.table tbody {\n  background-color: transparent;\n}\n.table tbody tr:last-child td,\n.table tbody tr:last-child th {\n  border-bottom-width: 0;\n}\n.table.is-bordered td,\n.table.is-bordered th {\n  border-width: 1px;\n}\n.table.is-bordered tr:last-child td,\n.table.is-bordered tr:last-child th {\n  border-bottom-width: 1px;\n}\n.table.is-fullwidth {\n  width: 100%;\n}\n.table.is-hoverable tbody tr:not(.is-selected):hover {\n  background-color: hsl(0, 0%, 98%);\n}\n.table.is-hoverable.is-striped tbody tr:not(.is-selected):hover {\n  background-color: hsl(0, 0%, 98%);\n}\n.table.is-hoverable.is-striped tbody tr:not(.is-selected):hover:nth-child(even) {\n  background-color: hsl(0, 0%, 96%);\n}\n.table.is-narrow td,\n.table.is-narrow th {\n  padding: 0.25em 0.5em;\n}\n.table.is-striped tbody tr:not(.is-selected):nth-child(even) {\n  background-color: hsl(0, 0%, 98%);\n}\n\n.table-container {\n  -webkit-overflow-scrolling: touch;\n  overflow: auto;\n  overflow-y: hidden;\n  max-width: 100%;\n}\n\n.tags {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n.tags .tag {\n  margin-bottom: 0.5rem;\n}\n.tags .tag:not(:last-child) {\n  margin-right: 0.5rem;\n}\n.tags:last-child {\n  margin-bottom: -0.5rem;\n}\n.tags:not(:last-child) {\n  margin-bottom: 1rem;\n}\n.tags.are-medium .tag:not(.is-normal):not(.is-large) {\n  font-size: 1rem;\n}\n.tags.are-large .tag:not(.is-normal):not(.is-medium) {\n  font-size: 1.25rem;\n}\n.tags.is-centered {\n  justify-content: center;\n}\n.tags.is-centered .tag {\n  margin-right: 0.25rem;\n  margin-left: 0.25rem;\n}\n.tags.is-right {\n  justify-content: flex-end;\n}\n.tags.is-right .tag:not(:first-child) {\n  margin-left: 0.5rem;\n}\n.tags.is-right .tag:not(:last-child) {\n  margin-right: 0;\n}\n.tags.has-addons .tag {\n  margin-right: 0;\n}\n.tags.has-addons .tag:not(:first-child) {\n  margin-left: 0;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.tags.has-addons .tag:not(:last-child) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.tag:not(body) {\n  align-items: center;\n  background-color: hsl(0, 0%, 96%);\n  border-radius: 4px;\n  color: hsl(0, 0%, 29%);\n  display: inline-flex;\n  font-size: 0.75rem;\n  height: 2em;\n  justify-content: center;\n  line-height: 1.5;\n  padding-left: 0.75em;\n  padding-right: 0.75em;\n  white-space: nowrap;\n}\n.tag:not(body) .delete {\n  margin-left: 0.25rem;\n  margin-right: -0.375rem;\n}\n.tag:not(body).is-white {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.tag:not(body).is-black {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.tag:not(body).is-light {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.tag:not(body).is-dark {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.tag:not(body).is-primary {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.tag:not(body).is-primary.is-light {\n  background-color: #ebfffc;\n  color: #00947e;\n}\n.tag:not(body).is-link {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.tag:not(body).is-link.is-light {\n  background-color: #eff1fa;\n  color: #3850b7;\n}\n.tag:not(body).is-info {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.tag:not(body).is-info.is-light {\n  background-color: #eff5fb;\n  color: #296fa8;\n}\n.tag:not(body).is-success {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.tag:not(body).is-success.is-light {\n  background-color: #effaf5;\n  color: #257953;\n}\n.tag:not(body).is-warning {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.tag:not(body).is-warning.is-light {\n  background-color: #fffaeb;\n  color: #946c00;\n}\n.tag:not(body).is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.tag:not(body).is-danger.is-light {\n  background-color: #feecf0;\n  color: #cc0f35;\n}\n.tag:not(body).is-normal {\n  font-size: 0.75rem;\n}\n.tag:not(body).is-medium {\n  font-size: 1rem;\n}\n.tag:not(body).is-large {\n  font-size: 1.25rem;\n}\n.tag:not(body) .icon:first-child:not(:last-child) {\n  margin-left: -0.375em;\n  margin-right: 0.1875em;\n}\n.tag:not(body) .icon:last-child:not(:first-child) {\n  margin-left: 0.1875em;\n  margin-right: -0.375em;\n}\n.tag:not(body) .icon:first-child:last-child {\n  margin-left: -0.375em;\n  margin-right: -0.375em;\n}\n.tag:not(body).is-delete {\n  margin-left: 1px;\n  padding: 0;\n  position: relative;\n  width: 2em;\n}\n.tag:not(body).is-delete::before, .tag:not(body).is-delete::after {\n  background-color: currentColor;\n  content: \"\";\n  display: block;\n  left: 50%;\n  position: absolute;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%) rotate(45deg);\n  transform-origin: center center;\n}\n.tag:not(body).is-delete::before {\n  height: 1px;\n  width: 50%;\n}\n.tag:not(body).is-delete::after {\n  height: 50%;\n  width: 1px;\n}\n.tag:not(body).is-delete:hover, .tag:not(body).is-delete:focus {\n  background-color: #e8e8e8;\n}\n.tag:not(body).is-delete:active {\n  background-color: #dbdbdb;\n}\n.tag:not(body).is-rounded {\n  border-radius: 9999px;\n}\n\na.tag:hover {\n  text-decoration: underline;\n}\n\n.title,\n.subtitle {\n  word-break: break-word;\n}\n.title em,\n.title span,\n.subtitle em,\n.subtitle span {\n  font-weight: inherit;\n}\n.title sub,\n.subtitle sub {\n  font-size: 0.75em;\n}\n.title sup,\n.subtitle sup {\n  font-size: 0.75em;\n}\n.title .tag,\n.subtitle .tag {\n  vertical-align: middle;\n}\n\n.title {\n  color: hsl(0, 0%, 21%);\n  font-size: 2rem;\n  font-weight: 600;\n  line-height: 1.125;\n}\n.title strong {\n  color: inherit;\n  font-weight: inherit;\n}\n.title:not(.is-spaced) + .subtitle {\n  margin-top: -1.25rem;\n}\n.title.is-1 {\n  font-size: 3rem;\n}\n.title.is-2 {\n  font-size: 2.5rem;\n}\n.title.is-3 {\n  font-size: 2rem;\n}\n.title.is-4 {\n  font-size: 1.5rem;\n}\n.title.is-5 {\n  font-size: 1.25rem;\n}\n.title.is-6 {\n  font-size: 1rem;\n}\n.title.is-7 {\n  font-size: 0.75rem;\n}\n\n.subtitle {\n  color: hsl(0, 0%, 29%);\n  font-size: 1.25rem;\n  font-weight: 400;\n  line-height: 1.25;\n}\n.subtitle strong {\n  color: hsl(0, 0%, 21%);\n  font-weight: 600;\n}\n.subtitle:not(.is-spaced) + .title {\n  margin-top: -1.25rem;\n}\n.subtitle.is-1 {\n  font-size: 3rem;\n}\n.subtitle.is-2 {\n  font-size: 2.5rem;\n}\n.subtitle.is-3 {\n  font-size: 2rem;\n}\n.subtitle.is-4 {\n  font-size: 1.5rem;\n}\n.subtitle.is-5 {\n  font-size: 1.25rem;\n}\n.subtitle.is-6 {\n  font-size: 1rem;\n}\n.subtitle.is-7 {\n  font-size: 0.75rem;\n}\n\n.heading {\n  display: block;\n  font-size: 11px;\n  letter-spacing: 1px;\n  margin-bottom: 5px;\n  text-transform: uppercase;\n}\n\n.number {\n  align-items: center;\n  background-color: hsl(0, 0%, 96%);\n  border-radius: 9999px;\n  display: inline-flex;\n  font-size: 1.25rem;\n  height: 2em;\n  justify-content: center;\n  margin-right: 1.5rem;\n  min-width: 2.5em;\n  padding: 0.25rem 0.5rem;\n  text-align: center;\n  vertical-align: top;\n}\n\n/* Bulma Form */\n.select select, .textarea, .input {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 86%);\n  border-radius: 4px;\n  color: hsl(0, 0%, 21%);\n}\n.select select::-moz-placeholder, .textarea::-moz-placeholder, .input::-moz-placeholder {\n  color: rgba(54, 54, 54, 0.3);\n}\n.select select::-webkit-input-placeholder, .textarea::-webkit-input-placeholder, .input::-webkit-input-placeholder {\n  color: rgba(54, 54, 54, 0.3);\n}\n.select select:-moz-placeholder, .textarea:-moz-placeholder, .input:-moz-placeholder {\n  color: rgba(54, 54, 54, 0.3);\n}\n.select select:-ms-input-placeholder, .textarea:-ms-input-placeholder, .input:-ms-input-placeholder {\n  color: rgba(54, 54, 54, 0.3);\n}\n.select select:hover, .textarea:hover, .input:hover, .select select.is-hovered, .is-hovered.textarea, .is-hovered.input {\n  border-color: hsl(0, 0%, 71%);\n}\n.select select:focus, .textarea:focus, .input:focus, .select select.is-focused, .is-focused.textarea, .is-focused.input, .select select:active, .textarea:active, .input:active, .select select.is-active, .is-active.textarea, .is-active.input {\n  border-color: hsl(229, 53%, 53%);\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.select select[disabled], [disabled].textarea, [disabled].input, fieldset[disabled] .select select, .select fieldset[disabled] select, fieldset[disabled] .textarea, fieldset[disabled] .input {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 96%);\n  box-shadow: none;\n  color: hsl(0, 0%, 48%);\n}\n.select select[disabled]::-moz-placeholder, [disabled].textarea::-moz-placeholder, [disabled].input::-moz-placeholder, fieldset[disabled] .select select::-moz-placeholder, .select fieldset[disabled] select::-moz-placeholder, fieldset[disabled] .textarea::-moz-placeholder, fieldset[disabled] .input::-moz-placeholder {\n  color: rgba(122, 122, 122, 0.3);\n}\n.select select[disabled]::-webkit-input-placeholder, [disabled].textarea::-webkit-input-placeholder, [disabled].input::-webkit-input-placeholder, fieldset[disabled] .select select::-webkit-input-placeholder, .select fieldset[disabled] select::-webkit-input-placeholder, fieldset[disabled] .textarea::-webkit-input-placeholder, fieldset[disabled] .input::-webkit-input-placeholder {\n  color: rgba(122, 122, 122, 0.3);\n}\n.select select[disabled]:-moz-placeholder, [disabled].textarea:-moz-placeholder, [disabled].input:-moz-placeholder, fieldset[disabled] .select select:-moz-placeholder, .select fieldset[disabled] select:-moz-placeholder, fieldset[disabled] .textarea:-moz-placeholder, fieldset[disabled] .input:-moz-placeholder {\n  color: rgba(122, 122, 122, 0.3);\n}\n.select select[disabled]:-ms-input-placeholder, [disabled].textarea:-ms-input-placeholder, [disabled].input:-ms-input-placeholder, fieldset[disabled] .select select:-ms-input-placeholder, .select fieldset[disabled] select:-ms-input-placeholder, fieldset[disabled] .textarea:-ms-input-placeholder, fieldset[disabled] .input:-ms-input-placeholder {\n  color: rgba(122, 122, 122, 0.3);\n}\n\n.textarea, .input {\n  box-shadow: inset 0 0.0625em 0.125em rgba(10, 10, 10, 0.05);\n  max-width: 100%;\n  width: 100%;\n}\n[readonly].textarea, [readonly].input {\n  box-shadow: none;\n}\n.is-white.textarea, .is-white.input {\n  border-color: hsl(0, 0%, 100%);\n}\n.is-white.textarea:focus, .is-white.input:focus, .is-white.is-focused.textarea, .is-white.is-focused.input, .is-white.textarea:active, .is-white.input:active, .is-white.is-active.textarea, .is-white.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25);\n}\n.is-black.textarea, .is-black.input {\n  border-color: hsl(0, 0%, 4%);\n}\n.is-black.textarea:focus, .is-black.input:focus, .is-black.is-focused.textarea, .is-black.is-focused.input, .is-black.textarea:active, .is-black.input:active, .is-black.is-active.textarea, .is-black.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25);\n}\n.is-light.textarea, .is-light.input {\n  border-color: hsl(0, 0%, 96%);\n}\n.is-light.textarea:focus, .is-light.input:focus, .is-light.is-focused.textarea, .is-light.is-focused.input, .is-light.textarea:active, .is-light.input:active, .is-light.is-active.textarea, .is-light.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25);\n}\n.is-dark.textarea, .is-dark.input {\n  border-color: hsl(0, 0%, 21%);\n}\n.is-dark.textarea:focus, .is-dark.input:focus, .is-dark.is-focused.textarea, .is-dark.is-focused.input, .is-dark.textarea:active, .is-dark.input:active, .is-dark.is-active.textarea, .is-dark.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25);\n}\n.is-primary.textarea, .is-primary.input {\n  border-color: hsl(171, 100%, 41%);\n}\n.is-primary.textarea:focus, .is-primary.input:focus, .is-primary.is-focused.textarea, .is-primary.is-focused.input, .is-primary.textarea:active, .is-primary.input:active, .is-primary.is-active.textarea, .is-primary.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25);\n}\n.is-link.textarea, .is-link.input {\n  border-color: hsl(229, 53%, 53%);\n}\n.is-link.textarea:focus, .is-link.input:focus, .is-link.is-focused.textarea, .is-link.is-focused.input, .is-link.textarea:active, .is-link.input:active, .is-link.is-active.textarea, .is-link.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.is-info.textarea, .is-info.input {\n  border-color: hsl(207, 61%, 53%);\n}\n.is-info.textarea:focus, .is-info.input:focus, .is-info.is-focused.textarea, .is-info.is-focused.input, .is-info.textarea:active, .is-info.input:active, .is-info.is-active.textarea, .is-info.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(62, 142, 208, 0.25);\n}\n.is-success.textarea, .is-success.input {\n  border-color: hsl(153, 53%, 53%);\n}\n.is-success.textarea:focus, .is-success.input:focus, .is-success.is-focused.textarea, .is-success.is-focused.input, .is-success.textarea:active, .is-success.input:active, .is-success.is-active.textarea, .is-success.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(72, 199, 142, 0.25);\n}\n.is-warning.textarea, .is-warning.input {\n  border-color: hsl(44, 100%, 77%);\n}\n.is-warning.textarea:focus, .is-warning.input:focus, .is-warning.is-focused.textarea, .is-warning.is-focused.input, .is-warning.textarea:active, .is-warning.input:active, .is-warning.is-active.textarea, .is-warning.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(255, 224, 138, 0.25);\n}\n.is-danger.textarea, .is-danger.input {\n  border-color: hsl(348, 86%, 61%);\n}\n.is-danger.textarea:focus, .is-danger.input:focus, .is-danger.is-focused.textarea, .is-danger.is-focused.input, .is-danger.textarea:active, .is-danger.input:active, .is-danger.is-active.textarea, .is-danger.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(241, 70, 104, 0.25);\n}\n.is-small.textarea, .is-small.input {\n  border-radius: 2px;\n  font-size: 0.75rem;\n}\n.is-medium.textarea, .is-medium.input {\n  font-size: 1.25rem;\n}\n.is-large.textarea, .is-large.input {\n  font-size: 1.5rem;\n}\n.is-fullwidth.textarea, .is-fullwidth.input {\n  display: block;\n  width: 100%;\n}\n.is-inline.textarea, .is-inline.input {\n  display: inline;\n  width: auto;\n}\n\n.input.is-rounded {\n  border-radius: 9999px;\n  padding-left: calc(calc(0.75em - 1px) + 0.375em);\n  padding-right: calc(calc(0.75em - 1px) + 0.375em);\n}\n.input.is-static {\n  background-color: transparent;\n  border-color: transparent;\n  box-shadow: none;\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.textarea {\n  display: block;\n  max-width: 100%;\n  min-width: 100%;\n  padding: calc(0.75em - 1px);\n  resize: vertical;\n}\n.textarea:not([rows]) {\n  max-height: 40em;\n  min-height: 8em;\n}\n.textarea[rows] {\n  height: initial;\n}\n.textarea.has-fixed-size {\n  resize: none;\n}\n\n.radio, .checkbox {\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1.25;\n  position: relative;\n}\n.radio input, .checkbox input {\n  cursor: pointer;\n}\n.radio:hover, .checkbox:hover {\n  color: hsl(0, 0%, 21%);\n}\n[disabled].radio, [disabled].checkbox, fieldset[disabled] .radio, fieldset[disabled] .checkbox,\n.radio input[disabled],\n.checkbox input[disabled] {\n  color: hsl(0, 0%, 48%);\n  cursor: not-allowed;\n}\n\n.radio + .radio {\n  margin-left: 0.5em;\n}\n\n.select {\n  display: inline-block;\n  max-width: 100%;\n  position: relative;\n  vertical-align: top;\n}\n.select:not(.is-multiple) {\n  height: 2.5em;\n}\n.select:not(.is-multiple):not(.is-loading)::after {\n  border-color: hsl(229, 53%, 53%);\n  right: 1.125em;\n  z-index: 4;\n}\n.select.is-rounded select {\n  border-radius: 9999px;\n  padding-left: 1em;\n}\n.select select {\n  cursor: pointer;\n  display: block;\n  font-size: 1em;\n  max-width: 100%;\n  outline: none;\n}\n.select select::-ms-expand {\n  display: none;\n}\n.select select[disabled]:hover, fieldset[disabled] .select select:hover {\n  border-color: hsl(0, 0%, 96%);\n}\n.select select:not([multiple]) {\n  padding-right: 2.5em;\n}\n.select select[multiple] {\n  height: auto;\n  padding: 0;\n}\n.select select[multiple] option {\n  padding: 0.5em 1em;\n}\n.select:not(.is-multiple):not(.is-loading):hover::after {\n  border-color: hsl(0, 0%, 21%);\n}\n.select.is-white:not(:hover)::after {\n  border-color: hsl(0, 0%, 100%);\n}\n.select.is-white select {\n  border-color: hsl(0, 0%, 100%);\n}\n.select.is-white select:hover, .select.is-white select.is-hovered {\n  border-color: #f2f2f2;\n}\n.select.is-white select:focus, .select.is-white select.is-focused, .select.is-white select:active, .select.is-white select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25);\n}\n.select.is-black:not(:hover)::after {\n  border-color: hsl(0, 0%, 4%);\n}\n.select.is-black select {\n  border-color: hsl(0, 0%, 4%);\n}\n.select.is-black select:hover, .select.is-black select.is-hovered {\n  border-color: black;\n}\n.select.is-black select:focus, .select.is-black select.is-focused, .select.is-black select:active, .select.is-black select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25);\n}\n.select.is-light:not(:hover)::after {\n  border-color: hsl(0, 0%, 96%);\n}\n.select.is-light select {\n  border-color: hsl(0, 0%, 96%);\n}\n.select.is-light select:hover, .select.is-light select.is-hovered {\n  border-color: #e8e8e8;\n}\n.select.is-light select:focus, .select.is-light select.is-focused, .select.is-light select:active, .select.is-light select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25);\n}\n.select.is-dark:not(:hover)::after {\n  border-color: hsl(0, 0%, 21%);\n}\n.select.is-dark select {\n  border-color: hsl(0, 0%, 21%);\n}\n.select.is-dark select:hover, .select.is-dark select.is-hovered {\n  border-color: #292929;\n}\n.select.is-dark select:focus, .select.is-dark select.is-focused, .select.is-dark select:active, .select.is-dark select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25);\n}\n.select.is-primary:not(:hover)::after {\n  border-color: hsl(171, 100%, 41%);\n}\n.select.is-primary select {\n  border-color: hsl(171, 100%, 41%);\n}\n.select.is-primary select:hover, .select.is-primary select.is-hovered {\n  border-color: #00b89c;\n}\n.select.is-primary select:focus, .select.is-primary select.is-focused, .select.is-primary select:active, .select.is-primary select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25);\n}\n.select.is-link:not(:hover)::after {\n  border-color: hsl(229, 53%, 53%);\n}\n.select.is-link select {\n  border-color: hsl(229, 53%, 53%);\n}\n.select.is-link select:hover, .select.is-link select.is-hovered {\n  border-color: #3a51bb;\n}\n.select.is-link select:focus, .select.is-link select.is-focused, .select.is-link select:active, .select.is-link select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.select.is-info:not(:hover)::after {\n  border-color: hsl(207, 61%, 53%);\n}\n.select.is-info select {\n  border-color: hsl(207, 61%, 53%);\n}\n.select.is-info select:hover, .select.is-info select.is-hovered {\n  border-color: #3082c5;\n}\n.select.is-info select:focus, .select.is-info select.is-focused, .select.is-info select:active, .select.is-info select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(62, 142, 208, 0.25);\n}\n.select.is-success:not(:hover)::after {\n  border-color: hsl(153, 53%, 53%);\n}\n.select.is-success select {\n  border-color: hsl(153, 53%, 53%);\n}\n.select.is-success select:hover, .select.is-success select.is-hovered {\n  border-color: #3abb81;\n}\n.select.is-success select:focus, .select.is-success select.is-focused, .select.is-success select:active, .select.is-success select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(72, 199, 142, 0.25);\n}\n.select.is-warning:not(:hover)::after {\n  border-color: hsl(44, 100%, 77%);\n}\n.select.is-warning select {\n  border-color: hsl(44, 100%, 77%);\n}\n.select.is-warning select:hover, .select.is-warning select.is-hovered {\n  border-color: #ffd970;\n}\n.select.is-warning select:focus, .select.is-warning select.is-focused, .select.is-warning select:active, .select.is-warning select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(255, 224, 138, 0.25);\n}\n.select.is-danger:not(:hover)::after {\n  border-color: hsl(348, 86%, 61%);\n}\n.select.is-danger select {\n  border-color: hsl(348, 86%, 61%);\n}\n.select.is-danger select:hover, .select.is-danger select.is-hovered {\n  border-color: #ef2e55;\n}\n.select.is-danger select:focus, .select.is-danger select.is-focused, .select.is-danger select:active, .select.is-danger select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(241, 70, 104, 0.25);\n}\n.select.is-small {\n  border-radius: 2px;\n  font-size: 0.75rem;\n}\n.select.is-medium {\n  font-size: 1.25rem;\n}\n.select.is-large {\n  font-size: 1.5rem;\n}\n.select.is-disabled::after {\n  border-color: hsl(0, 0%, 48%) !important;\n  opacity: 0.5;\n}\n.select.is-fullwidth {\n  width: 100%;\n}\n.select.is-fullwidth select {\n  width: 100%;\n}\n.select.is-loading::after {\n  margin-top: 0;\n  position: absolute;\n  right: 0.625em;\n  top: 0.625em;\n  transform: none;\n}\n.select.is-loading.is-small:after {\n  font-size: 0.75rem;\n}\n.select.is-loading.is-medium:after {\n  font-size: 1.25rem;\n}\n.select.is-loading.is-large:after {\n  font-size: 1.5rem;\n}\n\n.file {\n  align-items: stretch;\n  display: flex;\n  justify-content: flex-start;\n  position: relative;\n}\n.file.is-white .file-cta {\n  background-color: hsl(0, 0%, 100%);\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.file.is-white:hover .file-cta, .file.is-white.is-hovered .file-cta {\n  background-color: #f9f9f9;\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.file.is-white:focus .file-cta, .file.is-white.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(255, 255, 255, 0.25);\n  color: hsl(0, 0%, 4%);\n}\n.file.is-white:active .file-cta, .file.is-white.is-active .file-cta {\n  background-color: #f2f2f2;\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.file.is-black .file-cta {\n  background-color: hsl(0, 0%, 4%);\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.file.is-black:hover .file-cta, .file.is-black.is-hovered .file-cta {\n  background-color: #040404;\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.file.is-black:focus .file-cta, .file.is-black.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(10, 10, 10, 0.25);\n  color: hsl(0, 0%, 100%);\n}\n.file.is-black:active .file-cta, .file.is-black.is-active .file-cta {\n  background-color: black;\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.file.is-light .file-cta {\n  background-color: hsl(0, 0%, 96%);\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-light:hover .file-cta, .file.is-light.is-hovered .file-cta {\n  background-color: #eeeeee;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-light:focus .file-cta, .file.is-light.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(245, 245, 245, 0.25);\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-light:active .file-cta, .file.is-light.is-active .file-cta {\n  background-color: #e8e8e8;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-dark .file-cta {\n  background-color: hsl(0, 0%, 21%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-dark:hover .file-cta, .file.is-dark.is-hovered .file-cta {\n  background-color: #2f2f2f;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-dark:focus .file-cta, .file.is-dark.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(54, 54, 54, 0.25);\n  color: #fff;\n}\n.file.is-dark:active .file-cta, .file.is-dark.is-active .file-cta {\n  background-color: #292929;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-primary .file-cta {\n  background-color: hsl(171, 100%, 41%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-primary:hover .file-cta, .file.is-primary.is-hovered .file-cta {\n  background-color: #00c4a7;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-primary:focus .file-cta, .file.is-primary.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(0, 209, 178, 0.25);\n  color: #fff;\n}\n.file.is-primary:active .file-cta, .file.is-primary.is-active .file-cta {\n  background-color: #00b89c;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-link .file-cta {\n  background-color: hsl(229, 53%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-link:hover .file-cta, .file.is-link.is-hovered .file-cta {\n  background-color: #3e56c4;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-link:focus .file-cta, .file.is-link.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(72, 95, 199, 0.25);\n  color: #fff;\n}\n.file.is-link:active .file-cta, .file.is-link.is-active .file-cta {\n  background-color: #3a51bb;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-info .file-cta {\n  background-color: hsl(207, 61%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-info:hover .file-cta, .file.is-info.is-hovered .file-cta {\n  background-color: #3488ce;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-info:focus .file-cta, .file.is-info.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(62, 142, 208, 0.25);\n  color: #fff;\n}\n.file.is-info:active .file-cta, .file.is-info.is-active .file-cta {\n  background-color: #3082c5;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-success .file-cta {\n  background-color: hsl(153, 53%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-success:hover .file-cta, .file.is-success.is-hovered .file-cta {\n  background-color: #3ec487;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-success:focus .file-cta, .file.is-success.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(72, 199, 142, 0.25);\n  color: #fff;\n}\n.file.is-success:active .file-cta, .file.is-success.is-active .file-cta {\n  background-color: #3abb81;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-warning .file-cta {\n  background-color: hsl(44, 100%, 77%);\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-warning:hover .file-cta, .file.is-warning.is-hovered .file-cta {\n  background-color: #ffdc7d;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-warning:focus .file-cta, .file.is-warning.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(255, 224, 138, 0.25);\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-warning:active .file-cta, .file.is-warning.is-active .file-cta {\n  background-color: #ffd970;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-danger .file-cta {\n  background-color: hsl(348, 86%, 61%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-danger:hover .file-cta, .file.is-danger.is-hovered .file-cta {\n  background-color: #f03a5f;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-danger:focus .file-cta, .file.is-danger.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(241, 70, 104, 0.25);\n  color: #fff;\n}\n.file.is-danger:active .file-cta, .file.is-danger.is-active .file-cta {\n  background-color: #ef2e55;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-small {\n  font-size: 0.75rem;\n}\n.file.is-normal {\n  font-size: 1rem;\n}\n.file.is-medium {\n  font-size: 1.25rem;\n}\n.file.is-medium .file-icon .fa {\n  font-size: 21px;\n}\n.file.is-large {\n  font-size: 1.5rem;\n}\n.file.is-large .file-icon .fa {\n  font-size: 28px;\n}\n.file.has-name .file-cta {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.file.has-name .file-name {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.file.has-name.is-empty .file-cta {\n  border-radius: 4px;\n}\n.file.has-name.is-empty .file-name {\n  display: none;\n}\n.file.is-boxed .file-label {\n  flex-direction: column;\n}\n.file.is-boxed .file-cta {\n  flex-direction: column;\n  height: auto;\n  padding: 1em 3em;\n}\n.file.is-boxed .file-name {\n  border-width: 0 1px 1px;\n}\n.file.is-boxed .file-icon {\n  height: 1.5em;\n  width: 1.5em;\n}\n.file.is-boxed .file-icon .fa {\n  font-size: 21px;\n}\n.file.is-boxed.is-small .file-icon .fa {\n  font-size: 14px;\n}\n.file.is-boxed.is-medium .file-icon .fa {\n  font-size: 28px;\n}\n.file.is-boxed.is-large .file-icon .fa {\n  font-size: 35px;\n}\n.file.is-boxed.has-name .file-cta {\n  border-radius: 4px 4px 0 0;\n}\n.file.is-boxed.has-name .file-name {\n  border-radius: 0 0 4px 4px;\n  border-width: 0 1px 1px;\n}\n.file.is-centered {\n  justify-content: center;\n}\n.file.is-fullwidth .file-label {\n  width: 100%;\n}\n.file.is-fullwidth .file-name {\n  flex-grow: 1;\n  max-width: none;\n}\n.file.is-right {\n  justify-content: flex-end;\n}\n.file.is-right .file-cta {\n  border-radius: 0 4px 4px 0;\n}\n.file.is-right .file-name {\n  border-radius: 4px 0 0 4px;\n  border-width: 1px 0 1px 1px;\n  order: -1;\n}\n\n.file-label {\n  align-items: stretch;\n  display: flex;\n  cursor: pointer;\n  justify-content: flex-start;\n  overflow: hidden;\n  position: relative;\n}\n.file-label:hover .file-cta {\n  background-color: #eeeeee;\n  color: hsl(0, 0%, 21%);\n}\n.file-label:hover .file-name {\n  border-color: #d5d5d5;\n}\n.file-label:active .file-cta {\n  background-color: #e8e8e8;\n  color: hsl(0, 0%, 21%);\n}\n.file-label:active .file-name {\n  border-color: #cfcfcf;\n}\n\n.file-input {\n  height: 100%;\n  left: 0;\n  opacity: 0;\n  outline: none;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n\n.file-cta,\n.file-name {\n  border-color: hsl(0, 0%, 86%);\n  border-radius: 4px;\n  font-size: 1em;\n  padding-left: 1em;\n  padding-right: 1em;\n  white-space: nowrap;\n}\n\n.file-cta {\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 29%);\n}\n\n.file-name {\n  border-color: hsl(0, 0%, 86%);\n  border-style: solid;\n  border-width: 1px 1px 1px 0;\n  display: block;\n  max-width: 16em;\n  overflow: hidden;\n  text-align: inherit;\n  text-overflow: ellipsis;\n}\n\n.file-icon {\n  align-items: center;\n  display: flex;\n  height: 1em;\n  justify-content: center;\n  margin-right: 0.5em;\n  width: 1em;\n}\n.file-icon .fa {\n  font-size: 14px;\n}\n\n.label {\n  color: hsl(0, 0%, 21%);\n  display: block;\n  font-size: 1rem;\n  font-weight: 700;\n}\n.label:not(:last-child) {\n  margin-bottom: 0.5em;\n}\n.label.is-small {\n  font-size: 0.75rem;\n}\n.label.is-medium {\n  font-size: 1.25rem;\n}\n.label.is-large {\n  font-size: 1.5rem;\n}\n\n.help {\n  display: block;\n  font-size: 0.75rem;\n  margin-top: 0.25rem;\n}\n.help.is-white {\n  color: hsl(0, 0%, 100%);\n}\n.help.is-black {\n  color: hsl(0, 0%, 4%);\n}\n.help.is-light {\n  color: hsl(0, 0%, 96%);\n}\n.help.is-dark {\n  color: hsl(0, 0%, 21%);\n}\n.help.is-primary {\n  color: hsl(171, 100%, 41%);\n}\n.help.is-link {\n  color: hsl(229, 53%, 53%);\n}\n.help.is-info {\n  color: hsl(207, 61%, 53%);\n}\n.help.is-success {\n  color: hsl(153, 53%, 53%);\n}\n.help.is-warning {\n  color: hsl(44, 100%, 77%);\n}\n.help.is-danger {\n  color: hsl(348, 86%, 61%);\n}\n\n.field:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n.field.has-addons {\n  display: flex;\n  justify-content: flex-start;\n}\n.field.has-addons .control:not(:last-child) {\n  margin-right: -1px;\n}\n.field.has-addons .control:not(:first-child):not(:last-child) .button,\n.field.has-addons .control:not(:first-child):not(:last-child) .input,\n.field.has-addons .control:not(:first-child):not(:last-child) .select select {\n  border-radius: 0;\n}\n.field.has-addons .control:first-child:not(:only-child) .button,\n.field.has-addons .control:first-child:not(:only-child) .input,\n.field.has-addons .control:first-child:not(:only-child) .select select {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.field.has-addons .control:last-child:not(:only-child) .button,\n.field.has-addons .control:last-child:not(:only-child) .input,\n.field.has-addons .control:last-child:not(:only-child) .select select {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.field.has-addons .control .button:not([disabled]):hover, .field.has-addons .control .button:not([disabled]).is-hovered,\n.field.has-addons .control .input:not([disabled]):hover,\n.field.has-addons .control .input:not([disabled]).is-hovered,\n.field.has-addons .control .select select:not([disabled]):hover,\n.field.has-addons .control .select select:not([disabled]).is-hovered {\n  z-index: 2;\n}\n.field.has-addons .control .button:not([disabled]):focus, .field.has-addons .control .button:not([disabled]).is-focused, .field.has-addons .control .button:not([disabled]):active, .field.has-addons .control .button:not([disabled]).is-active,\n.field.has-addons .control .input:not([disabled]):focus,\n.field.has-addons .control .input:not([disabled]).is-focused,\n.field.has-addons .control .input:not([disabled]):active,\n.field.has-addons .control .input:not([disabled]).is-active,\n.field.has-addons .control .select select:not([disabled]):focus,\n.field.has-addons .control .select select:not([disabled]).is-focused,\n.field.has-addons .control .select select:not([disabled]):active,\n.field.has-addons .control .select select:not([disabled]).is-active {\n  z-index: 3;\n}\n.field.has-addons .control .button:not([disabled]):focus:hover, .field.has-addons .control .button:not([disabled]).is-focused:hover, .field.has-addons .control .button:not([disabled]):active:hover, .field.has-addons .control .button:not([disabled]).is-active:hover,\n.field.has-addons .control .input:not([disabled]):focus:hover,\n.field.has-addons .control .input:not([disabled]).is-focused:hover,\n.field.has-addons .control .input:not([disabled]):active:hover,\n.field.has-addons .control .input:not([disabled]).is-active:hover,\n.field.has-addons .control .select select:not([disabled]):focus:hover,\n.field.has-addons .control .select select:not([disabled]).is-focused:hover,\n.field.has-addons .control .select select:not([disabled]):active:hover,\n.field.has-addons .control .select select:not([disabled]).is-active:hover {\n  z-index: 4;\n}\n.field.has-addons .control.is-expanded {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.field.has-addons.has-addons-centered {\n  justify-content: center;\n}\n.field.has-addons.has-addons-right {\n  justify-content: flex-end;\n}\n.field.has-addons.has-addons-fullwidth .control {\n  flex-grow: 1;\n  flex-shrink: 0;\n}\n.field.is-grouped {\n  display: flex;\n  justify-content: flex-start;\n}\n.field.is-grouped > .control {\n  flex-shrink: 0;\n}\n.field.is-grouped > .control:not(:last-child) {\n  margin-bottom: 0;\n  margin-right: 0.75rem;\n}\n.field.is-grouped > .control.is-expanded {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.field.is-grouped.is-grouped-centered {\n  justify-content: center;\n}\n.field.is-grouped.is-grouped-right {\n  justify-content: flex-end;\n}\n.field.is-grouped.is-grouped-multiline {\n  flex-wrap: wrap;\n}\n.field.is-grouped.is-grouped-multiline > .control:last-child, .field.is-grouped.is-grouped-multiline > .control:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n.field.is-grouped.is-grouped-multiline:last-child {\n  margin-bottom: -0.75rem;\n}\n.field.is-grouped.is-grouped-multiline:not(:last-child) {\n  margin-bottom: 0;\n}\n@media screen and (min-width: 769px), print {\n  .field.is-horizontal {\n    display: flex;\n  }\n}\n\n.field-label .label {\n  font-size: inherit;\n}\n@media screen and (max-width: 768px) {\n  .field-label {\n    margin-bottom: 0.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .field-label {\n    flex-basis: 0;\n    flex-grow: 1;\n    flex-shrink: 0;\n    margin-right: 1.5rem;\n    text-align: right;\n  }\n  .field-label.is-small {\n    font-size: 0.75rem;\n    padding-top: 0.375em;\n  }\n  .field-label.is-normal {\n    padding-top: 0.375em;\n  }\n  .field-label.is-medium {\n    font-size: 1.25rem;\n    padding-top: 0.375em;\n  }\n  .field-label.is-large {\n    font-size: 1.5rem;\n    padding-top: 0.375em;\n  }\n}\n\n.field-body .field .field {\n  margin-bottom: 0;\n}\n@media screen and (min-width: 769px), print {\n  .field-body {\n    display: flex;\n    flex-basis: 0;\n    flex-grow: 5;\n    flex-shrink: 1;\n  }\n  .field-body .field {\n    margin-bottom: 0;\n  }\n  .field-body > .field {\n    flex-shrink: 1;\n  }\n  .field-body > .field:not(.is-narrow) {\n    flex-grow: 1;\n  }\n  .field-body > .field:not(:last-child) {\n    margin-right: 0.75rem;\n  }\n}\n\n.control {\n  box-sizing: border-box;\n  clear: both;\n  font-size: 1rem;\n  position: relative;\n  text-align: inherit;\n}\n.control.has-icons-left .input:focus ~ .icon,\n.control.has-icons-left .select:focus ~ .icon, .control.has-icons-right .input:focus ~ .icon,\n.control.has-icons-right .select:focus ~ .icon {\n  color: hsl(0, 0%, 29%);\n}\n.control.has-icons-left .input.is-small ~ .icon,\n.control.has-icons-left .select.is-small ~ .icon, .control.has-icons-right .input.is-small ~ .icon,\n.control.has-icons-right .select.is-small ~ .icon {\n  font-size: 0.75rem;\n}\n.control.has-icons-left .input.is-medium ~ .icon,\n.control.has-icons-left .select.is-medium ~ .icon, .control.has-icons-right .input.is-medium ~ .icon,\n.control.has-icons-right .select.is-medium ~ .icon {\n  font-size: 1.25rem;\n}\n.control.has-icons-left .input.is-large ~ .icon,\n.control.has-icons-left .select.is-large ~ .icon, .control.has-icons-right .input.is-large ~ .icon,\n.control.has-icons-right .select.is-large ~ .icon {\n  font-size: 1.5rem;\n}\n.control.has-icons-left .icon, .control.has-icons-right .icon {\n  color: hsl(0, 0%, 86%);\n  height: 2.5em;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  width: 2.5em;\n  z-index: 4;\n}\n.control.has-icons-left .input,\n.control.has-icons-left .select select {\n  padding-left: 2.5em;\n}\n.control.has-icons-left .icon.is-left {\n  left: 0;\n}\n.control.has-icons-right .input,\n.control.has-icons-right .select select {\n  padding-right: 2.5em;\n}\n.control.has-icons-right .icon.is-right {\n  right: 0;\n}\n.control.is-loading::after {\n  position: absolute !important;\n  right: 0.625em;\n  top: 0.625em;\n  z-index: 4;\n}\n.control.is-loading.is-small:after {\n  font-size: 0.75rem;\n}\n.control.is-loading.is-medium:after {\n  font-size: 1.25rem;\n}\n.control.is-loading.is-large:after {\n  font-size: 1.5rem;\n}\n\n/* Bulma Components */\n.breadcrumb {\n  font-size: 1rem;\n  white-space: nowrap;\n}\n.breadcrumb a {\n  align-items: center;\n  color: hsl(229, 53%, 53%);\n  display: flex;\n  justify-content: center;\n  padding: 0 0.75em;\n}\n.breadcrumb a:hover {\n  color: hsl(0, 0%, 21%);\n}\n.breadcrumb li {\n  align-items: center;\n  display: flex;\n}\n.breadcrumb li:first-child a {\n  padding-left: 0;\n}\n.breadcrumb li.is-active a {\n  color: hsl(0, 0%, 21%);\n  cursor: default;\n  pointer-events: none;\n}\n.breadcrumb li + li::before {\n  color: hsl(0, 0%, 71%);\n  content: \"/\";\n}\n.breadcrumb ul,\n.breadcrumb ol {\n  align-items: flex-start;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n.breadcrumb .icon:first-child {\n  margin-right: 0.5em;\n}\n.breadcrumb .icon:last-child {\n  margin-left: 0.5em;\n}\n.breadcrumb.is-centered ol,\n.breadcrumb.is-centered ul {\n  justify-content: center;\n}\n.breadcrumb.is-right ol,\n.breadcrumb.is-right ul {\n  justify-content: flex-end;\n}\n.breadcrumb.is-small {\n  font-size: 0.75rem;\n}\n.breadcrumb.is-medium {\n  font-size: 1.25rem;\n}\n.breadcrumb.is-large {\n  font-size: 1.5rem;\n}\n.breadcrumb.has-arrow-separator li + li::before {\n  content: \"→\";\n}\n.breadcrumb.has-bullet-separator li + li::before {\n  content: \"•\";\n}\n.breadcrumb.has-dot-separator li + li::before {\n  content: \"·\";\n}\n.breadcrumb.has-succeeds-separator li + li::before {\n  content: \"≻\";\n}\n\n.card {\n  background-color: hsl(0, 0%, 100%);\n  border-radius: 0.25rem;\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\n  color: hsl(0, 0%, 29%);\n  max-width: 100%;\n  position: relative;\n}\n\n.card-footer:first-child, .card-content:first-child, .card-header:first-child {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n.card-footer:last-child, .card-content:last-child, .card-header:last-child {\n  border-bottom-left-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n}\n\n.card-header {\n  background-color: transparent;\n  align-items: stretch;\n  box-shadow: 0 0.125em 0.25em rgba(10, 10, 10, 0.1);\n  display: flex;\n}\n\n.card-header-title {\n  align-items: center;\n  color: hsl(0, 0%, 21%);\n  display: flex;\n  flex-grow: 1;\n  font-weight: 700;\n  padding: 0.75rem 1rem;\n}\n.card-header-title.is-centered {\n  justify-content: center;\n}\n\n.card-header-icon {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n  background: none;\n  border: none;\n  color: currentColor;\n  font-family: inherit;\n  font-size: 1em;\n  margin: 0;\n  padding: 0;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  padding: 0.75rem 1rem;\n}\n\n.card-image {\n  display: block;\n  position: relative;\n}\n.card-image:first-child img {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n.card-image:last-child img {\n  border-bottom-left-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n}\n\n.card-content {\n  background-color: transparent;\n  padding: 1.5rem;\n}\n\n.card-footer {\n  background-color: transparent;\n  border-top: 1px solid hsl(0, 0%, 93%);\n  align-items: stretch;\n  display: flex;\n}\n\n.card-footer-item {\n  align-items: center;\n  display: flex;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 0;\n  justify-content: center;\n  padding: 0.75rem;\n}\n.card-footer-item:not(:last-child) {\n  border-right: 1px solid hsl(0, 0%, 93%);\n}\n\n.card .media:not(:last-child) {\n  margin-bottom: 1.5rem;\n}\n\n.dropdown {\n  display: inline-flex;\n  position: relative;\n  vertical-align: top;\n}\n.dropdown.is-active .dropdown-menu, .dropdown.is-hoverable:hover .dropdown-menu {\n  display: block;\n}\n.dropdown.is-right .dropdown-menu {\n  left: auto;\n  right: 0;\n}\n.dropdown.is-up .dropdown-menu {\n  bottom: 100%;\n  padding-bottom: 4px;\n  padding-top: initial;\n  top: auto;\n}\n\n.dropdown-menu {\n  display: none;\n  left: 0;\n  min-width: 12rem;\n  padding-top: 4px;\n  position: absolute;\n  top: 100%;\n  z-index: 20;\n}\n\n.dropdown-content {\n  background-color: hsl(0, 0%, 100%);\n  border-radius: 4px;\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\n  padding-bottom: 0.5rem;\n  padding-top: 0.5rem;\n}\n\n.dropdown-item {\n  color: hsl(0, 0%, 29%);\n  display: block;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  padding: 0.375rem 1rem;\n  position: relative;\n}\n\na.dropdown-item,\nbutton.dropdown-item {\n  padding-right: 3rem;\n  text-align: inherit;\n  white-space: nowrap;\n  width: 100%;\n}\na.dropdown-item:hover,\nbutton.dropdown-item:hover {\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 4%);\n}\na.dropdown-item.is-active,\nbutton.dropdown-item.is-active {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n\n.dropdown-divider {\n  background-color: hsl(0, 0%, 93%);\n  border: none;\n  display: block;\n  height: 1px;\n  margin: 0.5rem 0;\n}\n\n.level {\n  align-items: center;\n  justify-content: space-between;\n}\n.level code {\n  border-radius: 4px;\n}\n.level img {\n  display: inline-block;\n  vertical-align: top;\n}\n.level.is-mobile {\n  display: flex;\n}\n.level.is-mobile .level-left,\n.level.is-mobile .level-right {\n  display: flex;\n}\n.level.is-mobile .level-left + .level-right {\n  margin-top: 0;\n}\n.level.is-mobile .level-item:not(:last-child) {\n  margin-bottom: 0;\n  margin-right: 0.75rem;\n}\n.level.is-mobile .level-item:not(.is-narrow) {\n  flex-grow: 1;\n}\n@media screen and (min-width: 769px), print {\n  .level {\n    display: flex;\n  }\n  .level > .level-item:not(.is-narrow) {\n    flex-grow: 1;\n  }\n}\n\n.level-item {\n  align-items: center;\n  display: flex;\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0;\n  justify-content: center;\n}\n.level-item .title,\n.level-item .subtitle {\n  margin-bottom: 0;\n}\n@media screen and (max-width: 768px) {\n  .level-item:not(:last-child) {\n    margin-bottom: 0.75rem;\n  }\n}\n\n.level-left,\n.level-right {\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n.level-left .level-item.is-flexible,\n.level-right .level-item.is-flexible {\n  flex-grow: 1;\n}\n@media screen and (min-width: 769px), print {\n  .level-left .level-item:not(:last-child),\n  .level-right .level-item:not(:last-child) {\n    margin-right: 0.75rem;\n  }\n}\n\n.level-left {\n  align-items: center;\n  justify-content: flex-start;\n}\n@media screen and (max-width: 768px) {\n  .level-left + .level-right {\n    margin-top: 1.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .level-left {\n    display: flex;\n  }\n}\n\n.level-right {\n  align-items: center;\n  justify-content: flex-end;\n}\n@media screen and (min-width: 769px), print {\n  .level-right {\n    display: flex;\n  }\n}\n\n.media {\n  align-items: flex-start;\n  display: flex;\n  text-align: inherit;\n}\n.media .content:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n.media .media {\n  border-top: 1px solid rgba(219, 219, 219, 0.5);\n  display: flex;\n  padding-top: 0.75rem;\n}\n.media .media .content:not(:last-child),\n.media .media .control:not(:last-child) {\n  margin-bottom: 0.5rem;\n}\n.media .media .media {\n  padding-top: 0.5rem;\n}\n.media .media .media + .media {\n  margin-top: 0.5rem;\n}\n.media + .media {\n  border-top: 1px solid rgba(219, 219, 219, 0.5);\n  margin-top: 1rem;\n  padding-top: 1rem;\n}\n.media.is-large + .media {\n  margin-top: 1.5rem;\n  padding-top: 1.5rem;\n}\n\n.media-left,\n.media-right {\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n\n.media-left {\n  margin-right: 1rem;\n}\n\n.media-right {\n  margin-left: 1rem;\n}\n\n.media-content {\n  flex-basis: auto;\n  flex-grow: 1;\n  flex-shrink: 1;\n  text-align: inherit;\n}\n\n@media screen and (max-width: 768px) {\n  .media-content {\n    overflow-x: auto;\n  }\n}\n.menu {\n  font-size: 1rem;\n}\n.menu.is-small {\n  font-size: 0.75rem;\n}\n.menu.is-medium {\n  font-size: 1.25rem;\n}\n.menu.is-large {\n  font-size: 1.5rem;\n}\n\n.menu-list {\n  line-height: 1.25;\n}\n.menu-list a {\n  border-radius: 2px;\n  color: hsl(0, 0%, 29%);\n  display: block;\n  padding: 0.5em 0.75em;\n}\n.menu-list a:hover {\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 21%);\n}\n.menu-list a.is-active {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.menu-list li ul {\n  border-left: 1px solid hsl(0, 0%, 86%);\n  margin: 0.75em;\n  padding-left: 0.75em;\n}\n\n.menu-label {\n  color: hsl(0, 0%, 48%);\n  font-size: 0.75em;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n}\n.menu-label:not(:first-child) {\n  margin-top: 1em;\n}\n.menu-label:not(:last-child) {\n  margin-bottom: 1em;\n}\n\n.message {\n  background-color: hsl(0, 0%, 96%);\n  border-radius: 4px;\n  font-size: 1rem;\n}\n.message strong {\n  color: currentColor;\n}\n.message a:not(.button):not(.tag):not(.dropdown-item) {\n  color: currentColor;\n  text-decoration: underline;\n}\n.message.is-small {\n  font-size: 0.75rem;\n}\n.message.is-medium {\n  font-size: 1.25rem;\n}\n.message.is-large {\n  font-size: 1.5rem;\n}\n.message.is-white {\n  background-color: white;\n}\n.message.is-white .message-header {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.message.is-white .message-body {\n  border-color: hsl(0, 0%, 100%);\n}\n.message.is-black {\n  background-color: #fafafa;\n}\n.message.is-black .message-header {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.message.is-black .message-body {\n  border-color: hsl(0, 0%, 4%);\n}\n.message.is-light {\n  background-color: #fafafa;\n}\n.message.is-light .message-header {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.message.is-light .message-body {\n  border-color: hsl(0, 0%, 96%);\n}\n.message.is-dark {\n  background-color: #fafafa;\n}\n.message.is-dark .message-header {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.message.is-dark .message-body {\n  border-color: hsl(0, 0%, 21%);\n}\n.message.is-primary {\n  background-color: #ebfffc;\n}\n.message.is-primary .message-header {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.message.is-primary .message-body {\n  border-color: hsl(171, 100%, 41%);\n  color: #00947e;\n}\n.message.is-link {\n  background-color: #eff1fa;\n}\n.message.is-link .message-header {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.message.is-link .message-body {\n  border-color: hsl(229, 53%, 53%);\n  color: #3850b7;\n}\n.message.is-info {\n  background-color: #eff5fb;\n}\n.message.is-info .message-header {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.message.is-info .message-body {\n  border-color: hsl(207, 61%, 53%);\n  color: #296fa8;\n}\n.message.is-success {\n  background-color: #effaf5;\n}\n.message.is-success .message-header {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.message.is-success .message-body {\n  border-color: hsl(153, 53%, 53%);\n  color: #257953;\n}\n.message.is-warning {\n  background-color: #fffaeb;\n}\n.message.is-warning .message-header {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.message.is-warning .message-body {\n  border-color: hsl(44, 100%, 77%);\n  color: #946c00;\n}\n.message.is-danger {\n  background-color: #feecf0;\n}\n.message.is-danger .message-header {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.message.is-danger .message-body {\n  border-color: hsl(348, 86%, 61%);\n  color: #cc0f35;\n}\n\n.message-header {\n  align-items: center;\n  background-color: hsl(0, 0%, 29%);\n  border-radius: 4px 4px 0 0;\n  color: #fff;\n  display: flex;\n  font-weight: 700;\n  justify-content: space-between;\n  line-height: 1.25;\n  padding: 0.75em 1em;\n  position: relative;\n}\n.message-header .delete {\n  flex-grow: 0;\n  flex-shrink: 0;\n  margin-left: 0.75em;\n}\n.message-header + .message-body {\n  border-width: 0;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.message-body {\n  border-color: hsl(0, 0%, 86%);\n  border-radius: 4px;\n  border-style: solid;\n  border-width: 0 0 0 4px;\n  color: hsl(0, 0%, 29%);\n  padding: 1.25em 1.5em;\n}\n.message-body code,\n.message-body pre {\n  background-color: hsl(0, 0%, 100%);\n}\n.message-body pre code {\n  background-color: transparent;\n}\n\n.modal {\n  align-items: center;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  overflow: hidden;\n  position: fixed;\n  z-index: 40;\n}\n.modal.is-active {\n  display: flex;\n}\n\n.modal-background {\n  background-color: rgba(10, 10, 10, 0.86);\n}\n\n.modal-content,\n.modal-card {\n  margin: 0 20px;\n  max-height: calc(100vh - 160px);\n  overflow: auto;\n  position: relative;\n  width: 100%;\n}\n@media screen and (min-width: 769px) {\n  .modal-content,\n  .modal-card {\n    margin: 0 auto;\n    max-height: calc(100vh - 40px);\n    width: 640px;\n  }\n}\n\n.modal-close {\n  background: none;\n  height: 40px;\n  position: fixed;\n  right: 20px;\n  top: 20px;\n  width: 40px;\n}\n\n.modal-card {\n  display: flex;\n  flex-direction: column;\n  max-height: calc(100vh - 40px);\n  overflow: hidden;\n  -ms-overflow-y: visible;\n}\n\n.modal-card-head,\n.modal-card-foot {\n  align-items: center;\n  background-color: hsl(0, 0%, 96%);\n  display: flex;\n  flex-shrink: 0;\n  justify-content: flex-start;\n  padding: 20px;\n  position: relative;\n}\n\n.modal-card-head {\n  border-bottom: 1px solid hsl(0, 0%, 86%);\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n}\n\n.modal-card-title {\n  color: hsl(0, 0%, 21%);\n  flex-grow: 1;\n  flex-shrink: 0;\n  font-size: 1.5rem;\n  line-height: 1;\n}\n\n.modal-card-foot {\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  border-top: 1px solid hsl(0, 0%, 86%);\n}\n.modal-card-foot .button:not(:last-child) {\n  margin-right: 0.5em;\n}\n\n.modal-card-body {\n  -webkit-overflow-scrolling: touch;\n  background-color: hsl(0, 0%, 100%);\n  flex-grow: 1;\n  flex-shrink: 1;\n  overflow: auto;\n  padding: 20px;\n}\n\n.navbar {\n  background-color: hsl(0, 0%, 100%);\n  min-height: 3.25rem;\n  position: relative;\n  z-index: 30;\n}\n.navbar.is-white {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.navbar.is-white .navbar-brand > .navbar-item,\n.navbar.is-white .navbar-brand .navbar-link {\n  color: hsl(0, 0%, 4%);\n}\n.navbar.is-white .navbar-brand > a.navbar-item:focus, .navbar.is-white .navbar-brand > a.navbar-item:hover, .navbar.is-white .navbar-brand > a.navbar-item.is-active,\n.navbar.is-white .navbar-brand .navbar-link:focus,\n.navbar.is-white .navbar-brand .navbar-link:hover,\n.navbar.is-white .navbar-brand .navbar-link.is-active {\n  background-color: #f2f2f2;\n  color: hsl(0, 0%, 4%);\n}\n.navbar.is-white .navbar-brand .navbar-link::after {\n  border-color: hsl(0, 0%, 4%);\n}\n.navbar.is-white .navbar-burger {\n  color: hsl(0, 0%, 4%);\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-white .navbar-start > .navbar-item,\n  .navbar.is-white .navbar-start .navbar-link,\n  .navbar.is-white .navbar-end > .navbar-item,\n  .navbar.is-white .navbar-end .navbar-link {\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-white .navbar-start > a.navbar-item:focus, .navbar.is-white .navbar-start > a.navbar-item:hover, .navbar.is-white .navbar-start > a.navbar-item.is-active,\n  .navbar.is-white .navbar-start .navbar-link:focus,\n  .navbar.is-white .navbar-start .navbar-link:hover,\n  .navbar.is-white .navbar-start .navbar-link.is-active,\n  .navbar.is-white .navbar-end > a.navbar-item:focus,\n  .navbar.is-white .navbar-end > a.navbar-item:hover,\n  .navbar.is-white .navbar-end > a.navbar-item.is-active,\n  .navbar.is-white .navbar-end .navbar-link:focus,\n  .navbar.is-white .navbar-end .navbar-link:hover,\n  .navbar.is-white .navbar-end .navbar-link.is-active {\n    background-color: #f2f2f2;\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-white .navbar-start .navbar-link::after,\n  .navbar.is-white .navbar-end .navbar-link::after {\n    border-color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-white .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-white .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-white .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #f2f2f2;\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-white .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 100%);\n    color: hsl(0, 0%, 4%);\n  }\n}\n.navbar.is-black {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.navbar.is-black .navbar-brand > .navbar-item,\n.navbar.is-black .navbar-brand .navbar-link {\n  color: hsl(0, 0%, 100%);\n}\n.navbar.is-black .navbar-brand > a.navbar-item:focus, .navbar.is-black .navbar-brand > a.navbar-item:hover, .navbar.is-black .navbar-brand > a.navbar-item.is-active,\n.navbar.is-black .navbar-brand .navbar-link:focus,\n.navbar.is-black .navbar-brand .navbar-link:hover,\n.navbar.is-black .navbar-brand .navbar-link.is-active {\n  background-color: black;\n  color: hsl(0, 0%, 100%);\n}\n.navbar.is-black .navbar-brand .navbar-link::after {\n  border-color: hsl(0, 0%, 100%);\n}\n.navbar.is-black .navbar-burger {\n  color: hsl(0, 0%, 100%);\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-black .navbar-start > .navbar-item,\n  .navbar.is-black .navbar-start .navbar-link,\n  .navbar.is-black .navbar-end > .navbar-item,\n  .navbar.is-black .navbar-end .navbar-link {\n    color: hsl(0, 0%, 100%);\n  }\n  .navbar.is-black .navbar-start > a.navbar-item:focus, .navbar.is-black .navbar-start > a.navbar-item:hover, .navbar.is-black .navbar-start > a.navbar-item.is-active,\n  .navbar.is-black .navbar-start .navbar-link:focus,\n  .navbar.is-black .navbar-start .navbar-link:hover,\n  .navbar.is-black .navbar-start .navbar-link.is-active,\n  .navbar.is-black .navbar-end > a.navbar-item:focus,\n  .navbar.is-black .navbar-end > a.navbar-item:hover,\n  .navbar.is-black .navbar-end > a.navbar-item.is-active,\n  .navbar.is-black .navbar-end .navbar-link:focus,\n  .navbar.is-black .navbar-end .navbar-link:hover,\n  .navbar.is-black .navbar-end .navbar-link.is-active {\n    background-color: black;\n    color: hsl(0, 0%, 100%);\n  }\n  .navbar.is-black .navbar-start .navbar-link::after,\n  .navbar.is-black .navbar-end .navbar-link::after {\n    border-color: hsl(0, 0%, 100%);\n  }\n  .navbar.is-black .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-black .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-black .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: black;\n    color: hsl(0, 0%, 100%);\n  }\n  .navbar.is-black .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 4%);\n    color: hsl(0, 0%, 100%);\n  }\n}\n.navbar.is-light {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-light .navbar-brand > .navbar-item,\n.navbar.is-light .navbar-brand .navbar-link {\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-light .navbar-brand > a.navbar-item:focus, .navbar.is-light .navbar-brand > a.navbar-item:hover, .navbar.is-light .navbar-brand > a.navbar-item.is-active,\n.navbar.is-light .navbar-brand .navbar-link:focus,\n.navbar.is-light .navbar-brand .navbar-link:hover,\n.navbar.is-light .navbar-brand .navbar-link.is-active {\n  background-color: #e8e8e8;\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-light .navbar-brand .navbar-link::after {\n  border-color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-light .navbar-burger {\n  color: rgba(0, 0, 0, 0.7);\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-light .navbar-start > .navbar-item,\n  .navbar.is-light .navbar-start .navbar-link,\n  .navbar.is-light .navbar-end > .navbar-item,\n  .navbar.is-light .navbar-end .navbar-link {\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-light .navbar-start > a.navbar-item:focus, .navbar.is-light .navbar-start > a.navbar-item:hover, .navbar.is-light .navbar-start > a.navbar-item.is-active,\n  .navbar.is-light .navbar-start .navbar-link:focus,\n  .navbar.is-light .navbar-start .navbar-link:hover,\n  .navbar.is-light .navbar-start .navbar-link.is-active,\n  .navbar.is-light .navbar-end > a.navbar-item:focus,\n  .navbar.is-light .navbar-end > a.navbar-item:hover,\n  .navbar.is-light .navbar-end > a.navbar-item.is-active,\n  .navbar.is-light .navbar-end .navbar-link:focus,\n  .navbar.is-light .navbar-end .navbar-link:hover,\n  .navbar.is-light .navbar-end .navbar-link.is-active {\n    background-color: #e8e8e8;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-light .navbar-start .navbar-link::after,\n  .navbar.is-light .navbar-end .navbar-link::after {\n    border-color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-light .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-light .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-light .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #e8e8e8;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-light .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 96%);\n    color: rgba(0, 0, 0, 0.7);\n  }\n}\n.navbar.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.navbar.is-dark .navbar-brand > .navbar-item,\n.navbar.is-dark .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-dark .navbar-brand > a.navbar-item:focus, .navbar.is-dark .navbar-brand > a.navbar-item:hover, .navbar.is-dark .navbar-brand > a.navbar-item.is-active,\n.navbar.is-dark .navbar-brand .navbar-link:focus,\n.navbar.is-dark .navbar-brand .navbar-link:hover,\n.navbar.is-dark .navbar-brand .navbar-link.is-active {\n  background-color: #292929;\n  color: #fff;\n}\n.navbar.is-dark .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-dark .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-dark .navbar-start > .navbar-item,\n  .navbar.is-dark .navbar-start .navbar-link,\n  .navbar.is-dark .navbar-end > .navbar-item,\n  .navbar.is-dark .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-dark .navbar-start > a.navbar-item:focus, .navbar.is-dark .navbar-start > a.navbar-item:hover, .navbar.is-dark .navbar-start > a.navbar-item.is-active,\n  .navbar.is-dark .navbar-start .navbar-link:focus,\n  .navbar.is-dark .navbar-start .navbar-link:hover,\n  .navbar.is-dark .navbar-start .navbar-link.is-active,\n  .navbar.is-dark .navbar-end > a.navbar-item:focus,\n  .navbar.is-dark .navbar-end > a.navbar-item:hover,\n  .navbar.is-dark .navbar-end > a.navbar-item.is-active,\n  .navbar.is-dark .navbar-end .navbar-link:focus,\n  .navbar.is-dark .navbar-end .navbar-link:hover,\n  .navbar.is-dark .navbar-end .navbar-link.is-active {\n    background-color: #292929;\n    color: #fff;\n  }\n  .navbar.is-dark .navbar-start .navbar-link::after,\n  .navbar.is-dark .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-dark .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-dark .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-dark .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #292929;\n    color: #fff;\n  }\n  .navbar.is-dark .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 21%);\n    color: #fff;\n  }\n}\n.navbar.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.navbar.is-primary .navbar-brand > .navbar-item,\n.navbar.is-primary .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-primary .navbar-brand > a.navbar-item:focus, .navbar.is-primary .navbar-brand > a.navbar-item:hover, .navbar.is-primary .navbar-brand > a.navbar-item.is-active,\n.navbar.is-primary .navbar-brand .navbar-link:focus,\n.navbar.is-primary .navbar-brand .navbar-link:hover,\n.navbar.is-primary .navbar-brand .navbar-link.is-active {\n  background-color: #00b89c;\n  color: #fff;\n}\n.navbar.is-primary .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-primary .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-primary .navbar-start > .navbar-item,\n  .navbar.is-primary .navbar-start .navbar-link,\n  .navbar.is-primary .navbar-end > .navbar-item,\n  .navbar.is-primary .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-primary .navbar-start > a.navbar-item:focus, .navbar.is-primary .navbar-start > a.navbar-item:hover, .navbar.is-primary .navbar-start > a.navbar-item.is-active,\n  .navbar.is-primary .navbar-start .navbar-link:focus,\n  .navbar.is-primary .navbar-start .navbar-link:hover,\n  .navbar.is-primary .navbar-start .navbar-link.is-active,\n  .navbar.is-primary .navbar-end > a.navbar-item:focus,\n  .navbar.is-primary .navbar-end > a.navbar-item:hover,\n  .navbar.is-primary .navbar-end > a.navbar-item.is-active,\n  .navbar.is-primary .navbar-end .navbar-link:focus,\n  .navbar.is-primary .navbar-end .navbar-link:hover,\n  .navbar.is-primary .navbar-end .navbar-link.is-active {\n    background-color: #00b89c;\n    color: #fff;\n  }\n  .navbar.is-primary .navbar-start .navbar-link::after,\n  .navbar.is-primary .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-primary .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-primary .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-primary .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #00b89c;\n    color: #fff;\n  }\n  .navbar.is-primary .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(171, 100%, 41%);\n    color: #fff;\n  }\n}\n.navbar.is-link {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.navbar.is-link .navbar-brand > .navbar-item,\n.navbar.is-link .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-link .navbar-brand > a.navbar-item:focus, .navbar.is-link .navbar-brand > a.navbar-item:hover, .navbar.is-link .navbar-brand > a.navbar-item.is-active,\n.navbar.is-link .navbar-brand .navbar-link:focus,\n.navbar.is-link .navbar-brand .navbar-link:hover,\n.navbar.is-link .navbar-brand .navbar-link.is-active {\n  background-color: #3a51bb;\n  color: #fff;\n}\n.navbar.is-link .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-link .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-link .navbar-start > .navbar-item,\n  .navbar.is-link .navbar-start .navbar-link,\n  .navbar.is-link .navbar-end > .navbar-item,\n  .navbar.is-link .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-link .navbar-start > a.navbar-item:focus, .navbar.is-link .navbar-start > a.navbar-item:hover, .navbar.is-link .navbar-start > a.navbar-item.is-active,\n  .navbar.is-link .navbar-start .navbar-link:focus,\n  .navbar.is-link .navbar-start .navbar-link:hover,\n  .navbar.is-link .navbar-start .navbar-link.is-active,\n  .navbar.is-link .navbar-end > a.navbar-item:focus,\n  .navbar.is-link .navbar-end > a.navbar-item:hover,\n  .navbar.is-link .navbar-end > a.navbar-item.is-active,\n  .navbar.is-link .navbar-end .navbar-link:focus,\n  .navbar.is-link .navbar-end .navbar-link:hover,\n  .navbar.is-link .navbar-end .navbar-link.is-active {\n    background-color: #3a51bb;\n    color: #fff;\n  }\n  .navbar.is-link .navbar-start .navbar-link::after,\n  .navbar.is-link .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-link .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-link .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-link .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #3a51bb;\n    color: #fff;\n  }\n  .navbar.is-link .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(229, 53%, 53%);\n    color: #fff;\n  }\n}\n.navbar.is-info {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.navbar.is-info .navbar-brand > .navbar-item,\n.navbar.is-info .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-info .navbar-brand > a.navbar-item:focus, .navbar.is-info .navbar-brand > a.navbar-item:hover, .navbar.is-info .navbar-brand > a.navbar-item.is-active,\n.navbar.is-info .navbar-brand .navbar-link:focus,\n.navbar.is-info .navbar-brand .navbar-link:hover,\n.navbar.is-info .navbar-brand .navbar-link.is-active {\n  background-color: #3082c5;\n  color: #fff;\n}\n.navbar.is-info .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-info .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-info .navbar-start > .navbar-item,\n  .navbar.is-info .navbar-start .navbar-link,\n  .navbar.is-info .navbar-end > .navbar-item,\n  .navbar.is-info .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-info .navbar-start > a.navbar-item:focus, .navbar.is-info .navbar-start > a.navbar-item:hover, .navbar.is-info .navbar-start > a.navbar-item.is-active,\n  .navbar.is-info .navbar-start .navbar-link:focus,\n  .navbar.is-info .navbar-start .navbar-link:hover,\n  .navbar.is-info .navbar-start .navbar-link.is-active,\n  .navbar.is-info .navbar-end > a.navbar-item:focus,\n  .navbar.is-info .navbar-end > a.navbar-item:hover,\n  .navbar.is-info .navbar-end > a.navbar-item.is-active,\n  .navbar.is-info .navbar-end .navbar-link:focus,\n  .navbar.is-info .navbar-end .navbar-link:hover,\n  .navbar.is-info .navbar-end .navbar-link.is-active {\n    background-color: #3082c5;\n    color: #fff;\n  }\n  .navbar.is-info .navbar-start .navbar-link::after,\n  .navbar.is-info .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-info .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-info .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-info .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #3082c5;\n    color: #fff;\n  }\n  .navbar.is-info .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(207, 61%, 53%);\n    color: #fff;\n  }\n}\n.navbar.is-success {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.navbar.is-success .navbar-brand > .navbar-item,\n.navbar.is-success .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-success .navbar-brand > a.navbar-item:focus, .navbar.is-success .navbar-brand > a.navbar-item:hover, .navbar.is-success .navbar-brand > a.navbar-item.is-active,\n.navbar.is-success .navbar-brand .navbar-link:focus,\n.navbar.is-success .navbar-brand .navbar-link:hover,\n.navbar.is-success .navbar-brand .navbar-link.is-active {\n  background-color: #3abb81;\n  color: #fff;\n}\n.navbar.is-success .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-success .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-success .navbar-start > .navbar-item,\n  .navbar.is-success .navbar-start .navbar-link,\n  .navbar.is-success .navbar-end > .navbar-item,\n  .navbar.is-success .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-success .navbar-start > a.navbar-item:focus, .navbar.is-success .navbar-start > a.navbar-item:hover, .navbar.is-success .navbar-start > a.navbar-item.is-active,\n  .navbar.is-success .navbar-start .navbar-link:focus,\n  .navbar.is-success .navbar-start .navbar-link:hover,\n  .navbar.is-success .navbar-start .navbar-link.is-active,\n  .navbar.is-success .navbar-end > a.navbar-item:focus,\n  .navbar.is-success .navbar-end > a.navbar-item:hover,\n  .navbar.is-success .navbar-end > a.navbar-item.is-active,\n  .navbar.is-success .navbar-end .navbar-link:focus,\n  .navbar.is-success .navbar-end .navbar-link:hover,\n  .navbar.is-success .navbar-end .navbar-link.is-active {\n    background-color: #3abb81;\n    color: #fff;\n  }\n  .navbar.is-success .navbar-start .navbar-link::after,\n  .navbar.is-success .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-success .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-success .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-success .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #3abb81;\n    color: #fff;\n  }\n  .navbar.is-success .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(153, 53%, 53%);\n    color: #fff;\n  }\n}\n.navbar.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-warning .navbar-brand > .navbar-item,\n.navbar.is-warning .navbar-brand .navbar-link {\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-warning .navbar-brand > a.navbar-item:focus, .navbar.is-warning .navbar-brand > a.navbar-item:hover, .navbar.is-warning .navbar-brand > a.navbar-item.is-active,\n.navbar.is-warning .navbar-brand .navbar-link:focus,\n.navbar.is-warning .navbar-brand .navbar-link:hover,\n.navbar.is-warning .navbar-brand .navbar-link.is-active {\n  background-color: #ffd970;\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-warning .navbar-brand .navbar-link::after {\n  border-color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-warning .navbar-burger {\n  color: rgba(0, 0, 0, 0.7);\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-warning .navbar-start > .navbar-item,\n  .navbar.is-warning .navbar-start .navbar-link,\n  .navbar.is-warning .navbar-end > .navbar-item,\n  .navbar.is-warning .navbar-end .navbar-link {\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-warning .navbar-start > a.navbar-item:focus, .navbar.is-warning .navbar-start > a.navbar-item:hover, .navbar.is-warning .navbar-start > a.navbar-item.is-active,\n  .navbar.is-warning .navbar-start .navbar-link:focus,\n  .navbar.is-warning .navbar-start .navbar-link:hover,\n  .navbar.is-warning .navbar-start .navbar-link.is-active,\n  .navbar.is-warning .navbar-end > a.navbar-item:focus,\n  .navbar.is-warning .navbar-end > a.navbar-item:hover,\n  .navbar.is-warning .navbar-end > a.navbar-item.is-active,\n  .navbar.is-warning .navbar-end .navbar-link:focus,\n  .navbar.is-warning .navbar-end .navbar-link:hover,\n  .navbar.is-warning .navbar-end .navbar-link.is-active {\n    background-color: #ffd970;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-warning .navbar-start .navbar-link::after,\n  .navbar.is-warning .navbar-end .navbar-link::after {\n    border-color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-warning .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-warning .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-warning .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #ffd970;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-warning .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(44, 100%, 77%);\n    color: rgba(0, 0, 0, 0.7);\n  }\n}\n.navbar.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.navbar.is-danger .navbar-brand > .navbar-item,\n.navbar.is-danger .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-danger .navbar-brand > a.navbar-item:focus, .navbar.is-danger .navbar-brand > a.navbar-item:hover, .navbar.is-danger .navbar-brand > a.navbar-item.is-active,\n.navbar.is-danger .navbar-brand .navbar-link:focus,\n.navbar.is-danger .navbar-brand .navbar-link:hover,\n.navbar.is-danger .navbar-brand .navbar-link.is-active {\n  background-color: #ef2e55;\n  color: #fff;\n}\n.navbar.is-danger .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-danger .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-danger .navbar-start > .navbar-item,\n  .navbar.is-danger .navbar-start .navbar-link,\n  .navbar.is-danger .navbar-end > .navbar-item,\n  .navbar.is-danger .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-danger .navbar-start > a.navbar-item:focus, .navbar.is-danger .navbar-start > a.navbar-item:hover, .navbar.is-danger .navbar-start > a.navbar-item.is-active,\n  .navbar.is-danger .navbar-start .navbar-link:focus,\n  .navbar.is-danger .navbar-start .navbar-link:hover,\n  .navbar.is-danger .navbar-start .navbar-link.is-active,\n  .navbar.is-danger .navbar-end > a.navbar-item:focus,\n  .navbar.is-danger .navbar-end > a.navbar-item:hover,\n  .navbar.is-danger .navbar-end > a.navbar-item.is-active,\n  .navbar.is-danger .navbar-end .navbar-link:focus,\n  .navbar.is-danger .navbar-end .navbar-link:hover,\n  .navbar.is-danger .navbar-end .navbar-link.is-active {\n    background-color: #ef2e55;\n    color: #fff;\n  }\n  .navbar.is-danger .navbar-start .navbar-link::after,\n  .navbar.is-danger .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-danger .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-danger .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-danger .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #ef2e55;\n    color: #fff;\n  }\n  .navbar.is-danger .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(348, 86%, 61%);\n    color: #fff;\n  }\n}\n.navbar > .container {\n  align-items: stretch;\n  display: flex;\n  min-height: 3.25rem;\n  width: 100%;\n}\n.navbar.has-shadow {\n  box-shadow: 0 2px 0 0 hsl(0, 0%, 96%);\n}\n.navbar.is-fixed-bottom, .navbar.is-fixed-top {\n  left: 0;\n  position: fixed;\n  right: 0;\n  z-index: 30;\n}\n.navbar.is-fixed-bottom {\n  bottom: 0;\n}\n.navbar.is-fixed-bottom.has-shadow {\n  box-shadow: 0 -2px 0 0 hsl(0, 0%, 96%);\n}\n.navbar.is-fixed-top {\n  top: 0;\n}\n\nhtml.has-navbar-fixed-top,\nbody.has-navbar-fixed-top {\n  padding-top: 3.25rem;\n}\nhtml.has-navbar-fixed-bottom,\nbody.has-navbar-fixed-bottom {\n  padding-bottom: 3.25rem;\n}\n\n.navbar-brand,\n.navbar-tabs {\n  align-items: stretch;\n  display: flex;\n  flex-shrink: 0;\n  min-height: 3.25rem;\n}\n\n.navbar-brand a.navbar-item:focus, .navbar-brand a.navbar-item:hover {\n  background-color: transparent;\n}\n\n.navbar-tabs {\n  -webkit-overflow-scrolling: touch;\n  max-width: 100vw;\n  overflow-x: auto;\n  overflow-y: hidden;\n}\n\n.navbar-burger {\n  color: hsl(0, 0%, 29%);\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n  background: none;\n  border: none;\n  cursor: pointer;\n  display: block;\n  height: 3.25rem;\n  position: relative;\n  width: 3.25rem;\n  margin-left: auto;\n}\n.navbar-burger span {\n  background-color: currentColor;\n  display: block;\n  height: 1px;\n  left: calc(50% - 8px);\n  position: absolute;\n  transform-origin: center;\n  transition-duration: 86ms;\n  transition-property: background-color, opacity, transform;\n  transition-timing-function: ease-out;\n  width: 16px;\n}\n.navbar-burger span:nth-child(1) {\n  top: calc(50% - 6px);\n}\n.navbar-burger span:nth-child(2) {\n  top: calc(50% - 1px);\n}\n.navbar-burger span:nth-child(3) {\n  top: calc(50% + 4px);\n}\n.navbar-burger:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n.navbar-burger.is-active span:nth-child(1) {\n  transform: translateY(5px) rotate(45deg);\n}\n.navbar-burger.is-active span:nth-child(2) {\n  opacity: 0;\n}\n.navbar-burger.is-active span:nth-child(3) {\n  transform: translateY(-5px) rotate(-45deg);\n}\n\n.navbar-menu {\n  display: none;\n}\n\n.navbar-item,\n.navbar-link {\n  color: hsl(0, 0%, 29%);\n  display: block;\n  line-height: 1.5;\n  padding: 0.5rem 0.75rem;\n  position: relative;\n}\n.navbar-item .icon:only-child,\n.navbar-link .icon:only-child {\n  margin-left: -0.25rem;\n  margin-right: -0.25rem;\n}\n\na.navbar-item,\n.navbar-link {\n  cursor: pointer;\n}\na.navbar-item:focus, a.navbar-item:focus-within, a.navbar-item:hover, a.navbar-item.is-active,\n.navbar-link:focus,\n.navbar-link:focus-within,\n.navbar-link:hover,\n.navbar-link.is-active {\n  background-color: hsl(0, 0%, 98%);\n  color: hsl(229, 53%, 53%);\n}\n\n.navbar-item {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n.navbar-item img {\n  max-height: 1.75rem;\n}\n.navbar-item.has-dropdown {\n  padding: 0;\n}\n.navbar-item.is-expanded {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.navbar-item.is-tab {\n  border-bottom: 1px solid transparent;\n  min-height: 3.25rem;\n  padding-bottom: calc(0.5rem - 1px);\n}\n.navbar-item.is-tab:focus, .navbar-item.is-tab:hover {\n  background-color: transparent;\n  border-bottom-color: hsl(229, 53%, 53%);\n}\n.navbar-item.is-tab.is-active {\n  background-color: transparent;\n  border-bottom-color: hsl(229, 53%, 53%);\n  border-bottom-style: solid;\n  border-bottom-width: 3px;\n  color: hsl(229, 53%, 53%);\n  padding-bottom: calc(0.5rem - 3px);\n}\n\n.navbar-content {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n\n.navbar-link:not(.is-arrowless) {\n  padding-right: 2.5em;\n}\n.navbar-link:not(.is-arrowless)::after {\n  border-color: hsl(229, 53%, 53%);\n  margin-top: -0.375em;\n  right: 1.125em;\n}\n\n.navbar-dropdown {\n  font-size: 0.875rem;\n  padding-bottom: 0.5rem;\n  padding-top: 0.5rem;\n}\n.navbar-dropdown .navbar-item {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n\n.navbar-divider {\n  background-color: hsl(0, 0%, 96%);\n  border: none;\n  display: none;\n  height: 2px;\n  margin: 0.5rem 0;\n}\n\n@media screen and (max-width: 1023px) {\n  .navbar > .container {\n    display: block;\n  }\n  .navbar-brand .navbar-item,\n  .navbar-tabs .navbar-item {\n    align-items: center;\n    display: flex;\n  }\n  .navbar-link::after {\n    display: none;\n  }\n  .navbar-menu {\n    background-color: hsl(0, 0%, 100%);\n    box-shadow: 0 8px 16px rgba(10, 10, 10, 0.1);\n    padding: 0.5rem 0;\n  }\n  .navbar-menu.is-active {\n    display: block;\n  }\n  .navbar.is-fixed-bottom-touch, .navbar.is-fixed-top-touch {\n    left: 0;\n    position: fixed;\n    right: 0;\n    z-index: 30;\n  }\n  .navbar.is-fixed-bottom-touch {\n    bottom: 0;\n  }\n  .navbar.is-fixed-bottom-touch.has-shadow {\n    box-shadow: 0 -2px 3px rgba(10, 10, 10, 0.1);\n  }\n  .navbar.is-fixed-top-touch {\n    top: 0;\n  }\n  .navbar.is-fixed-top .navbar-menu, .navbar.is-fixed-top-touch .navbar-menu {\n    -webkit-overflow-scrolling: touch;\n    max-height: calc(100vh - 3.25rem);\n    overflow: auto;\n  }\n  html.has-navbar-fixed-top-touch,\n  body.has-navbar-fixed-top-touch {\n    padding-top: 3.25rem;\n  }\n  html.has-navbar-fixed-bottom-touch,\n  body.has-navbar-fixed-bottom-touch {\n    padding-bottom: 3.25rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .navbar,\n  .navbar-menu,\n  .navbar-start,\n  .navbar-end {\n    align-items: stretch;\n    display: flex;\n  }\n  .navbar {\n    min-height: 3.25rem;\n  }\n  .navbar.is-spaced {\n    padding: 1rem 2rem;\n  }\n  .navbar.is-spaced .navbar-start,\n  .navbar.is-spaced .navbar-end {\n    align-items: center;\n  }\n  .navbar.is-spaced a.navbar-item,\n  .navbar.is-spaced .navbar-link {\n    border-radius: 4px;\n  }\n  .navbar.is-transparent a.navbar-item:focus, .navbar.is-transparent a.navbar-item:hover, .navbar.is-transparent a.navbar-item.is-active,\n  .navbar.is-transparent .navbar-link:focus,\n  .navbar.is-transparent .navbar-link:hover,\n  .navbar.is-transparent .navbar-link.is-active {\n    background-color: transparent !important;\n  }\n  .navbar.is-transparent .navbar-item.has-dropdown.is-active .navbar-link, .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:focus .navbar-link, .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:focus-within .navbar-link, .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:hover .navbar-link {\n    background-color: transparent !important;\n  }\n  .navbar.is-transparent .navbar-dropdown a.navbar-item:focus, .navbar.is-transparent .navbar-dropdown a.navbar-item:hover {\n    background-color: hsl(0, 0%, 96%);\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-transparent .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 96%);\n    color: hsl(229, 53%, 53%);\n  }\n  .navbar-burger {\n    display: none;\n  }\n  .navbar-item,\n  .navbar-link {\n    align-items: center;\n    display: flex;\n  }\n  .navbar-item.has-dropdown {\n    align-items: stretch;\n  }\n  .navbar-item.has-dropdown-up .navbar-link::after {\n    transform: rotate(135deg) translate(0.25em, -0.25em);\n  }\n  .navbar-item.has-dropdown-up .navbar-dropdown {\n    border-bottom: 2px solid hsl(0, 0%, 86%);\n    border-radius: 6px 6px 0 0;\n    border-top: none;\n    bottom: 100%;\n    box-shadow: 0 -8px 8px rgba(10, 10, 10, 0.1);\n    top: auto;\n  }\n  .navbar-item.is-active .navbar-dropdown, .navbar-item.is-hoverable:focus .navbar-dropdown, .navbar-item.is-hoverable:focus-within .navbar-dropdown, .navbar-item.is-hoverable:hover .navbar-dropdown {\n    display: block;\n  }\n  .navbar.is-spaced .navbar-item.is-active .navbar-dropdown, .navbar-item.is-active .navbar-dropdown.is-boxed, .navbar.is-spaced .navbar-item.is-hoverable:focus .navbar-dropdown, .navbar-item.is-hoverable:focus .navbar-dropdown.is-boxed, .navbar.is-spaced .navbar-item.is-hoverable:focus-within .navbar-dropdown, .navbar-item.is-hoverable:focus-within .navbar-dropdown.is-boxed, .navbar.is-spaced .navbar-item.is-hoverable:hover .navbar-dropdown, .navbar-item.is-hoverable:hover .navbar-dropdown.is-boxed {\n    opacity: 1;\n    pointer-events: auto;\n    transform: translateY(0);\n  }\n  .navbar-menu {\n    flex-grow: 1;\n    flex-shrink: 0;\n  }\n  .navbar-start {\n    justify-content: flex-start;\n    margin-right: auto;\n  }\n  .navbar-end {\n    justify-content: flex-end;\n    margin-left: auto;\n  }\n  .navbar-dropdown {\n    background-color: hsl(0, 0%, 100%);\n    border-bottom-left-radius: 6px;\n    border-bottom-right-radius: 6px;\n    border-top: 2px solid hsl(0, 0%, 86%);\n    box-shadow: 0 8px 8px rgba(10, 10, 10, 0.1);\n    display: none;\n    font-size: 0.875rem;\n    left: 0;\n    min-width: 100%;\n    position: absolute;\n    top: 100%;\n    z-index: 20;\n  }\n  .navbar-dropdown .navbar-item {\n    padding: 0.375rem 1rem;\n    white-space: nowrap;\n  }\n  .navbar-dropdown a.navbar-item {\n    padding-right: 3rem;\n  }\n  .navbar-dropdown a.navbar-item:focus, .navbar-dropdown a.navbar-item:hover {\n    background-color: hsl(0, 0%, 96%);\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 96%);\n    color: hsl(229, 53%, 53%);\n  }\n  .navbar.is-spaced .navbar-dropdown, .navbar-dropdown.is-boxed {\n    border-radius: 6px;\n    border-top: none;\n    box-shadow: 0 8px 8px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n    display: block;\n    opacity: 0;\n    pointer-events: none;\n    top: calc(100% + (-4px));\n    transform: translateY(-5px);\n    transition-duration: 86ms;\n    transition-property: opacity, transform;\n  }\n  .navbar-dropdown.is-right {\n    left: auto;\n    right: 0;\n  }\n  .navbar-divider {\n    display: block;\n  }\n  .navbar > .container .navbar-brand,\n  .container > .navbar .navbar-brand {\n    margin-left: -0.75rem;\n  }\n  .navbar > .container .navbar-menu,\n  .container > .navbar .navbar-menu {\n    margin-right: -0.75rem;\n  }\n  .navbar.is-fixed-bottom-desktop, .navbar.is-fixed-top-desktop {\n    left: 0;\n    position: fixed;\n    right: 0;\n    z-index: 30;\n  }\n  .navbar.is-fixed-bottom-desktop {\n    bottom: 0;\n  }\n  .navbar.is-fixed-bottom-desktop.has-shadow {\n    box-shadow: 0 -2px 3px rgba(10, 10, 10, 0.1);\n  }\n  .navbar.is-fixed-top-desktop {\n    top: 0;\n  }\n  html.has-navbar-fixed-top-desktop,\n  body.has-navbar-fixed-top-desktop {\n    padding-top: 3.25rem;\n  }\n  html.has-navbar-fixed-bottom-desktop,\n  body.has-navbar-fixed-bottom-desktop {\n    padding-bottom: 3.25rem;\n  }\n  html.has-spaced-navbar-fixed-top,\n  body.has-spaced-navbar-fixed-top {\n    padding-top: 5.25rem;\n  }\n  html.has-spaced-navbar-fixed-bottom,\n  body.has-spaced-navbar-fixed-bottom {\n    padding-bottom: 5.25rem;\n  }\n  a.navbar-item.is-active,\n  .navbar-link.is-active {\n    color: hsl(0, 0%, 4%);\n  }\n  a.navbar-item.is-active:not(:focus):not(:hover),\n  .navbar-link.is-active:not(:focus):not(:hover) {\n    background-color: transparent;\n  }\n  .navbar-item.has-dropdown:focus .navbar-link, .navbar-item.has-dropdown:hover .navbar-link, .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: hsl(0, 0%, 98%);\n  }\n}\n.hero.is-fullheight-with-navbar {\n  min-height: calc(100vh - 3.25rem);\n}\n\n.pagination {\n  font-size: 1rem;\n  margin: -0.25rem;\n}\n.pagination.is-small {\n  font-size: 0.75rem;\n}\n.pagination.is-medium {\n  font-size: 1.25rem;\n}\n.pagination.is-large {\n  font-size: 1.5rem;\n}\n.pagination.is-rounded .pagination-previous,\n.pagination.is-rounded .pagination-next {\n  padding-left: 1em;\n  padding-right: 1em;\n  border-radius: 9999px;\n}\n.pagination.is-rounded .pagination-link {\n  border-radius: 9999px;\n}\n\n.pagination,\n.pagination-list {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  text-align: center;\n}\n\n.pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis {\n  font-size: 1em;\n  justify-content: center;\n  margin: 0.25rem;\n  padding-left: 0.5em;\n  padding-right: 0.5em;\n  text-align: center;\n}\n\n.pagination-previous,\n.pagination-next,\n.pagination-link {\n  border-color: hsl(0, 0%, 86%);\n  color: hsl(0, 0%, 21%);\n  min-width: 2.5em;\n}\n.pagination-previous:hover,\n.pagination-next:hover,\n.pagination-link:hover {\n  border-color: hsl(0, 0%, 71%);\n  color: hsl(0, 0%, 21%);\n}\n.pagination-previous:focus,\n.pagination-next:focus,\n.pagination-link:focus {\n  border-color: hsl(229, 53%, 53%);\n}\n.pagination-previous:active,\n.pagination-next:active,\n.pagination-link:active {\n  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.2);\n}\n.pagination-previous[disabled], .pagination-previous.is-disabled,\n.pagination-next[disabled],\n.pagination-next.is-disabled,\n.pagination-link[disabled],\n.pagination-link.is-disabled {\n  background-color: hsl(0, 0%, 86%);\n  border-color: hsl(0, 0%, 86%);\n  box-shadow: none;\n  color: hsl(0, 0%, 48%);\n  opacity: 0.5;\n}\n\n.pagination-previous,\n.pagination-next {\n  padding-left: 0.75em;\n  padding-right: 0.75em;\n  white-space: nowrap;\n}\n\n.pagination-link.is-current {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n\n.pagination-ellipsis {\n  color: hsl(0, 0%, 71%);\n  pointer-events: none;\n}\n\n.pagination-list {\n  flex-wrap: wrap;\n}\n.pagination-list li {\n  list-style: none;\n}\n\n@media screen and (max-width: 768px) {\n  .pagination {\n    flex-wrap: wrap;\n  }\n  .pagination-previous,\n  .pagination-next {\n    flex-grow: 1;\n    flex-shrink: 1;\n  }\n  .pagination-list li {\n    flex-grow: 1;\n    flex-shrink: 1;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .pagination-list {\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-content: flex-start;\n    order: 1;\n  }\n  .pagination-previous,\n  .pagination-next,\n  .pagination-link,\n  .pagination-ellipsis {\n    margin-bottom: 0;\n    margin-top: 0;\n  }\n  .pagination-previous {\n    order: 2;\n  }\n  .pagination-next {\n    order: 3;\n  }\n  .pagination {\n    justify-content: space-between;\n    margin-bottom: 0;\n    margin-top: 0;\n  }\n  .pagination.is-centered .pagination-previous {\n    order: 1;\n  }\n  .pagination.is-centered .pagination-list {\n    justify-content: center;\n    order: 2;\n  }\n  .pagination.is-centered .pagination-next {\n    order: 3;\n  }\n  .pagination.is-right .pagination-previous {\n    order: 1;\n  }\n  .pagination.is-right .pagination-next {\n    order: 2;\n  }\n  .pagination.is-right .pagination-list {\n    justify-content: flex-end;\n    order: 3;\n  }\n}\n.panel {\n  border-radius: 6px;\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\n  font-size: 1rem;\n}\n.panel:not(:last-child) {\n  margin-bottom: 1.5rem;\n}\n.panel.is-white .panel-heading {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.panel.is-white .panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 100%);\n}\n.panel.is-white .panel-block.is-active .panel-icon {\n  color: hsl(0, 0%, 100%);\n}\n.panel.is-black .panel-heading {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.panel.is-black .panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 4%);\n}\n.panel.is-black .panel-block.is-active .panel-icon {\n  color: hsl(0, 0%, 4%);\n}\n.panel.is-light .panel-heading {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.panel.is-light .panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 96%);\n}\n.panel.is-light .panel-block.is-active .panel-icon {\n  color: hsl(0, 0%, 96%);\n}\n.panel.is-dark .panel-heading {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.panel.is-dark .panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 21%);\n}\n.panel.is-dark .panel-block.is-active .panel-icon {\n  color: hsl(0, 0%, 21%);\n}\n.panel.is-primary .panel-heading {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.panel.is-primary .panel-tabs a.is-active {\n  border-bottom-color: hsl(171, 100%, 41%);\n}\n.panel.is-primary .panel-block.is-active .panel-icon {\n  color: hsl(171, 100%, 41%);\n}\n.panel.is-link .panel-heading {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.panel.is-link .panel-tabs a.is-active {\n  border-bottom-color: hsl(229, 53%, 53%);\n}\n.panel.is-link .panel-block.is-active .panel-icon {\n  color: hsl(229, 53%, 53%);\n}\n.panel.is-info .panel-heading {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.panel.is-info .panel-tabs a.is-active {\n  border-bottom-color: hsl(207, 61%, 53%);\n}\n.panel.is-info .panel-block.is-active .panel-icon {\n  color: hsl(207, 61%, 53%);\n}\n.panel.is-success .panel-heading {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.panel.is-success .panel-tabs a.is-active {\n  border-bottom-color: hsl(153, 53%, 53%);\n}\n.panel.is-success .panel-block.is-active .panel-icon {\n  color: hsl(153, 53%, 53%);\n}\n.panel.is-warning .panel-heading {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.panel.is-warning .panel-tabs a.is-active {\n  border-bottom-color: hsl(44, 100%, 77%);\n}\n.panel.is-warning .panel-block.is-active .panel-icon {\n  color: hsl(44, 100%, 77%);\n}\n.panel.is-danger .panel-heading {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.panel.is-danger .panel-tabs a.is-active {\n  border-bottom-color: hsl(348, 86%, 61%);\n}\n.panel.is-danger .panel-block.is-active .panel-icon {\n  color: hsl(348, 86%, 61%);\n}\n\n.panel-tabs:not(:last-child),\n.panel-block:not(:last-child) {\n  border-bottom: 1px solid hsl(0, 0%, 93%);\n}\n\n.panel-heading {\n  background-color: hsl(0, 0%, 93%);\n  border-radius: 6px 6px 0 0;\n  color: hsl(0, 0%, 21%);\n  font-size: 1.25em;\n  font-weight: 700;\n  line-height: 1.25;\n  padding: 0.75em 1em;\n}\n\n.panel-tabs {\n  align-items: flex-end;\n  display: flex;\n  font-size: 0.875em;\n  justify-content: center;\n}\n.panel-tabs a {\n  border-bottom: 1px solid hsl(0, 0%, 86%);\n  margin-bottom: -1px;\n  padding: 0.5em;\n}\n.panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 29%);\n  color: hsl(0, 0%, 21%);\n}\n\n.panel-list a {\n  color: hsl(0, 0%, 29%);\n}\n.panel-list a:hover {\n  color: hsl(229, 53%, 53%);\n}\n\n.panel-block {\n  align-items: center;\n  color: hsl(0, 0%, 21%);\n  display: flex;\n  justify-content: flex-start;\n  padding: 0.5em 0.75em;\n}\n.panel-block input[type=checkbox] {\n  margin-right: 0.75em;\n}\n.panel-block > .control {\n  flex-grow: 1;\n  flex-shrink: 1;\n  width: 100%;\n}\n.panel-block.is-wrapped {\n  flex-wrap: wrap;\n}\n.panel-block.is-active {\n  border-left-color: hsl(229, 53%, 53%);\n  color: hsl(0, 0%, 21%);\n}\n.panel-block.is-active .panel-icon {\n  color: hsl(229, 53%, 53%);\n}\n.panel-block:last-child {\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n\na.panel-block,\nlabel.panel-block {\n  cursor: pointer;\n}\na.panel-block:hover,\nlabel.panel-block:hover {\n  background-color: hsl(0, 0%, 96%);\n}\n\n.panel-icon {\n  display: inline-block;\n  font-size: 14px;\n  height: 1em;\n  line-height: 1em;\n  text-align: center;\n  vertical-align: top;\n  width: 1em;\n  color: hsl(0, 0%, 48%);\n  margin-right: 0.75em;\n}\n.panel-icon .fa {\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.tabs {\n  -webkit-overflow-scrolling: touch;\n  align-items: stretch;\n  display: flex;\n  font-size: 1rem;\n  justify-content: space-between;\n  overflow: hidden;\n  overflow-x: auto;\n  white-space: nowrap;\n}\n.tabs a {\n  align-items: center;\n  border-bottom-color: hsl(0, 0%, 86%);\n  border-bottom-style: solid;\n  border-bottom-width: 1px;\n  color: hsl(0, 0%, 29%);\n  display: flex;\n  justify-content: center;\n  margin-bottom: -1px;\n  padding: 0.5em 1em;\n  vertical-align: top;\n}\n.tabs a:hover {\n  border-bottom-color: hsl(0, 0%, 21%);\n  color: hsl(0, 0%, 21%);\n}\n.tabs li {\n  display: block;\n}\n.tabs li.is-active a {\n  border-bottom-color: hsl(229, 53%, 53%);\n  color: hsl(229, 53%, 53%);\n}\n.tabs ul {\n  align-items: center;\n  border-bottom-color: hsl(0, 0%, 86%);\n  border-bottom-style: solid;\n  border-bottom-width: 1px;\n  display: flex;\n  flex-grow: 1;\n  flex-shrink: 0;\n  justify-content: flex-start;\n}\n.tabs ul.is-left {\n  padding-right: 0.75em;\n}\n.tabs ul.is-center {\n  flex: none;\n  justify-content: center;\n  padding-left: 0.75em;\n  padding-right: 0.75em;\n}\n.tabs ul.is-right {\n  justify-content: flex-end;\n  padding-left: 0.75em;\n}\n.tabs .icon:first-child {\n  margin-right: 0.5em;\n}\n.tabs .icon:last-child {\n  margin-left: 0.5em;\n}\n.tabs.is-centered ul {\n  justify-content: center;\n}\n.tabs.is-right ul {\n  justify-content: flex-end;\n}\n.tabs.is-boxed a {\n  border: 1px solid transparent;\n  border-radius: 4px 4px 0 0;\n}\n.tabs.is-boxed a:hover {\n  background-color: hsl(0, 0%, 96%);\n  border-bottom-color: hsl(0, 0%, 86%);\n}\n.tabs.is-boxed li.is-active a {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 86%);\n  border-bottom-color: transparent !important;\n}\n.tabs.is-fullwidth li {\n  flex-grow: 1;\n  flex-shrink: 0;\n}\n.tabs.is-toggle a {\n  border-color: hsl(0, 0%, 86%);\n  border-style: solid;\n  border-width: 1px;\n  margin-bottom: 0;\n  position: relative;\n}\n.tabs.is-toggle a:hover {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 71%);\n  z-index: 2;\n}\n.tabs.is-toggle li + li {\n  margin-left: -1px;\n}\n.tabs.is-toggle li:first-child a {\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.tabs.is-toggle li:last-child a {\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.tabs.is-toggle li.is-active a {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  color: #fff;\n  z-index: 1;\n}\n.tabs.is-toggle ul {\n  border-bottom: none;\n}\n.tabs.is-toggle.is-toggle-rounded li:first-child a {\n  border-bottom-left-radius: 9999px;\n  border-top-left-radius: 9999px;\n  padding-left: 1.25em;\n}\n.tabs.is-toggle.is-toggle-rounded li:last-child a {\n  border-bottom-right-radius: 9999px;\n  border-top-right-radius: 9999px;\n  padding-right: 1.25em;\n}\n.tabs.is-small {\n  font-size: 0.75rem;\n}\n.tabs.is-medium {\n  font-size: 1.25rem;\n}\n.tabs.is-large {\n  font-size: 1.5rem;\n}\n\n/* Bulma Grid */\n.column {\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n  padding: 0.75rem;\n}\n.columns.is-mobile > .column.is-narrow {\n  flex: none;\n  width: unset;\n}\n.columns.is-mobile > .column.is-full {\n  flex: none;\n  width: 100%;\n}\n.columns.is-mobile > .column.is-three-quarters {\n  flex: none;\n  width: 75%;\n}\n.columns.is-mobile > .column.is-two-thirds {\n  flex: none;\n  width: 66.6666%;\n}\n.columns.is-mobile > .column.is-half {\n  flex: none;\n  width: 50%;\n}\n.columns.is-mobile > .column.is-one-third {\n  flex: none;\n  width: 33.3333%;\n}\n.columns.is-mobile > .column.is-one-quarter {\n  flex: none;\n  width: 25%;\n}\n.columns.is-mobile > .column.is-one-fifth {\n  flex: none;\n  width: 20%;\n}\n.columns.is-mobile > .column.is-two-fifths {\n  flex: none;\n  width: 40%;\n}\n.columns.is-mobile > .column.is-three-fifths {\n  flex: none;\n  width: 60%;\n}\n.columns.is-mobile > .column.is-four-fifths {\n  flex: none;\n  width: 80%;\n}\n.columns.is-mobile > .column.is-offset-three-quarters {\n  margin-left: 75%;\n}\n.columns.is-mobile > .column.is-offset-two-thirds {\n  margin-left: 66.6666%;\n}\n.columns.is-mobile > .column.is-offset-half {\n  margin-left: 50%;\n}\n.columns.is-mobile > .column.is-offset-one-third {\n  margin-left: 33.3333%;\n}\n.columns.is-mobile > .column.is-offset-one-quarter {\n  margin-left: 25%;\n}\n.columns.is-mobile > .column.is-offset-one-fifth {\n  margin-left: 20%;\n}\n.columns.is-mobile > .column.is-offset-two-fifths {\n  margin-left: 40%;\n}\n.columns.is-mobile > .column.is-offset-three-fifths {\n  margin-left: 60%;\n}\n.columns.is-mobile > .column.is-offset-four-fifths {\n  margin-left: 80%;\n}\n.columns.is-mobile > .column.is-0 {\n  flex: none;\n  width: 0%;\n}\n.columns.is-mobile > .column.is-offset-0 {\n  margin-left: 0%;\n}\n.columns.is-mobile > .column.is-1 {\n  flex: none;\n  width: 8.33333337%;\n}\n.columns.is-mobile > .column.is-offset-1 {\n  margin-left: 8.33333337%;\n}\n.columns.is-mobile > .column.is-2 {\n  flex: none;\n  width: 16.66666674%;\n}\n.columns.is-mobile > .column.is-offset-2 {\n  margin-left: 16.66666674%;\n}\n.columns.is-mobile > .column.is-3 {\n  flex: none;\n  width: 25%;\n}\n.columns.is-mobile > .column.is-offset-3 {\n  margin-left: 25%;\n}\n.columns.is-mobile > .column.is-4 {\n  flex: none;\n  width: 33.33333337%;\n}\n.columns.is-mobile > .column.is-offset-4 {\n  margin-left: 33.33333337%;\n}\n.columns.is-mobile > .column.is-5 {\n  flex: none;\n  width: 41.66666674%;\n}\n.columns.is-mobile > .column.is-offset-5 {\n  margin-left: 41.66666674%;\n}\n.columns.is-mobile > .column.is-6 {\n  flex: none;\n  width: 50%;\n}\n.columns.is-mobile > .column.is-offset-6 {\n  margin-left: 50%;\n}\n.columns.is-mobile > .column.is-7 {\n  flex: none;\n  width: 58.33333337%;\n}\n.columns.is-mobile > .column.is-offset-7 {\n  margin-left: 58.33333337%;\n}\n.columns.is-mobile > .column.is-8 {\n  flex: none;\n  width: 66.66666674%;\n}\n.columns.is-mobile > .column.is-offset-8 {\n  margin-left: 66.66666674%;\n}\n.columns.is-mobile > .column.is-9 {\n  flex: none;\n  width: 75%;\n}\n.columns.is-mobile > .column.is-offset-9 {\n  margin-left: 75%;\n}\n.columns.is-mobile > .column.is-10 {\n  flex: none;\n  width: 83.33333337%;\n}\n.columns.is-mobile > .column.is-offset-10 {\n  margin-left: 83.33333337%;\n}\n.columns.is-mobile > .column.is-11 {\n  flex: none;\n  width: 91.66666674%;\n}\n.columns.is-mobile > .column.is-offset-11 {\n  margin-left: 91.66666674%;\n}\n.columns.is-mobile > .column.is-12 {\n  flex: none;\n  width: 100%;\n}\n.columns.is-mobile > .column.is-offset-12 {\n  margin-left: 100%;\n}\n@media screen and (max-width: 768px) {\n  .column.is-narrow-mobile {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-mobile {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-mobile {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-mobile {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-mobile {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-mobile {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-mobile {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-mobile {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-mobile {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-mobile {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-mobile {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-mobile {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-mobile {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-mobile {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-mobile {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-mobile {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-mobile {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-mobile {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-mobile {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-mobile {\n    margin-left: 80%;\n  }\n  .column.is-0-mobile {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-mobile {\n    margin-left: 0%;\n  }\n  .column.is-1-mobile {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-mobile {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-mobile {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-mobile {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-mobile {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-mobile {\n    margin-left: 25%;\n  }\n  .column.is-4-mobile {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-mobile {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-mobile {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-mobile {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-mobile {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-mobile {\n    margin-left: 50%;\n  }\n  .column.is-7-mobile {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-mobile {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-mobile {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-mobile {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-mobile {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-mobile {\n    margin-left: 75%;\n  }\n  .column.is-10-mobile {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-mobile {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-mobile {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-mobile {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-mobile {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-mobile {\n    margin-left: 100%;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .column.is-narrow, .column.is-narrow-tablet {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full, .column.is-full-tablet {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters, .column.is-three-quarters-tablet {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds, .column.is-two-thirds-tablet {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half, .column.is-half-tablet {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third, .column.is-one-third-tablet {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter, .column.is-one-quarter-tablet {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth, .column.is-one-fifth-tablet {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths, .column.is-two-fifths-tablet {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths, .column.is-three-fifths-tablet {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths, .column.is-four-fifths-tablet {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters, .column.is-offset-three-quarters-tablet {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds, .column.is-offset-two-thirds-tablet {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half, .column.is-offset-half-tablet {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third, .column.is-offset-one-third-tablet {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter, .column.is-offset-one-quarter-tablet {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth, .column.is-offset-one-fifth-tablet {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths, .column.is-offset-two-fifths-tablet {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths, .column.is-offset-three-fifths-tablet {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths, .column.is-offset-four-fifths-tablet {\n    margin-left: 80%;\n  }\n  .column.is-0, .column.is-0-tablet {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0, .column.is-offset-0-tablet {\n    margin-left: 0%;\n  }\n  .column.is-1, .column.is-1-tablet {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1, .column.is-offset-1-tablet {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2, .column.is-2-tablet {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2, .column.is-offset-2-tablet {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3, .column.is-3-tablet {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3, .column.is-offset-3-tablet {\n    margin-left: 25%;\n  }\n  .column.is-4, .column.is-4-tablet {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4, .column.is-offset-4-tablet {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5, .column.is-5-tablet {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5, .column.is-offset-5-tablet {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6, .column.is-6-tablet {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6, .column.is-offset-6-tablet {\n    margin-left: 50%;\n  }\n  .column.is-7, .column.is-7-tablet {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7, .column.is-offset-7-tablet {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8, .column.is-8-tablet {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8, .column.is-offset-8-tablet {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9, .column.is-9-tablet {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9, .column.is-offset-9-tablet {\n    margin-left: 75%;\n  }\n  .column.is-10, .column.is-10-tablet {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10, .column.is-offset-10-tablet {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11, .column.is-11-tablet {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11, .column.is-offset-11-tablet {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12, .column.is-12-tablet {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12, .column.is-offset-12-tablet {\n    margin-left: 100%;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .column.is-narrow-touch {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-touch {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-touch {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-touch {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-touch {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-touch {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-touch {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-touch {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-touch {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-touch {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-touch {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-touch {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-touch {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-touch {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-touch {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-touch {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-touch {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-touch {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-touch {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-touch {\n    margin-left: 80%;\n  }\n  .column.is-0-touch {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-touch {\n    margin-left: 0%;\n  }\n  .column.is-1-touch {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-touch {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-touch {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-touch {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-touch {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-touch {\n    margin-left: 25%;\n  }\n  .column.is-4-touch {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-touch {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-touch {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-touch {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-touch {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-touch {\n    margin-left: 50%;\n  }\n  .column.is-7-touch {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-touch {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-touch {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-touch {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-touch {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-touch {\n    margin-left: 75%;\n  }\n  .column.is-10-touch {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-touch {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-touch {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-touch {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-touch {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-touch {\n    margin-left: 100%;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .column.is-narrow-desktop {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-desktop {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-desktop {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-desktop {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-desktop {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-desktop {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-desktop {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-desktop {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-desktop {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-desktop {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-desktop {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-desktop {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-desktop {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-desktop {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-desktop {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-desktop {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-desktop {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-desktop {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-desktop {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-desktop {\n    margin-left: 80%;\n  }\n  .column.is-0-desktop {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-desktop {\n    margin-left: 0%;\n  }\n  .column.is-1-desktop {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-desktop {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-desktop {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-desktop {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-desktop {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-desktop {\n    margin-left: 25%;\n  }\n  .column.is-4-desktop {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-desktop {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-desktop {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-desktop {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-desktop {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-desktop {\n    margin-left: 50%;\n  }\n  .column.is-7-desktop {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-desktop {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-desktop {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-desktop {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-desktop {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-desktop {\n    margin-left: 75%;\n  }\n  .column.is-10-desktop {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-desktop {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-desktop {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-desktop {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-desktop {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-desktop {\n    margin-left: 100%;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .column.is-narrow-widescreen {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-widescreen {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-widescreen {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-widescreen {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-widescreen {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-widescreen {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-widescreen {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-widescreen {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-widescreen {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-widescreen {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-widescreen {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-widescreen {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-widescreen {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-widescreen {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-widescreen {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-widescreen {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-widescreen {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-widescreen {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-widescreen {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-widescreen {\n    margin-left: 80%;\n  }\n  .column.is-0-widescreen {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-widescreen {\n    margin-left: 0%;\n  }\n  .column.is-1-widescreen {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-widescreen {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-widescreen {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-widescreen {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-widescreen {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-widescreen {\n    margin-left: 25%;\n  }\n  .column.is-4-widescreen {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-widescreen {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-widescreen {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-widescreen {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-widescreen {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-widescreen {\n    margin-left: 50%;\n  }\n  .column.is-7-widescreen {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-widescreen {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-widescreen {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-widescreen {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-widescreen {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-widescreen {\n    margin-left: 75%;\n  }\n  .column.is-10-widescreen {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-widescreen {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-widescreen {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-widescreen {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-widescreen {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-widescreen {\n    margin-left: 100%;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .column.is-narrow-fullhd {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-fullhd {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-fullhd {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-fullhd {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-fullhd {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-fullhd {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-fullhd {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-fullhd {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-fullhd {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-fullhd {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-fullhd {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-fullhd {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-fullhd {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-fullhd {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-fullhd {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-fullhd {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-fullhd {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-fullhd {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-fullhd {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-fullhd {\n    margin-left: 80%;\n  }\n  .column.is-0-fullhd {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-fullhd {\n    margin-left: 0%;\n  }\n  .column.is-1-fullhd {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-fullhd {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-fullhd {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-fullhd {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-fullhd {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-fullhd {\n    margin-left: 25%;\n  }\n  .column.is-4-fullhd {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-fullhd {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-fullhd {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-fullhd {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-fullhd {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-fullhd {\n    margin-left: 50%;\n  }\n  .column.is-7-fullhd {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-fullhd {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-fullhd {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-fullhd {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-fullhd {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-fullhd {\n    margin-left: 75%;\n  }\n  .column.is-10-fullhd {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-fullhd {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-fullhd {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-fullhd {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-fullhd {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-fullhd {\n    margin-left: 100%;\n  }\n}\n\n.columns {\n  margin-left: -0.75rem;\n  margin-right: -0.75rem;\n  margin-top: -0.75rem;\n}\n.columns:last-child {\n  margin-bottom: -0.75rem;\n}\n.columns:not(:last-child) {\n  margin-bottom: calc(1.5rem - 0.75rem);\n}\n.columns.is-centered {\n  justify-content: center;\n}\n.columns.is-gapless {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n}\n.columns.is-gapless > .column {\n  margin: 0;\n  padding: 0 !important;\n}\n.columns.is-gapless:not(:last-child) {\n  margin-bottom: 1.5rem;\n}\n.columns.is-gapless:last-child {\n  margin-bottom: 0;\n}\n.columns.is-mobile {\n  display: flex;\n}\n.columns.is-multiline {\n  flex-wrap: wrap;\n}\n.columns.is-vcentered {\n  align-items: center;\n}\n@media screen and (min-width: 769px), print {\n  .columns:not(.is-desktop) {\n    display: flex;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-desktop {\n    display: flex;\n  }\n}\n\n.columns.is-variable {\n  --columnGap: 0.75rem;\n  margin-left: calc(-1 * var(--columnGap));\n  margin-right: calc(-1 * var(--columnGap));\n}\n.columns.is-variable > .column {\n  padding-left: var(--columnGap);\n  padding-right: var(--columnGap);\n}\n.columns.is-variable.is-0 {\n  --columnGap: 0rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-0-mobile {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-0-tablet {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-0-tablet-only {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-0-touch {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-0-desktop {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-0-desktop-only {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-0-widescreen {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-0-widescreen-only {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-0-fullhd {\n    --columnGap: 0rem;\n  }\n}\n.columns.is-variable.is-1 {\n  --columnGap: 0.25rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-1-mobile {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-1-tablet {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-1-tablet-only {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-1-touch {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-1-desktop {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-1-desktop-only {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-1-widescreen {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-1-widescreen-only {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-1-fullhd {\n    --columnGap: 0.25rem;\n  }\n}\n.columns.is-variable.is-2 {\n  --columnGap: 0.5rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-2-mobile {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-2-tablet {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-2-tablet-only {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-2-touch {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-2-desktop {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-2-desktop-only {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-2-widescreen {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-2-widescreen-only {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-2-fullhd {\n    --columnGap: 0.5rem;\n  }\n}\n.columns.is-variable.is-3 {\n  --columnGap: 0.75rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-3-mobile {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-3-tablet {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-3-tablet-only {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-3-touch {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-3-desktop {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-3-desktop-only {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-3-widescreen {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-3-widescreen-only {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-3-fullhd {\n    --columnGap: 0.75rem;\n  }\n}\n.columns.is-variable.is-4 {\n  --columnGap: 1rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-4-mobile {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-4-tablet {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-4-tablet-only {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-4-touch {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-4-desktop {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-4-desktop-only {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-4-widescreen {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-4-widescreen-only {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-4-fullhd {\n    --columnGap: 1rem;\n  }\n}\n.columns.is-variable.is-5 {\n  --columnGap: 1.25rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-5-mobile {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-5-tablet {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-5-tablet-only {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-5-touch {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-5-desktop {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-5-desktop-only {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-5-widescreen {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-5-widescreen-only {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-5-fullhd {\n    --columnGap: 1.25rem;\n  }\n}\n.columns.is-variable.is-6 {\n  --columnGap: 1.5rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-6-mobile {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-6-tablet {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-6-tablet-only {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-6-touch {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-6-desktop {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-6-desktop-only {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-6-widescreen {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-6-widescreen-only {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-6-fullhd {\n    --columnGap: 1.5rem;\n  }\n}\n.columns.is-variable.is-7 {\n  --columnGap: 1.75rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-7-mobile {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-7-tablet {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-7-tablet-only {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-7-touch {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-7-desktop {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-7-desktop-only {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-7-widescreen {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-7-widescreen-only {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-7-fullhd {\n    --columnGap: 1.75rem;\n  }\n}\n.columns.is-variable.is-8 {\n  --columnGap: 2rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-8-mobile {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-8-tablet {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-8-tablet-only {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-8-touch {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-8-desktop {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-8-desktop-only {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-8-widescreen {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-8-widescreen-only {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-8-fullhd {\n    --columnGap: 2rem;\n  }\n}\n\n.tile {\n  align-items: stretch;\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n  min-height: min-content;\n}\n.tile.is-ancestor {\n  margin-left: -0.75rem;\n  margin-right: -0.75rem;\n  margin-top: -0.75rem;\n}\n.tile.is-ancestor:last-child {\n  margin-bottom: -0.75rem;\n}\n.tile.is-ancestor:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n.tile.is-child {\n  margin: 0 !important;\n}\n.tile.is-parent {\n  padding: 0.75rem;\n}\n.tile.is-vertical {\n  flex-direction: column;\n}\n.tile.is-vertical > .tile.is-child:not(:last-child) {\n  margin-bottom: 1.5rem !important;\n}\n@media screen and (min-width: 769px), print {\n  .tile:not(.is-child) {\n    display: flex;\n  }\n  .tile.is-1 {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .tile.is-2 {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .tile.is-3 {\n    flex: none;\n    width: 25%;\n  }\n  .tile.is-4 {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .tile.is-5 {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .tile.is-6 {\n    flex: none;\n    width: 50%;\n  }\n  .tile.is-7 {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .tile.is-8 {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .tile.is-9 {\n    flex: none;\n    width: 75%;\n  }\n  .tile.is-10 {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .tile.is-11 {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .tile.is-12 {\n    flex: none;\n    width: 100%;\n  }\n}\n\n/* Bulma Helpers */\n.has-text-white {\n  color: hsl(0, 0%, 100%) !important;\n}\n\na.has-text-white:hover, a.has-text-white:focus {\n  color: #e6e6e6 !important;\n}\n\n.has-background-white {\n  background-color: hsl(0, 0%, 100%) !important;\n}\n\n.has-text-black {\n  color: hsl(0, 0%, 4%) !important;\n}\n\na.has-text-black:hover, a.has-text-black:focus {\n  color: black !important;\n}\n\n.has-background-black {\n  background-color: hsl(0, 0%, 4%) !important;\n}\n\n.has-text-light {\n  color: hsl(0, 0%, 96%) !important;\n}\n\na.has-text-light:hover, a.has-text-light:focus {\n  color: #dbdbdb !important;\n}\n\n.has-background-light {\n  background-color: hsl(0, 0%, 96%) !important;\n}\n\n.has-text-dark {\n  color: hsl(0, 0%, 21%) !important;\n}\n\na.has-text-dark:hover, a.has-text-dark:focus {\n  color: #1c1c1c !important;\n}\n\n.has-background-dark {\n  background-color: hsl(0, 0%, 21%) !important;\n}\n\n.has-text-primary {\n  color: hsl(171, 100%, 41%) !important;\n}\n\na.has-text-primary:hover, a.has-text-primary:focus {\n  color: #009e86 !important;\n}\n\n.has-background-primary {\n  background-color: hsl(171, 100%, 41%) !important;\n}\n\n.has-text-primary-light {\n  color: #ebfffc !important;\n}\n\na.has-text-primary-light:hover, a.has-text-primary-light:focus {\n  color: #b8fff4 !important;\n}\n\n.has-background-primary-light {\n  background-color: #ebfffc !important;\n}\n\n.has-text-primary-dark {\n  color: #00947e !important;\n}\n\na.has-text-primary-dark:hover, a.has-text-primary-dark:focus {\n  color: #00c7a9 !important;\n}\n\n.has-background-primary-dark {\n  background-color: #00947e !important;\n}\n\n.has-text-link {\n  color: hsl(229, 53%, 53%) !important;\n}\n\na.has-text-link:hover, a.has-text-link:focus {\n  color: #3449a8 !important;\n}\n\n.has-background-link {\n  background-color: hsl(229, 53%, 53%) !important;\n}\n\n.has-text-link-light {\n  color: #eff1fa !important;\n}\n\na.has-text-link-light:hover, a.has-text-link-light:focus {\n  color: #c8cfee !important;\n}\n\n.has-background-link-light {\n  background-color: #eff1fa !important;\n}\n\n.has-text-link-dark {\n  color: #3850b7 !important;\n}\n\na.has-text-link-dark:hover, a.has-text-link-dark:focus {\n  color: #576dcb !important;\n}\n\n.has-background-link-dark {\n  background-color: #3850b7 !important;\n}\n\n.has-text-info {\n  color: hsl(207, 61%, 53%) !important;\n}\n\na.has-text-info:hover, a.has-text-info:focus {\n  color: #2b74b1 !important;\n}\n\n.has-background-info {\n  background-color: hsl(207, 61%, 53%) !important;\n}\n\n.has-text-info-light {\n  color: #eff5fb !important;\n}\n\na.has-text-info-light:hover, a.has-text-info-light:focus {\n  color: #c6ddf1 !important;\n}\n\n.has-background-info-light {\n  background-color: #eff5fb !important;\n}\n\n.has-text-info-dark {\n  color: #296fa8 !important;\n}\n\na.has-text-info-dark:hover, a.has-text-info-dark:focus {\n  color: #368ace !important;\n}\n\n.has-background-info-dark {\n  background-color: #296fa8 !important;\n}\n\n.has-text-success {\n  color: hsl(153, 53%, 53%) !important;\n}\n\na.has-text-success:hover, a.has-text-success:focus {\n  color: #34a873 !important;\n}\n\n.has-background-success {\n  background-color: hsl(153, 53%, 53%) !important;\n}\n\n.has-text-success-light {\n  color: #effaf5 !important;\n}\n\na.has-text-success-light:hover, a.has-text-success-light:focus {\n  color: #c8eedd !important;\n}\n\n.has-background-success-light {\n  background-color: #effaf5 !important;\n}\n\n.has-text-success-dark {\n  color: #257953 !important;\n}\n\na.has-text-success-dark:hover, a.has-text-success-dark:focus {\n  color: #31a06e !important;\n}\n\n.has-background-success-dark {\n  background-color: #257953 !important;\n}\n\n.has-text-warning {\n  color: hsl(44, 100%, 77%) !important;\n}\n\na.has-text-warning:hover, a.has-text-warning:focus {\n  color: #ffd257 !important;\n}\n\n.has-background-warning {\n  background-color: hsl(44, 100%, 77%) !important;\n}\n\n.has-text-warning-light {\n  color: #fffaeb !important;\n}\n\na.has-text-warning-light:hover, a.has-text-warning-light:focus {\n  color: #ffecb8 !important;\n}\n\n.has-background-warning-light {\n  background-color: #fffaeb !important;\n}\n\n.has-text-warning-dark {\n  color: #946c00 !important;\n}\n\na.has-text-warning-dark:hover, a.has-text-warning-dark:focus {\n  color: #c79200 !important;\n}\n\n.has-background-warning-dark {\n  background-color: #946c00 !important;\n}\n\n.has-text-danger {\n  color: hsl(348, 86%, 61%) !important;\n}\n\na.has-text-danger:hover, a.has-text-danger:focus {\n  color: #ee1742 !important;\n}\n\n.has-background-danger {\n  background-color: hsl(348, 86%, 61%) !important;\n}\n\n.has-text-danger-light {\n  color: #feecf0 !important;\n}\n\na.has-text-danger-light:hover, a.has-text-danger-light:focus {\n  color: #fabdc9 !important;\n}\n\n.has-background-danger-light {\n  background-color: #feecf0 !important;\n}\n\n.has-text-danger-dark {\n  color: #cc0f35 !important;\n}\n\na.has-text-danger-dark:hover, a.has-text-danger-dark:focus {\n  color: #ee2049 !important;\n}\n\n.has-background-danger-dark {\n  background-color: #cc0f35 !important;\n}\n\n.has-text-black-bis {\n  color: hsl(0, 0%, 7%) !important;\n}\n\n.has-background-black-bis {\n  background-color: hsl(0, 0%, 7%) !important;\n}\n\n.has-text-black-ter {\n  color: hsl(0, 0%, 14%) !important;\n}\n\n.has-background-black-ter {\n  background-color: hsl(0, 0%, 14%) !important;\n}\n\n.has-text-grey-darker {\n  color: hsl(0, 0%, 21%) !important;\n}\n\n.has-background-grey-darker {\n  background-color: hsl(0, 0%, 21%) !important;\n}\n\n.has-text-grey-dark {\n  color: hsl(0, 0%, 29%) !important;\n}\n\n.has-background-grey-dark {\n  background-color: hsl(0, 0%, 29%) !important;\n}\n\n.has-text-grey {\n  color: hsl(0, 0%, 48%) !important;\n}\n\n.has-background-grey {\n  background-color: hsl(0, 0%, 48%) !important;\n}\n\n.has-text-grey-light {\n  color: hsl(0, 0%, 71%) !important;\n}\n\n.has-background-grey-light {\n  background-color: hsl(0, 0%, 71%) !important;\n}\n\n.has-text-grey-lighter {\n  color: hsl(0, 0%, 86%) !important;\n}\n\n.has-background-grey-lighter {\n  background-color: hsl(0, 0%, 86%) !important;\n}\n\n.has-text-white-ter {\n  color: hsl(0, 0%, 96%) !important;\n}\n\n.has-background-white-ter {\n  background-color: hsl(0, 0%, 96%) !important;\n}\n\n.has-text-white-bis {\n  color: hsl(0, 0%, 98%) !important;\n}\n\n.has-background-white-bis {\n  background-color: hsl(0, 0%, 98%) !important;\n}\n\n.is-flex-direction-row {\n  flex-direction: row !important;\n}\n\n.is-flex-direction-row-reverse {\n  flex-direction: row-reverse !important;\n}\n\n.is-flex-direction-column {\n  flex-direction: column !important;\n}\n\n.is-flex-direction-column-reverse {\n  flex-direction: column-reverse !important;\n}\n\n.is-flex-wrap-nowrap {\n  flex-wrap: nowrap !important;\n}\n\n.is-flex-wrap-wrap {\n  flex-wrap: wrap !important;\n}\n\n.is-flex-wrap-wrap-reverse {\n  flex-wrap: wrap-reverse !important;\n}\n\n.is-justify-content-flex-start {\n  justify-content: flex-start !important;\n}\n\n.is-justify-content-flex-end {\n  justify-content: flex-end !important;\n}\n\n.is-justify-content-center {\n  justify-content: center !important;\n}\n\n.is-justify-content-space-between {\n  justify-content: space-between !important;\n}\n\n.is-justify-content-space-around {\n  justify-content: space-around !important;\n}\n\n.is-justify-content-space-evenly {\n  justify-content: space-evenly !important;\n}\n\n.is-justify-content-start {\n  justify-content: start !important;\n}\n\n.is-justify-content-end {\n  justify-content: end !important;\n}\n\n.is-justify-content-left {\n  justify-content: left !important;\n}\n\n.is-justify-content-right {\n  justify-content: right !important;\n}\n\n.is-align-content-flex-start {\n  align-content: flex-start !important;\n}\n\n.is-align-content-flex-end {\n  align-content: flex-end !important;\n}\n\n.is-align-content-center {\n  align-content: center !important;\n}\n\n.is-align-content-space-between {\n  align-content: space-between !important;\n}\n\n.is-align-content-space-around {\n  align-content: space-around !important;\n}\n\n.is-align-content-space-evenly {\n  align-content: space-evenly !important;\n}\n\n.is-align-content-stretch {\n  align-content: stretch !important;\n}\n\n.is-align-content-start {\n  align-content: start !important;\n}\n\n.is-align-content-end {\n  align-content: end !important;\n}\n\n.is-align-content-baseline {\n  align-content: baseline !important;\n}\n\n.is-align-items-stretch {\n  align-items: stretch !important;\n}\n\n.is-align-items-flex-start {\n  align-items: flex-start !important;\n}\n\n.is-align-items-flex-end {\n  align-items: flex-end !important;\n}\n\n.is-align-items-center {\n  align-items: center !important;\n}\n\n.is-align-items-baseline {\n  align-items: baseline !important;\n}\n\n.is-align-items-start {\n  align-items: start !important;\n}\n\n.is-align-items-end {\n  align-items: end !important;\n}\n\n.is-align-items-self-start {\n  align-items: self-start !important;\n}\n\n.is-align-items-self-end {\n  align-items: self-end !important;\n}\n\n.is-align-self-auto {\n  align-self: auto !important;\n}\n\n.is-align-self-flex-start {\n  align-self: flex-start !important;\n}\n\n.is-align-self-flex-end {\n  align-self: flex-end !important;\n}\n\n.is-align-self-center {\n  align-self: center !important;\n}\n\n.is-align-self-baseline {\n  align-self: baseline !important;\n}\n\n.is-align-self-stretch {\n  align-self: stretch !important;\n}\n\n.is-flex-grow-0 {\n  flex-grow: 0 !important;\n}\n\n.is-flex-grow-1 {\n  flex-grow: 1 !important;\n}\n\n.is-flex-grow-2 {\n  flex-grow: 2 !important;\n}\n\n.is-flex-grow-3 {\n  flex-grow: 3 !important;\n}\n\n.is-flex-grow-4 {\n  flex-grow: 4 !important;\n}\n\n.is-flex-grow-5 {\n  flex-grow: 5 !important;\n}\n\n.is-flex-shrink-0 {\n  flex-shrink: 0 !important;\n}\n\n.is-flex-shrink-1 {\n  flex-shrink: 1 !important;\n}\n\n.is-flex-shrink-2 {\n  flex-shrink: 2 !important;\n}\n\n.is-flex-shrink-3 {\n  flex-shrink: 3 !important;\n}\n\n.is-flex-shrink-4 {\n  flex-shrink: 4 !important;\n}\n\n.is-flex-shrink-5 {\n  flex-shrink: 5 !important;\n}\n\n.is-clearfix::after {\n  clear: both;\n  content: \" \";\n  display: table;\n}\n\n.is-pulled-left {\n  float: left !important;\n}\n\n.is-pulled-right {\n  float: right !important;\n}\n\n.is-radiusless {\n  border-radius: 0 !important;\n}\n\n.is-shadowless {\n  box-shadow: none !important;\n}\n\n.is-clickable {\n  cursor: pointer !important;\n  pointer-events: all !important;\n}\n\n.is-clipped {\n  overflow: hidden !important;\n}\n\n.is-relative {\n  position: relative !important;\n}\n\n.is-marginless {\n  margin: 0 !important;\n}\n\n.is-paddingless {\n  padding: 0 !important;\n}\n\n.m-0 {\n  margin: 0 !important;\n}\n\n.mt-0 {\n  margin-top: 0 !important;\n}\n\n.mr-0 {\n  margin-right: 0 !important;\n}\n\n.mb-0 {\n  margin-bottom: 0 !important;\n}\n\n.ml-0 {\n  margin-left: 0 !important;\n}\n\n.mx-0 {\n  margin-left: 0 !important;\n  margin-right: 0 !important;\n}\n\n.my-0 {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n.m-1 {\n  margin: 0.25rem !important;\n}\n\n.mt-1 {\n  margin-top: 0.25rem !important;\n}\n\n.mr-1 {\n  margin-right: 0.25rem !important;\n}\n\n.mb-1 {\n  margin-bottom: 0.25rem !important;\n}\n\n.ml-1 {\n  margin-left: 0.25rem !important;\n}\n\n.mx-1 {\n  margin-left: 0.25rem !important;\n  margin-right: 0.25rem !important;\n}\n\n.my-1 {\n  margin-top: 0.25rem !important;\n  margin-bottom: 0.25rem !important;\n}\n\n.m-2 {\n  margin: 0.5rem !important;\n}\n\n.mt-2 {\n  margin-top: 0.5rem !important;\n}\n\n.mr-2 {\n  margin-right: 0.5rem !important;\n}\n\n.mb-2 {\n  margin-bottom: 0.5rem !important;\n}\n\n.ml-2 {\n  margin-left: 0.5rem !important;\n}\n\n.mx-2 {\n  margin-left: 0.5rem !important;\n  margin-right: 0.5rem !important;\n}\n\n.my-2 {\n  margin-top: 0.5rem !important;\n  margin-bottom: 0.5rem !important;\n}\n\n.m-3 {\n  margin: 0.75rem !important;\n}\n\n.mt-3 {\n  margin-top: 0.75rem !important;\n}\n\n.mr-3 {\n  margin-right: 0.75rem !important;\n}\n\n.mb-3 {\n  margin-bottom: 0.75rem !important;\n}\n\n.ml-3 {\n  margin-left: 0.75rem !important;\n}\n\n.mx-3 {\n  margin-left: 0.75rem !important;\n  margin-right: 0.75rem !important;\n}\n\n.my-3 {\n  margin-top: 0.75rem !important;\n  margin-bottom: 0.75rem !important;\n}\n\n.m-4 {\n  margin: 1rem !important;\n}\n\n.mt-4 {\n  margin-top: 1rem !important;\n}\n\n.mr-4 {\n  margin-right: 1rem !important;\n}\n\n.mb-4 {\n  margin-bottom: 1rem !important;\n}\n\n.ml-4 {\n  margin-left: 1rem !important;\n}\n\n.mx-4 {\n  margin-left: 1rem !important;\n  margin-right: 1rem !important;\n}\n\n.my-4 {\n  margin-top: 1rem !important;\n  margin-bottom: 1rem !important;\n}\n\n.m-5 {\n  margin: 1.5rem !important;\n}\n\n.mt-5 {\n  margin-top: 1.5rem !important;\n}\n\n.mr-5 {\n  margin-right: 1.5rem !important;\n}\n\n.mb-5 {\n  margin-bottom: 1.5rem !important;\n}\n\n.ml-5 {\n  margin-left: 1.5rem !important;\n}\n\n.mx-5 {\n  margin-left: 1.5rem !important;\n  margin-right: 1.5rem !important;\n}\n\n.my-5 {\n  margin-top: 1.5rem !important;\n  margin-bottom: 1.5rem !important;\n}\n\n.m-6 {\n  margin: 3rem !important;\n}\n\n.mt-6 {\n  margin-top: 3rem !important;\n}\n\n.mr-6 {\n  margin-right: 3rem !important;\n}\n\n.mb-6 {\n  margin-bottom: 3rem !important;\n}\n\n.ml-6 {\n  margin-left: 3rem !important;\n}\n\n.mx-6 {\n  margin-left: 3rem !important;\n  margin-right: 3rem !important;\n}\n\n.my-6 {\n  margin-top: 3rem !important;\n  margin-bottom: 3rem !important;\n}\n\n.m-auto {\n  margin: auto !important;\n}\n\n.mt-auto {\n  margin-top: auto !important;\n}\n\n.mr-auto {\n  margin-right: auto !important;\n}\n\n.mb-auto {\n  margin-bottom: auto !important;\n}\n\n.ml-auto {\n  margin-left: auto !important;\n}\n\n.mx-auto {\n  margin-left: auto !important;\n  margin-right: auto !important;\n}\n\n.my-auto {\n  margin-top: auto !important;\n  margin-bottom: auto !important;\n}\n\n.p-0 {\n  padding: 0 !important;\n}\n\n.pt-0 {\n  padding-top: 0 !important;\n}\n\n.pr-0 {\n  padding-right: 0 !important;\n}\n\n.pb-0 {\n  padding-bottom: 0 !important;\n}\n\n.pl-0 {\n  padding-left: 0 !important;\n}\n\n.px-0 {\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n}\n\n.py-0 {\n  padding-top: 0 !important;\n  padding-bottom: 0 !important;\n}\n\n.p-1 {\n  padding: 0.25rem !important;\n}\n\n.pt-1 {\n  padding-top: 0.25rem !important;\n}\n\n.pr-1 {\n  padding-right: 0.25rem !important;\n}\n\n.pb-1 {\n  padding-bottom: 0.25rem !important;\n}\n\n.pl-1 {\n  padding-left: 0.25rem !important;\n}\n\n.px-1 {\n  padding-left: 0.25rem !important;\n  padding-right: 0.25rem !important;\n}\n\n.py-1 {\n  padding-top: 0.25rem !important;\n  padding-bottom: 0.25rem !important;\n}\n\n.p-2 {\n  padding: 0.5rem !important;\n}\n\n.pt-2 {\n  padding-top: 0.5rem !important;\n}\n\n.pr-2 {\n  padding-right: 0.5rem !important;\n}\n\n.pb-2 {\n  padding-bottom: 0.5rem !important;\n}\n\n.pl-2 {\n  padding-left: 0.5rem !important;\n}\n\n.px-2 {\n  padding-left: 0.5rem !important;\n  padding-right: 0.5rem !important;\n}\n\n.py-2 {\n  padding-top: 0.5rem !important;\n  padding-bottom: 0.5rem !important;\n}\n\n.p-3 {\n  padding: 0.75rem !important;\n}\n\n.pt-3 {\n  padding-top: 0.75rem !important;\n}\n\n.pr-3 {\n  padding-right: 0.75rem !important;\n}\n\n.pb-3 {\n  padding-bottom: 0.75rem !important;\n}\n\n.pl-3 {\n  padding-left: 0.75rem !important;\n}\n\n.px-3 {\n  padding-left: 0.75rem !important;\n  padding-right: 0.75rem !important;\n}\n\n.py-3 {\n  padding-top: 0.75rem !important;\n  padding-bottom: 0.75rem !important;\n}\n\n.p-4 {\n  padding: 1rem !important;\n}\n\n.pt-4 {\n  padding-top: 1rem !important;\n}\n\n.pr-4 {\n  padding-right: 1rem !important;\n}\n\n.pb-4 {\n  padding-bottom: 1rem !important;\n}\n\n.pl-4 {\n  padding-left: 1rem !important;\n}\n\n.px-4 {\n  padding-left: 1rem !important;\n  padding-right: 1rem !important;\n}\n\n.py-4 {\n  padding-top: 1rem !important;\n  padding-bottom: 1rem !important;\n}\n\n.p-5 {\n  padding: 1.5rem !important;\n}\n\n.pt-5 {\n  padding-top: 1.5rem !important;\n}\n\n.pr-5 {\n  padding-right: 1.5rem !important;\n}\n\n.pb-5 {\n  padding-bottom: 1.5rem !important;\n}\n\n.pl-5 {\n  padding-left: 1.5rem !important;\n}\n\n.px-5 {\n  padding-left: 1.5rem !important;\n  padding-right: 1.5rem !important;\n}\n\n.py-5 {\n  padding-top: 1.5rem !important;\n  padding-bottom: 1.5rem !important;\n}\n\n.p-6 {\n  padding: 3rem !important;\n}\n\n.pt-6 {\n  padding-top: 3rem !important;\n}\n\n.pr-6 {\n  padding-right: 3rem !important;\n}\n\n.pb-6 {\n  padding-bottom: 3rem !important;\n}\n\n.pl-6 {\n  padding-left: 3rem !important;\n}\n\n.px-6 {\n  padding-left: 3rem !important;\n  padding-right: 3rem !important;\n}\n\n.py-6 {\n  padding-top: 3rem !important;\n  padding-bottom: 3rem !important;\n}\n\n.p-auto {\n  padding: auto !important;\n}\n\n.pt-auto {\n  padding-top: auto !important;\n}\n\n.pr-auto {\n  padding-right: auto !important;\n}\n\n.pb-auto {\n  padding-bottom: auto !important;\n}\n\n.pl-auto {\n  padding-left: auto !important;\n}\n\n.px-auto {\n  padding-left: auto !important;\n  padding-right: auto !important;\n}\n\n.py-auto {\n  padding-top: auto !important;\n  padding-bottom: auto !important;\n}\n\n.is-size-1 {\n  font-size: 3rem !important;\n}\n\n.is-size-2 {\n  font-size: 2.5rem !important;\n}\n\n.is-size-3 {\n  font-size: 2rem !important;\n}\n\n.is-size-4 {\n  font-size: 1.5rem !important;\n}\n\n.is-size-5 {\n  font-size: 1.25rem !important;\n}\n\n.is-size-6 {\n  font-size: 1rem !important;\n}\n\n.is-size-7 {\n  font-size: 0.75rem !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-size-1-mobile {\n    font-size: 3rem !important;\n  }\n  .is-size-2-mobile {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-mobile {\n    font-size: 2rem !important;\n  }\n  .is-size-4-mobile {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-mobile {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-mobile {\n    font-size: 1rem !important;\n  }\n  .is-size-7-mobile {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-size-1-tablet {\n    font-size: 3rem !important;\n  }\n  .is-size-2-tablet {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-tablet {\n    font-size: 2rem !important;\n  }\n  .is-size-4-tablet {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-tablet {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-tablet {\n    font-size: 1rem !important;\n  }\n  .is-size-7-tablet {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-size-1-touch {\n    font-size: 3rem !important;\n  }\n  .is-size-2-touch {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-touch {\n    font-size: 2rem !important;\n  }\n  .is-size-4-touch {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-touch {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-touch {\n    font-size: 1rem !important;\n  }\n  .is-size-7-touch {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-size-1-desktop {\n    font-size: 3rem !important;\n  }\n  .is-size-2-desktop {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-desktop {\n    font-size: 2rem !important;\n  }\n  .is-size-4-desktop {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-desktop {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-desktop {\n    font-size: 1rem !important;\n  }\n  .is-size-7-desktop {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-size-1-widescreen {\n    font-size: 3rem !important;\n  }\n  .is-size-2-widescreen {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-widescreen {\n    font-size: 2rem !important;\n  }\n  .is-size-4-widescreen {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-widescreen {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-widescreen {\n    font-size: 1rem !important;\n  }\n  .is-size-7-widescreen {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-size-1-fullhd {\n    font-size: 3rem !important;\n  }\n  .is-size-2-fullhd {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-fullhd {\n    font-size: 2rem !important;\n  }\n  .is-size-4-fullhd {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-fullhd {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-fullhd {\n    font-size: 1rem !important;\n  }\n  .is-size-7-fullhd {\n    font-size: 0.75rem !important;\n  }\n}\n.has-text-centered {\n  text-align: center !important;\n}\n\n.has-text-justified {\n  text-align: justify !important;\n}\n\n.has-text-left {\n  text-align: left !important;\n}\n\n.has-text-right {\n  text-align: right !important;\n}\n\n@media screen and (max-width: 768px) {\n  .has-text-centered-mobile {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .has-text-centered-tablet {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-centered-tablet-only {\n    text-align: center !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .has-text-centered-touch {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .has-text-centered-desktop {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-centered-desktop-only {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .has-text-centered-widescreen {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-centered-widescreen-only {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .has-text-centered-fullhd {\n    text-align: center !important;\n  }\n}\n@media screen and (max-width: 768px) {\n  .has-text-justified-mobile {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .has-text-justified-tablet {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-justified-tablet-only {\n    text-align: justify !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .has-text-justified-touch {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .has-text-justified-desktop {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-justified-desktop-only {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .has-text-justified-widescreen {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-justified-widescreen-only {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .has-text-justified-fullhd {\n    text-align: justify !important;\n  }\n}\n@media screen and (max-width: 768px) {\n  .has-text-left-mobile {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .has-text-left-tablet {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-left-tablet-only {\n    text-align: left !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .has-text-left-touch {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .has-text-left-desktop {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-left-desktop-only {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .has-text-left-widescreen {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-left-widescreen-only {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .has-text-left-fullhd {\n    text-align: left !important;\n  }\n}\n@media screen and (max-width: 768px) {\n  .has-text-right-mobile {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .has-text-right-tablet {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-right-tablet-only {\n    text-align: right !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .has-text-right-touch {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .has-text-right-desktop {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-right-desktop-only {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .has-text-right-widescreen {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-right-widescreen-only {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .has-text-right-fullhd {\n    text-align: right !important;\n  }\n}\n.is-capitalized {\n  text-transform: capitalize !important;\n}\n\n.is-lowercase {\n  text-transform: lowercase !important;\n}\n\n.is-uppercase {\n  text-transform: uppercase !important;\n}\n\n.is-italic {\n  font-style: italic !important;\n}\n\n.is-underlined {\n  text-decoration: underline !important;\n}\n\n.has-text-weight-light {\n  font-weight: 300 !important;\n}\n\n.has-text-weight-normal {\n  font-weight: 400 !important;\n}\n\n.has-text-weight-medium {\n  font-weight: 500 !important;\n}\n\n.has-text-weight-semibold {\n  font-weight: 600 !important;\n}\n\n.has-text-weight-bold {\n  font-weight: 700 !important;\n}\n\n.is-family-primary {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !important;\n}\n\n.is-family-secondary {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !important;\n}\n\n.is-family-sans-serif {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !important;\n}\n\n.is-family-monospace {\n  font-family: monospace !important;\n}\n\n.is-family-code {\n  font-family: monospace !important;\n}\n\n.is-block {\n  display: block !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-block-mobile {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-block-tablet {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-block-tablet-only {\n    display: block !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-block-touch {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-block-desktop {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-block-desktop-only {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-block-widescreen {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-block-widescreen-only {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-block-fullhd {\n    display: block !important;\n  }\n}\n.is-flex {\n  display: flex !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-flex-mobile {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-flex-tablet {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-flex-tablet-only {\n    display: flex !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-flex-touch {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-flex-desktop {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-flex-desktop-only {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-flex-widescreen {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-flex-widescreen-only {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-flex-fullhd {\n    display: flex !important;\n  }\n}\n.is-inline {\n  display: inline !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-inline-mobile {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-inline-tablet {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-inline-tablet-only {\n    display: inline !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-inline-touch {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-inline-desktop {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-inline-desktop-only {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-inline-widescreen {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-inline-widescreen-only {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-inline-fullhd {\n    display: inline !important;\n  }\n}\n.is-inline-block {\n  display: inline-block !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-inline-block-mobile {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-inline-block-tablet {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-inline-block-tablet-only {\n    display: inline-block !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-inline-block-touch {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-inline-block-desktop {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-inline-block-desktop-only {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-inline-block-widescreen {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-inline-block-widescreen-only {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-inline-block-fullhd {\n    display: inline-block !important;\n  }\n}\n.is-inline-flex {\n  display: inline-flex !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-inline-flex-mobile {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-inline-flex-tablet {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-inline-flex-tablet-only {\n    display: inline-flex !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-inline-flex-touch {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-inline-flex-desktop {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-inline-flex-desktop-only {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-inline-flex-widescreen {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-inline-flex-widescreen-only {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-inline-flex-fullhd {\n    display: inline-flex !important;\n  }\n}\n.is-hidden {\n  display: none !important;\n}\n\n.is-sr-only {\n  border: none !important;\n  clip: rect(0, 0, 0, 0) !important;\n  height: 0.01em !important;\n  overflow: hidden !important;\n  padding: 0 !important;\n  position: absolute !important;\n  white-space: nowrap !important;\n  width: 0.01em !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-hidden-mobile {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-hidden-tablet {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-hidden-tablet-only {\n    display: none !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-hidden-touch {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-hidden-desktop {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-hidden-desktop-only {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-hidden-widescreen {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-hidden-widescreen-only {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-hidden-fullhd {\n    display: none !important;\n  }\n}\n.is-invisible {\n  visibility: hidden !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-invisible-mobile {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-invisible-tablet {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-invisible-tablet-only {\n    visibility: hidden !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-invisible-touch {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-invisible-desktop {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-invisible-desktop-only {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-invisible-widescreen {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-invisible-widescreen-only {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-invisible-fullhd {\n    visibility: hidden !important;\n  }\n}\n/* Bulma Layout */\n.hero {\n  align-items: stretch;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.hero .navbar {\n  background: none;\n}\n.hero .tabs ul {\n  border-bottom: none;\n}\n.hero.is-white {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-white a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-white strong {\n  color: inherit;\n}\n.hero.is-white .title {\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-white .subtitle {\n  color: rgba(10, 10, 10, 0.9);\n}\n.hero.is-white .subtitle a:not(.button),\n.hero.is-white .subtitle strong {\n  color: hsl(0, 0%, 4%);\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-white .navbar-menu {\n    background-color: hsl(0, 0%, 100%);\n  }\n}\n.hero.is-white .navbar-item,\n.hero.is-white .navbar-link {\n  color: rgba(10, 10, 10, 0.7);\n}\n.hero.is-white a.navbar-item:hover, .hero.is-white a.navbar-item.is-active,\n.hero.is-white .navbar-link:hover,\n.hero.is-white .navbar-link.is-active {\n  background-color: #f2f2f2;\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-white .tabs a {\n  color: hsl(0, 0%, 4%);\n  opacity: 0.9;\n}\n.hero.is-white .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-white .tabs li.is-active a {\n  color: hsl(0, 0%, 100%) !important;\n  opacity: 1;\n}\n.hero.is-white .tabs.is-boxed a, .hero.is-white .tabs.is-toggle a {\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-white .tabs.is-boxed a:hover, .hero.is-white .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-white .tabs.is-boxed li.is-active a, .hero.is-white .tabs.is-boxed li.is-active a:hover, .hero.is-white .tabs.is-toggle li.is-active a, .hero.is-white .tabs.is-toggle li.is-active a:hover {\n  background-color: hsl(0, 0%, 4%);\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-white.is-bold {\n  background-image: linear-gradient(141deg, #e8e3e4 0%, hsl(0, 0%, 100%) 71%, white 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-white.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #e8e3e4 0%, hsl(0, 0%, 100%) 71%, white 100%);\n  }\n}\n.hero.is-black {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-black a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-black strong {\n  color: inherit;\n}\n.hero.is-black .title {\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-black .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-black .subtitle a:not(.button),\n.hero.is-black .subtitle strong {\n  color: hsl(0, 0%, 100%);\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-black .navbar-menu {\n    background-color: hsl(0, 0%, 4%);\n  }\n}\n.hero.is-black .navbar-item,\n.hero.is-black .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-black a.navbar-item:hover, .hero.is-black a.navbar-item.is-active,\n.hero.is-black .navbar-link:hover,\n.hero.is-black .navbar-link.is-active {\n  background-color: black;\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-black .tabs a {\n  color: hsl(0, 0%, 100%);\n  opacity: 0.9;\n}\n.hero.is-black .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-black .tabs li.is-active a {\n  color: hsl(0, 0%, 4%) !important;\n  opacity: 1;\n}\n.hero.is-black .tabs.is-boxed a, .hero.is-black .tabs.is-toggle a {\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-black .tabs.is-boxed a:hover, .hero.is-black .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-black .tabs.is-boxed li.is-active a, .hero.is-black .tabs.is-boxed li.is-active a:hover, .hero.is-black .tabs.is-toggle li.is-active a, .hero.is-black .tabs.is-toggle li.is-active a:hover {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-black.is-bold {\n  background-image: linear-gradient(141deg, black 0%, hsl(0, 0%, 4%) 71%, #181616 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-black.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, black 0%, hsl(0, 0%, 4%) 71%, #181616 100%);\n  }\n}\n.hero.is-light {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-light strong {\n  color: inherit;\n}\n.hero.is-light .title {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light .subtitle {\n  color: rgba(0, 0, 0, 0.9);\n}\n.hero.is-light .subtitle a:not(.button),\n.hero.is-light .subtitle strong {\n  color: rgba(0, 0, 0, 0.7);\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-light .navbar-menu {\n    background-color: hsl(0, 0%, 96%);\n  }\n}\n.hero.is-light .navbar-item,\n.hero.is-light .navbar-link {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light a.navbar-item:hover, .hero.is-light a.navbar-item.is-active,\n.hero.is-light .navbar-link:hover,\n.hero.is-light .navbar-link.is-active {\n  background-color: #e8e8e8;\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light .tabs a {\n  color: rgba(0, 0, 0, 0.7);\n  opacity: 0.9;\n}\n.hero.is-light .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-light .tabs li.is-active a {\n  color: hsl(0, 0%, 96%) !important;\n  opacity: 1;\n}\n.hero.is-light .tabs.is-boxed a, .hero.is-light .tabs.is-toggle a {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light .tabs.is-boxed a:hover, .hero.is-light .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-light .tabs.is-boxed li.is-active a, .hero.is-light .tabs.is-boxed li.is-active a:hover, .hero.is-light .tabs.is-toggle li.is-active a, .hero.is-light .tabs.is-toggle li.is-active a:hover {\n  background-color: rgba(0, 0, 0, 0.7);\n  border-color: rgba(0, 0, 0, 0.7);\n  color: hsl(0, 0%, 96%);\n}\n.hero.is-light.is-bold {\n  background-image: linear-gradient(141deg, #dfd8d9 0%, hsl(0, 0%, 96%) 71%, white 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-light.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #dfd8d9 0%, hsl(0, 0%, 96%) 71%, white 100%);\n  }\n}\n.hero.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.hero.is-dark a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-dark strong {\n  color: inherit;\n}\n.hero.is-dark .title {\n  color: #fff;\n}\n.hero.is-dark .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-dark .subtitle a:not(.button),\n.hero.is-dark .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-dark .navbar-menu {\n    background-color: hsl(0, 0%, 21%);\n  }\n}\n.hero.is-dark .navbar-item,\n.hero.is-dark .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-dark a.navbar-item:hover, .hero.is-dark a.navbar-item.is-active,\n.hero.is-dark .navbar-link:hover,\n.hero.is-dark .navbar-link.is-active {\n  background-color: #292929;\n  color: #fff;\n}\n.hero.is-dark .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-dark .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-dark .tabs li.is-active a {\n  color: hsl(0, 0%, 21%) !important;\n  opacity: 1;\n}\n.hero.is-dark .tabs.is-boxed a, .hero.is-dark .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-dark .tabs.is-boxed a:hover, .hero.is-dark .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-dark .tabs.is-boxed li.is-active a, .hero.is-dark .tabs.is-boxed li.is-active a:hover, .hero.is-dark .tabs.is-toggle li.is-active a, .hero.is-dark .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(0, 0%, 21%);\n}\n.hero.is-dark.is-bold {\n  background-image: linear-gradient(141deg, #1f191a 0%, hsl(0, 0%, 21%) 71%, #46403f 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-dark.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #1f191a 0%, hsl(0, 0%, 21%) 71%, #46403f 100%);\n  }\n}\n.hero.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.hero.is-primary a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-primary strong {\n  color: inherit;\n}\n.hero.is-primary .title {\n  color: #fff;\n}\n.hero.is-primary .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-primary .subtitle a:not(.button),\n.hero.is-primary .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-primary .navbar-menu {\n    background-color: hsl(171, 100%, 41%);\n  }\n}\n.hero.is-primary .navbar-item,\n.hero.is-primary .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-primary a.navbar-item:hover, .hero.is-primary a.navbar-item.is-active,\n.hero.is-primary .navbar-link:hover,\n.hero.is-primary .navbar-link.is-active {\n  background-color: #00b89c;\n  color: #fff;\n}\n.hero.is-primary .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-primary .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-primary .tabs li.is-active a {\n  color: hsl(171, 100%, 41%) !important;\n  opacity: 1;\n}\n.hero.is-primary .tabs.is-boxed a, .hero.is-primary .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-primary .tabs.is-boxed a:hover, .hero.is-primary .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-primary .tabs.is-boxed li.is-active a, .hero.is-primary .tabs.is-boxed li.is-active a:hover, .hero.is-primary .tabs.is-toggle li.is-active a, .hero.is-primary .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(171, 100%, 41%);\n}\n.hero.is-primary.is-bold {\n  background-image: linear-gradient(141deg, #009e6c 0%, hsl(171, 100%, 41%) 71%, #00e7eb 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-primary.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #009e6c 0%, hsl(171, 100%, 41%) 71%, #00e7eb 100%);\n  }\n}\n.hero.is-link {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.hero.is-link a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-link strong {\n  color: inherit;\n}\n.hero.is-link .title {\n  color: #fff;\n}\n.hero.is-link .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-link .subtitle a:not(.button),\n.hero.is-link .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-link .navbar-menu {\n    background-color: hsl(229, 53%, 53%);\n  }\n}\n.hero.is-link .navbar-item,\n.hero.is-link .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-link a.navbar-item:hover, .hero.is-link a.navbar-item.is-active,\n.hero.is-link .navbar-link:hover,\n.hero.is-link .navbar-link.is-active {\n  background-color: #3a51bb;\n  color: #fff;\n}\n.hero.is-link .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-link .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-link .tabs li.is-active a {\n  color: hsl(229, 53%, 53%) !important;\n  opacity: 1;\n}\n.hero.is-link .tabs.is-boxed a, .hero.is-link .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-link .tabs.is-boxed a:hover, .hero.is-link .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-link .tabs.is-boxed li.is-active a, .hero.is-link .tabs.is-boxed li.is-active a:hover, .hero.is-link .tabs.is-toggle li.is-active a, .hero.is-link .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(229, 53%, 53%);\n}\n.hero.is-link.is-bold {\n  background-image: linear-gradient(141deg, #2959b3 0%, hsl(229, 53%, 53%) 71%, #5658d2 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-link.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #2959b3 0%, hsl(229, 53%, 53%) 71%, #5658d2 100%);\n  }\n}\n.hero.is-info {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.hero.is-info a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-info strong {\n  color: inherit;\n}\n.hero.is-info .title {\n  color: #fff;\n}\n.hero.is-info .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-info .subtitle a:not(.button),\n.hero.is-info .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-info .navbar-menu {\n    background-color: hsl(207, 61%, 53%);\n  }\n}\n.hero.is-info .navbar-item,\n.hero.is-info .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-info a.navbar-item:hover, .hero.is-info a.navbar-item.is-active,\n.hero.is-info .navbar-link:hover,\n.hero.is-info .navbar-link.is-active {\n  background-color: #3082c5;\n  color: #fff;\n}\n.hero.is-info .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-info .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-info .tabs li.is-active a {\n  color: hsl(207, 61%, 53%) !important;\n  opacity: 1;\n}\n.hero.is-info .tabs.is-boxed a, .hero.is-info .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-info .tabs.is-boxed a:hover, .hero.is-info .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-info .tabs.is-boxed li.is-active a, .hero.is-info .tabs.is-boxed li.is-active a:hover, .hero.is-info .tabs.is-toggle li.is-active a, .hero.is-info .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(207, 61%, 53%);\n}\n.hero.is-info.is-bold {\n  background-image: linear-gradient(141deg, #208fbc 0%, hsl(207, 61%, 53%) 71%, #4d83db 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-info.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #208fbc 0%, hsl(207, 61%, 53%) 71%, #4d83db 100%);\n  }\n}\n.hero.is-success {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.hero.is-success a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-success strong {\n  color: inherit;\n}\n.hero.is-success .title {\n  color: #fff;\n}\n.hero.is-success .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-success .subtitle a:not(.button),\n.hero.is-success .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-success .navbar-menu {\n    background-color: hsl(153, 53%, 53%);\n  }\n}\n.hero.is-success .navbar-item,\n.hero.is-success .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-success a.navbar-item:hover, .hero.is-success a.navbar-item.is-active,\n.hero.is-success .navbar-link:hover,\n.hero.is-success .navbar-link.is-active {\n  background-color: #3abb81;\n  color: #fff;\n}\n.hero.is-success .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-success .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-success .tabs li.is-active a {\n  color: hsl(153, 53%, 53%) !important;\n  opacity: 1;\n}\n.hero.is-success .tabs.is-boxed a, .hero.is-success .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-success .tabs.is-boxed a:hover, .hero.is-success .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-success .tabs.is-boxed li.is-active a, .hero.is-success .tabs.is-boxed li.is-active a:hover, .hero.is-success .tabs.is-toggle li.is-active a, .hero.is-success .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(153, 53%, 53%);\n}\n.hero.is-success.is-bold {\n  background-image: linear-gradient(141deg, #29b35e 0%, hsl(153, 53%, 53%) 71%, #56d2af 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-success.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #29b35e 0%, hsl(153, 53%, 53%) 71%, #56d2af 100%);\n  }\n}\n.hero.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-warning strong {\n  color: inherit;\n}\n.hero.is-warning .title {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning .subtitle {\n  color: rgba(0, 0, 0, 0.9);\n}\n.hero.is-warning .subtitle a:not(.button),\n.hero.is-warning .subtitle strong {\n  color: rgba(0, 0, 0, 0.7);\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-warning .navbar-menu {\n    background-color: hsl(44, 100%, 77%);\n  }\n}\n.hero.is-warning .navbar-item,\n.hero.is-warning .navbar-link {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning a.navbar-item:hover, .hero.is-warning a.navbar-item.is-active,\n.hero.is-warning .navbar-link:hover,\n.hero.is-warning .navbar-link.is-active {\n  background-color: #ffd970;\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning .tabs a {\n  color: rgba(0, 0, 0, 0.7);\n  opacity: 0.9;\n}\n.hero.is-warning .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-warning .tabs li.is-active a {\n  color: hsl(44, 100%, 77%) !important;\n  opacity: 1;\n}\n.hero.is-warning .tabs.is-boxed a, .hero.is-warning .tabs.is-toggle a {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning .tabs.is-boxed a:hover, .hero.is-warning .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-warning .tabs.is-boxed li.is-active a, .hero.is-warning .tabs.is-boxed li.is-active a:hover, .hero.is-warning .tabs.is-toggle li.is-active a, .hero.is-warning .tabs.is-toggle li.is-active a:hover {\n  background-color: rgba(0, 0, 0, 0.7);\n  border-color: rgba(0, 0, 0, 0.7);\n  color: hsl(44, 100%, 77%);\n}\n.hero.is-warning.is-bold {\n  background-image: linear-gradient(141deg, #ffb657 0%, hsl(44, 100%, 77%) 71%, #fff6a3 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-warning.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #ffb657 0%, hsl(44, 100%, 77%) 71%, #fff6a3 100%);\n  }\n}\n.hero.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.hero.is-danger a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-danger strong {\n  color: inherit;\n}\n.hero.is-danger .title {\n  color: #fff;\n}\n.hero.is-danger .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-danger .subtitle a:not(.button),\n.hero.is-danger .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-danger .navbar-menu {\n    background-color: hsl(348, 86%, 61%);\n  }\n}\n.hero.is-danger .navbar-item,\n.hero.is-danger .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-danger a.navbar-item:hover, .hero.is-danger a.navbar-item.is-active,\n.hero.is-danger .navbar-link:hover,\n.hero.is-danger .navbar-link.is-active {\n  background-color: #ef2e55;\n  color: #fff;\n}\n.hero.is-danger .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-danger .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-danger .tabs li.is-active a {\n  color: hsl(348, 86%, 61%) !important;\n  opacity: 1;\n}\n.hero.is-danger .tabs.is-boxed a, .hero.is-danger .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-danger .tabs.is-boxed a:hover, .hero.is-danger .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-danger .tabs.is-boxed li.is-active a, .hero.is-danger .tabs.is-boxed li.is-active a:hover, .hero.is-danger .tabs.is-toggle li.is-active a, .hero.is-danger .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(348, 86%, 61%);\n}\n.hero.is-danger.is-bold {\n  background-image: linear-gradient(141deg, #fa0a62 0%, hsl(348, 86%, 61%) 71%, #f7595f 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-danger.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #fa0a62 0%, hsl(348, 86%, 61%) 71%, #f7595f 100%);\n  }\n}\n.hero.is-small .hero-body {\n  padding: 1.5rem;\n}\n@media screen and (min-width: 769px), print {\n  .hero.is-medium .hero-body {\n    padding: 9rem 4.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .hero.is-large .hero-body {\n    padding: 18rem 6rem;\n  }\n}\n.hero.is-halfheight .hero-body, .hero.is-fullheight .hero-body, .hero.is-fullheight-with-navbar .hero-body {\n  align-items: center;\n  display: flex;\n}\n.hero.is-halfheight .hero-body > .container, .hero.is-fullheight .hero-body > .container, .hero.is-fullheight-with-navbar .hero-body > .container {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.hero.is-halfheight {\n  min-height: 50vh;\n}\n.hero.is-fullheight {\n  min-height: 100vh;\n}\n\n.hero-video {\n  overflow: hidden;\n}\n.hero-video video {\n  left: 50%;\n  min-height: 100%;\n  min-width: 100%;\n  position: absolute;\n  top: 50%;\n  transform: translate3d(-50%, -50%, 0);\n}\n.hero-video.is-transparent {\n  opacity: 0.3;\n}\n@media screen and (max-width: 768px) {\n  .hero-video {\n    display: none;\n  }\n}\n\n.hero-buttons {\n  margin-top: 1.5rem;\n}\n@media screen and (max-width: 768px) {\n  .hero-buttons .button {\n    display: flex;\n  }\n  .hero-buttons .button:not(:last-child) {\n    margin-bottom: 0.75rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .hero-buttons {\n    display: flex;\n    justify-content: center;\n  }\n  .hero-buttons .button:not(:last-child) {\n    margin-right: 1.5rem;\n  }\n}\n\n.hero-head,\n.hero-foot {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n\n.hero-body {\n  flex-grow: 1;\n  flex-shrink: 0;\n  padding: 3rem 1.5rem;\n}\n@media screen and (min-width: 769px), print {\n  .hero-body {\n    padding: 3rem 3rem;\n  }\n}\n\n.section {\n  padding: 3rem 1.5rem;\n}\n@media screen and (min-width: 1024px) {\n  .section {\n    padding: 3rem 3rem;\n  }\n  .section.is-medium {\n    padding: 9rem 4.5rem;\n  }\n  .section.is-large {\n    padding: 18rem 6rem;\n  }\n}\n\n.footer {\n  background-color: hsl(0, 0%, 98%);\n  padding: 3rem 1.5rem 6rem;\n}", "",{"version":3,"sources":["webpack://./node_modules/bulma/bulma.sass","webpack://./node_modules/bulma/sass/utilities/_all.sass","webpack://./node_modules/bulma/sass/utilities/extends.sass","webpack://./node_modules/bulma/sass/utilities/controls.sass","webpack://./node_modules/bulma/sass/utilities/initial-variables.sass","webpack://./node_modules/bulma/sass/utilities/mixins.sass","webpack://./node_modules/bulma/sass/base/_all.sass","webpack://./node_modules/bulma/sass/base/minireset.sass","webpack://./node_modules/bulma/sass/base/generic.sass","webpack://./node_modules/bulma/sass/utilities/derived-variables.sass","webpack://./node_modules/bulma/sass/base/animations.sass","webpack://./node_modules/bulma/sass/elements/_all.sass","webpack://./node_modules/bulma/sass/elements/box.sass","webpack://./node_modules/bulma/sass/elements/button.sass","webpack://./node_modules/bulma/sass/elements/container.sass","webpack://./node_modules/bulma/sass/elements/content.sass","webpack://./node_modules/bulma/sass/elements/icon.sass","webpack://./node_modules/bulma/sass/elements/image.sass","webpack://./node_modules/bulma/sass/elements/notification.sass","webpack://./node_modules/bulma/sass/elements/progress.sass","webpack://./node_modules/bulma/sass/elements/table.sass","webpack://./node_modules/bulma/sass/elements/tag.sass","webpack://./node_modules/bulma/sass/elements/title.sass","webpack://./node_modules/bulma/sass/elements/other.sass","webpack://./node_modules/bulma/sass/form/_all.sass","webpack://./node_modules/bulma/sass/form/shared.sass","webpack://./node_modules/bulma/sass/form/input-textarea.sass","webpack://./node_modules/bulma/sass/form/checkbox-radio.sass","webpack://./node_modules/bulma/sass/form/select.sass","webpack://./node_modules/bulma/sass/form/file.sass","webpack://./node_modules/bulma/sass/form/tools.sass","webpack://./node_modules/bulma/sass/components/_all.sass","webpack://./node_modules/bulma/sass/components/breadcrumb.sass","webpack://./node_modules/bulma/sass/components/card.sass","webpack://./node_modules/bulma/sass/components/dropdown.sass","webpack://./node_modules/bulma/sass/components/level.sass","webpack://./node_modules/bulma/sass/components/media.sass","webpack://./node_modules/bulma/sass/components/menu.sass","webpack://./node_modules/bulma/sass/components/message.sass","webpack://./node_modules/bulma/sass/components/modal.sass","webpack://./node_modules/bulma/sass/components/navbar.sass","webpack://./node_modules/bulma/sass/components/pagination.sass","webpack://./node_modules/bulma/sass/components/panel.sass","webpack://./node_modules/bulma/sass/components/tabs.sass","webpack://./node_modules/bulma/sass/grid/_all.sass","webpack://./node_modules/bulma/sass/grid/columns.sass","webpack://./node_modules/bulma/sass/grid/tiles.sass","webpack://./node_modules/bulma/sass/helpers/_all.sass","webpack://./node_modules/bulma/sass/helpers/color.sass","webpack://./node_modules/bulma/sass/helpers/flexbox.sass","webpack://./node_modules/bulma/sass/helpers/float.sass","webpack://./node_modules/bulma/sass/helpers/other.sass","webpack://./node_modules/bulma/sass/helpers/overflow.sass","webpack://./node_modules/bulma/sass/helpers/position.sass","webpack://./node_modules/bulma/sass/helpers/spacing.sass","webpack://./node_modules/bulma/sass/helpers/typography.sass","webpack://./node_modules/bulma/sass/helpers/visibility.sass","webpack://./node_modules/bulma/sass/layout/_all.sass","webpack://./node_modules/bulma/sass/layout/hero.sass","webpack://./node_modules/bulma/sass/layout/section.sass","webpack://./node_modules/bulma/sass/layout/footer.sass"],"names":[],"mappings":"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,cCnBK;EDoBL,kBArEU;EAsEV,mBAvEY;EAwEZ,4BAzEa;ARwVf;;AQ7QA;EACE,iCJ/Ea;EIgFb,YAAA;EACA,cAAA;EACA,WAxEU;EAyEV,gBAxEU;ARwVZ;;AQ9QA;EACE,YAAA;EACA,eAAA;ARiRF;;AQ/QA;;EAEE,wBAAA;ARkRF;;AQhRA;EACE,kBAvFgB;AR0WlB;;AQjRA;EACE,mBAAA;EACA,oBAAA;ARoRF;;AQlRA;EACE,sBJ5Ga;EI6Gb,gBJvEY;AJ4Vd;;AQjRA;EACE,YAAA;ARoRF;;AQlRA;EHvDE,iCAAA;EGyDA,iCJ/Ga;EIgHb,sBJtHa;EIuHb,kBAjGc;EAkGd,gBAAA;EACA,uBAlGY;EAmGZ,gBAAA;EACA,iBAAA;ARqRF;AQpRE;EACE,6BAAA;EACA,mBAAA;EACA,cAvGiB;EAwGjB,UAAA;ARsRJ;;AQnRE;;EAEE,mBAAA;ARsRJ;AQrRI;;EACE,mBAAA;ARwRN;AQvRE;EACE,sBJ1IW;AJmaf;;AUzaA;EACE;IACE,uBAAA;EV4aF;EU3aA;IACE,yBAAA;EV6aF;AACF;AWlbA,mBAAA;ACWA;EAEE,kCREa;EQDb,kBRyDa;EQxDb,0FHwFO;EGvFP,sBRTa;EQUb,cAAA;EACA,gBAZY;AZqbd;;AYtaE;EAEE,oFAfoB;AZubxB;AYvaE;EACE,+EAhBqB;AZybzB;;AatYA;EAGE,kCThDa;ESiDb,6BTtDa;ESuDb,iBV5DqB;EU6DrB,sBT5Da;ES6Db,eAAA;EAGA,uBAAA;EACA,iCA7DwB;EA8DxB,iBA7D0B;EA8D1B,kBA9D0B;EA+D1B,8BAhEwB;EAiExB,kBAAA;EACA,mBAAA;AbqYF;AapYE;EACE,cAAA;AbsYJ;AapYI;EAIE,aAAA;EACA,YAAA;AbmYN;AalYI;ER8FA,+BQ7F0B;ER6F1B,oBQ5F0B;AboY9B;AanYI;ER2FA,mBQ1F0B;ER0F1B,gCQzF0B;AbqY9B;AapYI;EACE,+BAAA;EACA,gCAAA;AbsYN;AapYE;EAEE,6BTzFW;ES0FX,sBT7FW;AJkef;AapYE;EAEE,gCThFW;ESiFX,sBTjGW;AJsef;AapYI;EACE,iDAAA;AbsYN;AarYE;EAEE,6BTr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AJi8CT;Aar7CE;EACE,kBTkBW;AJq6Cf;Aa1rCI;EAxPF,kBTpBO;AJy8CT;Aa1rCI;EAzPF,iBTvBO;AJ68CT;AazrCM;EACE,4BAAA;EACA,yBAAA;Ab2rCR;Aa1rCM;EACE,6BAAA;EACA,0BAAA;ERxIJ,kBQyI4B;Ab4rChC;Aa3rCM;ER1IF,eQ2I4B;Ab6rChC;Aa5rCM;EAEE,UAAA;Ab6rCR;Aa5rCM;EAKE,UAAA;Ab0rCR;AazrCQ;EACE,UAAA;Ab2rCV;Aa1rCM;EACE,YAAA;EACA,cAAA;Ab4rCR;Aa3rCE;EACE,uBAAA;Ab6rCJ;Aa3rCM;EACE,oBAAA;EACA,qBAAA;Ab6rCR;Aa5rCE;EACE,yBAAA;Ab8rCJ;Aa5rCM;EACE,oBAAA;EACA,qBAAA;Ab8rCR;;AKz7CE;EQiQM;IACE,oBAlTgB;Eb8+CxB;Ea1rCM;;IAEE,qBAtTgB;Ebk/CxB;EajsCM;IACE,kBAlTgB;Ebq/CxB;EapsCM;IACE,eAlTgB;Ebw/CxB;AACF;AKr8CE;EQ6PM;IACE,qBAlTgB;Eb6/CxB;EazsCM;;IAEE,kBAtTgB;EbigDxB;EahtCM;IACE,eAlTgB;EbogDxB;EantCM;IACE,kBAlTgB;EbugDxB;AACF;AcjjDA;EACE,YAAA;EACA,cAAA;EACA,kBAAA;EACA,WAAA;AdmjDF;AcljDE;EACE,0BAAA;EACA,kBVyCE;EUxCF,mBVwCE;EUvCF,WAAA;AdojDJ;AK58CE;ESjHF;IAWI,gBAAA;EdsjDF;AACF;AKv8CI;ES9GA;IACE,iBAAA;EdwjDJ;AACF;AK77CI;ES1HA;IACE,iBAAA;Ed0jDJ;AACF;AK58CI;ES7GA;IACE,iBAAA;Ed4jDJ;AACF;AKl8CI;ESzHA;IACE,iBAAA;Ed8jDJ;AACF;;AehkDE;EACE,kBAAA;AfmkDJ;Ae1jDI;;;;;;;EACE,kBAhCwB;AfkmD9B;AejkDE;;;;;;EAME,sBXvCW;EWwCX,gBXHc;EWId,kBA3C0B;Af8mD9B;AelkDE;EACE,cAAA;EACA,oBAAA;AfokDJ;AenkDI;EACE,eAAA;AfqkDN;AepkDE;EACE,iBAAA;EACA,uBAAA;AfskDJ;AerkDI;EACE,oBA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oBxtEI;;EAEE,qBAxEyB;EAyEzB,sBhBhFS;AJ0yEf;AoBztEE;EACE,6BAvE0B;ApBkyE9B;AoBxtEQ;;EAEE,sBAAA;ApB0tEV;AoBvtEI;;EAEE,iBAAA;ApBytEN;AoBttEQ;;EAEE,wBAAA;ApBwtEV;AoBvtEE;EACE,WAAA;ApBytEJ;AoBrtEQ;EACE,iChBhGK;AJuzEf;AoBntEU;EACE,iChBrGG;AJ0zEf;AoBptEY;EACE,iChBxGC;AJ8zEf;AoBptEI;;EAEE,qBAAA;ApBstEN;AoBltEQ;EACE,iChBhHK;AJo0Ef;;AoBltEA;Ef7DE,iCAAA;EegEA,cAAA;EACA,kBAAA;EACA,eAAA;ApBotEF;;AqBh1EA;EACE,mBAAA;EACA,aAAA;EACA,eAAA;EACA,2BAAA;ArBm1EF;AqBl1EE;EACE,qBAAA;ArBo1EJ;AqBn1EI;EhBoKA,oBgBnK0B;ArBq1E9B;AqBp1EE;EACE,sBAAA;ArBs1EJ;AqBr1EE;EACE,mBAAA;ArBu1EJ;AqBp1EI;EACE,ejBYG;AJ00ET;AqBp1EI;EACE,kBjBQG;AJ80ET;AqBr1EE;EACE,uBAAA;ArBu1EJ;AqBt1EI;EACE,qBAAA;EACA,oBAAA;ArBw1EN;AqBv1EE;EACE,yBAAA;ArBy1EJ;AqBv1EM;EACE,mBAAA;ArBy1ER;AqBx1EM;EACE,eAAA;ArB01ER;AqBx1EI;EhB0IA,egBzI0B;ArB01E9B;AqBz1EM;EhBwIF,cgBvI4B;EAEtB,yBAAA;EACA,4BAAA;ArB01EV;AqBt1EM;EAEI,0BAAA;EACA,6BAAA;ArBu1EV;;AqBl1EA;EACE,mBAAA;EACA,iCjBjDa;EiBkDb,kBjBOO;EiBNP,sBjBzDa;EiB0Db,oBAAA;EACA,kBjB5BO;EiB6BP,WAAA;EACA,uBAAA;EACA,gBAAA;EACA,oBAAA;EACA,qBAAA;EACA,mBAAA;ArBq1EF;AqBp1EE;EhB2GE,oBgB1GwB;EhB0GxB,uBgBzGwB;ArBs1E5B;AqBj1EI;EACE,kCAHM;EAIN,qBAHa;ArBs1EnB;AqBr1EI;EACE,gCAHM;EAIN,uBAHa;ArB01EnB;AqBz1EI;EACE,iCAHM;EAIN,yBAHa;ArB81EnB;AqB71EI;EACE,iCAHM;EAIN,WAHa;ArBk2EnB;AqBj2EI;EACE,qCAHM;EAIN,WAHa;ArBs2EnB;AqB91EQ;EACE,yBAHY;EAIZ,cAHW;ArBm2ErB;AqBz2EI;EACE,oCAHM;EAIN,WAHa;ArB82EnB;AqBt2EQ;EACE,yBAHY;EAIZ,cAHW;ArB22ErB;AqBj3EI;EACE,oCAHM;EAIN,WAHa;ArBs3EnB;AqB92EQ;EACE,yBAHY;EAIZ,cAHW;ArBm3ErB;AqBz3EI;EACE,oCAHM;EAIN,WAHa;ArB83EnB;AqBt3EQ;EACE,yBAHY;EAIZ,cAHW;ArB23ErB;AqBj4EI;EACE,oCAHM;EAIN,yBAHa;ArBs4EnB;AqB93EQ;EACE,yBAHY;EAIZ,cAHW;ArBm4ErB;AqBz4EI;EACE,oCAHM;EAIN,WAHa;ArB84EnB;AqBt4EQ;EACE,yBAHY;EAIZ,cAHW;ArB24ErB;AqBt4EE;EACE,kBjBtDK;AJ87ET;AqBv4EE;EACE,ejBzDK;AJk8ET;AqBx4EE;EACE,kBjB5DK;AJs8ET;AqBx4EI;EhBkFA,qBgBjF0B;EhBiF1B,sBgBhF0B;ArB04E9B;AqBz4EI;EhB+EA,qBgB9E0B;EhB8E1B,sBgB7E0B;ArB24E9B;AqB14EI;EhB4EA,qBgB3E0B;EhB2E1B,sBgB1E0B;ArB44E9B;AqB14EE;EhBwEE,gBgB/KgB;EAyGhB,UAAA;EACA,kBAAA;EACA,UAAA;ArB44EJ;AqB34EI;EAEE,8BAAA;EACA,WAAA;EACA,cAAA;EACA,SAAA;EACA,kBAAA;EACA,QAAA;EACA,0DAAA;EACA,+BAAA;ArB44EN;AqB34EI;EACE,WAAA;EACA,UAAA;ArB64EN;AqB54EI;EACE,WAAA;EACA,UAAA;ArB84EN;AqB74EI;EAEE,yBAAA;ArB84EN;AqB74EI;EACE,yBAAA;ArB+4EN;AqB94EE;EACE,qBjB/Da;AJ+8EjB;;AqB74EE;EACE,0BAAA;ArBg5EJ;;AsBtgFA;;EAGE,sBAAA;AtBwgFF;AsBvgFE;;;;EAEE,oBAAA;AtB2gFJ;AsB1gFE;;EACE,iBApBa;AtBiiFjB;AsB5gFE;;EACE,iBArBa;AtBoiFjB;AsB9gFE;;EACE,sBAAA;AtBihFJ;;AsB/gFA;EACE,sBlB9Ba;EkBiCb,elBLO;EkBMP,gBlBGgB;EkBFhB,kBAnCkB;AtBmjFpB;AsB/gFE;EACE,cApCiB;EAqCjB,oBApCkB;AtBqjFtB;AsBhhFE;EACE,oBA3BuB;AtB6iF3B;AsB9gFI;EACE,eb8DE;ATk9ER;AsBjhFI;EACE,iBb8DE;ATq9ER;AsBphFI;EACE,eb8DE;ATw9ER;AsBvhFI;EACE,iBb8DE;AT29ER;AsB1hFI;EACE,kBb8DE;AT89ER;AsB7hFI;EACE,eb8DE;ATi+ER;AsBhiFI;EACE,kBb8DE;ATo+ER;;AsBhiFA;EACE,sBlB/Ca;EkBkDb,kBlBrBO;EkBsBP,gBlBjBc;EkBkBd,iBA3CqB;AtB4kFvB;AsBhiFE;EACE,sBlBvDW;EkBwDX,gBlBnBc;AJqjFlB;AsBjiFE;EACE,oBA7CuB;AtBglF3B;AsB/hFI;EACE,eb4CE;ATq/ER;AsBliFI;EACE,iBb4CE;ATw/ER;AsBriFI;EACE,eb4CE;AT2/ER;AsBxiFI;EACE,iBb4CE;AT8/ER;AsB3iFI;EACE,kBb4CE;ATigFR;AsB9iFI;EACE,eb4CE;ATogFR;AsBjjFI;EACE,kBb4CE;ATugFR;;AuBhnFA;EACE,cAAA;EACA,eAAA;EACA,mBAAA;EACA,kBAAA;EACA,yBAAA;AvBmnFF;;AuB9mFA;EACE,mBAAA;EACA,iCnBPa;EmBQb,qBnBmDe;EmBlDf,oBAAA;EACA,kBnBaO;EmBZP,WAAA;EACA,uBAAA;EACA,oBAAA;EACA,gBAAA;EACA,uBAAA;EACA,kBAAA;EACA,mBAAA;AvBinFF;;AwB/oFA,eAAA;AC0DA;EAxBE,kCrBnBa;EqBoBb,6BrBzBa;EqB0Bb,kBrBkCO;EqBjCP,sBrB/Ba;AJipFf;AK/kFI;EoBjCA,4BA7BsB;AzBgpF1B;AKllFI;EoBjCA,4BA7BsB;AzBmpF1B;AKrlFI;EoBjCA,4BA7BsB;AzBspF1B;AKxlFI;EoBjCA,4BA7BsB;AzBypF1B;AyB3nFE;EAEE,6BrBjCW;AJ6pFf;AyB3nFE;EAIE,gCrBzBW;EqB0BX,iDAAA;AzB0nFJ;AyBznFE;EAEE,iCrBtCW;EqBuCX,6BrBvCW;EqBwCX,gBAAA;EACA,sBrB9CW;AJwqFf;AKxmFI;EoBhBE,+BAjC6B;AzB4pFnC;AK3mFI;EoBhBE,+BAjC6B;AzB+pFnC;AK9mFI;EoBhBE,+BAjC6B;AzBkqFnC;AKjnFI;EoBhBE,+BAjC6B;AzBqqFnC;;A0BtrFA;EAEE,2DDCa;ECAb,eAAA;EACA,WAAA;A1BwrFF;A0BvrFE;EACE,gBAAA;A1ByrFJ;A0BrrFI;EACE,8BAFM;A1ByrFZ;A0BtrFM;EAIE,mDAAA;A1BqrFR;A0B3rFI;EACE,4BAFM;A1B+rFZ;A0B5rFM;EAIE,gDAAA;A1B2rFR;A0BjsFI;EACE,6BAFM;A1BqsFZ;A0BlsFM;EAIE,mDAAA;A1BisFR;A0BvsFI;EACE,6BAFM;A1B2sFZ;A0BxsFM;EAIE,gDAAA;A1BusFR;A0B7sFI;EACE,iCAFM;A1BitFZ;A0B9sFM;EAIE,iDAAA;A1B6sFR;A0BntFI;EACE,gCAFM;A1ButFZ;A0BptFM;EAIE,iDAAA;A1BmtFR;A0BztFI;EACE,gCAFM;A1B6tFZ;A0B1tFM;EAIE,kDAAA;A1BytFR;A0B/tFI;EACE,gCAFM;A1BmuFZ;A0BhuFM;EAIE,kDAAA;A1B+tFR;A0BruFI;EACE,gCAFM;A1ByuFZ;A0BtuFM;EAIE,mDAAA;A1BquFR;A0B3uFI;EACE,gCAFM;A1B+uFZ;A0B5uFM;EAIE,kDAAA;A1B2uFR;A0BzuFE;EvBmBA,kBC0Ba;EDzBb,kBCNO;AJ+tFT;A0B3uFE;EvBoBA,kBCVO;AJouFT;A0B5uFE;EvBoBA,iBCbO;AJwuFT;A0B5uFE;EACE,cAAA;EACA,WAAA;A1B8uFJ;A0B7uFE;EACE,eAAA;EACA,WAAA;A1B+uFJ;;A0B3uFE;EACE,qBtB+Ba;EsB9Bb,gDAAA;EACA,iDAAA;A1B8uFJ;A0B7uFE;EACE,6BAAA;EACA,yBAAA;EACA,gBAAA;EACA,eAAA;EACA,gBAAA;A1B+uFJ;;A0B7uFA;EAEE,cAAA;EACA,eAAA;EACA,eAAA;EACA,2BvB7C2B;EuB8C3B,gBAAA;A1B+uFF;A0B9uFE;EACE,gBA1DkB;EA2DlB,eA1DkB;A1B0yFtB;A0B/uFE;EACE,eAAA;A1BivFJ;A0B/uFE;EACE,YAAA;A1BivFJ;;A2BlzFA;EACE,eAAA;EACA,qBAAA;EACA,iBAAA;EACA,kBAAA;A3BqzFF;A2BpzFE;EACE,eAAA;A3BszFJ;A2BrzFE;EACE,sBvBFW;AJyzFf;A2BtzFE;;;EAGE,sBvBJW;EuBKX,mBAAA;A3BwzFJ;;A2BjzFE;EtBgKE,kBsB/JwB;A3BozF5B;;A4Bv0FA;EACE,qBAAA;EACA,eAAA;EACA,kBAAA;EACA,mBAAA;A5B00FF;A4Bz0FE;EACE,azBDa;AH40FjB;A4Bz0FI;EAEE,gCxBUS;ECsKX,cuB/KgB;EACd,UAAA;A5B00FN;A4Bx0FI;EACE,qBxBuDW;EC4Gb,iBuBlK2B;A5B00F/B;A4Bz0FE;EAEE,eAAA;EACA,cAAA;EACA,cAAA;EACA,eAAA;EACA,aAAA;A5B00FJ;A4Bz0FI;EACE,aAAA;A5B20FN;A4B10FI;EAEE,6BxBjBS;AJ41Ff;A4B10FI;EvBqJA,oBuBpJ2B;A5B40F/B;A4B30FI;EACE,YAAA;EACA,UAAA;A5B60FN;A4B50FM;EACE,kBAAA;A5B80FR;A4B30FI;EACE,6BxBnCS;AJg3Ff;A4Bx0FM;EACE,8BAHI;A5B60FZ;A4Bz0FM;EACE,8BALI;A5Bg1FZ;A4B10FQ;EAEE,qBAAA;A5B20FV;A4B10FQ;EAIE,mDAAA;A5By0FV;A4Bp1FM;EACE,4BAHI;A5By1FZ;A4Br1FM;EACE,4BALI;A5B41FZ;A4Bt1FQ;EAEE,mBAAA;A5Bu1FV;A4Bt1FQ;EAIE,gDAAA;A5Bq1FV;A4Bh2FM;EACE,6BAHI;A5Bq2FZ;A4Bj2FM;EACE,6BALI;A5Bw2FZ;A4Bl2FQ;EAEE,qBAAA;A5Bm2FV;A4Bl2FQ;EAIE,mDAAA;A5Bi2FV;A4B52FM;EACE,6BAHI;A5Bi3FZ;A4B72FM;EACE,6BALI;A5Bo3FZ;A4B92FQ;EAEE,qBAAA;A5B+2FV;A4B92FQ;EAIE,gDAAA;A5B62FV;A4Bx3FM;EACE,iCAHI;A5B63FZ;A4Bz3FM;EACE,iCALI;A5Bg4FZ;A4B13FQ;EAEE,qBAAA;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GE;EACE,gBAAA;A9Bq7GJ;AK99GE;EyBuCF;IAII,aAAA;IACA,aAAA;IACA,YAAA;IACA,cAAA;E9Bu7GF;E8Bt7GE;IACE,gBAAA;E9Bw7GJ;E8Bv7GE;IACE,cAAA;E9By7GJ;E8Bx7GI;IACE,YAAA;E9B07GN;E8Bz7GI;IzBqBF,qByBpB4B;E9B27G9B;AACF;;A8B17GA;EACE,sBAAA;EACA,WAAA;EACA,e1BhIO;E0BiIP,kBAAA;EACA,mBAAA;A9B67GF;A8Bt7GQ;;;EACE,sB1BxKK;AJkmHf;A8Bz7GM;;;EACE,kB1B3IC;AJwkHT;A8B57GM;;;EACE,kB1B/IC;AJ+kHT;A8B/7GM;;;EACE,iB1BlJC;AJqlHT;A8Bl8GI;EACE,sB1B7KS;E0B8KT,a3BjLW;E2BkLX,oBAAA;EACA,kBAAA;EACA,MAAA;EACA,Y3BrLW;E2BsLX,UAAA;A9Bo8GN;A8Bl8GI;;EAEE,mB3B1LW;AH8nHjB;A8Bn8GI;EACE,OAAA;A9Bq8GN;A8Bn8GI;;EAEE,oB3BhMW;AHqoHjB;A8Bp8GI;EACE,QAAA;A9Bs8GN;A8Bp8GI;EAEE,6BAAA;EzBjBF,cyBkBgB;EACd,YAAA;EACA,UAAA;A9Bq8GN;A8Bp8GI;EACE,kB1B5KG;AJknHT;A8Br8GI;EACE,kB1BhLG;AJunHT;A8Bt8GI;EACE,iB1BnLG;AJ2nHT;;A+B9pHA,qBAAA;ACWA;EAGE,e5BuBO;E4BtBP,mBAAA;AhCqpHF;AgCppHE;EACE,mBAAA;EACA,yB5BIW;E4BHX,aAAA;EACA,uBAAA;EACA,iBAAA;AhCspHJ;AgCrpHI;EACE,sB5BjBS;AJwqHf;AgCtpHE;EACE,mBAAA;EACA,aAAA;AhCwpHJ;AgCvpHI;E3ByJA,e2BxJ2B;AhCypH/B;AgCvpHM;EACE,sB5BzBO;E4B0BP,eAAA;EACA,oBAAA;AhCypHR;AgCxpHI;EACE,sB5B1BS;E4B2BT,YAAA;AhC0pHN;AgCzpHE;;EAEE,uBAAA;EACA,aAAA;EACA,eAAA;EACA,2BAAA;AhC2pHJ;AgCzpHI;E3BwIA,mB2BvI0B;AhC2pH9B;AgC1pHI;E3BsIA,kB2BrI0B;AhC4pH9B;AgCzpHI;;EAEE,uBAAA;AhC2pHN;AgCzpHI;;EAEE,yBAAA;AhC2pHN;AgCzpHE;EACE,kB5BrBK;AJgrHT;AgC1pHE;EACE,kB5BzBK;AJqrHT;AgC3pHE;EACE,iB5B5BK;AJyrHT;AgC1pHI;EACE,YAAA;AhC4pHN;AgC1pHI;EACE,YAAA;AhC4pHN;AgC1pHI;EACE,YAAA;AhC4pHN;AgC1pHI;EACE,YAAA;AhC4pHN;;AiCltHA;EACE,kC7BRa;E6BSb,sBAnBY;EAoBZ,0FxB8EO;EwB7EP,sB7BnBa;E6BoBb,eAAA;EACA,kBAAA;AjCqtHF;;AiCltHE;EACE,+BA3BU;EA4BV,gCA5BU;AjCivHd;AiCptHE;EACE,kCA9BU;EA+BV,mCA/BU;AjCqvHd;;AiCptHA;EAEE,6BAjC6B;EAkC7B,oBAAA;EACA,kDAhCmB;EAiCnB,aAAA;AjCstHF;;AiCptHA;EACE,mBAAA;EACA,sB7BzCa;E6B0Cb,aAAA;EACA,YAAA;EACA,gB7BNY;E6BOZ,qBA1CoB;AjCiwHtB;AiCttHE;EACE,uBAAA;AjCwtHJ;;AiCttHA;E5BqBE,qBAAA;EACA,wBAAA;EACA,gBAAA;EACA,gBAAA;EACA,YAAA;EACA,mBAAA;EACA,oBAAA;EACA,cAAA;EACA,SAAA;EACA,UAAA;E4B5BA,mBAAA;EACA,eAAA;EACA,aAAA;EACA,uBAAA;EACA,qBApDoB;AjCsxHtB;;AiChuHA;EACE,cAAA;EACA,kBAAA;AjCmuHF;AiCjuHI;EACE,+BA/DQ;EAgER,gCAhEQ;AjCmyHd;AiCjuHI;EACE,kCAnEQ;EAoER,mCApEQ;AjCuyHd;;AiCjuHA;EAEE,6BAhE8B;EAiE9B,eAhEqB;AjCmyHvB;;AiCjuHA;EAEE,6BAlE6B;EAmE7B,qCAlEuB;EAmEvB,oBAAA;EACA,aAAA;AjCmuHF;;AiCjuHA;EACE,mBAAA;EACA,aAAA;EACA,aAAA;EACA,YAAA;EACA,cAAA;EACA,uBAAA;EACA,gBA5EoB;AjCgzHtB;AiCnuHE;E5BqFE,uC4BnKqB;AjCozHzB;;AiChuHE;EACE,qB7BtDY;AJyxHhB;;AkCpzHA;EACE,oBAAA;EACA,kBAAA;EACA,mBAAA;AlCuzHF;AkCpzHI;EACE,cAAA;AlCszHN;AkCpzHI;EACE,UAAA;EACA,QAAA;AlCszHN;AkCpzHI;EACE,YAAA;EACA,mBA9BoB;EA+BpB,oBAAA;EACA,SAAA;AlCszHN;;AkCpzHA;EACE,aAAA;E7BmJE,O6BlJY;EACd,gBAzCwB;EA0CxB,gBAtCwB;EAuCxB,kBAAA;EACA,SAAA;EACA,WApCmB;AlC21HrB;;AkCrzHA;EACE,kC9BnCa;E8BoCb,kB9BmBO;E8BlBP,0FzBmDO;EyBlDP,sBA9CgC;EA+ChC,mBA9C6B;AlCs2H/B;;AkCtzHA;EACE,sB9BlDa;E8BmDb,cAAA;EACA,mBAAA;EACA,gBAAA;EACA,sBAAA;EACA,kBAAA;AlCyzHF;;AkCvzHA;;E7BoHI,mB6BlHuB;EACzB,mBAAA;EACA,mBAAA;EACA,WAAA;AlC0zHF;AkCzzHE;;EACE,iC9B1DW;E8B2DX,qB9BtEW;AJk4Hf;AkC3zHE;;EACE,oC9BpDW;E8BqDX,WzBCU;AT6zHd;;AkC5zHA;EACE,iC9BnEc;E8BoEd,YAAA;EACA,cAAA;EACA,WAAA;EACA,gBAAA;AlC+zHF;;AmC74HA;EAEE,mBAAA;EACA,8BAAA;AnC+4HF;AmC94HE;EACE,kB/B6DK;AJm1HT;AmC/4HE;EACE,qBAAA;EACA,mBAAA;AnCi5HJ;AmC/4HE;EACE,aAAA;AnCi5HJ;AmCh5HI;;EAEE,aAAA;AnCk5HN;AmCj5HI;EACE,aAAA;AnCm5HN;AmCj5HM;EACE,gBAAA;E9B6JJ,qB8BlLiB;AnCy6HrB;AmCl5HM;EACE,YAAA;AnCo5HR;AKp0HE;E8BtGF;IAyBI,aAAA;EnCq5HF;EmCn5HI;IACE,YAAA;EnCq5HN;AACF;;AmCp5HA;EACE,mBAAA;EACA,aAAA;EACA,gBAAA;EACA,YAAA;EACA,cAAA;EACA,uBAAA;AnCu5HF;AmCt5HE;;EAEE,gBAAA;AnCw5HJ;AK71HE;E8BxDE;IACE,sBA7Ce;EnCq8HnB;AACF;;AmCv5HA;;EAEE,gBAAA;EACA,YAAA;EACA,cAAA;AnC05HF;AmCv5HI;;EACE,YAAA;AnC05HN;AKz2HE;E8B9CI;;I9BwHF,qB8BlLiB;EnCs9HnB;AACF;;AmC15HA;EACE,mBAAA;EACA,2BAAA;AnC65HF;AKx3HE;E8BlCE;IACE,kBAAA;EnC65HJ;AACF;AKz3HE;E8B3CF;IAQI,aAAA;EnCg6HF;AACF;;AmC/5HA;EACE,mBAAA;EACA,yBAAA;AnCk6HF;AKn4HE;E8BjCF;IAKI,aAAA;EnCm6HF;AACF;;AoCv+HA;EACE,uBAAA;EACA,aAAA;EACA,mBAAA;ApC0+HF;AoCz+HE;EACE,sBAVoB;ApCq/HxB;AoC1+HE;EACE,8CAAA;EACA,aAAA;EACA,oBAboB;ApCy/HxB;AoC3+HI;;EAEE,qBAf0B;ApC4/HhC;AoC5+HI;EACE,mBAhBkB;ApC8/HxB;AoC7+HM;EACE,kBAlBgB;ApCigIxB;AoC9+HE;EACE,8CAAA;EACA,gBA1BY;EA2BZ,iBA3BY;ApC2gIhB;AoC7+HI;EACE,kBA9BgB;EA+BhB,mBA/BgB;ApC8gItB;;AoC7+HA;;EAEE,gBAAA;EACA,YAAA;EACA,cAAA;ApCg/HF;;AoC9+HA;E/BwII,kB+BhLY;ApC0hIhB;;AoC/+HA;E/BqII,iB+BhLY;ApC8hIhB;;AoCh/HA;EACE,gBAAA;EACA,YAAA;EACA,cAAA;EACA,mBAAA;ApCm/HF;;AKn8HE;E+B7CA;IACE,gBAAA;EpCo/HF;AACF;AqC3hIA;EACE,ejCgBO;AJ6gIT;AqC3hIE;EACE,kBjCcK;AJ+gIT;AqC5hIE;EACE,kBjCUK;AJohIT;AqC7hIE;EACE,iBjCOK;AJwhIT;;AqC7hIA;EACE,iBArBsB;ArCqjIxB;AqC/hIE;EACE,kBjCoCW;EiCnCX,sBjC3BW;EiC4BX,cAAA;EACA,qBAzBqB;ArC0jIzB;AqChiII;EACE,iCjCzBS;EiC0BT,sBjCjCS;AJmkIf;AqChiII;EACE,oCjCpBS;EiCqBT,W5BiCQ;ATigId;AqChiII;EhCuIA,sCgC3KoB;EAsClB,cAnCoB;EhCwKtB,oBgCvK4B;ArCqkIhC;;AqChiIA;EACE,sBjC3Ca;EiC4Cb,iBApCqB;EAqCrB,qBApC0B;EAqC1B,yBAAA;ArCmiIF;AqCliIE;E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BAAA;IACA,2BAAA;IACA,yBpChUE;IoCiUF,uCAAA;ExCg4JJ;EwC/3JE;IACE,UAAA;IACA,QAAA;ExCi4JJ;EwCh4JA;IACE,cAAA;ExCk4JF;EwC/3JE;;InC9NA,qBmC+N0B;ExCk4J5B;EwCj4JE;;InChOA,sBmCiO0B;ExCo4J5B;EwCj4JE;IAnWF,OAAA;IACA,eAAA;IACA,QAAA;IACA,WA/Ce;ExCsxKf;EwCp4JE;IACE,SAAA;ExCs4JJ;EwCr4JI;IACE,4CAAA;ExCu4JN;EwCt4JE;IACE,MAAA;ExCw4JJ;EwCr4JE;;IACE,oBA/ZU;ExCuyKd;EwCv4JE;;IACE,uBAjaU;ExC2yKd;EwCz4JE;;IACE,oBAAA;ExC44JJ;EwC34JE;;IACE,uBAAA;ExC84JJ;EwC14JE;;IACE,qBpC7aS;EJ0zKb;EwC54JE;;IACE,6BAlagC;ExCizKpC;EwC14JI;IACE,iCpCzaO;EJqzKb;AACF;AwCx4JE;EACE,iCAAA;AxC04JJ;;AyClyKA;EAEE,erCFO;EqCGP,gBAnCkB;AzCu0KpB;AyClyKE;EACE,kBrCLK;AJyyKT;AyCnyKE;EACE,kBrCTK;AJ8yKT;AyCpyKE;EACE,iBrCZK;AJkzKT;AyCpyKI;;EAEE,iBAAA;EACA,kBAAA;EACA,qBrCmBW;AJmxKjB;AyCryKI;EACE,qBrCiBW;AJsxKjB;;AyCryKA;;EAEE,mBAAA;EACA,aAAA;EACA,uBAAA;EACA,kBAAA;AzCwyKF;;AyCtyKA;;;;EAME,cA9D0B;EA+D1B,uBAAA;EACA,eA/DuB;EAgEvB,mBA/D6B;EAgE7B,oBA/D8B;EAgE9B,kBAAA;AzCuyKF;;AyCryKA;;;EAGE,6BrCtEa;EqCuEb,sBrC3Ea;EqC4Eb,gBtC3Ee;AHm3KjB;AyCvyKE;;;EACE,6BrC3EW;EqC4EX,sBrC/EW;AJ03Kf;AyC1yKE;;;EACE,gCrCjEW;AJ+2Kf;AyC7yKE;;;EACE,iDAtDsB;AzCu2K1B;AyChzKE;;;;;EAEE,iCrClFW;EqCmFX,6BrCnFW;EqCoFX,gBAAA;EACA,sBrCvFW;EqCwFX,YAAA;AzCqzKJ;;AyCnzKA;;EAEE,oBAvF4B;EAwF5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kHP,UAAA;A3C2pLR;A2CzpLM;EtCuDF,iBsCtD4B;A3C2pLhC;A2C1pLM;EAEI,2BvC3DD;EuC4DC,8BvC5DD;AJutLT;A2CvpLM;EAEI,4BvClED;EuCmEC,+BvCnED;AJ2tLT;A2CnpLQ;EACE,oCvCzHK;EuC0HL,gCvC1HK;EuC2HL,WlCrEI;EkCsEJ,UAAA;A3CqpLV;A2CppLI;EACE,mBAAA;A3CspLN;A2CnpLQ;EAEI,iCvCjFK;EuCkFL,8BvClFK;EuCmFL,oBAAA;A3CopLZ;A2C/oLQ;EAEI,kCvC1FK;EuC2FL,+BvC3FK;EuC4FL,qBAAA;A3CgpLZ;A2C1oLE;EACE,kBvCrIK;AJixLT;A2C3oLE;EACE,kBvCzIK;AJsxLT;A2C5oLE;EACE,iBvC5IK;AJ0xLT;;A4C7zLA,eAAA;ACIA;EACE,cAAA;EACA,aAAA;EACA,YAAA;EACA,cAAA;EACA,gBAPW;A7Co0Lb;A6C5zLE;EACE,UAAA;EACA,YAAA;A7C8zLJ;A6C7zLE;EACE,UAAA;EACA,WAAA;A7C+zLJ;A6C9zLE;EACE,UAAA;EACA,UAAA;A7Cg0LJ;A6C/zLE;EACE,UAAA;EACA,eAAA;A7Ci0LJ;A6Ch0LE;EACE,UAAA;EACA,UAAA;A7Ck0LJ;A6Cj0LE;EACE,UAAA;EACA,eAAA;A7Cm0LJ;A6Cl0LE;EACE,UAAA;EACA,UAAA;A7Co0LJ;A6Cn0LE;EACE,UAAA;EACA,UAAA;A7Cq0LJ;A6Cp0LE;EACE,UAAA;EACA,UAAA;A7Cs0LJ;A6Cr0LE;EACE,UAAA;EACA,UAAA;A7Cu0LJ;A6Ct0LE;EACE,UAAA;EACA,UAAA;A7Cw0LJ;A6Cv0LE;ExCyIE,gBwCxIwB;A7Cy0L5B;A6Cx0LE;ExCuIE,qBwCtIwB;A7C00L5B;A6Cz0LE;ExCqIE,gBwCpIwB;A7C20L5B;A6C10LE;ExCmIE,qBwClIwB;A7C40L5B;A6C30LE;ExCiIE,gBwChIwB;A7C60L5B;A6C50LE;ExC+HE,gBwC9HwB;A7C80L5B;A6C70LE;ExC6HE,gBwC5HwB;A7C+0L5B;A6C90LE;ExC2HE,gBwC1HwB;A7Cg1L5B;A6C/0LE;ExCyHE,gBwCxHwB;A7Ci1L5B;A6C/0LI;EACE,UAAA;EACA,SAAA;A7Ci1LN;A6Ch1LI;ExCmHA,ewClH0B;A7Ck1L9B;A6Ct1LI;EACE,UAAA;EACA,kBAAA;A7Cw1LN;A6Cv1LI;ExCmHA,wBwClH0B;A7Cy1L9B;A6C71LI;EACE,UAAA;EACA,mBAAA;A7C+1LN;A6C91LI;ExCmHA,yBwClH0B;A7Cg2L9B;A6Cp2LI;EACE,UAAA;EACA,UAAA;A7Cs2LN;A6Cr2LI;ExCmHA,gBwClH0B;A7Cu2L9B;A6C32LI;EACE,UAAA;EACA,mBAAA;A7C62LN;A6C52LI;ExCmHA,yBwClH0B;A7C82L9B;A6Cl3LI;EACE,UAAA;EACA,mBAAA;A7Co3LN;A6Cn3LI;ExCmHA,yBwClH0B;A7Cq3L9B;A6Cz3LI;EACE,UAAA;EACA,UAAA;A7C23LN;A6C13LI;ExCmHA,gBwClH0B;A7C43L9B;A6Ch4LI;EACE,UAAA;EACA,mBAAA;A7Ck4LN;A6Cj4LI;ExCmHA,yBwClH0B;A7Cm4L9B;A6Cv4LI;EACE,UAAA;EACA,mBAAA;A7Cy4LN;A6Cx4LI;ExCmHA,yBwClH0B;A7C04L9B;A6C94LI;EACE,UAAA;EACA,UAAA;A7Cg5LN;A6C/4LI;ExCmHA,gBwClH0B;A7Ci5L9B;A6Cr5LI;EACE,UAAA;EACA,mBAAA;A7Cu5LN;A6Ct5LI;ExCmHA,yBwClH0B;A7Cw5L9B;A6C55LI;EACE,UAAA;EACA,mBAAA;A7C85LN;A6C75LI;ExCmHA,yBwClH0B;A7C+5L9B;A6Cn6LI;EACE,UAAA;EACA,WAAA;A7Cq6LN;A6Cp6LI;ExCmHA,iBwClH0B;A7Cs6L9B;AKl4LE;EwClCE;IACE,UAAA;IACA,YAAA;E7Cu6LJ;E6Ct6LE;IACE,UAAA;IACA,WAAA;E7Cw6LJ;E6Cv6LE;IACE,UAAA;IACA,UAAA;E7Cy6LJ;E6Cx6LE;IACE,UAAA;IACA,eAAA;E7C06LJ;E6Cz6LE;IACE,UAAA;IACA,UAAA;E7C26LJ;E6C16LE;IACE,UAAA;IACA,eAAA;E7C46LJ;E6C36LE;IACE,UAAA;IACA,UAAA;E7C66LJ;E6C56LE;IACE,UAAA;IACA,UAAA;E7C86LJ;E6C76LE;IACE,UAAA;IACA,UAAA;E7C+6LJ;E6C96LE;IACE,UAAA;IACA,UAAA;E7Cg7LJ;E6C/6LE;IACE,UAAA;IACA,UAAA;E7Ci7LJ;E6Ch7LE;IxC+EA,gBwC9E0B;E7Ck7L5B;E6Cj7LE;IxC6EA,qBwC5E0B;E7Cm7L5B;E6Cl7LE;IxC2EA,gBwC1E0B;E7Co7L5B;E6Cn7LE;IxCyEA,qBwCxE0B;E7Cq7L5B;E6Cp7LE;IxCuEA,gBwCtE0B;E7Cs7L5B;E6Cr7LE;IxCqEA,gBwCpE0B;E7Cu7L5B;E6Ct7LE;IxCmEA,gBwClE0B;E7Cw7L5B;E6Cv7LE;IxCiEA,gBwChE0B;E7Cy7L5B;E6Cx7LE;IxC+DA,gBwC9D0B;E7C07L5B;E6Cx7LI;IACE,UAAA;IACA,SAAA;E7C07LN;E6Cz7LI;IxCyDF,ewCxD4B;E7C27L9B;E6C/7LI;IACE,UAAA;IACA,kBAAA;E7Ci8LN;E6Ch8LI;IxCyDF,wBwCxD4B;E7Ck8L9B;E6Ct8LI;IACE,UAAA;IACA,mBAAA;E7Cw8LN;E6Cv8LI;IxCyDF,yBwCxD4B;E7Cy8L9B;E6C78LI;IACE,UAAA;IACA,UAAA;E7C+8LN;E6C98LI;IxCyDF,gBwCxD4B;E7Cg9L9B;E6Cp9LI;IACE,UAAA;IACA,mBAAA;E7Cs9LN;E6Cr9LI;IxCyDF,yBwCxD4B;E7Cu9L9B;E6C39LI;IACE,UAAA;IACA,mBAAA;E7C69LN;E6C59LI;IxCyDF,yBwCxD4B;E7C89L9B;E6Cl+LI;IACE,UAAA;IACA,UAAA;E7Co+LN;E6Cn+LI;IxCyDF,gBwCxD4B;E7Cq+L9B;E6Cz+LI;IACE,UAAA;IACA,mBAAA;E7C2+LN;E6C1+LI;IxCyDF,yBwCxD4B;E7C4+L9B;E6Ch/LI;IACE,UAAA;IACA,mBAAA;E7Ck/LN;E6Cj/LI;IxCyDF,yBwCxD4B;E7Cm/L9B;E6Cv/LI;IACE,UAAA;IACA,UAAA;E7Cy/LN;E6Cx/LI;IxCyDF,gBwCxD4B;E7C0/L9B;E6C9/LI;IACE,UAAA;IACA,mBAAA;E7CggMN;E6C//LI;IxCyDF,yBwCxD4B;E7CigM9B;E6CrgMI;IACE,UAAA;IACA,mBAAA;E7CugMN;E6CtgMI;IxCyDF,yBwCxD4B;E7CwgM9B;E6C5gMI;IACE,UAAA;IACA,WAAA;E7C8gMN;E6C7gMI;IxCyDF,iBwCxD4B;E7C+gM9B;AACF;AKliME;EwCoBE;IAEE,UAAA;IACA,YAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,WAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,eAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,eAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IxCUA,gBwCR0B;E7CghM5B;E6C/gME;IxCOA,qBwCL0B;E7CghM5B;E6C/gME;IxCIA,gBwCF0B;E7CghM5B;E6C/gME;IxCCA,qBwCC0B;E7CghM5B;E6C/gME;IxCFA,gBwCI0B;E7CghM5B;E6C/gME;IxCLA,gBwCO0B;E7CghM5B;E6C/gME;IxCRA,gBwCU0B;E7CghM5B;E6C/gME;IxCXA,gBwCa0B;E7CghM5B;E6C/gME;IxCdA,gBwCgB0B;E7CghM5B;E6C9gMI;IAEE,UAAA;IACA,SAAA;E7C+gMN;E6C9gMI;IxCtBF,ewCwB4B;E7C+gM9B;E6CrhMI;IAEE,UAAA;IACA,kBAAA;E7CshMN;E6CrhMI;IxCtBF,wBwCwB4B;E7CshM9B;E6C5hMI;IAEE,UAAA;IACA,mBAAA;E7C6hMN;E6C5hMI;IxCtBF,yBwCwB4B;E7C6hM9B;E6CniMI;IAEE,UAAA;IACA,UAAA;E7CoiMN;E6CniMI;IxCtBF,gBwCwB4B;E7CoiM9B;E6C1iMI;IAEE,UAAA;IACA,mBAAA;E7C2iMN;E6C1iMI;IxCtBF,yBwCwB4B;E7C2iM9B;E6CjjMI;IAEE,UAAA;IACA,mBAAA;E7CkjMN;E6CjjMI;IxCtBF,yBwCwB4B;E7CkjM9B;E6CxjMI;IAEE,UAAA;IACA,UAAA;E7CyjMN;E6CxjMI;IxCtBF,gBwCwB4B;E7CyjM9B;E6C/jMI;IAEE,UAAA;IACA,mBAAA;E7CgkMN;E6C/jMI;IxCtBF,yBwCwB4B;E7CgkM9B;E6CtkMI;IAEE,UAAA;IACA,mBAAA;E7CukMN;E6CtkMI;IxCtBF,yBwCwB4B;E7CukM9B;E6C7kMI;IAEE,UAAA;IACA,UAAA;E7C8kMN;E6C7kMI;IxCtBF,gBwCwB4B;E7C8kM9B;E6CplMI;IAEE,UAAA;IACA,mBAAA;E7CqlMN;E6CplMI;IxCtBF,yBwCwB4B;E7CqlM9B;E6C3lMI;IAEE,UAAA;IACA,mBAAA;E7C4lMN;E6C3lMI;IxCtBF,yBwCwB4B;E7C4lM9B;E6ClmMI;IAEE,UAAA;IACA,WAAA;E7CmmMN;E6ClmMI;IxCtBF,iBwCwB4B;E7CmmM9B;AACF;AK9rME;EwC4FE;IACE,UAAA;IACA,YAAA;E7CqmMJ;E6CpmME;IACE,UAAA;IACA,WAAA;E7CsmMJ;E6CrmME;IACE,UAAA;IACA,UAAA;E7CumMJ;E6CtmME;IACE,UAAA;IACA,eAAA;E7CwmMJ;E6CvmME;IACE,UAAA;IACA,UAAA;E7CymMJ;E6CxmME;IACE,UAAA;IACA,eAAA;E7C0mMJ;E6CzmME;IACE,UAAA;IACA,UAAA;E7C2mMJ;E6C1mME;IACE,UAAA;IACA,UAAA;E7C4mMJ;E6C3mME;IACE,UAAA;IACA,UAAA;E7C6mMJ;E6C5mME;IACE,UAAA;IACA,UAAA;E7C8mMJ;E6C7mME;IACE,UAAA;IACA,UAAA;E7C+mMJ;E6C9mME;IxC3DA,gBwC4D0B;E7CgnM5B;E6C/mME;IxC7DA,qBwC8D0B;E7CinM5B;E6ChnME;IxC/DA,gBwCgE0B;E7CknM5B;E6CjnME;IxCjEA,qBwCkE0B;E7CmnM5B;E6ClnME;IxCnEA,gBwCoE0B;E7ConM5B;E6CnnME;IxCrEA,gBwCsE0B;E7CqnM5B;E6CpnME;IxCvEA,gBwCwE0B;E7CsnM5B;E6CrnME;IxCzEA,gBwC0E0B;E7CunM5B;E6CtnME;IxC3EA,gBwC4E0B;E7CwnM5B;E6CtnMI;IACE,UAAA;IACA,SAAA;E7CwnMN;E6CvnMI;IxCjFF,ewCkF4B;E7CynM9B;E6C7nMI;IACE,UAAA;IACA,kBAAA;E7C+nMN;E6C9nMI;IxCjFF,wBwCkF4B;E7CgoM9B;E6CpoMI;IACE,UAAA;IACA,mBAAA;E7CsoMN;E6CroMI;IxCjFF,yBwCkF4B;E7CuoM9B;E6C3oMI;IACE,UAAA;IACA,UAAA;E7C6oMN;E6C5oMI;IxCjFF,gBwCkF4B;E7C8oM9B;E6ClpMI;IACE,UAAA;IACA,mBAAA;E7CopMN;E6CnpMI;IxCjFF,yBwCkF4B;E7CqpM9B;E6CzpMI;IACE,UAAA;IACA,mBAAA;E7C2pMN;E6C1pMI;IxCjFF,yBwCkF4B;E7C4pM9B;E6ChqMI;IACE,UAAA;IACA,UAAA;E7CkqMN;E6CjqMI;IxCjFF,gBwCkF4B;E7CmqM9B;E6CvqMI;IACE,UAAA;IACA,mBAAA;E7CyqMN;E6CxqMI;IxCjFF,yBwCkF4B;E7C0qM9B;E6C9qMI;IACE,UAAA;IACA,mBAAA;E7CgrMN;E6C/qMI;IxCjFF,yBwCkF4B;E7CirM9B;E6CrrMI;IACE,UAAA;IACA,UAAA;E7CurMN;E6CtrMI;IxCjFF,gBwCkF4B;E7CwrM9B;E6C5rMI;IACE,UAAA;IACA,mBAAA;E7C8rMN;E6C7rMI;IxCjFF,yBwCkF4B;E7C+rM9B;E6CnsMI;IACE,UAAA;IACA,mBAAA;E7CqsMN;E6CpsMI;IxCjFF,yBwCkF4B;E7CssM9B;E6C1sMI;IACE,UAAA;IACA,WAAA;E7C4sMN;E6C3sMI;IxCjFF,iBwCkF4B;E7C6sM9B;AACF;AK91ME;EwCkJE;IACE,UAAA;IACA,YAAA;E7C+sMJ;E6C9sME;IACE,UAAA;IACA,WAAA;E7CgtMJ;E6C/sME;IACE,UAAA;IACA,UAAA;E7CitMJ;E6ChtME;IACE,UAAA;IACA,eAAA;E7CktMJ;E6CjtME;IACE,UAAA;IACA,UAAA;E7CmtMJ;E6CltME;IACE,UAAA;IACA,eAAA;E7CotMJ;E6CntME;IACE,UAAA;IACA,UAAA;E7CqtMJ;E6CptME;IACE,UAAA;IACA,UAAA;E7CstMJ;E6CrtME;IACE,UAAA;IACA,UAAA;E7CutMJ;E6CttME;IACE,UAAA;IACA,UAAA;E7CwtMJ;E6CvtME;IACE,UAAA;IACA,UAAA;E7CytMJ;E6CxtME;IxCrHA,gBwCsH0B;E7C0tM5B;E6CztME;IxCvHA,qBwCwH0B;E7C2tM5B;E6C1tME;IxCzHA,gBwC0H0B;E7C4tM5B;E6C3tME;IxC3HA,qBwC4H0B;E7C6tM5B;E6C5tME;IxC7HA,gBwC8H0B;E7C8tM5B;E6C7tME;IxC/HA,gBwCgI0B;E7C+tM5B;E6C9tME;IxCjIA,gBwCkI0B;E7CguM5B;E6C/tME;IxCnIA,gBwCoI0B;E7CiuM5B;E6ChuME;IxCrIA,gBwCsI0B;E7CkuM5B;E6ChuMI;IACE,UAAA;IACA,SAAA;E7CkuMN;E6CjuMI;IxC3IF,ewC4I4B;E7CmuM9B;E6CvuMI;IACE,UAAA;IACA,kBAAA;E7CyuMN;E6CxuMI;IxC3IF,wBwC4I4B;E7C0uM9B;E6C9uMI;IACE,UAAA;IACA,mBAAA;E7CgvMN;E6C/uMI;IxC3IF,yBwC4I4B;E7CivM9B;E6CrvMI;IACE,UAAA;IACA,UAAA;E7CuvMN;E6CtvMI;IxC3IF,gBwC4I4B;E7CwvM9B;E6C5vMI;IACE,UAAA;IACA,mBAAA;E7C8vMN;E6C7vMI;IxC3IF,yBwC4I4B;E7C+vM9B;E6CnwMI;IACE,UAAA;IACA,mBAAA;E7CqwMN;E6CpwMI;IxC3IF,yBwC4I4B;E7CswM9B;E6C1wMI;IACE,UAAA;IACA,UAAA;E7C4wMN;E6C3wMI;IxC3IF,gBwC4I4B;E7C6wM9B;E6CjxMI;IACE,UAAA;IACA,mBAAA;E7CmxMN;E6ClxMI;IxC3IF,yBwC4I4B;E7CoxM9B;E6CxxMI;IACE,UAAA;IACA,mBAAA;E7C0xMN;E6CzxMI;IxC3IF,yBwC4I4B;E7C2xM9B;E6C/xMI;IACE,UAAA;IACA,UAAA;E7CiyMN;E6ChyMI;IxC3IF,gBwC4I4B;E7CkyM9B;E6CtyMI;IACE,UAAA;IACA,mBAAA;E7CwyMN;E6CvyMI;IxC3IF,yBwC4I4B;E7CyyM9B;E6C7yMI;IACE,UAAA;IACA,mBAAA;E7C+yMN;E6C9yMI;IxC3IF,yBwC4I4B;E7CgzM9B;E6CpzMI;IACE,UAAA;IACA,WAAA;E7CszMN;E6CrzMI;IxC3IF,iBwC4I4B;E7CuzM9B;AACF;AKn/MI;EwC6LA;IACE,UAAA;IACA,YAAA;E7CyzMJ;E6CxzME;IACE,UAAA;IACA,WAAA;E7C0zMJ;E6CzzME;IACE,UAAA;IACA,UAAA;E7C2zMJ;E6C1zME;IACE,UAAA;IACA,eAAA;E7C4zMJ;E6C3zME;IACE,UAAA;IACA,UAAA;E7C6zMJ;E6C5zME;IACE,UAAA;IACA,eAAA;E7C8zMJ;E6C7zME;IACE,UAAA;IACA,UAAA;E7C+zMJ;E6C9zME;IACE,UAAA;IACA,UAAA;E7Cg0MJ;E6C/zME;IACE,UAAA;IACA,UAAA;E7Ci0MJ;E6Ch0ME;IACE,UAAA;IACA,UAAA;E7Ck0MJ;E6Cj0ME;IACE,UAAA;IACA,UAAA;E7Cm0MJ;E6Cl0ME;IxC/KA,gBwCgL0B;E7Co0M5B;E6Cn0ME;IxCjLA,qBwCkL0B;E7Cq0M5B;E6Cp0ME;IxCnLA,gBwCoL0B;E7Cs0M5B;E6Cr0ME;IxCrLA,qBwCsL0B;E7Cu0M5B;E6Ct0ME;IxCvLA,gBwCwL0B;E7Cw0M5B;E6Cv0ME;IxCzLA,gBwC0L0B;E7Cy0M5B;E6Cx0ME;IxC3LA,gBwC4L0B;E7C00M5B;E6Cz0ME;IxC7LA,gBwC8L0B;E7C20M5B;E6C10ME;IxC/LA,gBwCgM0B;E7C40M5B;E6C10MI;IACE,UAAA;IACA,SAAA;E7C40MN;E6C30MI;IxCrMF,ewCsM4B;E7C60M9B;E6Cj1MI;IACE,UAAA;IACA,kBAAA;E7Cm1MN;E6Cl1MI;IxCrMF,wBwCsM4B;E7Co1M9B;E6Cx1MI;IACE,UAAA;IACA,mBAAA;E7C01MN;E6Cz1MI;IxCrMF,yBwCsM4B;E7C21M9B;E6C/1MI;IACE,UAAA;IACA,UAAA;E7Ci2MN;E6Ch2MI;IxCrMF,gBwCsM4B;E7Ck2M9B;E6Ct2MI;IACE,UAAA;IACA,mBAAA;E7Cw2MN;E6Cv2MI;IxCrMF,yBwCsM4B;E7Cy2M9B;E6C72MI;IACE,UAAA;IACA,mBAAA;E7C+2MN;E6C92MI;IxCrMF,yBwCsM4B;E7Cg3M9B;E6Cp3MI;IACE,UAAA;IACA,UAAA;E7Cs3MN;E6Cr3MI;IxCrMF,gBwCsM4B;E7Cu3M9B;E6C33MI;IACE,UAAA;IACA,mBAAA;E7C63MN;E6C53MI;IxCrMF,yBwCsM4B;E7C83M9B;E6Cl4MI;IACE,UAAA;IACA,mBAAA;E7Co4MN;E6Cn4MI;IxCrMF,yBwCsM4B;E7Cq4M9B;E6Cz4MI;IACE,UAAA;IACA,UAAA;E7C24MN;E6C14MI;IxCrMF,gBwCsM4B;E7C44M9B;E6Ch5MI;IACE,UAAA;IACA,mBAAA;E7Ck5MN;E6Cj5MI;IxCrMF,yBwCsM4B;E7Cm5M9B;E6Cv5MI;IACE,UAAA;IACA,mBAAA;E7Cy5MN;E6Cx5MI;IxCrMF,yBwCsM4B;E7C05M9B;E6C95MI;IACE,UAAA;IACA,WAAA;E7Cg6MN;E6C/5MI;IxCrMF,iBwCsM4B;E7Ci6M9B;AACF;AKxoNI;EwCwOA;IACE,UAAA;IACA,YAAA;E7Cm6MJ;E6Cl6ME;IACE,UAAA;IACA,WAAA;E7Co6MJ;E6Cn6ME;IACE,UAAA;IACA,UAAA;E7Cq6MJ;E6Cp6ME;IACE,UAAA;IACA,eAAA;E7Cs6MJ;E6Cr6ME;IACE,UAAA;IACA,UAAA;E7Cu6MJ;E6Ct6ME;IACE,UAAA;IACA,eAAA;E7Cw6MJ;E6Cv6ME;IACE,UAAA;IACA,UAAA;E7Cy6MJ;E6Cx6ME;IACE,UAAA;IACA,UAAA;E7C06MJ;E6Cz6ME;IACE,UAAA;IACA,UAAA;E7C26MJ;E6C16ME;IACE,UAAA;IACA,UAAA;E7C46MJ;E6C36ME;IACE,UAAA;IACA,UAAA;E7C66MJ;E6C56ME;IxCzOA,gBwC0O0B;E7C86M5B;E6C76ME;IxC3OA,qBwC4O0B;E7C+6M5B;E6C96ME;IxC7OA,gBwC8O0B;E7Cg7M5B;E6C/6ME;IxC/OA,qBwCgP0B;E7Ci7M5B;E6Ch7ME;IxCjPA,gBwCkP0B;E7Ck7M5B;E6Cj7ME;IxCnPA,gBwCoP0B;E7Cm7M5B;E6Cl7ME;IxCrPA,gBwCsP0B;E7Co7M5B;E6Cn7ME;IxCvPA,gBwCwP0B;E7Cq7M5B;E6Cp7ME;IxCzPA,gBwC0P0B;E7Cs7M5B;E6Cp7MI;IACE,UAAA;IACA,SAAA;E7Cs7MN;E6Cr7MI;IxC/PF,ewCgQ4B;E7Cu7M9B;E6C37MI;IACE,UAAA;IACA,kBAAA;E7C67MN;E6C57MI;IxC/PF,wBwCgQ4B;E7C87M9B;E6Cl8MI;IACE,UAAA;IACA,mBAAA;E7Co8MN;E6Cn8MI;IxC/PF,yBwCgQ4B;E7Cq8M9B;E6Cz8MI;IACE,UAAA;IACA,UAAA;E7C28MN;E6C18MI;IxC/PF,gBwCgQ4B;E7C48M9B;E6Ch9MI;IACE,UAAA;IACA,mBAAA;E7Ck9MN;E6Cj9MI;IxC/PF,yBwCgQ4B;E7Cm9M9B;E6Cv9MI;IACE,UAAA;IACA,mBAAA;E7Cy9MN;E6Cx9MI;IxC/PF,yBwCgQ4B;E7C09M9B;E6C99MI;IACE,UAAA;IACA,UAAA;E7Cg+MN;E6C/9MI;IxC/PF,gBwCgQ4B;E7Ci+M9B;E6Cr+MI;IACE,UAAA;IACA,mBAAA;E7Cu+MN;E6Ct+MI;IxC/PF,yBwCgQ4B;E7Cw+M9B;E6C5+MI;IACE,UAAA;IACA,mBAAA;E7C8+MN;E6C7+MI;IxC/PF,yBwCgQ4B;E7C++M9B;E6Cn/MI;IACE,UAAA;IACA,UAAA;E7Cq/MN;E6Cp/MI;IxC/PF,gBwCgQ4B;E7Cs/M9B;E6C1/MI;IACE,UAAA;IACA,mBAAA;E7C4/MN;E6C3/MI;IxC/PF,yBwCgQ4B;E7C6/M9B;E6CjgNI;IACE,UAAA;IACA,mBAAA;E7CmgNN;E6ClgNI;IxC/PF,yBwCgQ4B;E7CogN9B;E6CxgNI;IACE,UAAA;IACA,WAAA;E7C0gNN;E6CzgNI;IxC/PF,iBwCgQ4B;E7C2gN9B;AACF;;A6C1gNA;ExClQI,qBwCmQsB;ExCnQtB,sBwCoQsB;EACxB,oBAAA;A7C6gNF;A6C5gNE;EACE,uBAAA;A7C8gNJ;A6C7gNE;EACE,qCAAA;A7C+gNJ;A6C7gNE;EACE,uBAAA;A7C+gNJ;A6C9gNE;ExC7QE,cwC8QwB;ExC9QxB,ewC+QwB;EACxB,aAAA;A7CghNJ;A6C/gNI;EACE,SAAA;EACA,qBAAA;A7CihNN;A6ChhNI;EACE,qBAAA;A7CkhNN;A6CjhNI;EACE,gBAAA;A7CmhNN;A6ClhNE;EACE,aAAA;A7CohNJ;A6CnhNE;EACE,eAAA;A7CqhNJ;A6CphNE;EACE,mBAAA;A7CshNJ;AK73NE;EwC0WE;IACE,aAAA;E7CshNJ;AACF;AKt3NE;EwCkWE;IACE,aAAA;E7CuhNJ;AACF;;A6CrhNE;EACE,oBAAA;ExCzSA,wCwC0SwB;ExC1SxB,yCwC2SwB;A7CwhN5B;A6CvhNI;EACE,8BAAA;EACA,+BAAA;A7CyhNN;A6CvhNM;EACE,iBAAA;A7CyhNR;AKx5NE;EwCiYM;IACE,iBAAA;E7C0hNR;AACF;AKz5NE;EwCgYM;IACE,iBAAA;E7C4hNR;AACF;AK15NE;EwC+XM;IACE,iBAAA;E7C8hNR;AACF;AK35NE;EwC8XM;IACE,iBAAA;E7CgiNR;AACF;AK55NE;EwC6XM;IACE,iBAAA;E7CkiNR;AACF;AK55NI;EwC2XI;IACE,iBAAA;E7CoiNR;AACF;AKv5NI;EwCoXI;IACE,iBAAA;E7CsiNR;AACF;AKv5NI;EwCkXI;IACE,iBAAA;E7CwiNR;AACF;AKl5NI;EwC2WI;IACE,iBAAA;E7C0iNR;AACF;A6CvkNM;EACE,oBAAA;A7CykNR;AKx8NE;EwCiYM;IACE,oBAAA;E7C0kNR;AACF;AKz8NE;EwCgYM;IACE,oBAAA;E7C4kNR;AACF;AK18NE;EwC+XM;IACE,oBAAA;E7C8kNR;AACF;AK38NE;EwC8XM;IACE,oBAAA;E7CglNR;AACF;AK58NE;EwC6XM;IACE,oBAAA;E7CklNR;AACF;AK58NI;EwC2XI;IACE,oBAAA;E7ColNR;AACF;AKv8NI;EwCoXI;IACE,oBAAA;E7CslNR;AACF;AKv8NI;EwCkXI;IACE,oBAAA;E7CwlNR;AACF;AKl8NI;EwC2WI;IACE,oBAAA;E7C0lNR;AACF;A6CvnNM;EACE,mBAAA;A7CynNR;AKx/NE;EwCiYM;IACE,mBAAA;E7C0nNR;AACF;AKz/NE;EwCgYM;IACE,mBAAA;E7C4nNR;AACF;AK1/NE;EwC+XM;IACE,mBAAA;E7C8nNR;AACF;AK3/NE;EwC8XM;IACE,mBAAA;E7CgoNR;AACF;AK5/NE;EwC6XM;IACE,mBAAA;E7CkoNR;AACF;AK5/NI;EwC2XI;IACE,mBAAA;E7CooNR;AACF;AKv/NI;EwCoXI;IACE,mBAAA;E7CsoNR;AACF;AKv/NI;EwCkXI;IACE,mBAAA;E7CwoNR;AACF;AKl/NI;EwC2WI;IACE,mBAAA;E7C0oNR;AACF;A6CvqNM;EACE,oBAAA;A7CyqNR;AKxiOE;EwCiYM;IACE,oBAAA;E7C0qNR;AACF;AKziOE;EwCgYM;IACE,oBAAA;E7C4qNR;AACF;AK1iOE;EwC+XM;IACE,oBAAA;E7C8qNR;AACF;AK3iOE;EwC8XM;IACE,oBAAA;E7CgrNR;AACF;AK5iOE;EwC6XM;IACE,oBAAA;E7CkrNR;AACF;AK5iOI;EwC2XI;IACE,oBAAA;E7CorNR;AACF;AKviOI;EwCoXI;IACE,oBAAA;E7CsrNR;AACF;AKviOI;EwCkXI;IACE,oBAAA;E7CwrNR;AACF;AKliOI;EwC2WI;IACE,oBAAA;E7C0rNR;AACF;A6CvtNM;EACE,iBAAA;A7CytNR;AKxlOE;EwCiYM;IACE,iBAAA;E7C0tNR;AACF;AKzlOE;EwCgYM;IACE,iBAAA;E7C4tNR;AACF;AK1lOE;EwC+XM;IACE,iBAAA;E7C8tNR;AACF;AK3lOE;EwC8XM;IACE,iBAAA;E7CguNR;AACF;AK5lOE;EwC6XM;IACE,iBAAA;E7CkuNR;AACF;AK5lOI;EwC2XI;IACE,iBAAA;E7CouNR;AACF;AKvlOI;EwCoXI;IACE,iBAAA;E7CsuNR;AACF;AKvlOI;EwCkXI;IACE,iBAAA;E7CwuNR;AACF;AKllOI;EwC2WI;IACE,iBAAA;E7C0uNR;AACF;A6CvwNM;EACE,oBAAA;A7CywNR;AKxoOE;EwCiYM;IACE,oBAAA;E7C0wNR;AACF;AKzoOE;EwCgYM;IACE,oBAAA;E7C4wNR;AACF;AK1oOE;EwC+XM;IACE,oBAAA;E7C8wNR;AACF;AK3oOE;EwC8XM;IACE,oBAAA;E7CgxNR;AACF;AK5oOE;EwC6XM;IACE,oBAAA;E7CkxNR;AACF;AK5oOI;EwC2XI;IACE,oBAAA;E7CoxNR;AACF;AKvoOI;EwCoXI;IACE,oBAAA;E7CsxNR;AACF;AKvoOI;EwCkXI;IACE,oBAAA;E7CwxNR;AACF;AKloOI;EwC2WI;IACE,oBAAA;E7C0xNR;AACF;A6CvzNM;EACE,mBAAA;A7CyzNR;AKxrOE;EwCiYM;IACE,mBAAA;E7C0zNR;AACF;AKzrOE;EwCgYM;IACE,mBAAA;E7C4zNR;AACF;AK1rOE;EwC+XM;IACE,mBAAA;E7C8zNR;AACF;AK3rOE;EwC8XM;IACE,mBAAA;E7Cg0NR;AACF;AK5rOE;EwC6XM;IACE,mBAAA;E7Ck0NR;AACF;AK5rOI;EwC2XI;IACE,mBAAA;E7Co0NR;AACF;AKvrOI;EwCoXI;IACE,mBAAA;E7Cs0NR;AACF;AKvrOI;EwCkXI;IACE,mBAAA;E7Cw0NR;AACF;AKlrOI;EwC2WI;IACE,mBAAA;E7C00NR;AACF;A6Cv2NM;EACE,oBAAA;A7Cy2NR;AKxuOE;EwCiYM;IACE,oBAAA;E7C02NR;AACF;AKzuOE;EwCgYM;IACE,oBAAA;E7C42NR;AACF;AK1uOE;EwC+XM;IACE,oBAAA;E7C82NR;AACF;AK3uOE;EwC8XM;IACE,oBAAA;E7Cg3NR;AACF;AK5uOE;EwC6XM;IACE,oBAAA;E7Ck3NR;AACF;AK5uOI;EwC2XI;IACE,oBAAA;E7Co3NR;AACF;AKvuOI;EwCoXI;IACE,oBAAA;E7Cs3NR;AACF;AKvuOI;EwCkXI;IACE,oBAAA;E7Cw3NR;AACF;AKluOI;EwC2WI;IACE,oBAAA;E7C03NR;AACF;A6Cv5NM;EACE,iBAAA;A7Cy5NR;AKxxOE;EwCiYM;IACE,iBAAA;E7C05NR;AACF;AKzxOE;EwCgYM;IACE,iBAAA;E7C45NR;AACF;AK1xOE;EwC+XM;IACE,iBAAA;E7C85NR;AACF;AK3xOE;EwC8XM;IACE,iBAAA;E7Cg6NR;AACF;AK5xOE;EwC6XM;IACE,iBAAA;E7Ck6NR;AACF;AK5xOI;EwC2XI;IACE,iBAAA;E7Co6NR;AACF;AKvxOI;EwCoXI;IACE,iBAAA;E7Cs6NR;AACF;AKvxOI;EwCkXI;IACE,iBAAA;E7Cw6NR;AACF;AKlxOI;EwC2WI;IACE,iBAAA;E7C06NR;AACF;;A8Cv6OA;EACE,oBAAA;EACA,cAAA;EACA,aAAA;EACA,YAAA;EACA,cAAA;EACA,uBAAA;A9C06OF;A8Cx6OE;EACE,qBAAA;EACA,sBAAA;EACA,oBAAA;A9C06OJ;A8Cz6OI;EACE,uBAAA;A9C26ON;A8C16OI;EACE,sBAjBS;A9C67Of;A8C36OE;EACE,oBAAA;A9C66OJ;A8C56OE;EACE,gBArBW;A9Cm8Of;A8C76OE;EACE,sBAAA;A9C+6OJ;A8C96OI;EACE,gCAAA;A9Cg7ON;AKj2OE;EyC5EE;IACE,aAAA;E9Cg7OJ;E8C96OI;IACE,UAAA;IACA,kBAAA;E9Cg7ON;E8Cl7OI;IACE,UAAA;IACA,mBAAA;E9Co7ON;E8Ct7OI;IACE,UAAA;IACA,UAAA;E9Cw7ON;E8C17OI;IACE,UAAA;IACA,mBAAA;E9C47ON;E8C97OI;IACE,UAAA;IACA,mBAAA;E9Cg8ON;E8Cl8OI;IACE,UAAA;IACA,UAAA;E9Co8ON;E8Ct8OI;IACE,UAAA;IACA,mBAAA;E9Cw8ON;E8C18OI;IACE,UAAA;IACA,mBAAA;E9C48ON;E8C98OI;IACE,UAAA;IACA,UAAA;E9Cg9ON;E8Cl9OI;IACE,UAAA;IACA,mBAAA;E9Co9ON;E8Ct9OI;IACE,UAAA;IACA,mBAAA;E9Cw9ON;E8C19OI;IACE,UAAA;IACA,WAAA;E9C49ON;AACF;;A+ChgPA,kBAAA;ACIE;EACE,kCAAA;AhDggPJ;;AgD9/OI;EAEE,yBAAA;AhDggPN;;AgD//OE;EACE,6CAAA;AhDkgPJ;;AgDzgPE;EACE,gCAAA;AhD4gPJ;;AgD1gPI;EAEE,uBAAA;AhD4gPN;;AgD3gPE;EACE,2CAAA;AhD8gPJ;;AgDrhPE;EACE,iCAAA;AhDwhPJ;;AgDthPI;EAEE,yBAAA;AhDwhPN;;AgDvhPE;EACE,4CAAA;AhD0hPJ;;AgDjiPE;EACE,iCAAA;AhDoiPJ;;AgDliPI;EAEE,yBAAA;AhDoiPN;;AgDniPE;EACE,4CAAA;AhDsiPJ;;AgD7iPE;EACE,qCAAA;AhDgjPJ;;AgD9iPI;EAEE,yBAAA;AhDgjPN;;AgD/iPE;EACE,gDAAA;AhDkjPJ;;AgD7iPI;EACE,yBAAA;AhDgjPN;;AgD9iPM;EAEE,yBAAA;AhDgjPR;;AgD/iPI;EACE,oCAAA;AhDkjPN;;AgDhjPI;EACE,yBAAA;AhDmjPN;;AgDjjPM;EAEE,yBAAA;AhDmjPR;;AgDljPI;EACE,oCAAA;AhDqjPN;;AgDjlPE;EACE,oCAAA;AhDolPJ;;AgDllPI;EAEE,yBAAA;AhDolPN;;AgDnlPE;EACE,+CAAA;AhDslPJ;;AgDjlPI;EACE,yBAAA;AhDolPN;;AgDllPM;EAEE,yBAAA;AhDolPR;;AgDnlPI;EACE,oCAAA;AhDslPN;;AgDplPI;EACE,yBAAA;AhDulPN;;AgDrlPM;EAEE,yBAAA;AhDulPR;;AgDtlPI;EACE,oCAAA;AhDylPN;;AgDrnPE;EACE,oCAAA;AhDwnPJ;;AgDtnPI;EAEE,yBAAA;AhDwnPN;;AgDvnPE;EACE,+CAAA;AhD0nPJ;;AgDrnPI;EACE,yBAAA;AhDwnPN;;AgDtnPM;EAEE,yBAAA;AhDwnPR;;AgDvnPI;EACE,oCAAA;AhD0nPN;;AgDxnPI;EACE,yBAAA;AhD2nPN;;AgDznPM;EAEE,yBAAA;AhD2nPR;;AgD1nPI;EACE,oCAAA;AhD6nPN;;AgDzpPE;EACE,oCAAA;AhD4pPJ;;AgD1pPI;EAEE,yBAAA;AhD4pPN;;AgD3pPE;EACE,+CAAA;AhD8pPJ;;AgDzpPI;EACE,yBAAA;AhD4pPN;;AgD1pPM;EAEE,yBAAA;AhD4pPR;;AgD3pPI;EACE,oCAAA;AhD8pPN;;AgD5pPI;EACE,yBAAA;AhD+pPN;;AgD7pPM;EAEE,yBAAA;AhD+pPR;;AgD9pPI;EACE,oCAAA;AhDiqPN;;AgD7rPE;EACE,oCAAA;AhDgsPJ;;AgD9rPI;EAEE,yBAAA;AhDgsPN;;AgD/rPE;EACE,+CAAA;AhDksPJ;;AgD7rPI;EACE,yBAAA;AhDgsPN;;AgD9rPM;EAEE,yBAAA;AhDgsPR;;AgD/rPI;EACE,oCAAA;AhDksPN;;AgDhsPI;EACE,yBAAA;AhDmsPN;;AgDjsPM;EAEE,yBAAA;AhDmsPR;;AgDlsPI;EACE,oCAAA;AhDqsPN;;AgDjuPE;EACE,oCAAA;AhDouPJ;;AgDluPI;EAEE,yBAAA;AhDouPN;;AgDnuPE;EACE,+CAAA;AhDsuPJ;;AgDjuPI;EACE,yBAAA;AhDouPN;;AgDluPM;EAEE,yBAAA;AhDouPR;;AgDnuPI;EACE,oCAAA;AhDsuPN;;AgDpuPI;EACE,yBAAA;AhDuuPN;;AgDruPM;EAEE,yBAAA;AhDuuPR;;AgDtuPI;EACE,oCAAA;AhDyuPN;;AgDtuPE;EACE,gCAAA;AhDyuPJ;;AgDxuPE;EACE,2CAAA;AhD2uPJ;;AgD9uPE;EACE,iCAAA;AhDivPJ;;AgDhvPE;EACE,4CAAA;AhDmvPJ;;AgDtvPE;EACE,iCAAA;AhDyvPJ;;AgDxvPE;EACE,4CAAA;AhD2vPJ;;AgD9vPE;EACE,iCAAA;AhDiwPJ;;AgDhwPE;EACE,4CAAA;AhDmwPJ;;AgDtwPE;EACE,iCAAA;AhDywPJ;;AgDxwPE;EACE,4CAAA;AhD2wPJ;;AgD9wPE;EACE,iCAAA;AhDixPJ;;AgDhxPE;EACE,4CAAA;AhDmxPJ;;AgDtxPE;EACE,iCAAA;AhDyxPJ;;AgDxxPE;EACE,4CAAA;AhD2xPJ;;AgD9xPE;EACE,iCAAA;AhDiyPJ;;AgDhyPE;EACE,4CAAA;AhDmyPJ;;AgDtyPE;EACE,iCAAA;AhDyyPJ;;AgDxyPE;EACE,4CAAA;AhD2yPJ;;AiD/0PE;EACE,8BAAA;AjDk1PJ;;AiDn1PE;EACE,sCAAA;AjDs1PJ;;AiDv1PE;EACE,iCAAA;AjD01PJ;;AiD31PE;EACE,yCAAA;AjD81PJ;;AiD11PE;EACE,4BAAA;AjD61PJ;;AiD91PE;EACE,0BAAA;AjDi2PJ;;AiDl2PE;EACE,kCAAA;AjDq2PJ;;AiDj2PE;EACE,sCAAA;AjDo2PJ;;AiDr2PE;EACE,oCAAA;AjDw2PJ;;AiDz2PE;EACE,kCAAA;AjD42PJ;;AiD72PE;EACE,yCAAA;AjDg3PJ;;AiDj3PE;EACE,wCAAA;AjDo3PJ;;AiDr3PE;EACE,wCAAA;AjDw3PJ;;AiDz3PE;EACE,iCAAA;AjD43PJ;;AiD73PE;EACE,+BAAA;AjDg4PJ;;AiDj4PE;EACE,gCAAA;AjDo4PJ;;AiDr4PE;EACE,iCA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hRR;;AsDnhRM;EACE,4BAAA;EACA,+BAAA;AtDshRR;;AuD/iRI;EACE,0BAAA;AvDkjRN;;AuDnjRI;EACE,4BAAA;AvDsjRN;;AuDvjRI;EACE,0BAAA;AvD0jRN;;AuD3jRI;EACE,4BAAA;AvD8jRN;;AuD/jRI;EACE,6BAAA;AvDkkRN;;AuDnkRI;EACE,0BAAA;AvDskRN;;AuDvkRI;EACE,6BAAA;AvD0kRN;;AK1+QE;EkDjGE;IACE,0BAAA;EvD+kRJ;EuDhlRE;IACE,4BAAA;EvDklRJ;EuDnlRE;IACE,0BAAA;EvDqlRJ;EuDtlRE;IACE,4BAAA;EvDwlRJ;EuDzlRE;IACE,6BAAA;EvD2lRJ;EuD5lRE;IACE,0BAAA;EvD8lRJ;EuD/lRE;IACE,6BAAA;EvDimRJ;AACF;AK9/QE;EkDrGE;IACE,0BAAA;EvDsmRJ;EuDvmRE;IACE,4BAAA;EvDymRJ;EuD1mRE;IACE,0BAAA;EvD4mRJ;EuD7mRE;IACE,4BAAA;EvD+mRJ;EuDhnRE;IACE,6BAAA;EvDknRJ;EuDnnRE;IACE,0BAAA;EvDqnRJ;EuDtnRE;IACE,6BAAA;EvDwnRJ;AACF;AK7gRE;EkD7GE;IACE,0BAAA;EvD6nRJ;EuD9nRE;IACE,4BAAA;EvDgoRJ;EuDjoRE;IACE,0BAAA;EvDmoRJ;EuDpoRE;IACE,4BAAA;EvDsoRJ;EuDvoRE;IACE,6BAAA;EvDyoRJ;EuD1oRE;IACE,0BAAA;EvD4oRJ;EuD7oRE;IACE,6BAAA;EvD+oRJ;AACF;AKhiRE;EkDjHE;IACE,0BAAA;EvDopRJ;EuDrpRE;IACE,4BAAA;EvDupRJ;EuDxpRE;IACE,0BAAA;EvD0pRJ;EuD3pRE;IACE,4BAAA;EvD6pRJ;EuD9pRE;IACE,6BAAA;EvDgqRJ;EuDjqRE;IACE,0BAAA;EvDmqRJ;EuDpqRE;IACE,6BAAA;EvDsqRJ;AACF;AKxiRI;EkDhIA;IACE,0BAAA;EvD2qRJ;EuD5qRE;IACE,4BAAA;EvD8qRJ;EuD/qRE;IACE,0BAAA;EvDirRJ;EuDlrRE;IACE,4BAAA;EvDorRJ;EuDrrRE;IACE,6BAAA;EvDurRJ;EuDxrRE;IACE,0BAAA;EvD0rRJ;EuD3rRE;IACE,6BAAA;EvD6rRJ;AACF;AKhjRI;EkD/IA;IACE,0BAAA;EvDksRJ;EuDnsRE;IACE,4BAAA;EvDqsRJ;EuDtsRE;IACE,0BAAA;EvDwsRJ;EuDzsRE;IACE,4BAAA;EvD2sRJ;EuD5sRE;IACE,6BAAA;EvD8sRJ;EuD/sRE;IACE,0BAAA;EvDitRJ;EuDltRE;IACE,6BAAA;EvDotRJ;AACF;AuD5rRE;EACE,6BAAA;AvD8rRJ;;AuD/rRE;EACE,8BAAA;AvDksRJ;;AuDnsRE;EACE,2BAAA;AvDssRJ;;AuDvsRE;EACE,4BAAA;AvD0sRJ;;AKpoRE;EkDlEE;IACE,6BAAA;EvD0sRJ;AACF;AKtoRE;EkDnEE;IACE,6BAAA;EvD4sRJ;AACF;AKvoRE;EkDpEE;IACE,6BAAA;EvD8sRJ;AACF;AKxoRE;EkDrEE;IACE,6BAAA;EvDgtRJ;AACF;AKzoRE;EkDtEE;IACE,6BAAA;EvDktRJ;AACF;AKzoRI;EkDxEA;IACE,6BAAA;EvDotRJ;AACF;AKpoRI;EkD/EA;IACE,6BAAA;EvDstRJ;AACF;AKpoRI;EkDjFA;IACE,6BAAA;EvDwtRJ;AACF;AK/nRI;EkDxFA;IACE,6BAAA;EvD0tRJ;AACF;AKlrRE;EkDlEE;IACE,8BAAA;EvDuvRJ;AACF;AKnrRE;EkDnEE;IACE,8BAAA;EvDyvRJ;AACF;AKprRE;EkDpEE;IACE,8BAAA;EvD2vRJ;AACF;AKrrRE;EkDrEE;IACE,8BAAA;EvD6vRJ;AACF;AKtrRE;EkDtEE;IACE,8BAAA;EvD+vRJ;AACF;AKtrRI;EkDxEA;IACE,8BAAA;EvDiwRJ;AACF;AKjrRI;EkD/EA;IACE,8BAAA;EvDmwRJ;AACF;AKjrRI;EkDjFA;IACE,8BAAA;EvDqwRJ;AACF;AK5qRI;EkDxFA;IACE,8BAAA;EvDuwRJ;AACF;AK/tRE;EkDlEE;IACE,2BAAA;EvDoyRJ;AACF;AKhuRE;EkDnEE;IACE,2BAAA;EvDsyRJ;AACF;AKjuRE;EkDpEE;IACE,2BAAA;EvDwyRJ;AACF;AKluRE;EkDrEE;IACE,2BAAA;EvD0yRJ;AACF;AKnuRE;EkDtEE;IACE,2BAAA;EvD4yRJ;AACF;AKnuRI;EkDxEA;IACE,2BAAA;EvD8yRJ;AACF;AK9tRI;EkD/EA;IACE,2BAAA;EvDgzRJ;AACF;AK9tRI;EkDjFA;IACE,2BAAA;EvDkzRJ;AACF;AKztRI;EkDxFA;IACE,2BAAA;EvDozRJ;AACF;AK5wRE;EkDlEE;IACE,4BAAA;EvDi1RJ;AACF;AK7wRE;EkDnEE;IACE,4BAAA;EvDm1RJ;AACF;AK9wRE;EkDpEE;IACE,4BAAA;EvDq1RJ;AACF;AK/wRE;EkDrEE;IACE,4BAAA;EvDu1RJ;AACF;AKhxRE;EkDtEE;IACE,4BAAA;EvDy1RJ;AACF;AKhxRI;EkDxEA;IACE,4BAAA;EvD21RJ;AACF;AK3wRI;EkD/EA;IACE,4BAAA;EvD61RJ;AACF;AK3wRI;EkDjFA;IACE,4BAAA;EvD+1RJ;AACF;AKtwRI;EkDxFA;IACE,4BAAA;EvDi2RJ;AACF;AuDh2RA;EACE,qCAAA;AvDk2RF;;AuDh2RA;EACE,oCAAA;AvDm2RF;;AuDj2RA;EACE,oCAAA;AvDo2RF;;AuDl2RA;EACE,6BAAA;AvDq2RF;;AuDn2RA;EACE,qCAAA;AvDs2RF;;AuDp2RA;EACE,2BAAA;AvDu2RF;;AuDt2RA;EACE,2BAAA;AvDy2RF;;AuDx2RA;EACE,2BAAA;AvD22RF;;AuD12RA;EACE,2BAAA;AvD62RF;;AuD52RA;EACE,2BAAA;AvD+2RF;;AuD72RA;EACE,+LAAA;AvDg3RF;;AuD92RA;EACE,+LAAA;AvDi3RF;;AuD/2RA;EACE,+LAAA;AvDk3RF;;AuDh3RA;EACE,iCAAA;AvDm3RF;;AuDj3RA;EACE,iCAAA;AvDo3RF;;AwDr9RE;EACE,yBAAA;AxDw9RJ;;AKx3RE;EmD9FE;IACE,yBAAA;ExD09RJ;AACF;AK13RE;EmD/FE;IACE,yBAAA;ExD49RJ;AACF;AK33RE;EmDhGE;IACE,yBAAA;ExD89RJ;AACF;AK53RE;EmDjGE;IACE,yBAAA;ExDg+RJ;AACF;AK73RE;EmDlGE;IACE,yBAAA;ExDk+RJ;AACF;AK73RI;EmDpGA;IACE,yBAAA;ExDo+RJ;AACF;AKx3RI;EmD3GA;IACE,yBAAA;ExDs+RJ;AACF;AKx3RI;EmD7GA;IACE,yBAAA;ExDw+RJ;AACF;AKn3RI;EmDpHA;IACE,yBAAA;ExD0+RJ;AACF;AwDvgSE;EACE,wBAAA;AxDygSJ;;AKz6RE;EmD9FE;IACE,wBAAA;ExD2gSJ;AACF;AK36RE;EmD/FE;IACE,wBAAA;ExD6gSJ;AACF;AK56RE;EmDhGE;IACE,wBAAA;ExD+gSJ;AACF;AK76RE;EmDjGE;IACE,wBAAA;ExDihSJ;AACF;AK96RE;EmDlGE;IACE,wBAAA;ExDmhSJ;AACF;AK96RI;EmDpGA;IACE,wBAAA;ExDqhSJ;AACF;AKz6RI;EmD3GA;IACE,wBAAA;ExDuhSJ;AACF;AKz6RI;EmD7GA;IACE,wBAAA;ExDyhSJ;AACF;AKp6RI;EmDpHA;IACE,wBAAA;ExD2hSJ;AACF;AwDxjSE;EACE,0BAAA;AxD0jSJ;;AK19RE;EmD9FE;IACE,0BAAA;ExD4jSJ;AACF;AK59RE;EmD/FE;IACE,0BAAA;ExD8jSJ;AACF;AK79RE;EmDhGE;IACE,0BAAA;ExDgkSJ;AACF;AK99RE;EmDjGE;IACE,0BAAA;ExDkkSJ;AACF;AK/9RE;EmDlGE;IACE,0BAAA;ExDokSJ;AACF;AK/9RI;EmDpGA;IACE,0BAAA;ExDskSJ;AACF;AK19RI;EmD3GA;IACE,0BAAA;ExDwkSJ;AACF;AK19RI;EmD7GA;IACE,0BAAA;ExD0kSJ;AACF;AKr9RI;EmDpHA;IACE,0BAAA;ExD4kSJ;AACF;AwDzmSE;EACE,gCAAA;AxD2mSJ;;AK3gSE;EmD9FE;IACE,gCAAA;ExD6mSJ;AACF;AK7gSE;EmD/FE;IACE,gCAAA;ExD+mSJ;AACF;AK9gSE;EmDhGE;IACE,gCAAA;ExDinSJ;AACF;AK/gSE;EmDjGE;IACE,gCAAA;ExDmnSJ;AACF;AKhhSE;EmDlGE;IACE,gCAAA;ExDqnSJ;AACF;AKhhSI;EmDpGA;IACE,gCAAA;ExDunSJ;AACF;AK3gSI;EmD3GA;IACE,gCAAA;ExDynSJ;AACF;AK3gSI;EmD7GA;IACE,gCAAA;ExD2nSJ;AACF;AKtgSI;EmDpHA;IACE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","sourcesContent":["@charset \"utf-8\"\n/*! bulma.io v0.9.4 | MIT License | github.com/jgthms/bulma */\n@import \"sass/utilities/_all\"\n@import \"sass/base/_all\"\n@import \"sass/elements/_all\"\n@import \"sass/form/_all\"\n@import \"sass/components/_all\"\n@import \"sass/grid/_all\"\n@import \"sass/helpers/_all\"\n@import \"sass/layout/_all\"\n","/* Bulma Utilities */\n@charset \"utf-8\"\n\n@import \"initial-variables\"\n@import \"functions\"\n@import \"derived-variables\"\n@import \"mixins\"\n@import \"controls\"\n@import \"extends\"\n","@import \"mixins\"\n\n%control\n  +control\n\n%unselectable\n  +unselectable\n\n%arrow\n  +arrow\n\n%block\n  +block\n\n%delete\n  +delete\n\n%loader\n  +loader\n\n%overlay\n  +overlay\n\n%reset\n  +reset\n","@import \"derived-variables\"\n\n$control-radius: $radius !default\n$control-radius-small: $radius-small !default\n\n$control-border-width: 1px !default\n\n$control-height: 2.5em !default\n$control-line-height: 1.5 !default\n\n$control-padding-vertical: calc(0.5em - #{$control-border-width}) !default\n$control-padding-horizontal: calc(0.75em - #{$control-border-width}) !default\n\n=control\n  -moz-appearance: none\n  -webkit-appearance: none\n  align-items: center\n  border: $control-border-width solid transparent\n  border-radius: $control-radius\n  box-shadow: none\n  display: inline-flex\n  font-size: $size-normal\n  height: $control-height\n  justify-content: flex-start\n  line-height: $control-line-height\n  padding-bottom: $control-padding-vertical\n  padding-left: $control-padding-horizontal\n  padding-right: $control-padding-horizontal\n  padding-top: $control-padding-vertical\n  position: relative\n  vertical-align: top\n  // States\n  &:focus,\n  &.is-focused,\n  &:active,\n  &.is-active\n    outline: none\n  &[disabled],\n  fieldset[disabled] &\n    cursor: not-allowed\n\n// The controls sizes use mixins so they can be used at different breakpoints\n=control-small\n  border-radius: $control-radius-small\n  font-size: $size-small\n=control-medium\n  font-size: $size-medium\n=control-large\n  font-size: $size-large\n","// Colors\n\n$black:        hsl(0, 0%, 4%) !default\n$black-bis:    hsl(0, 0%, 7%) !default\n$black-ter:    hsl(0, 0%, 14%) !default\n\n$grey-darker:  hsl(0, 0%, 21%) !default\n$grey-dark:    hsl(0, 0%, 29%) !default\n$grey:         hsl(0, 0%, 48%) !default\n$grey-light:   hsl(0, 0%, 71%) !default\n$grey-lighter: hsl(0, 0%, 86%) !default\n$grey-lightest: hsl(0, 0%, 93%) !default\n\n$white-ter:    hsl(0, 0%, 96%) !default\n$white-bis:    hsl(0, 0%, 98%) !default\n$white:        hsl(0, 0%, 100%) !default\n\n$orange:       hsl(14,  100%, 53%) !default\n$yellow:       hsl(44,  100%, 77%) !default\n$green:        hsl(153, 53%,  53%) !default\n$turquoise:    hsl(171, 100%, 41%) !default\n$cyan:         hsl(207, 61%,  53%) !default\n$blue:         hsl(229, 53%,  53%) !default\n$purple:       hsl(271, 100%, 71%) !default\n$red:          hsl(348, 86%, 61%) !default\n\n// Typography\n\n$family-sans-serif: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !default\n$family-monospace: monospace !default\n$render-mode: optimizeLegibility !default\n\n$size-1: 3rem !default\n$size-2: 2.5rem !default\n$size-3: 2rem !default\n$size-4: 1.5rem !default\n$size-5: 1.25rem !default\n$size-6: 1rem !default\n$size-7: 0.75rem !default\n\n$weight-light: 300 !default\n$weight-normal: 400 !default\n$weight-medium: 500 !default\n$weight-semibold: 600 !default\n$weight-bold: 700 !default\n\n// Spacing\n\n$block-spacing: 1.5rem !default\n\n// Responsiveness\n\n// The container horizontal gap, which acts as the offset for breakpoints\n$gap: 32px !default\n// 960, 1152, and 1344 have been chosen because they are divisible by both 12 and 16\n$tablet: 769px !default\n// 960px container + 4rem\n$desktop: 960px + (2 * $gap) !default\n// 1152px container + 4rem\n$widescreen: 1152px + (2 * $gap) !default\n$widescreen-enabled: true !default\n// 1344px container + 4rem\n$fullhd: 1344px + (2 * $gap) !default\n$fullhd-enabled: true !default\n$breakpoints: (\"mobile\": (\"until\": $tablet), \"tablet\": (\"from\": $tablet), \"tablet-only\": (\"from\": $tablet, \"until\": $desktop), \"touch\": (\"from\": $desktop), \"desktop\": (\"from\": $desktop), \"desktop-only\": (\"from\": $desktop, \"until\": $widescreen), \"until-widescreen\": (\"until\": $widescreen), \"widescreen\": (\"from\": $widescreen), \"widescreen-only\": (\"from\": $widescreen, \"until\": $fullhd), \"until-fullhd\": (\"until\": $fullhd), \"fullhd\": (\"from\": $fullhd)) !default\n\n// Miscellaneous\n\n$easing: ease-out !default\n$radius-small: 2px !default\n$radius: 4px !default\n$radius-large: 6px !default\n$radius-rounded: 9999px !default\n$speed: 86ms !default\n\n// Flags\n\n$variable-columns: true !default\n$rtl: false !default\n","@import \"derived-variables\"\n\n=clearfix\n  &::after\n    clear: both\n    content: \" \"\n    display: table\n\n=center($width, $height: 0)\n  position: absolute\n  @if $height != 0\n    left: calc(50% - (#{$width} * 0.5))\n    top: calc(50% - (#{$height} * 0.5))\n  @else\n    left: calc(50% - (#{$width} * 0.5))\n    top: calc(50% - (#{$width} * 0.5))\n\n=fa($size, $dimensions)\n  display: inline-block\n  font-size: $size\n  height: $dimensions\n  line-height: $dimensions\n  text-align: center\n  vertical-align: top\n  width: $dimensions\n\n=hamburger($dimensions)\n  -moz-appearance: none\n  -webkit-appearance: none\n  appearance: none\n  background: none\n  border: none\n  cursor: pointer\n  display: block\n  height: $dimensions\n  position: relative\n  width: $dimensions\n  span\n    background-color: currentColor\n    display: block\n    height: 1px\n    left: calc(50% - 8px)\n    position: absolute\n    transform-origin: center\n    transition-duration: $speed\n    transition-property: background-color, opacity, transform\n    transition-timing-function: $easing\n    width: 16px\n    &:nth-child(1)\n      top: calc(50% - 6px)\n    &:nth-child(2)\n      top: calc(50% - 1px)\n    &:nth-child(3)\n      top: calc(50% + 4px)\n  &:hover\n    background-color: bulmaRgba(black, 0.05)\n  // Modifers\n  &.is-active\n    span\n      &:nth-child(1)\n        transform: translateY(5px) rotate(45deg)\n      &:nth-child(2)\n        opacity: 0\n      &:nth-child(3)\n        transform: translateY(-5px) rotate(-45deg)\n\n=overflow-touch\n  -webkit-overflow-scrolling: touch\n\n=placeholder\n  $placeholders: ':-moz' ':-webkit-input' '-moz' '-ms-input'\n  @each $placeholder in $placeholders\n    &:#{$placeholder}-placeholder\n      @content\n\n=reset\n  -moz-appearance: none\n  -webkit-appearance: none\n  appearance: none\n  background: none\n  border: none\n  color: currentColor\n  font-family: inherit\n  font-size: 1em\n  margin: 0\n  padding: 0\n\n// Responsiveness\n\n=from($device)\n  @media screen and (min-width: $device)\n    @content\n\n=until($device)\n  @media screen and (max-width: $device - 1px)\n    @content\n\n=between($from, $until)\n  @media screen and (min-width: $from) and (max-width: $until - 1px)\n    @content\n\n=mobile\n  @media screen and (max-width: $tablet - 1px)\n    @content\n\n=tablet\n  @media screen and (min-width: $tablet), print\n    @content\n\n=tablet-only\n  @media screen and (min-width: $tablet) and (max-width: $desktop - 1px)\n    @content\n\n=touch\n  @media screen and (max-width: $desktop - 1px)\n    @content\n\n=desktop\n  @media screen and (min-width: $desktop)\n    @content\n\n=desktop-only\n  @if $widescreen-enabled\n    @media screen and (min-width: $desktop) and (max-width: $widescreen - 1px)\n      @content\n\n=until-widescreen\n  @if $widescreen-enabled\n    @media screen and (max-width: $widescreen - 1px)\n      @content\n\n=widescreen\n  @if $widescreen-enabled\n    @media screen and (min-width: $widescreen)\n      @content\n\n=widescreen-only\n  @if $widescreen-enabled and $fullhd-enabled\n    @media screen and (min-width: $widescreen) and (max-width: $fullhd - 1px)\n      @content\n\n=until-fullhd\n  @if $fullhd-enabled\n    @media screen and (max-width: $fullhd - 1px)\n      @content\n\n=fullhd\n  @if $fullhd-enabled\n    @media screen and (min-width: $fullhd)\n      @content\n\n=breakpoint($name)\n  $breakpoint: map-get($breakpoints, $name)\n  @if $breakpoint\n    $from: map-get($breakpoint, \"from\")\n    $until: map-get($breakpoint, \"until\")\n    @if $from and $until\n      +between($from, $until)\n        @content\n    @else if $from\n      +from($from)\n        @content\n    @else if $until\n      +until($until)\n        @content\n\n=ltr\n  @if not $rtl\n    @content\n\n=rtl\n  @if $rtl\n    @content\n\n=ltr-property($property, $spacing, $right: true)\n  $normal: if($right, \"right\", \"left\")\n  $opposite: if($right, \"left\", \"right\")\n  @if $rtl\n    #{$property}-#{$opposite}: $spacing\n  @else\n    #{$property}-#{$normal}: $spacing\n\n=ltr-position($spacing, $right: true)\n  $normal: if($right, \"right\", \"left\")\n  $opposite: if($right, \"left\", \"right\")\n  @if $rtl\n    #{$opposite}: $spacing\n  @else\n    #{$normal}: $spacing\n\n// Placeholders\n\n=unselectable\n  -webkit-touch-callout: none\n  -webkit-user-select: none\n  -moz-user-select: none\n  -ms-user-select: none\n  user-select: none\n\n=arrow($color: transparent)\n  border: 3px solid $color\n  border-radius: 2px\n  border-right: 0\n  border-top: 0\n  content: \" \"\n  display: block\n  height: 0.625em\n  margin-top: -0.4375em\n  pointer-events: none\n  position: absolute\n  top: 50%\n  transform: rotate(-45deg)\n  transform-origin: center\n  width: 0.625em\n\n=block($spacing: $block-spacing)\n  &:not(:last-child)\n    margin-bottom: $spacing\n\n=delete\n  +unselectable\n  -moz-appearance: none\n  -webkit-appearance: none\n  background-color: bulmaRgba($scheme-invert, 0.2)\n  border: none\n  border-radius: $radius-rounded\n  cursor: pointer\n  pointer-events: auto\n  display: inline-block\n  flex-grow: 0\n  flex-shrink: 0\n  font-size: 0\n  height: 20px\n  max-height: 20px\n  max-width: 20px\n  min-height: 20px\n  min-width: 20px\n  outline: none\n  position: relative\n  vertical-align: top\n  width: 20px\n  &::before,\n  &::after\n    background-color: $scheme-main\n    content: \"\"\n    display: block\n    left: 50%\n    position: absolute\n    top: 50%\n    transform: translateX(-50%) translateY(-50%) rotate(45deg)\n    transform-origin: center center\n  &::before\n    height: 2px\n    width: 50%\n  &::after\n    height: 50%\n    width: 2px\n  &:hover,\n  &:focus\n    background-color: bulmaRgba($scheme-invert, 0.3)\n  &:active\n    background-color: bulmaRgba($scheme-invert, 0.4)\n  // Sizes\n  &.is-small\n    height: 16px\n    max-height: 16px\n    max-width: 16px\n    min-height: 16px\n    min-width: 16px\n    width: 16px\n  &.is-medium\n    height: 24px\n    max-height: 24px\n    max-width: 24px\n    min-height: 24px\n    min-width: 24px\n    width: 24px\n  &.is-large\n    height: 32px\n    max-height: 32px\n    max-width: 32px\n    min-height: 32px\n    min-width: 32px\n    width: 32px\n\n=loader\n  animation: spinAround 500ms infinite linear\n  border: 2px solid $grey-lighter\n  border-radius: $radius-rounded\n  border-right-color: transparent\n  border-top-color: transparent\n  content: \"\"\n  display: block\n  height: 1em\n  position: relative\n  width: 1em\n\n=overlay($offset: 0)\n  bottom: $offset\n  left: $offset\n  position: absolute\n  right: $offset\n  top: $offset\n","/* Bulma Base */\n@charset \"utf-8\"\n\n@import \"minireset\"\n@import \"generic\"\n@import \"animations\"\n","/*! minireset.css v0.0.6 | MIT License | github.com/jgthms/minireset.css */\n// Blocks\nhtml,\nbody,\np,\nol,\nul,\nli,\ndl,\ndt,\ndd,\nblockquote,\nfigure,\nfieldset,\nlegend,\ntextarea,\npre,\niframe,\nhr,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6\n  margin: 0\n  padding: 0\n\n// Headings\nh1,\nh2,\nh3,\nh4,\nh5,\nh6\n  font-size: 100%\n  font-weight: normal\n\n// List\nul\n  list-style: none\n\n// Form\nbutton,\ninput,\nselect,\ntextarea\n  margin: 0\n\n// Box sizing\nhtml\n  box-sizing: border-box\n\n*\n  &,\n  &::before,\n  &::after\n    box-sizing: inherit\n\n// Media\nimg,\nvideo\n  height: auto\n  max-width: 100%\n\n// Iframe\niframe\n  border: 0\n\n// Table\ntable\n  border-collapse: collapse\n  border-spacing: 0\n\ntd,\nth\n  padding: 0\n  &:not([align])\n    text-align: inherit\n","@import \"../utilities/mixins\"\n\n$body-background-color: $scheme-main !default\n$body-size: 16px !default\n$body-min-width: 300px !default\n$body-rendering: optimizeLegibility !default\n$body-family: $family-primary !default\n$body-overflow-x: hidden !default\n$body-overflow-y: scroll !default\n\n$body-color: $text !default\n$body-font-size: 1em !default\n$body-weight: $weight-normal !default\n$body-line-height: 1.5 !default\n\n$code-family: $family-code !default\n$code-padding: 0.25em 0.5em 0.25em !default\n$code-weight: normal !default\n$code-size: 0.875em !default\n\n$small-font-size: 0.875em !default\n\n$hr-background-color: $background !default\n$hr-height: 2px !default\n$hr-margin: 1.5rem 0 !default\n\n$strong-color: $text-strong !default\n$strong-weight: $weight-bold !default\n\n$pre-font-size: 0.875em !default\n$pre-padding: 1.25rem 1.5rem !default\n$pre-code-font-size: 1em !default\n\nhtml\n  background-color: $body-background-color\n  font-size: $body-size\n  -moz-osx-font-smoothing: grayscale\n  -webkit-font-smoothing: antialiased\n  min-width: $body-min-width\n  overflow-x: $body-overflow-x\n  overflow-y: $body-overflow-y\n  text-rendering: $body-rendering\n  text-size-adjust: 100%\n\narticle,\naside,\nfigure,\nfooter,\nheader,\nhgroup,\nsection\n  display: block\n\nbody,\nbutton,\ninput,\noptgroup,\nselect,\ntextarea\n  font-family: $body-family\n\ncode,\npre\n  -moz-osx-font-smoothing: auto\n  -webkit-font-smoothing: auto\n  font-family: $code-family\n\nbody\n  color: $body-color\n  font-size: $body-font-size\n  font-weight: $body-weight\n  line-height: $body-line-height\n\n// Inline\n\na\n  color: $link\n  cursor: pointer\n  text-decoration: none\n  strong\n    color: currentColor\n  &:hover\n    color: $link-hover\n\ncode\n  background-color: $code-background\n  color: $code\n  font-size: $code-size\n  font-weight: $code-weight\n  padding: $code-padding\n\nhr\n  background-color: $hr-background-color\n  border: none\n  display: block\n  height: $hr-height\n  margin: $hr-margin\n\nimg\n  height: auto\n  max-width: 100%\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"]\n  vertical-align: baseline\n\nsmall\n  font-size: $small-font-size\n\nspan\n  font-style: inherit\n  font-weight: inherit\n\nstrong\n  color: $strong-color\n  font-weight: $strong-weight\n\n// Block\n\nfieldset\n  border: none\n\npre\n  +overflow-touch\n  background-color: $pre-background\n  color: $pre\n  font-size: $pre-font-size\n  overflow-x: auto\n  padding: $pre-padding\n  white-space: pre\n  word-wrap: normal\n  code\n    background-color: transparent\n    color: currentColor\n    font-size: $pre-code-font-size\n    padding: 0\n\ntable\n  td,\n  th\n    vertical-align: top\n    &:not([align])\n      text-align: inherit\n  th\n    color: $text-strong\n","@import \"initial-variables\"\n@import \"functions\"\n\n$primary: $turquoise !default\n\n$info: $cyan !default\n$success: $green !default\n$warning: $yellow !default\n$danger: $red !default\n\n$light: $white-ter !default\n$dark: $grey-darker !default\n\n// Invert colors\n\n$orange-invert: findColorInvert($orange) !default\n$yellow-invert: findColorInvert($yellow) !default\n$green-invert: findColorInvert($green) !default\n$turquoise-invert: findColorInvert($turquoise) !default\n$cyan-invert: findColorInvert($cyan) !default\n$blue-invert: findColorInvert($blue) !default\n$purple-invert: findColorInvert($purple) !default\n$red-invert: findColorInvert($red) !default\n\n$primary-invert: findColorInvert($primary) !default\n$primary-light: findLightColor($primary) !default\n$primary-dark: findDarkColor($primary) !default\n$info-invert: findColorInvert($info) !default\n$info-light: findLightColor($info) !default\n$info-dark: findDarkColor($info) !default\n$success-invert: findColorInvert($success) !default\n$success-light: findLightColor($success) !default\n$success-dark: findDarkColor($success) !default\n$warning-invert: findColorInvert($warning) !default\n$warning-light: findLightColor($warning) !default\n$warning-dark: findDarkColor($warning) !default\n$danger-invert: findColorInvert($danger) !default\n$danger-light: findLightColor($danger) !default\n$danger-dark: findDarkColor($danger) !default\n$light-invert: findColorInvert($light) !default\n$dark-invert: findColorInvert($dark) !default\n\n// General colors\n\n$scheme-main: $white !default\n$scheme-main-bis: $white-bis !default\n$scheme-main-ter: $white-ter !default\n$scheme-invert: $black !default\n$scheme-invert-bis: $black-bis !default\n$scheme-invert-ter: $black-ter !default\n\n$background: $white-ter !default\n\n$border: $grey-lighter !default\n$border-hover: $grey-light !default\n$border-light: $grey-lightest !default\n$border-light-hover: $grey-light !default\n\n// Text colors\n\n$text: $grey-dark !default\n$text-invert: findColorInvert($text) !default\n$text-light: $grey !default\n$text-strong: $grey-darker !default\n\n// Code colors\n\n$code: darken($red, 15%) !default\n$code-background: $background !default\n\n$pre: $text !default\n$pre-background: $background !default\n\n// Link colors\n\n$link: $blue !default\n$link-invert: findColorInvert($link) !default\n$link-light: findLightColor($link) !default\n$link-dark: findDarkColor($link) !default\n$link-visited: $purple !default\n\n$link-hover: $grey-darker !default\n$link-hover-border: $grey-light !default\n\n$link-focus: $grey-darker !default\n$link-focus-border: $blue !default\n\n$link-active: $grey-darker !default\n$link-active-border: $grey-dark !default\n\n// Typography\n\n$family-primary: $family-sans-serif !default\n$family-secondary: $family-sans-serif !default\n$family-code: $family-monospace !default\n\n$size-small: $size-7 !default\n$size-normal: $size-6 !default\n$size-medium: $size-5 !default\n$size-large: $size-4 !default\n\n// Effects\n\n$shadow: 0 0.5em 1em -0.125em rgba($scheme-invert, 0.1), 0 0px 0 1px rgba($scheme-invert, 0.02) !default\n\n// Lists and maps\n$custom-colors: null !default\n$custom-shades: null !default\n\n$colors: mergeColorMaps((\"white\": ($white, $black), \"black\": ($black, $white), \"light\": ($light, $light-invert), \"dark\": ($dark, $dark-invert), \"primary\": ($primary, $primary-invert, $primary-light, $primary-dark), \"link\": ($link, $link-invert, $link-light, $link-dark), \"info\": ($info, $info-invert, $info-light, $info-dark), \"success\": ($success, $success-invert, $success-light, $success-dark), \"warning\": ($warning, $warning-invert, $warning-light, $warning-dark), \"danger\": ($danger, $danger-invert, $danger-light, $danger-dark)), $custom-colors) !default\n\n$shades: mergeColorMaps((\"black-bis\": $black-bis, \"black-ter\": $black-ter, \"grey-darker\": $grey-darker, \"grey-dark\": $grey-dark, \"grey\": $grey, \"grey-light\": $grey-light, \"grey-lighter\": $grey-lighter, \"white-ter\": $white-ter, \"white-bis\": $white-bis), $custom-shades) !default\n\n$sizes: $size-1 $size-2 $size-3 $size-4 $size-5 $size-6 $size-7 !default\n","@keyframes spinAround\n  from\n    transform: rotate(0deg)\n  to\n    transform: rotate(359deg)\n","/* Bulma Elements */\n@charset \"utf-8\"\n\n@import \"box\"\n@import \"button\"\n@import \"container\"\n@import \"content\"\n@import \"icon\"\n@import \"image\"\n@import \"notification\"\n@import \"progress\"\n@import \"table\"\n@import \"tag\"\n@import \"title\"\n\n@import \"other\"\n","@import \"../utilities/mixins\"\n\n$box-color: $text !default\n$box-background-color: $scheme-main !default\n$box-radius: $radius-large !default\n$box-shadow: $shadow !default\n$box-padding: 1.25rem !default\n\n$box-link-hover-shadow: 0 0.5em 1em -0.125em rgba($scheme-invert, 0.1), 0 0 0 1px $link !default\n$box-link-active-shadow: inset 0 1px 2px rgba($scheme-invert, 0.2), 0 0 0 1px $link !default\n\n.box\n  @extend %block\n  background-color: $box-background-color\n  border-radius: $box-radius\n  box-shadow: $box-shadow\n  color: $box-color\n  display: block\n  padding: $box-padding\n\na.box\n  &:hover,\n  &:focus\n    box-shadow: $box-link-hover-shadow\n  &:active\n    box-shadow: $box-link-active-shadow\n","@import \"../utilities/controls\"\n@import \"../utilities/mixins\"\n\n$button-color: $text-strong !default\n$button-background-color: $scheme-main !default\n$button-family: false !default\n\n$button-border-color: $border !default\n$button-border-width: $control-border-width !default\n\n$button-padding-vertical: calc(0.5em - #{$button-border-width}) !default\n$button-padding-horizontal: 1em !default\n\n$button-hover-color: $link-hover !default\n$button-hover-border-color: $link-hover-border !default\n\n$button-focus-color: $link-focus !default\n$button-focus-border-color: $link-focus-border !default\n$button-focus-box-shadow-size: 0 0 0 0.125em !default\n$button-focus-box-shadow-color: bulmaRgba($link, 0.25) !default\n\n$button-active-color: $link-active !default\n$button-active-border-color: $link-active-border !default\n\n$button-text-color: $text !default\n$button-text-decoration: underline !default\n$button-text-hover-background-color: $background !default\n$button-text-hover-color: $text-strong !default\n\n$button-ghost-background: none !default\n$button-ghost-border-color: transparent !default\n$button-ghost-color: $link !default\n$button-ghost-decoration: none !default\n$button-ghost-hover-color: $link !default\n$button-ghost-hover-decoration: underline !default\n\n$button-disabled-background-color: $scheme-main !default\n$button-disabled-border-color: $border !default\n$button-disabled-shadow: none !default\n$button-disabled-opacity: 0.5 !default\n\n$button-static-color: $text-light !default\n$button-static-background-color: $scheme-main-ter !default\n$button-static-border-color: $border !default\n\n$button-colors: $colors !default\n$button-responsive-sizes: (\"mobile\": (\"small\": ($size-small * 0.75), \"normal\": ($size-small * 0.875), \"medium\": $size-small, \"large\": $size-normal), \"tablet-only\": (\"small\": ($size-small * 0.875), \"normal\": ($size-small), \"medium\": $size-normal, \"large\": $size-medium)) !default\n\n// The button sizes use mixins so they can be used at different breakpoints\n=button-small\n  &:not(.is-rounded)\n    border-radius: $radius-small\n  font-size: $size-small\n=button-normal\n  font-size: $size-normal\n=button-medium\n  font-size: $size-medium\n=button-large\n  font-size: $size-large\n\n.button\n  @extend %control\n  @extend %unselectable\n  background-color: $button-background-color\n  border-color: $button-border-color\n  border-width: $button-border-width\n  color: $button-color\n  cursor: pointer\n  @if $button-family\n    font-family: $button-family\n  justify-content: center\n  padding-bottom: $button-padding-vertical\n  padding-left: $button-padding-horizontal\n  padding-right: $button-padding-horizontal\n  padding-top: $button-padding-vertical\n  text-align: center\n  white-space: nowrap\n  strong\n    color: inherit\n  .icon\n    &,\n    &.is-small,\n    &.is-medium,\n    &.is-large\n      height: 1.5em\n      width: 1.5em\n    &:first-child:not(:last-child)\n      +ltr-property(\"margin\", calc(#{-0.5 * $button-padding-horizontal} - #{$button-border-width}), false)\n      +ltr-property(\"margin\", $button-padding-horizontal * 0.25)\n    &:last-child:not(:first-child)\n      +ltr-property(\"margin\", $button-padding-horizontal * 0.25, false)\n      +ltr-property(\"margin\", calc(#{-0.5 * $button-padding-horizontal} - #{$button-border-width}))\n    &:first-child:last-child\n      margin-left: calc(#{-0.5 * $button-padding-horizontal} - #{$button-border-width})\n      margin-right: calc(#{-0.5 * $button-padding-horizontal} - #{$button-border-width})\n  // States\n  &:hover,\n  &.is-hovered\n    border-color: $button-hover-border-color\n    color: $button-hover-color\n  &:focus,\n  &.is-focused\n    border-color: $button-focus-border-color\n    color: $button-focus-color\n    &:not(:active)\n      box-shadow: $button-focus-box-shadow-size $button-focus-box-shadow-color\n  &:active,\n  &.is-active\n    border-color: $button-active-border-color\n    color: $button-active-color\n  // Colors\n  &.is-text\n    background-color: transparent\n    border-color: transparent\n    color: $button-text-color\n    text-decoration: $button-text-decoration\n    &:hover,\n    &.is-hovered,\n    &:focus,\n    &.is-focused\n      background-color: $button-text-hover-background-color\n      color: $button-text-hover-color\n    &:active,\n    &.is-active\n      background-color: bulmaDarken($button-text-hover-background-color, 5%)\n      color: $button-text-hover-color\n    &[disabled],\n    fieldset[disabled] &\n      background-color: transparent\n      border-color: transparent\n      box-shadow: none\n  &.is-ghost\n    background: $button-ghost-background\n    border-color: $button-ghost-border-color\n    color: $button-ghost-color\n    text-decoration: $button-ghost-decoration\n    &:hover,\n    &.is-hovered\n      color: $button-ghost-hover-color\n      text-decoration: $button-ghost-hover-decoration\n  @each $name, $pair in $button-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      border-color: transparent\n      color: $color-invert\n      &:hover,\n      &.is-hovered\n        background-color: bulmaDarken($color, 2.5%)\n        border-color: transparent\n        color: $color-invert\n      &:focus,\n      &.is-focused\n        border-color: transparent\n        color: $color-invert\n        &:not(:active)\n          box-shadow: $button-focus-box-shadow-size bulmaRgba($color, 0.25)\n      &:active,\n      &.is-active\n        background-color: bulmaDarken($color, 5%)\n        border-color: transparent\n        color: $color-invert\n      &[disabled],\n      fieldset[disabled] &\n        background-color: $color\n        border-color: $color\n        box-shadow: none\n      &.is-inverted\n        background-color: $color-invert\n        color: $color\n        &:hover,\n        &.is-hovered\n          background-color: bulmaDarken($color-invert, 5%)\n        &[disabled],\n        fieldset[disabled] &\n          background-color: $color-invert\n          border-color: transparent\n          box-shadow: none\n          color: $color\n      &.is-loading\n        &::after\n          border-color: transparent transparent $color-invert $color-invert !important\n      &.is-outlined\n        background-color: transparent\n        border-color: $color\n        color: $color\n        &:hover,\n        &.is-hovered,\n        &:focus,\n        &.is-focused\n          background-color: $color\n          border-color: $color\n          color: $color-invert\n        &.is-loading\n          &::after\n            border-color: transparent transparent $color $color !important\n          &:hover,\n          &.is-hovered,\n          &:focus,\n          &.is-focused\n            &::after\n              border-color: transparent transparent $color-invert $color-invert !important\n        &[disabled],\n        fieldset[disabled] &\n          background-color: transparent\n          border-color: $color\n          box-shadow: none\n          color: $color\n      &.is-inverted.is-outlined\n        background-color: transparent\n        border-color: $color-invert\n        color: $color-invert\n        &:hover,\n        &.is-hovered,\n        &:focus,\n        &.is-focused\n          background-color: $color-invert\n          color: $color\n        &.is-loading\n          &:hover,\n          &.is-hovered,\n          &:focus,\n          &.is-focused\n            &::after\n              border-color: transparent transparent $color $color !important\n        &[disabled],\n        fieldset[disabled] &\n          background-color: transparent\n          border-color: $color-invert\n          box-shadow: none\n          color: $color-invert\n      // If light and dark colors are provided\n      @if length($pair) >= 4\n        $color-light: nth($pair, 3)\n        $color-dark: nth($pair, 4)\n        &.is-light\n          background-color: $color-light\n          color: $color-dark\n          &:hover,\n          &.is-hovered\n            background-color: bulmaDarken($color-light, 2.5%)\n            border-color: transparent\n            color: $color-dark\n          &:active,\n          &.is-active\n            background-color: bulmaDarken($color-light, 5%)\n            border-color: transparent\n            color: $color-dark\n  // Sizes\n  &.is-small\n    +button-small\n  &.is-normal\n    +button-normal\n  &.is-medium\n    +button-medium\n  &.is-large\n    +button-large\n  // Modifiers\n  &[disabled],\n  fieldset[disabled] &\n    background-color: $button-disabled-background-color\n    border-color: $button-disabled-border-color\n    box-shadow: $button-disabled-shadow\n    opacity: $button-disabled-opacity\n  &.is-fullwidth\n    display: flex\n    width: 100%\n  &.is-loading\n    color: transparent !important\n    pointer-events: none\n    &::after\n      @extend %loader\n      +center(1em)\n      position: absolute !important\n  &.is-static\n    background-color: $button-static-background-color\n    border-color: $button-static-border-color\n    color: $button-static-color\n    box-shadow: none\n    pointer-events: none\n  &.is-rounded\n    border-radius: $radius-rounded\n    padding-left: calc(#{$button-padding-horizontal} + 0.25em)\n    padding-right: calc(#{$button-padding-horizontal} + 0.25em)\n\n.buttons\n  align-items: center\n  display: flex\n  flex-wrap: wrap\n  justify-content: flex-start\n  .button\n    margin-bottom: 0.5rem\n    &:not(:last-child):not(.is-fullwidth)\n      +ltr-property(\"margin\", 0.5rem)\n  &:last-child\n    margin-bottom: -0.5rem\n  &:not(:last-child)\n    margin-bottom: 1rem\n  // Sizes\n  &.are-small\n    .button:not(.is-normal):not(.is-medium):not(.is-large)\n      +button-small\n  &.are-medium\n    .button:not(.is-small):not(.is-normal):not(.is-large)\n      +button-medium\n  &.are-large\n    .button:not(.is-small):not(.is-normal):not(.is-medium)\n      +button-large\n  &.has-addons\n    .button\n      &:not(:first-child)\n        border-bottom-left-radius: 0\n        border-top-left-radius: 0\n      &:not(:last-child)\n        border-bottom-right-radius: 0\n        border-top-right-radius: 0\n        +ltr-property(\"margin\", -1px)\n      &:last-child\n        +ltr-property(\"margin\", 0)\n      &:hover,\n      &.is-hovered\n        z-index: 2\n      &:focus,\n      &.is-focused,\n      &:active,\n      &.is-active,\n      &.is-selected\n        z-index: 3\n        &:hover\n          z-index: 4\n      &.is-expanded\n        flex-grow: 1\n        flex-shrink: 1\n  &.is-centered\n    justify-content: center\n    &:not(.has-addons)\n      .button:not(.is-fullwidth)\n        margin-left: 0.25rem\n        margin-right: 0.25rem\n  &.is-right\n    justify-content: flex-end\n    &:not(.has-addons)\n      .button:not(.is-fullwidth)\n        margin-left: 0.25rem\n        margin-right: 0.25rem\n\n@each $bp-name, $bp-sizes in $button-responsive-sizes\n  +breakpoint($bp-name)\n    @each $size, $value in $bp-sizes\n      @if $size != \"normal\"\n        .button.is-responsive.is-#{$size}\n          font-size: $value\n      @else\n        .button.is-responsive,\n        .button.is-responsive.is-normal\n          font-size: $value\n","@import \"../utilities/mixins\"\n\n$container-offset: (2 * $gap) !default\n$container-max-width: $fullhd !default\n\n.container\n  flex-grow: 1\n  margin: 0 auto\n  position: relative\n  width: auto\n  &.is-fluid\n    max-width: none !important\n    padding-left: $gap\n    padding-right: $gap\n    width: 100%\n  +desktop\n    max-width: $desktop - $container-offset\n  +until-widescreen\n    &.is-widescreen:not(.is-max-desktop)\n      max-width: min($widescreen, $container-max-width) - $container-offset\n  +until-fullhd\n    &.is-fullhd:not(.is-max-desktop):not(.is-max-widescreen)\n      max-width: min($fullhd, $container-max-width) - $container-offset\n  +widescreen\n    &:not(.is-max-desktop)\n      max-width: min($widescreen, $container-max-width) - $container-offset\n  +fullhd\n    &:not(.is-max-desktop):not(.is-max-widescreen)\n      max-width: min($fullhd, $container-max-width) - $container-offset\n","@import \"../utilities/mixins\"\n\n$content-heading-color: $text-strong !default\n$content-heading-weight: $weight-semibold !default\n$content-heading-line-height: 1.125 !default\n\n$content-block-margin-bottom: 1em !default\n\n$content-blockquote-background-color: $background !default\n$content-blockquote-border-left: 5px solid $border !default\n$content-blockquote-padding: 1.25em 1.5em !default\n\n$content-pre-padding: 1.25em 1.5em !default\n\n$content-table-cell-border: 1px solid $border !default\n$content-table-cell-border-width: 0 0 1px !default\n$content-table-cell-padding: 0.5em 0.75em !default\n$content-table-cell-heading-color: $text-strong !default\n$content-table-head-cell-border-width: 0 0 2px !default\n$content-table-head-cell-color: $text-strong !default\n$content-table-body-last-row-cell-border-bottom-width: 0 !default\n$content-table-foot-cell-border-width: 2px 0 0 !default\n$content-table-foot-cell-color: $text-strong !default\n\n.content\n  @extend %block\n  // Inline\n  li + li\n    margin-top: 0.25em\n  // Block\n  p,\n  dl,\n  ol,\n  ul,\n  blockquote,\n  pre,\n  table\n    &:not(:last-child)\n      margin-bottom: $content-block-margin-bottom\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6\n    color: $content-heading-color\n    font-weight: $content-heading-weight\n    line-height: $content-heading-line-height\n  h1\n    font-size: 2em\n    margin-bottom: 0.5em\n    &:not(:first-child)\n      margin-top: 1em\n  h2\n    font-size: 1.75em\n    margin-bottom: 0.5714em\n    &:not(:first-child)\n      margin-top: 1.1428em\n  h3\n    font-size: 1.5em\n    margin-bottom: 0.6666em\n    &:not(:first-child)\n      margin-top: 1.3333em\n  h4\n    font-size: 1.25em\n    margin-bottom: 0.8em\n  h5\n    font-size: 1.125em\n    margin-bottom: 0.8888em\n  h6\n    font-size: 1em\n    margin-bottom: 1em\n  blockquote\n    background-color: $content-blockquote-background-color\n    +ltr-property(\"border\", $content-blockquote-border-left, false)\n    padding: $content-blockquote-padding\n  ol\n    list-style-position: outside\n    +ltr-property(\"margin\", 2em, false)\n    margin-top: 1em\n    &:not([type])\n      list-style-type: decimal\n      &.is-lower-alpha\n        list-style-type: lower-alpha\n      &.is-lower-roman\n        list-style-type: lower-roman\n      &.is-upper-alpha\n        list-style-type: upper-alpha\n      &.is-upper-roman\n        list-style-type: upper-roman\n  ul\n    list-style: disc outside\n    +ltr-property(\"margin\", 2em, false)\n    margin-top: 1em\n    ul\n      list-style-type: circle\n      margin-top: 0.5em\n      ul\n        list-style-type: square\n  dd\n    +ltr-property(\"margin\", 2em, false)\n  figure\n    margin-left: 2em\n    margin-right: 2em\n    text-align: center\n    &:not(:first-child)\n      margin-top: 2em\n    &:not(:last-child)\n      margin-bottom: 2em\n    img\n      display: inline-block\n    figcaption\n      font-style: italic\n  pre\n    +overflow-touch\n    overflow-x: auto\n    padding: $content-pre-padding\n    white-space: pre\n    word-wrap: normal\n  sup,\n  sub\n    font-size: 75%\n  table\n    width: 100%\n    td,\n    th\n      border: $content-table-cell-border\n      border-width: $content-table-cell-border-width\n      padding: $content-table-cell-padding\n      vertical-align: top\n    th\n      color: $content-table-cell-heading-color\n      &:not([align])\n        text-align: inherit\n    thead\n      td,\n      th\n        border-width: $content-table-head-cell-border-width\n        color: $content-table-head-cell-color\n    tfoot\n      td,\n      th\n        border-width: $content-table-foot-cell-border-width\n        color: $content-table-foot-cell-color\n    tbody\n      tr\n        &:last-child\n          td,\n          th\n            border-bottom-width: $content-table-body-last-row-cell-border-bottom-width\n  .tabs\n    li + li\n      margin-top: 0\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-normal\n    font-size: $size-normal\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n","$icon-dimensions: 1.5rem !default\n$icon-dimensions-small: 1rem !default\n$icon-dimensions-medium: 2rem !default\n$icon-dimensions-large: 3rem !default\n$icon-text-spacing: 0.25em !default\n\n.icon\n  align-items: center\n  display: inline-flex\n  justify-content: center\n  height: $icon-dimensions\n  width: $icon-dimensions\n  // Sizes\n  &.is-small\n    height: $icon-dimensions-small\n    width: $icon-dimensions-small\n  &.is-medium\n    height: $icon-dimensions-medium\n    width: $icon-dimensions-medium\n  &.is-large\n    height: $icon-dimensions-large\n    width: $icon-dimensions-large\n\n.icon-text\n  align-items: flex-start\n  color: inherit\n  display: inline-flex\n  flex-wrap: wrap\n  line-height: $icon-dimensions\n  vertical-align: top\n  .icon\n    flex-grow: 0\n    flex-shrink: 0\n    &:not(:last-child)\n      +ltr\n        margin-right: $icon-text-spacing\n      +rtl\n        margin-left: $icon-text-spacing\n    &:not(:first-child)\n      +ltr\n        margin-left: $icon-text-spacing\n      +rtl\n        margin-right: $icon-text-spacing\n\ndiv.icon-text\n  display: flex\n","@import \"../utilities/mixins\"\n\n$dimensions: 16 24 32 48 64 96 128 !default\n\n.image\n  display: block\n  position: relative\n  img\n    display: block\n    height: auto\n    width: 100%\n    &.is-rounded\n      border-radius: $radius-rounded\n  &.is-fullwidth\n    width: 100%\n  // Ratio\n  &.is-square,\n  &.is-1by1,\n  &.is-5by4,\n  &.is-4by3,\n  &.is-3by2,\n  &.is-5by3,\n  &.is-16by9,\n  &.is-2by1,\n  &.is-3by1,\n  &.is-4by5,\n  &.is-3by4,\n  &.is-2by3,\n  &.is-3by5,\n  &.is-9by16,\n  &.is-1by2,\n  &.is-1by3\n    img,\n    .has-ratio\n      @extend %overlay\n      height: 100%\n      width: 100%\n  &.is-square,\n  &.is-1by1\n    padding-top: 100%\n  &.is-5by4\n    padding-top: 80%\n  &.is-4by3\n    padding-top: 75%\n  &.is-3by2\n    padding-top: 66.6666%\n  &.is-5by3\n    padding-top: 60%\n  &.is-16by9\n    padding-top: 56.25%\n  &.is-2by1\n    padding-top: 50%\n  &.is-3by1\n    padding-top: 33.3333%\n  &.is-4by5\n    padding-top: 125%\n  &.is-3by4\n    padding-top: 133.3333%\n  &.is-2by3\n    padding-top: 150%\n  &.is-3by5\n    padding-top: 166.6666%\n  &.is-9by16\n    padding-top: 177.7777%\n  &.is-1by2\n    padding-top: 200%\n  &.is-1by3\n    padding-top: 300%\n  // Sizes\n  @each $dimension in $dimensions\n    &.is-#{$dimension}x#{$dimension}\n      height: $dimension * 1px\n      width: $dimension * 1px\n","@import \"../utilities/mixins\"\n\n$notification-background-color: $background !default\n$notification-code-background-color: $scheme-main !default\n$notification-radius: $radius !default\n$notification-padding: 1.25rem 2.5rem 1.25rem 1.5rem !default\n$notification-padding-ltr: 1.25rem 2.5rem 1.25rem 1.5rem !default\n$notification-padding-rtl: 1.25rem 1.5rem 1.25rem 2.5rem !default\n\n$notification-colors: $colors !default\n\n.notification\n  @extend %block\n  background-color: $notification-background-color\n  border-radius: $notification-radius\n  position: relative\n  +ltr\n    padding: $notification-padding-ltr\n  +rtl\n    padding: $notification-padding-rtl\n  a:not(.button):not(.dropdown-item)\n    color: currentColor\n    text-decoration: underline\n  strong\n    color: currentColor\n  code,\n  pre\n    background: $notification-code-background-color\n  pre code\n    background: transparent\n  & > .delete\n    +ltr-position(0.5rem)\n    position: absolute\n    top: 0.5rem\n  .title,\n  .subtitle,\n  .content\n    color: currentColor\n  // Colors\n  @each $name, $pair in $notification-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      color: $color-invert\n      // If light and dark colors are provided\n      @if length($pair) >= 4\n        $color-light: nth($pair, 3)\n        $color-dark: nth($pair, 4)\n        &.is-light\n          background-color: $color-light\n          color: $color-dark\n","@import \"../utilities/mixins\"\n\n$progress-bar-background-color: $border-light !default\n$progress-value-background-color: $text !default\n$progress-border-radius: $radius-rounded !default\n\n$progress-indeterminate-duration: 1.5s !default\n\n$progress-colors: $colors !default\n\n.progress\n  @extend %block\n  -moz-appearance: none\n  -webkit-appearance: none\n  border: none\n  border-radius: $progress-border-radius\n  display: block\n  height: $size-normal\n  overflow: hidden\n  padding: 0\n  width: 100%\n  &::-webkit-progress-bar\n    background-color: $progress-bar-background-color\n  &::-webkit-progress-value\n    background-color: $progress-value-background-color\n  &::-moz-progress-bar\n    background-color: $progress-value-background-color\n  &::-ms-fill\n    background-color: $progress-value-background-color\n    border: none\n  // Colors\n  @each $name, $pair in $progress-colors\n    $color: nth($pair, 1)\n    &.is-#{$name}\n      &::-webkit-progress-value\n        background-color: $color\n      &::-moz-progress-bar\n        background-color: $color\n      &::-ms-fill\n        background-color: $color\n      &:indeterminate\n        background-image: linear-gradient(to right, $color 30%, $progress-bar-background-color 30%)\n\n  &:indeterminate\n    animation-duration: $progress-indeterminate-duration\n    animation-iteration-count: infinite\n    animation-name: moveIndeterminate\n    animation-timing-function: linear\n    background-color: $progress-bar-background-color\n    background-image: linear-gradient(to right, $text 30%, $progress-bar-background-color 30%)\n    background-position: top left\n    background-repeat: no-repeat\n    background-size: 150% 150%\n    &::-webkit-progress-bar\n      background-color: transparent\n    &::-moz-progress-bar\n      background-color: transparent\n    &::-ms-fill\n      animation-name: none\n\n  // Sizes\n  &.is-small\n    height: $size-small\n  &.is-medium\n    height: $size-medium\n  &.is-large\n    height: $size-large\n\n@keyframes moveIndeterminate\n  from\n    background-position: 200% 0\n  to\n    background-position: -200% 0\n","@import \"../utilities/mixins\"\n\n$table-color: $text-strong !default\n$table-background-color: $scheme-main !default\n\n$table-cell-border: 1px solid $border !default\n$table-cell-border-width: 0 0 1px !default\n$table-cell-padding: 0.5em 0.75em !default\n$table-cell-heading-color: $text-strong !default\n$table-cell-text-align: left !default\n\n$table-head-cell-border-width: 0 0 2px !default\n$table-head-cell-color: $text-strong !default\n$table-foot-cell-border-width: 2px 0 0 !default\n$table-foot-cell-color: $text-strong !default\n\n$table-head-background-color: transparent !default\n$table-body-background-color: transparent !default\n$table-foot-background-color: transparent !default\n\n$table-row-hover-background-color: $scheme-main-bis !default\n\n$table-row-active-background-color: $primary !default\n$table-row-active-color: $primary-invert !default\n\n$table-striped-row-even-background-color: $scheme-main-bis !default\n$table-striped-row-even-hover-background-color: $scheme-main-ter !default\n\n$table-colors: $colors !default\n\n.table\n  @extend %block\n  background-color: $table-background-color\n  color: $table-color\n  td,\n  th\n    border: $table-cell-border\n    border-width: $table-cell-border-width\n    padding: $table-cell-padding\n    vertical-align: top\n    // Colors\n    @each $name, $pair in $table-colors\n      $color: nth($pair, 1)\n      $color-invert: nth($pair, 2)\n      &.is-#{$name}\n        background-color: $color\n        border-color: $color\n        color: $color-invert\n    // Modifiers\n    &.is-narrow\n      white-space: nowrap\n      width: 1%\n    &.is-selected\n      background-color: $table-row-active-background-color\n      color: $table-row-active-color\n      a,\n      strong\n        color: currentColor\n    &.is-vcentered\n      vertical-align: middle\n  th\n    color: $table-cell-heading-color\n    &:not([align])\n      text-align: $table-cell-text-align\n  tr\n    &.is-selected\n      background-color: $table-row-active-background-color\n      color: $table-row-active-color\n      a,\n      strong\n        color: currentColor\n      td,\n      th\n        border-color: $table-row-active-color\n        color: currentColor\n  thead\n    background-color: $table-head-background-color\n    td,\n    th\n      border-width: $table-head-cell-border-width\n      color: $table-head-cell-color\n  tfoot\n    background-color: $table-foot-background-color\n    td,\n    th\n      border-width: $table-foot-cell-border-width\n      color: $table-foot-cell-color\n  tbody\n    background-color: $table-body-background-color\n    tr\n      &:last-child\n        td,\n        th\n          border-bottom-width: 0\n  // Modifiers\n  &.is-bordered\n    td,\n    th\n      border-width: 1px\n    tr\n      &:last-child\n        td,\n        th\n          border-bottom-width: 1px\n  &.is-fullwidth\n    width: 100%\n  &.is-hoverable\n    tbody\n      tr:not(.is-selected)\n        &:hover\n          background-color: $table-row-hover-background-color\n    &.is-striped\n      tbody\n        tr:not(.is-selected)\n          &:hover\n            background-color: $table-row-hover-background-color\n            &:nth-child(even)\n              background-color: $table-striped-row-even-hover-background-color\n  &.is-narrow\n    td,\n    th\n      padding: 0.25em 0.5em\n  &.is-striped\n    tbody\n      tr:not(.is-selected)\n        &:nth-child(even)\n          background-color: $table-striped-row-even-background-color\n\n.table-container\n  @extend %block\n  +overflow-touch\n  overflow: auto\n  overflow-y: hidden\n  max-width: 100%\n","@import \"../utilities/mixins\"\n\n$tag-background-color: $background !default\n$tag-color: $text !default\n$tag-radius: $radius !default\n$tag-delete-margin: 1px !default\n\n$tag-colors: $colors !default\n\n.tags\n  align-items: center\n  display: flex\n  flex-wrap: wrap\n  justify-content: flex-start\n  .tag\n    margin-bottom: 0.5rem\n    &:not(:last-child)\n      +ltr-property(\"margin\", 0.5rem)\n  &:last-child\n    margin-bottom: -0.5rem\n  &:not(:last-child)\n    margin-bottom: 1rem\n  // Sizes\n  &.are-medium\n    .tag:not(.is-normal):not(.is-large)\n      font-size: $size-normal\n  &.are-large\n    .tag:not(.is-normal):not(.is-medium)\n      font-size: $size-medium\n  &.is-centered\n    justify-content: center\n    .tag\n      margin-right: 0.25rem\n      margin-left: 0.25rem\n  &.is-right\n    justify-content: flex-end\n    .tag\n      &:not(:first-child)\n        margin-left: 0.5rem\n      &:not(:last-child)\n        margin-right: 0\n  &.has-addons\n    .tag\n      +ltr-property(\"margin\", 0)\n      &:not(:first-child)\n        +ltr-property(\"margin\", 0, false)\n        +ltr\n          border-top-left-radius: 0\n          border-bottom-left-radius: 0\n        +rtl\n          border-top-right-radius: 0\n          border-bottom-right-radius: 0\n      &:not(:last-child)\n        +ltr\n          border-top-right-radius: 0\n          border-bottom-right-radius: 0\n        +rtl\n          border-top-left-radius: 0\n          border-bottom-left-radius: 0\n\n.tag:not(body)\n  align-items: center\n  background-color: $tag-background-color\n  border-radius: $tag-radius\n  color: $tag-color\n  display: inline-flex\n  font-size: $size-small\n  height: 2em\n  justify-content: center\n  line-height: 1.5\n  padding-left: 0.75em\n  padding-right: 0.75em\n  white-space: nowrap\n  .delete\n    +ltr-property(\"margin\", 0.25rem, false)\n    +ltr-property(\"margin\", -0.375rem)\n  // Colors\n  @each $name, $pair in $tag-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      color: $color-invert\n      // If a light and dark colors are provided\n      @if length($pair) > 3\n        $color-light: nth($pair, 3)\n        $color-dark: nth($pair, 4)\n        &.is-light\n          background-color: $color-light\n          color: $color-dark\n  // Sizes\n  &.is-normal\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-normal\n  &.is-large\n    font-size: $size-medium\n  .icon\n    &:first-child:not(:last-child)\n      +ltr-property(\"margin\", -0.375em, false)\n      +ltr-property(\"margin\", 0.1875em)\n    &:last-child:not(:first-child)\n      +ltr-property(\"margin\", 0.1875em, false)\n      +ltr-property(\"margin\", -0.375em)\n    &:first-child:last-child\n      +ltr-property(\"margin\", -0.375em, false)\n      +ltr-property(\"margin\", -0.375em)\n  // Modifiers\n  &.is-delete\n    +ltr-property(\"margin\", $tag-delete-margin, false)\n    padding: 0\n    position: relative\n    width: 2em\n    &::before,\n    &::after\n      background-color: currentColor\n      content: \"\"\n      display: block\n      left: 50%\n      position: absolute\n      top: 50%\n      transform: translateX(-50%) translateY(-50%) rotate(45deg)\n      transform-origin: center center\n    &::before\n      height: 1px\n      width: 50%\n    &::after\n      height: 50%\n      width: 1px\n    &:hover,\n    &:focus\n      background-color: darken($tag-background-color, 5%)\n    &:active\n      background-color: darken($tag-background-color, 10%)\n  &.is-rounded\n    border-radius: $radius-rounded\n\na.tag\n  &:hover\n    text-decoration: underline\n","@import \"../utilities/mixins\"\n\n$title-color: $text-strong !default\n$title-family: false !default\n$title-size: $size-3 !default\n$title-weight: $weight-semibold !default\n$title-line-height: 1.125 !default\n$title-strong-color: inherit !default\n$title-strong-weight: inherit !default\n$title-sub-size: 0.75em !default\n$title-sup-size: 0.75em !default\n\n$subtitle-color: $text !default\n$subtitle-family: false !default\n$subtitle-size: $size-5 !default\n$subtitle-weight: $weight-normal !default\n$subtitle-line-height: 1.25 !default\n$subtitle-strong-color: $text-strong !default\n$subtitle-strong-weight: $weight-semibold !default\n$subtitle-negative-margin: -1.25rem !default\n\n.title,\n.subtitle\n  @extend %block\n  word-break: break-word\n  em,\n  span\n    font-weight: inherit\n  sub\n    font-size: $title-sub-size\n  sup\n    font-size: $title-sup-size\n  .tag\n    vertical-align: middle\n\n.title\n  color: $title-color\n  @if $title-family\n    font-family: $title-family\n  font-size: $title-size\n  font-weight: $title-weight\n  line-height: $title-line-height\n  strong\n    color: $title-strong-color\n    font-weight: $title-strong-weight\n  &:not(.is-spaced) + .subtitle\n    margin-top: $subtitle-negative-margin\n  // Sizes\n  @each $size in $sizes\n    $i: index($sizes, $size)\n    &.is-#{$i}\n      font-size: $size\n\n.subtitle\n  color: $subtitle-color\n  @if $subtitle-family\n    font-family: $subtitle-family\n  font-size: $subtitle-size\n  font-weight: $subtitle-weight\n  line-height: $subtitle-line-height\n  strong\n    color: $subtitle-strong-color\n    font-weight: $subtitle-strong-weight\n  &:not(.is-spaced) + .title\n    margin-top: $subtitle-negative-margin\n  // Sizes\n  @each $size in $sizes\n    $i: index($sizes, $size)\n    &.is-#{$i}\n      font-size: $size\n","@import \"../utilities/mixins\"\n\n.block\n  @extend %block\n\n.delete\n  @extend %delete\n\n.heading\n  display: block\n  font-size: 11px\n  letter-spacing: 1px\n  margin-bottom: 5px\n  text-transform: uppercase\n\n.loader\n  @extend %loader\n\n.number\n  align-items: center\n  background-color: $background\n  border-radius: $radius-rounded\n  display: inline-flex\n  font-size: $size-medium\n  height: 2em\n  justify-content: center\n  margin-right: 1.5rem\n  min-width: 2.5em\n  padding: 0.25rem 0.5rem\n  text-align: center\n  vertical-align: top\n","/* Bulma Form */\n@charset \"utf-8\"\n\n@import \"shared\"\n@import \"input-textarea\"\n@import \"checkbox-radio\"\n@import \"select\"\n@import \"file\"\n@import \"tools\"\n","@import \"../utilities/controls\"\n@import \"../utilities/mixins\"\n\n$form-colors: $colors !default\n\n$input-color: $text-strong !default\n$input-background-color: $scheme-main !default\n$input-border-color: $border !default\n$input-height: $control-height !default\n$input-shadow: inset 0 0.0625em 0.125em rgba($scheme-invert, 0.05) !default\n$input-placeholder-color: bulmaRgba($input-color, 0.3) !default\n\n$input-hover-color: $text-strong !default\n$input-hover-border-color: $border-hover !default\n\n$input-focus-color: $text-strong !default\n$input-focus-border-color: $link !default\n$input-focus-box-shadow-size: 0 0 0 0.125em !default\n$input-focus-box-shadow-color: bulmaRgba($link, 0.25) !default\n\n$input-disabled-color: $text-light !default\n$input-disabled-background-color: $background !default\n$input-disabled-border-color: $background !default\n$input-disabled-placeholder-color: bulmaRgba($input-disabled-color, 0.3) !default\n\n$input-arrow: $link !default\n\n$input-icon-color: $border !default\n$input-icon-active-color: $text !default\n\n$input-radius: $radius !default\n\n=input\n  @extend %control\n  background-color: $input-background-color\n  border-color: $input-border-color\n  border-radius: $input-radius\n  color: $input-color\n  +placeholder\n    color: $input-placeholder-color\n  &:hover,\n  &.is-hovered\n    border-color: $input-hover-border-color\n  &:focus,\n  &.is-focused,\n  &:active,\n  &.is-active\n    border-color: $input-focus-border-color\n    box-shadow: $input-focus-box-shadow-size $input-focus-box-shadow-color\n  &[disabled],\n  fieldset[disabled] &\n    background-color: $input-disabled-background-color\n    border-color: $input-disabled-border-color\n    box-shadow: none\n    color: $input-disabled-color\n    +placeholder\n      color: $input-disabled-placeholder-color\n\n%input\n  +input\n","$textarea-padding: $control-padding-horizontal !default\n$textarea-max-height: 40em !default\n$textarea-min-height: 8em !default\n\n$textarea-colors: $form-colors !default\n\n%input-textarea\n  @extend %input\n  box-shadow: $input-shadow\n  max-width: 100%\n  width: 100%\n  &[readonly]\n    box-shadow: none\n  // Colors\n  @each $name, $pair in $textarea-colors\n    $color: nth($pair, 1)\n    &.is-#{$name}\n      border-color: $color\n      &:focus,\n      &.is-focused,\n      &:active,\n      &.is-active\n        box-shadow: $input-focus-box-shadow-size bulmaRgba($color, 0.25)\n  // Sizes\n  &.is-small\n    +control-small\n  &.is-medium\n    +control-medium\n  &.is-large\n    +control-large\n  // Modifiers\n  &.is-fullwidth\n    display: block\n    width: 100%\n  &.is-inline\n    display: inline\n    width: auto\n\n.input\n  @extend %input-textarea\n  &.is-rounded\n    border-radius: $radius-rounded\n    padding-left: calc(#{$control-padding-horizontal} + 0.375em)\n    padding-right: calc(#{$control-padding-horizontal} + 0.375em)\n  &.is-static\n    background-color: transparent\n    border-color: transparent\n    box-shadow: none\n    padding-left: 0\n    padding-right: 0\n\n.textarea\n  @extend %input-textarea\n  display: block\n  max-width: 100%\n  min-width: 100%\n  padding: $textarea-padding\n  resize: vertical\n  &:not([rows])\n    max-height: $textarea-max-height\n    min-height: $textarea-min-height\n  &[rows]\n    height: initial\n  // Modifiers\n  &.has-fixed-size\n    resize: none\n","%checkbox-radio\n  cursor: pointer\n  display: inline-block\n  line-height: 1.25\n  position: relative\n  input\n    cursor: pointer\n  &:hover\n    color: $input-hover-color\n  &[disabled],\n  fieldset[disabled] &,\n  input[disabled]\n    color: $input-disabled-color\n    cursor: not-allowed\n\n.checkbox\n  @extend %checkbox-radio\n\n.radio\n  @extend %checkbox-radio\n  & + .radio\n    +ltr-property(\"margin\", 0.5em, false)\n","$select-colors: $form-colors !default\n\n.select\n  display: inline-block\n  max-width: 100%\n  position: relative\n  vertical-align: top\n  &:not(.is-multiple)\n    height: $input-height\n  &:not(.is-multiple):not(.is-loading)\n    &::after\n      @extend %arrow\n      border-color: $input-arrow\n      +ltr-position(1.125em)\n      z-index: 4\n  &.is-rounded\n    select\n      border-radius: $radius-rounded\n      +ltr-property(\"padding\", 1em, false)\n  select\n    @extend %input\n    cursor: pointer\n    display: block\n    font-size: 1em\n    max-width: 100%\n    outline: none\n    &::-ms-expand\n      display: none\n    &[disabled]:hover,\n    fieldset[disabled] &:hover\n      border-color: $input-disabled-border-color\n    &:not([multiple])\n      +ltr-property(\"padding\", 2.5em)\n    &[multiple]\n      height: auto\n      padding: 0\n      option\n        padding: 0.5em 1em\n  // States\n  &:not(.is-multiple):not(.is-loading):hover\n    &::after\n      border-color: $input-hover-color\n  // Colors\n  @each $name, $pair in $select-colors\n    $color: nth($pair, 1)\n    &.is-#{$name}\n      &:not(:hover)::after\n        border-color: $color\n      select\n        border-color: $color\n        &:hover,\n        &.is-hovered\n          border-color: bulmaDarken($color, 5%)\n        &:focus,\n        &.is-focused,\n        &:active,\n        &.is-active\n          box-shadow: $input-focus-box-shadow-size bulmaRgba($color, 0.25)\n  // Sizes\n  &.is-small\n    +control-small\n  &.is-medium\n    +control-medium\n  &.is-large\n    +control-large\n  // Modifiers\n  &.is-disabled\n    &::after\n      border-color: $input-disabled-color !important\n      opacity: 0.5\n  &.is-fullwidth\n    width: 100%\n    select\n      width: 100%\n  &.is-loading\n    &::after\n      @extend %loader\n      margin-top: 0\n      position: absolute\n      +ltr-position(0.625em)\n      top: 0.625em\n      transform: none\n    &.is-small:after\n      font-size: $size-small\n    &.is-medium:after\n      font-size: $size-medium\n    &.is-large:after\n      font-size: $size-large\n","$file-border-color: $border !default\n$file-radius: $radius !default\n\n$file-cta-background-color: $scheme-main-ter !default\n$file-cta-color: $text !default\n$file-cta-hover-color: $text-strong !default\n$file-cta-active-color: $text-strong !default\n\n$file-name-border-color: $border !default\n$file-name-border-style: solid !default\n$file-name-border-width: 1px 1px 1px 0 !default\n$file-name-max-width: 16em !default\n\n$file-colors: $form-colors !default\n\n.file\n  @extend %unselectable\n  align-items: stretch\n  display: flex\n  justify-content: flex-start\n  position: relative\n  // Colors\n  @each $name, $pair in $file-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      .file-cta\n        background-color: $color\n        border-color: transparent\n        color: $color-invert\n      &:hover,\n      &.is-hovered\n        .file-cta\n          background-color: bulmaDarken($color, 2.5%)\n          border-color: transparent\n          color: $color-invert\n      &:focus,\n      &.is-focused\n        .file-cta\n          border-color: transparent\n          box-shadow: 0 0 0.5em bulmaRgba($color, 0.25)\n          color: $color-invert\n      &:active,\n      &.is-active\n        .file-cta\n          background-color: bulmaDarken($color, 5%)\n          border-color: transparent\n          color: $color-invert\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-normal\n    font-size: $size-normal\n  &.is-medium\n    font-size: $size-medium\n    .file-icon\n      .fa\n        font-size: 21px\n  &.is-large\n    font-size: $size-large\n    .file-icon\n      .fa\n        font-size: 28px\n  // Modifiers\n  &.has-name\n    .file-cta\n      border-bottom-right-radius: 0\n      border-top-right-radius: 0\n    .file-name\n      border-bottom-left-radius: 0\n      border-top-left-radius: 0\n    &.is-empty\n      .file-cta\n        border-radius: $file-radius\n      .file-name\n        display: none\n  &.is-boxed\n    .file-label\n      flex-direction: column\n    .file-cta\n      flex-direction: column\n      height: auto\n      padding: 1em 3em\n    .file-name\n      border-width: 0 1px 1px\n    .file-icon\n      height: 1.5em\n      width: 1.5em\n      .fa\n        font-size: 21px\n    &.is-small\n      .file-icon .fa\n        font-size: 14px\n    &.is-medium\n      .file-icon .fa\n        font-size: 28px\n    &.is-large\n      .file-icon .fa\n        font-size: 35px\n    &.has-name\n      .file-cta\n        border-radius: $file-radius $file-radius 0 0\n      .file-name\n        border-radius: 0 0 $file-radius $file-radius\n        border-width: 0 1px 1px\n  &.is-centered\n    justify-content: center\n  &.is-fullwidth\n    .file-label\n      width: 100%\n    .file-name\n      flex-grow: 1\n      max-width: none\n  &.is-right\n    justify-content: flex-end\n    .file-cta\n      border-radius: 0 $file-radius $file-radius 0\n    .file-name\n      border-radius: $file-radius 0 0 $file-radius\n      border-width: 1px 0 1px 1px\n      order: -1\n\n.file-label\n  align-items: stretch\n  display: flex\n  cursor: pointer\n  justify-content: flex-start\n  overflow: hidden\n  position: relative\n  &:hover\n    .file-cta\n      background-color: bulmaDarken($file-cta-background-color, 2.5%)\n      color: $file-cta-hover-color\n    .file-name\n      border-color: bulmaDarken($file-name-border-color, 2.5%)\n  &:active\n    .file-cta\n      background-color: bulmaDarken($file-cta-background-color, 5%)\n      color: $file-cta-active-color\n    .file-name\n      border-color: bulmaDarken($file-name-border-color, 5%)\n\n.file-input\n  height: 100%\n  left: 0\n  opacity: 0\n  outline: none\n  position: absolute\n  top: 0\n  width: 100%\n\n.file-cta,\n.file-name\n  @extend %control\n  border-color: $file-border-color\n  border-radius: $file-radius\n  font-size: 1em\n  padding-left: 1em\n  padding-right: 1em\n  white-space: nowrap\n\n.file-cta\n  background-color: $file-cta-background-color\n  color: $file-cta-color\n\n.file-name\n  border-color: $file-name-border-color\n  border-style: $file-name-border-style\n  border-width: $file-name-border-width\n  display: block\n  max-width: $file-name-max-width\n  overflow: hidden\n  text-align: inherit\n  text-overflow: ellipsis\n\n.file-icon\n  align-items: center\n  display: flex\n  height: 1em\n  justify-content: center\n  +ltr-property(\"margin\", 0.5em)\n  width: 1em\n  .fa\n    font-size: 14px\n","$label-color: $text-strong !default\n$label-weight: $weight-bold !default\n\n$help-size: $size-small !default\n\n$label-colors: $form-colors !default\n\n.label\n  color: $label-color\n  display: block\n  font-size: $size-normal\n  font-weight: $label-weight\n  &:not(:last-child)\n    margin-bottom: 0.5em\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n\n.help\n  display: block\n  font-size: $help-size\n  margin-top: 0.25rem\n  @each $name, $pair in $label-colors\n    $color: nth($pair, 1)\n    &.is-#{$name}\n      color: $color\n\n// Containers\n\n.field\n  &:not(:last-child)\n    margin-bottom: 0.75rem\n  // Modifiers\n  &.has-addons\n    display: flex\n    justify-content: flex-start\n    .control\n      &:not(:last-child)\n        +ltr-property(\"margin\", -1px)\n      &:not(:first-child):not(:last-child)\n        .button,\n        .input,\n        .select select\n          border-radius: 0\n      &:first-child:not(:only-child)\n        .button,\n        .input,\n        .select select\n          +ltr\n            border-bottom-right-radius: 0\n            border-top-right-radius: 0\n          +rtl\n            border-bottom-left-radius: 0\n            border-top-left-radius: 0\n      &:last-child:not(:only-child)\n        .button,\n        .input,\n        .select select\n          +ltr\n            border-bottom-left-radius: 0\n            border-top-left-radius: 0\n          +rtl\n            border-bottom-right-radius: 0\n            border-top-right-radius: 0\n      .button,\n      .input,\n      .select select\n        &:not([disabled])\n          &:hover,\n          &.is-hovered\n            z-index: 2\n          &:focus,\n          &.is-focused,\n          &:active,\n          &.is-active\n            z-index: 3\n            &:hover\n              z-index: 4\n      &.is-expanded\n        flex-grow: 1\n        flex-shrink: 1\n    &.has-addons-centered\n      justify-content: center\n    &.has-addons-right\n      justify-content: flex-end\n    &.has-addons-fullwidth\n      .control\n        flex-grow: 1\n        flex-shrink: 0\n  &.is-grouped\n    display: flex\n    justify-content: flex-start\n    & > .control\n      flex-shrink: 0\n      &:not(:last-child)\n        margin-bottom: 0\n        +ltr-property(\"margin\", 0.75rem)\n      &.is-expanded\n        flex-grow: 1\n        flex-shrink: 1\n    &.is-grouped-centered\n      justify-content: center\n    &.is-grouped-right\n      justify-content: flex-end\n    &.is-grouped-multiline\n      flex-wrap: wrap\n      & > .control\n        &:last-child,\n        &:not(:last-child)\n          margin-bottom: 0.75rem\n      &:last-child\n        margin-bottom: -0.75rem\n      &:not(:last-child)\n        margin-bottom: 0\n  &.is-horizontal\n    +tablet\n      display: flex\n\n.field-label\n  .label\n    font-size: inherit\n  +mobile\n    margin-bottom: 0.5rem\n  +tablet\n    flex-basis: 0\n    flex-grow: 1\n    flex-shrink: 0\n    +ltr-property(\"margin\", 1.5rem)\n    text-align: right\n    &.is-small\n      font-size: $size-small\n      padding-top: 0.375em\n    &.is-normal\n      padding-top: 0.375em\n    &.is-medium\n      font-size: $size-medium\n      padding-top: 0.375em\n    &.is-large\n      font-size: $size-large\n      padding-top: 0.375em\n\n.field-body\n  .field .field\n    margin-bottom: 0\n  +tablet\n    display: flex\n    flex-basis: 0\n    flex-grow: 5\n    flex-shrink: 1\n    .field\n      margin-bottom: 0\n    & > .field\n      flex-shrink: 1\n      &:not(.is-narrow)\n        flex-grow: 1\n      &:not(:last-child)\n        +ltr-property(\"margin\", 0.75rem)\n\n.control\n  box-sizing: border-box\n  clear: both\n  font-size: $size-normal\n  position: relative\n  text-align: inherit\n  // Modifiers\n  &.has-icons-left,\n  &.has-icons-right\n    .input,\n    .select\n      &:focus\n        & ~ .icon\n          color: $input-icon-active-color\n      &.is-small ~ .icon\n        font-size: $size-small\n      &.is-medium ~ .icon\n        font-size: $size-medium\n      &.is-large ~ .icon\n        font-size: $size-large\n    .icon\n      color: $input-icon-color\n      height: $input-height\n      pointer-events: none\n      position: absolute\n      top: 0\n      width: $input-height\n      z-index: 4\n  &.has-icons-left\n    .input,\n    .select select\n      padding-left: $input-height\n    .icon.is-left\n      left: 0\n  &.has-icons-right\n    .input,\n    .select select\n      padding-right: $input-height\n    .icon.is-right\n      right: 0\n  &.is-loading\n    &::after\n      @extend %loader\n      position: absolute !important\n      +ltr-position(0.625em)\n      top: 0.625em\n      z-index: 4\n    &.is-small:after\n      font-size: $size-small\n    &.is-medium:after\n      font-size: $size-medium\n    &.is-large:after\n      font-size: $size-large\n","/* Bulma Components */\n@charset \"utf-8\"\n\n@import \"breadcrumb\"\n@import \"card\"\n@import \"dropdown\"\n@import \"level\"\n@import \"media\"\n@import \"menu\"\n@import \"message\"\n@import \"modal\"\n@import \"navbar\"\n@import \"pagination\"\n@import \"panel\"\n@import \"tabs\"\n","@import \"../utilities/mixins\"\n\n$breadcrumb-item-color: $link !default\n$breadcrumb-item-hover-color: $link-hover !default\n$breadcrumb-item-active-color: $text-strong !default\n\n$breadcrumb-item-padding-vertical: 0 !default\n$breadcrumb-item-padding-horizontal: 0.75em !default\n\n$breadcrumb-item-separator-color: $border-hover !default\n\n.breadcrumb\n  @extend %block\n  @extend %unselectable\n  font-size: $size-normal\n  white-space: nowrap\n  a\n    align-items: center\n    color: $breadcrumb-item-color\n    display: flex\n    justify-content: center\n    padding: $breadcrumb-item-padding-vertical $breadcrumb-item-padding-horizontal\n    &:hover\n      color: $breadcrumb-item-hover-color\n  li\n    align-items: center\n    display: flex\n    &:first-child a\n      +ltr-property(\"padding\", 0, false)\n    &.is-active\n      a\n        color: $breadcrumb-item-active-color\n        cursor: default\n        pointer-events: none\n    & + li::before\n      color: $breadcrumb-item-separator-color\n      content: \"\\0002f\"\n  ul,\n  ol\n    align-items: flex-start\n    display: flex\n    flex-wrap: wrap\n    justify-content: flex-start\n  .icon\n    &:first-child\n      +ltr-property(\"margin\", 0.5em)\n    &:last-child\n      +ltr-property(\"margin\", 0.5em, false)\n  // Alignment\n  &.is-centered\n    ol,\n    ul\n      justify-content: center\n  &.is-right\n    ol,\n    ul\n      justify-content: flex-end\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n  // Styles\n  &.has-arrow-separator\n    li + li::before\n      content: \"\\02192\"\n  &.has-bullet-separator\n    li + li::before\n      content: \"\\02022\"\n  &.has-dot-separator\n    li + li::before\n      content: \"\\000b7\"\n  &.has-succeeds-separator\n    li + li::before\n      content: \"\\0227B\"\n","@import \"../utilities/mixins\"\n\n$card-color: $text !default\n$card-background-color: $scheme-main !default\n$card-shadow: $shadow !default\n$card-radius: 0.25rem !default\n\n$card-header-background-color: transparent !default\n$card-header-color: $text-strong !default\n$card-header-padding: 0.75rem 1rem !default\n$card-header-shadow: 0 0.125em 0.25em rgba($scheme-invert, 0.1) !default\n$card-header-weight: $weight-bold !default\n\n$card-content-background-color: transparent !default\n$card-content-padding: 1.5rem !default\n\n$card-footer-background-color: transparent !default\n$card-footer-border-top: 1px solid $border-light !default\n$card-footer-padding: 0.75rem !default\n\n$card-media-margin: $block-spacing !default\n\n.card\n  background-color: $card-background-color\n  border-radius: $card-radius\n  box-shadow: $card-shadow\n  color: $card-color\n  max-width: 100%\n  position: relative\n\n%card-item\n  &:first-child\n    border-top-left-radius: $card-radius\n    border-top-right-radius: $card-radius\n  &:last-child\n    border-bottom-left-radius: $card-radius\n    border-bottom-right-radius: $card-radius\n\n.card-header\n  @extend %card-item\n  background-color: $card-header-background-color\n  align-items: stretch\n  box-shadow: $card-header-shadow\n  display: flex\n\n.card-header-title\n  align-items: center\n  color: $card-header-color\n  display: flex\n  flex-grow: 1\n  font-weight: $card-header-weight\n  padding: $card-header-padding\n  &.is-centered\n    justify-content: center\n\n.card-header-icon\n  +reset\n  align-items: center\n  cursor: pointer\n  display: flex\n  justify-content: center\n  padding: $card-header-padding\n\n.card-image\n  display: block\n  position: relative\n  &:first-child\n    img\n      border-top-left-radius: $card-radius\n      border-top-right-radius: $card-radius\n  &:last-child\n    img\n      border-bottom-left-radius: $card-radius\n      border-bottom-right-radius: $card-radius\n\n.card-content\n  @extend %card-item\n  background-color: $card-content-background-color\n  padding: $card-content-padding\n\n.card-footer\n  @extend %card-item\n  background-color: $card-footer-background-color\n  border-top: $card-footer-border-top\n  align-items: stretch\n  display: flex\n\n.card-footer-item\n  align-items: center\n  display: flex\n  flex-basis: 0\n  flex-grow: 1\n  flex-shrink: 0\n  justify-content: center\n  padding: $card-footer-padding\n  &:not(:last-child)\n    +ltr-property(\"border\", $card-footer-border-top)\n\n// Combinations\n\n.card\n  .media:not(:last-child)\n    margin-bottom: $card-media-margin\n","@import \"../utilities/mixins\"\n\n$dropdown-menu-min-width: 12rem !default\n\n$dropdown-content-background-color: $scheme-main !default\n$dropdown-content-arrow: $link !default\n$dropdown-content-offset: 4px !default\n$dropdown-content-padding-bottom: 0.5rem !default\n$dropdown-content-padding-top: 0.5rem !default\n$dropdown-content-radius: $radius !default\n$dropdown-content-shadow: $shadow !default\n$dropdown-content-z: 20 !default\n\n$dropdown-item-color: $text !default\n$dropdown-item-hover-color: $scheme-invert !default\n$dropdown-item-hover-background-color: $background !default\n$dropdown-item-active-color: $link-invert !default\n$dropdown-item-active-background-color: $link !default\n\n$dropdown-divider-background-color: $border-light !default\n\n.dropdown\n  display: inline-flex\n  position: relative\n  vertical-align: top\n  &.is-active,\n  &.is-hoverable:hover\n    .dropdown-menu\n      display: block\n  &.is-right\n    .dropdown-menu\n      left: auto\n      right: 0\n  &.is-up\n    .dropdown-menu\n      bottom: 100%\n      padding-bottom: $dropdown-content-offset\n      padding-top: initial\n      top: auto\n\n.dropdown-menu\n  display: none\n  +ltr-position(0, false)\n  min-width: $dropdown-menu-min-width\n  padding-top: $dropdown-content-offset\n  position: absolute\n  top: 100%\n  z-index: $dropdown-content-z\n\n.dropdown-content\n  background-color: $dropdown-content-background-color\n  border-radius: $dropdown-content-radius\n  box-shadow: $dropdown-content-shadow\n  padding-bottom: $dropdown-content-padding-bottom\n  padding-top: $dropdown-content-padding-top\n\n.dropdown-item\n  color: $dropdown-item-color\n  display: block\n  font-size: 0.875rem\n  line-height: 1.5\n  padding: 0.375rem 1rem\n  position: relative\n\na.dropdown-item,\nbutton.dropdown-item\n  +ltr-property(\"padding\", 3rem)\n  text-align: inherit\n  white-space: nowrap\n  width: 100%\n  &:hover\n    background-color: $dropdown-item-hover-background-color\n    color: $dropdown-item-hover-color\n  &.is-active\n    background-color: $dropdown-item-active-background-color\n    color: $dropdown-item-active-color\n\n.dropdown-divider\n  background-color: $dropdown-divider-background-color\n  border: none\n  display: block\n  height: 1px\n  margin: 0.5rem 0\n","@import \"../utilities/mixins\"\n\n$level-item-spacing: ($block-spacing * 0.5) !default\n\n.level\n  @extend %block\n  align-items: center\n  justify-content: space-between\n  code\n    border-radius: $radius\n  img\n    display: inline-block\n    vertical-align: top\n  // Modifiers\n  &.is-mobile\n    display: flex\n    .level-left,\n    .level-right\n      display: flex\n    .level-left + .level-right\n      margin-top: 0\n    .level-item\n      &:not(:last-child)\n        margin-bottom: 0\n        +ltr-property(\"margin\", $level-item-spacing)\n      &:not(.is-narrow)\n        flex-grow: 1\n  // Responsiveness\n  +tablet\n    display: flex\n    & > .level-item\n      &:not(.is-narrow)\n        flex-grow: 1\n\n.level-item\n  align-items: center\n  display: flex\n  flex-basis: auto\n  flex-grow: 0\n  flex-shrink: 0\n  justify-content: center\n  .title,\n  .subtitle\n    margin-bottom: 0\n  // Responsiveness\n  +mobile\n    &:not(:last-child)\n      margin-bottom: $level-item-spacing\n\n.level-left,\n.level-right\n  flex-basis: auto\n  flex-grow: 0\n  flex-shrink: 0\n  .level-item\n    // Modifiers\n    &.is-flexible\n      flex-grow: 1\n    // Responsiveness\n    +tablet\n      &:not(:last-child)\n        +ltr-property(\"margin\", $level-item-spacing)\n\n.level-left\n  align-items: center\n  justify-content: flex-start\n  // Responsiveness\n  +mobile\n    & + .level-right\n      margin-top: 1.5rem\n  +tablet\n    display: flex\n\n.level-right\n  align-items: center\n  justify-content: flex-end\n  // Responsiveness\n  +tablet\n    display: flex\n","@import \"../utilities/mixins\"\n\n$media-border-color: bulmaRgba($border, 0.5) !default\n$media-border-size: 1px !default\n$media-spacing: 1rem !default\n$media-spacing-large: 1.5rem !default\n$media-content-spacing: 0.75rem !default\n$media-level-1-spacing: 0.75rem !default\n$media-level-1-content-spacing: 0.5rem !default\n$media-level-2-spacing: 0.5rem !default\n\n.media\n  align-items: flex-start\n  display: flex\n  text-align: inherit\n  .content:not(:last-child)\n    margin-bottom: $media-content-spacing\n  .media\n    border-top: $media-border-size solid $media-border-color\n    display: flex\n    padding-top: $media-level-1-spacing\n    .content:not(:last-child),\n    .control:not(:last-child)\n      margin-bottom: $media-level-1-content-spacing\n    .media\n      padding-top: $media-level-2-spacing\n      & + .media\n        margin-top: $media-level-2-spacing\n  & + .media\n    border-top: $media-border-size solid $media-border-color\n    margin-top: $media-spacing\n    padding-top: $media-spacing\n  // Sizes\n  &.is-large\n    & + .media\n      margin-top: $media-spacing-large\n      padding-top: $media-spacing-large\n\n.media-left,\n.media-right\n  flex-basis: auto\n  flex-grow: 0\n  flex-shrink: 0\n\n.media-left\n  +ltr-property(\"margin\", $media-spacing)\n\n.media-right\n  +ltr-property(\"margin\", $media-spacing, false)\n\n.media-content\n  flex-basis: auto\n  flex-grow: 1\n  flex-shrink: 1\n  text-align: inherit\n\n+mobile\n  .media-content\n    overflow-x: auto\n","@import \"../utilities/mixins\"\n\n$menu-item-color: $text !default\n$menu-item-radius: $radius-small !default\n$menu-item-hover-color: $text-strong !default\n$menu-item-hover-background-color: $background !default\n$menu-item-active-color: $link-invert !default\n$menu-item-active-background-color: $link !default\n\n$menu-list-border-left: 1px solid $border !default\n$menu-list-line-height: 1.25 !default\n$menu-list-link-padding: 0.5em 0.75em !default\n$menu-nested-list-margin: 0.75em !default\n$menu-nested-list-padding-left: 0.75em !default\n\n$menu-label-color: $text-light !default\n$menu-label-font-size: 0.75em !default\n$menu-label-letter-spacing: 0.1em !default\n$menu-label-spacing: 1em !default\n\n.menu\n  font-size: $size-normal\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n\n.menu-list\n  line-height: $menu-list-line-height\n  a\n    border-radius: $menu-item-radius\n    color: $menu-item-color\n    display: block\n    padding: $menu-list-link-padding\n    &:hover\n      background-color: $menu-item-hover-background-color\n      color: $menu-item-hover-color\n    // Modifiers\n    &.is-active\n      background-color: $menu-item-active-background-color\n      color: $menu-item-active-color\n  li\n    ul\n      +ltr-property(\"border\", $menu-list-border-left, false)\n      margin: $menu-nested-list-margin\n      +ltr-property(\"padding\", $menu-nested-list-padding-left, false)\n\n.menu-label\n  color: $menu-label-color\n  font-size: $menu-label-font-size\n  letter-spacing: $menu-label-letter-spacing\n  text-transform: uppercase\n  &:not(:first-child)\n    margin-top: $menu-label-spacing\n  &:not(:last-child)\n    margin-bottom: $menu-label-spacing\n","@import \"../utilities/mixins\"\n\n$message-background-color: $background !default\n$message-radius: $radius !default\n\n$message-header-background-color: $text !default\n$message-header-color: $text-invert !default\n$message-header-weight: $weight-bold !default\n$message-header-padding: 0.75em 1em !default\n$message-header-radius: $radius !default\n\n$message-body-border-color: $border !default\n$message-body-border-width: 0 0 0 4px !default\n$message-body-color: $text !default\n$message-body-padding: 1.25em 1.5em !default\n$message-body-radius: $radius !default\n\n$message-body-pre-background-color: $scheme-main !default\n$message-body-pre-code-background-color: transparent !default\n\n$message-header-body-border-width: 0 !default\n$message-colors: $colors !default\n\n.message\n  @extend %block\n  background-color: $message-background-color\n  border-radius: $message-radius\n  font-size: $size-normal\n  strong\n    color: currentColor\n  a:not(.button):not(.tag):not(.dropdown-item)\n    color: currentColor\n    text-decoration: underline\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n  // Colors\n  @each $name, $components in $message-colors\n    $color: nth($components, 1)\n    $color-invert: nth($components, 2)\n    $color-light: null\n    $color-dark: null\n\n    @if length($components) >= 3\n      $color-light: nth($components, 3)\n      @if length($components) >= 4\n        $color-dark: nth($components, 4)\n      @else\n        $color-luminance: colorLuminance($color)\n        $darken-percentage: $color-luminance * 70%\n        $desaturate-percentage: $color-luminance * 30%\n        $color-dark: desaturate(darken($color, $darken-percentage), $desaturate-percentage)\n    @else\n      $color-lightning: max((100% - lightness($color)) - 2%, 0%)\n      $color-light: lighten($color, $color-lightning)\n\n    &.is-#{$name}\n      background-color: $color-light\n      .message-header\n        background-color: $color\n        color: $color-invert\n      .message-body\n        border-color: $color\n        color: $color-dark\n\n.message-header\n  align-items: center\n  background-color: $message-header-background-color\n  border-radius: $message-header-radius $message-header-radius 0 0\n  color: $message-header-color\n  display: flex\n  font-weight: $message-header-weight\n  justify-content: space-between\n  line-height: 1.25\n  padding: $message-header-padding\n  position: relative\n  .delete\n    flex-grow: 0\n    flex-shrink: 0\n    +ltr-property(\"margin\", 0.75em, false)\n  & + .message-body\n    border-width: $message-header-body-border-width\n    border-top-left-radius: 0\n    border-top-right-radius: 0\n\n.message-body\n  border-color: $message-body-border-color\n  border-radius: $message-body-radius\n  border-style: solid\n  border-width: $message-body-border-width\n  color: $message-body-color\n  padding: $message-body-padding\n  code,\n  pre\n    background-color: $message-body-pre-background-color\n  pre code\n    background-color: $message-body-pre-code-background-color\n","@import \"../utilities/mixins\"\n\n$modal-z: 40 !default\n\n$modal-background-background-color: bulmaRgba($scheme-invert, 0.86) !default\n\n$modal-content-width: 640px !default\n$modal-content-margin-mobile: 20px !default\n$modal-content-spacing-mobile: 160px !default\n$modal-content-spacing-tablet: 40px !default\n\n$modal-close-dimensions: 40px !default\n$modal-close-right: 20px !default\n$modal-close-top: 20px !default\n\n$modal-card-spacing: 40px !default\n\n$modal-card-head-background-color: $background !default\n$modal-card-head-border-bottom: 1px solid $border !default\n$modal-card-head-padding: 20px !default\n$modal-card-head-radius: $radius-large !default\n\n$modal-card-title-color: $text-strong !default\n$modal-card-title-line-height: 1 !default\n$modal-card-title-size: $size-4 !default\n\n$modal-card-foot-radius: $radius-large !default\n$modal-card-foot-border-top: 1px solid $border !default\n\n$modal-card-body-background-color: $scheme-main !default\n$modal-card-body-padding: 20px !default\n\n$modal-breakpoint: $tablet !default\n\n.modal\n  @extend %overlay\n  align-items: center\n  display: none\n  flex-direction: column\n  justify-content: center\n  overflow: hidden\n  position: fixed\n  z-index: $modal-z\n  // Modifiers\n  &.is-active\n    display: flex\n\n.modal-background\n  @extend %overlay\n  background-color: $modal-background-background-color\n\n.modal-content,\n.modal-card\n  margin: 0 $modal-content-margin-mobile\n  max-height: calc(100vh - #{$modal-content-spacing-mobile})\n  overflow: auto\n  position: relative\n  width: 100%\n  // Responsiveness\n  +from($modal-breakpoint)\n    margin: 0 auto\n    max-height: calc(100vh - #{$modal-content-spacing-tablet})\n    width: $modal-content-width\n\n.modal-close\n  @extend %delete\n  background: none\n  height: $modal-close-dimensions\n  position: fixed\n  +ltr-position($modal-close-right)\n  top: $modal-close-top\n  width: $modal-close-dimensions\n\n.modal-card\n  display: flex\n  flex-direction: column\n  max-height: calc(100vh - #{$modal-card-spacing})\n  overflow: hidden\n  -ms-overflow-y: visible\n\n.modal-card-head,\n.modal-card-foot\n  align-items: center\n  background-color: $modal-card-head-background-color\n  display: flex\n  flex-shrink: 0\n  justify-content: flex-start\n  padding: $modal-card-head-padding\n  position: relative\n\n.modal-card-head\n  border-bottom: $modal-card-head-border-bottom\n  border-top-left-radius: $modal-card-head-radius\n  border-top-right-radius: $modal-card-head-radius\n\n.modal-card-title\n  color: $modal-card-title-color\n  flex-grow: 1\n  flex-shrink: 0\n  font-size: $modal-card-title-size\n  line-height: $modal-card-title-line-height\n\n.modal-card-foot\n  border-bottom-left-radius: $modal-card-foot-radius\n  border-bottom-right-radius: $modal-card-foot-radius\n  border-top: $modal-card-foot-border-top\n  .button\n    &:not(:last-child)\n      +ltr-property(\"margin\", 0.5em)\n\n.modal-card-body\n  +overflow-touch\n  background-color: $modal-card-body-background-color\n  flex-grow: 1\n  flex-shrink: 1\n  overflow: auto\n  padding: $modal-card-body-padding\n","@import \"../utilities/mixins\"\n\n$navbar-background-color: $scheme-main !default\n$navbar-box-shadow-size: 0 2px 0 0 !default\n$navbar-box-shadow-color: $background !default\n$navbar-height: 3.25rem !default\n$navbar-padding-vertical: 1rem !default\n$navbar-padding-horizontal: 2rem !default\n$navbar-z: 30 !default\n$navbar-fixed-z: 30 !default\n\n$navbar-item-color: $text !default\n$navbar-item-hover-color: $link !default\n$navbar-item-hover-background-color: $scheme-main-bis !default\n$navbar-item-active-color: $scheme-invert !default\n$navbar-item-active-background-color: transparent !default\n$navbar-item-img-max-height: 1.75rem !default\n\n$navbar-burger-color: $navbar-item-color !default\n\n$navbar-tab-hover-background-color: transparent !default\n$navbar-tab-hover-border-bottom-color: $link !default\n$navbar-tab-active-color: $link !default\n$navbar-tab-active-background-color: transparent !default\n$navbar-tab-active-border-bottom-color: $link !default\n$navbar-tab-active-border-bottom-style: solid !default\n$navbar-tab-active-border-bottom-width: 3px !default\n\n$navbar-dropdown-background-color: $scheme-main !default\n$navbar-dropdown-border-top: 2px solid $border !default\n$navbar-dropdown-offset: -4px !default\n$navbar-dropdown-arrow: $link !default\n$navbar-dropdown-radius: $radius-large !default\n$navbar-dropdown-z: 20 !default\n\n$navbar-dropdown-boxed-radius: $radius-large !default\n$navbar-dropdown-boxed-shadow: 0 8px 8px bulmaRgba($scheme-invert, 0.1), 0 0 0 1px bulmaRgba($scheme-invert, 0.1) !default\n\n$navbar-dropdown-item-hover-color: $scheme-invert !default\n$navbar-dropdown-item-hover-background-color: $background !default\n$navbar-dropdown-item-active-color: $link !default\n$navbar-dropdown-item-active-background-color: $background !default\n\n$navbar-divider-background-color: $background !default\n$navbar-divider-height: 2px !default\n\n$navbar-bottom-box-shadow-size: 0 -2px 0 0 !default\n\n$navbar-breakpoint: $desktop !default\n\n$navbar-colors: $colors !default\n\n=navbar-fixed\n  left: 0\n  position: fixed\n  right: 0\n  z-index: $navbar-fixed-z\n\n.navbar\n  background-color: $navbar-background-color\n  min-height: $navbar-height\n  position: relative\n  z-index: $navbar-z\n  @each $name, $pair in $navbar-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      color: $color-invert\n      .navbar-brand\n        & > .navbar-item,\n        .navbar-link\n          color: $color-invert\n        & > a.navbar-item,\n        .navbar-link\n          &:focus,\n          &:hover,\n          &.is-active\n            background-color: bulmaDarken($color, 5%)\n            color: $color-invert\n        .navbar-link\n          &::after\n            border-color: $color-invert\n      .navbar-burger\n        color: $color-invert\n      +from($navbar-breakpoint)\n        .navbar-start,\n        .navbar-end\n          & > .navbar-item,\n          .navbar-link\n            color: $color-invert\n          & > a.navbar-item,\n          .navbar-link\n            &:focus,\n            &:hover,\n            &.is-active\n              background-color: bulmaDarken($color, 5%)\n              color: $color-invert\n          .navbar-link\n            &::after\n              border-color: $color-invert\n        .navbar-item.has-dropdown:focus .navbar-link,\n        .navbar-item.has-dropdown:hover .navbar-link,\n        .navbar-item.has-dropdown.is-active .navbar-link\n          background-color: bulmaDarken($color, 5%)\n          color: $color-invert\n        .navbar-dropdown\n          a.navbar-item\n            &.is-active\n              background-color: $color\n              color: $color-invert\n  & > .container\n    align-items: stretch\n    display: flex\n    min-height: $navbar-height\n    width: 100%\n  &.has-shadow\n    box-shadow: $navbar-box-shadow-size $navbar-box-shadow-color\n  &.is-fixed-bottom,\n  &.is-fixed-top\n    +navbar-fixed\n  &.is-fixed-bottom\n    bottom: 0\n    &.has-shadow\n      box-shadow: $navbar-bottom-box-shadow-size $navbar-box-shadow-color\n  &.is-fixed-top\n    top: 0\n\nhtml,\nbody\n  &.has-navbar-fixed-top\n    padding-top: $navbar-height\n  &.has-navbar-fixed-bottom\n    padding-bottom: $navbar-height\n\n.navbar-brand,\n.navbar-tabs\n  align-items: stretch\n  display: flex\n  flex-shrink: 0\n  min-height: $navbar-height\n\n.navbar-brand\n  a.navbar-item\n    &:focus,\n    &:hover\n      background-color: transparent\n\n.navbar-tabs\n  +overflow-touch\n  max-width: 100vw\n  overflow-x: auto\n  overflow-y: hidden\n\n.navbar-burger\n  @extend %reset\n  color: $navbar-burger-color\n  +hamburger($navbar-height)\n  +ltr-property(\"margin\", auto, false)\n\n.navbar-menu\n  display: none\n\n.navbar-item,\n.navbar-link\n  color: $navbar-item-color\n  display: block\n  line-height: 1.5\n  padding: 0.5rem 0.75rem\n  position: relative\n  .icon\n    &:only-child\n      margin-left: -0.25rem\n      margin-right: -0.25rem\n\na.navbar-item,\n.navbar-link\n  cursor: pointer\n  &:focus,\n  &:focus-within,\n  &:hover,\n  &.is-active\n    background-color: $navbar-item-hover-background-color\n    color: $navbar-item-hover-color\n\n.navbar-item\n  flex-grow: 0\n  flex-shrink: 0\n  img\n    max-height: $navbar-item-img-max-height\n  &.has-dropdown\n    padding: 0\n  &.is-expanded\n    flex-grow: 1\n    flex-shrink: 1\n  &.is-tab\n    border-bottom: 1px solid transparent\n    min-height: $navbar-height\n    padding-bottom: calc(0.5rem - 1px)\n    &:focus,\n    &:hover\n      background-color: $navbar-tab-hover-background-color\n      border-bottom-color: $navbar-tab-hover-border-bottom-color\n    &.is-active\n      background-color: $navbar-tab-active-background-color\n      border-bottom-color: $navbar-tab-active-border-bottom-color\n      border-bottom-style: $navbar-tab-active-border-bottom-style\n      border-bottom-width: $navbar-tab-active-border-bottom-width\n      color: $navbar-tab-active-color\n      padding-bottom: calc(0.5rem - #{$navbar-tab-active-border-bottom-width})\n\n.navbar-content\n  flex-grow: 1\n  flex-shrink: 1\n\n.navbar-link:not(.is-arrowless)\n  +ltr-property(\"padding\", 2.5em)\n  &::after\n    @extend %arrow\n    border-color: $navbar-dropdown-arrow\n    margin-top: -0.375em\n    +ltr-position(1.125em)\n\n.navbar-dropdown\n  font-size: 0.875rem\n  padding-bottom: 0.5rem\n  padding-top: 0.5rem\n  .navbar-item\n    padding-left: 1.5rem\n    padding-right: 1.5rem\n\n.navbar-divider\n  background-color: $navbar-divider-background-color\n  border: none\n  display: none\n  height: $navbar-divider-height\n  margin: 0.5rem 0\n\n+until($navbar-breakpoint)\n  .navbar > .container\n    display: block\n  .navbar-brand,\n  .navbar-tabs\n    .navbar-item\n      align-items: center\n      display: flex\n  .navbar-link\n    &::after\n      display: none\n  .navbar-menu\n    background-color: $navbar-background-color\n    box-shadow: 0 8px 16px bulmaRgba($scheme-invert, 0.1)\n    padding: 0.5rem 0\n    &.is-active\n      display: block\n  // Fixed navbar\n  .navbar\n    &.is-fixed-bottom-touch,\n    &.is-fixed-top-touch\n      +navbar-fixed\n    &.is-fixed-bottom-touch\n      bottom: 0\n      &.has-shadow\n        box-shadow: 0 -2px 3px bulmaRgba($scheme-invert, 0.1)\n    &.is-fixed-top-touch\n      top: 0\n    &.is-fixed-top,\n    &.is-fixed-top-touch\n      .navbar-menu\n        +overflow-touch\n        max-height: calc(100vh - #{$navbar-height})\n        overflow: auto\n  html,\n  body\n    &.has-navbar-fixed-top-touch\n      padding-top: $navbar-height\n    &.has-navbar-fixed-bottom-touch\n      padding-bottom: $navbar-height\n\n+from($navbar-breakpoint)\n  .navbar,\n  .navbar-menu,\n  .navbar-start,\n  .navbar-end\n    align-items: stretch\n    display: flex\n  .navbar\n    min-height: $navbar-height\n    &.is-spaced\n      padding: $navbar-padding-vertical $navbar-padding-horizontal\n      .navbar-start,\n      .navbar-end\n        align-items: center\n      a.navbar-item,\n      .navbar-link\n        border-radius: $radius\n    &.is-transparent\n      a.navbar-item,\n      .navbar-link\n        &:focus,\n        &:hover,\n        &.is-active\n          background-color: transparent !important\n      .navbar-item.has-dropdown\n        &.is-active,\n        &.is-hoverable:focus,\n        &.is-hoverable:focus-within,\n        &.is-hoverable:hover\n          .navbar-link\n            background-color: transparent !important\n      .navbar-dropdown\n        a.navbar-item\n          &:focus,\n          &:hover\n            background-color: $navbar-dropdown-item-hover-background-color\n            color: $navbar-dropdown-item-hover-color\n          &.is-active\n            background-color: $navbar-dropdown-item-active-background-color\n            color: $navbar-dropdown-item-active-color\n  .navbar-burger\n    display: none\n  .navbar-item,\n  .navbar-link\n    align-items: center\n    display: flex\n  .navbar-item\n    &.has-dropdown\n      align-items: stretch\n    &.has-dropdown-up\n      .navbar-link::after\n        transform: rotate(135deg) translate(0.25em, -0.25em)\n      .navbar-dropdown\n        border-bottom: $navbar-dropdown-border-top\n        border-radius: $navbar-dropdown-radius $navbar-dropdown-radius 0 0\n        border-top: none\n        bottom: 100%\n        box-shadow: 0 -8px 8px bulmaRgba($scheme-invert, 0.1)\n        top: auto\n    &.is-active,\n    &.is-hoverable:focus,\n    &.is-hoverable:focus-within,\n    &.is-hoverable:hover\n      .navbar-dropdown\n        display: block\n        .navbar.is-spaced &,\n        &.is-boxed\n          opacity: 1\n          pointer-events: auto\n          transform: translateY(0)\n  .navbar-menu\n    flex-grow: 1\n    flex-shrink: 0\n  .navbar-start\n    justify-content: flex-start\n    +ltr-property(\"margin\", auto)\n  .navbar-end\n    justify-content: flex-end\n    +ltr-property(\"margin\", auto, false)\n  .navbar-dropdown\n    background-color: $navbar-dropdown-background-color\n    border-bottom-left-radius: $navbar-dropdown-radius\n    border-bottom-right-radius: $navbar-dropdown-radius\n    border-top: $navbar-dropdown-border-top\n    box-shadow: 0 8px 8px bulmaRgba($scheme-invert, 0.1)\n    display: none\n    font-size: 0.875rem\n    +ltr-position(0, false)\n    min-width: 100%\n    position: absolute\n    top: 100%\n    z-index: $navbar-dropdown-z\n    .navbar-item\n      padding: 0.375rem 1rem\n      white-space: nowrap\n    a.navbar-item\n      +ltr-property(\"padding\", 3rem)\n      &:focus,\n      &:hover\n        background-color: $navbar-dropdown-item-hover-background-color\n        color: $navbar-dropdown-item-hover-color\n      &.is-active\n        background-color: $navbar-dropdown-item-active-background-color\n        color: $navbar-dropdown-item-active-color\n    .navbar.is-spaced &,\n    &.is-boxed\n      border-radius: $navbar-dropdown-boxed-radius\n      border-top: none\n      box-shadow: $navbar-dropdown-boxed-shadow\n      display: block\n      opacity: 0\n      pointer-events: none\n      top: calc(100% + (#{$navbar-dropdown-offset}))\n      transform: translateY(-5px)\n      transition-duration: $speed\n      transition-property: opacity, transform\n    &.is-right\n      left: auto\n      right: 0\n  .navbar-divider\n    display: block\n  .navbar > .container,\n  .container > .navbar\n    .navbar-brand\n      +ltr-property(\"margin\", -.75rem, false)\n    .navbar-menu\n      +ltr-property(\"margin\", -.75rem)\n  // Fixed navbar\n  .navbar\n    &.is-fixed-bottom-desktop,\n    &.is-fixed-top-desktop\n      +navbar-fixed\n    &.is-fixed-bottom-desktop\n      bottom: 0\n      &.has-shadow\n        box-shadow: 0 -2px 3px bulmaRgba($scheme-invert, 0.1)\n    &.is-fixed-top-desktop\n      top: 0\n  html,\n  body\n    &.has-navbar-fixed-top-desktop\n      padding-top: $navbar-height\n    &.has-navbar-fixed-bottom-desktop\n      padding-bottom: $navbar-height\n    &.has-spaced-navbar-fixed-top\n      padding-top: $navbar-height + ($navbar-padding-vertical * 2)\n    &.has-spaced-navbar-fixed-bottom\n      padding-bottom: $navbar-height + ($navbar-padding-vertical * 2)\n  // Hover/Active states\n  a.navbar-item,\n  .navbar-link\n    &.is-active\n      color: $navbar-item-active-color\n    &.is-active:not(:focus):not(:hover)\n      background-color: $navbar-item-active-background-color\n  .navbar-item.has-dropdown\n    &:focus,\n    &:hover,\n    &.is-active\n      .navbar-link\n        background-color: $navbar-item-hover-background-color\n\n// Combination\n\n.hero\n  &.is-fullheight-with-navbar\n    min-height: calc(100vh - #{$navbar-height})\n","@import \"../utilities/controls\"\n@import \"../utilities/mixins\"\n\n$pagination-color: $text-strong !default\n$pagination-border-color: $border !default\n$pagination-margin: -0.25rem !default\n$pagination-min-width: $control-height !default\n\n$pagination-item-font-size: 1em !default\n$pagination-item-margin: 0.25rem !default\n$pagination-item-padding-left: 0.5em !default\n$pagination-item-padding-right: 0.5em !default\n\n$pagination-nav-padding-left: 0.75em !default\n$pagination-nav-padding-right: 0.75em !default\n\n$pagination-hover-color: $link-hover !default\n$pagination-hover-border-color: $link-hover-border !default\n\n$pagination-focus-color: $link-focus !default\n$pagination-focus-border-color: $link-focus-border !default\n\n$pagination-active-color: $link-active !default\n$pagination-active-border-color: $link-active-border !default\n\n$pagination-disabled-color: $text-light !default\n$pagination-disabled-background-color: $border !default\n$pagination-disabled-border-color: $border !default\n\n$pagination-current-color: $link-invert !default\n$pagination-current-background-color: $link !default\n$pagination-current-border-color: $link !default\n\n$pagination-ellipsis-color: $grey-light !default\n\n$pagination-shadow-inset: inset 0 1px 2px rgba($scheme-invert, 0.2) !default\n\n.pagination\n  @extend %block\n  font-size: $size-normal\n  margin: $pagination-margin\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n  &.is-rounded\n    .pagination-previous,\n    .pagination-next\n      padding-left: 1em\n      padding-right: 1em\n      border-radius: $radius-rounded\n    .pagination-link\n      border-radius: $radius-rounded\n\n.pagination,\n.pagination-list\n  align-items: center\n  display: flex\n  justify-content: center\n  text-align: center\n\n.pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis\n  @extend %control\n  @extend %unselectable\n  font-size: $pagination-item-font-size\n  justify-content: center\n  margin: $pagination-item-margin\n  padding-left: $pagination-item-padding-left\n  padding-right: $pagination-item-padding-right\n  text-align: center\n\n.pagination-previous,\n.pagination-next,\n.pagination-link\n  border-color: $pagination-border-color\n  color: $pagination-color\n  min-width: $pagination-min-width\n  &:hover\n    border-color: $pagination-hover-border-color\n    color: $pagination-hover-color\n  &:focus\n    border-color: $pagination-focus-border-color\n  &:active\n    box-shadow: $pagination-shadow-inset\n  &[disabled],\n  &.is-disabled\n    background-color: $pagination-disabled-background-color\n    border-color: $pagination-disabled-border-color\n    box-shadow: none\n    color: $pagination-disabled-color\n    opacity: 0.5\n\n.pagination-previous,\n.pagination-next\n  padding-left: $pagination-nav-padding-left\n  padding-right: $pagination-nav-padding-right\n  white-space: nowrap\n\n.pagination-link\n  &.is-current\n    background-color: $pagination-current-background-color\n    border-color: $pagination-current-border-color\n    color: $pagination-current-color\n\n.pagination-ellipsis\n  color: $pagination-ellipsis-color\n  pointer-events: none\n\n.pagination-list\n  flex-wrap: wrap\n  li\n    list-style: none\n\n+mobile\n  .pagination\n    flex-wrap: wrap\n  .pagination-previous,\n  .pagination-next\n    flex-grow: 1\n    flex-shrink: 1\n  .pagination-list\n    li\n      flex-grow: 1\n      flex-shrink: 1\n\n+tablet\n  .pagination-list\n    flex-grow: 1\n    flex-shrink: 1\n    justify-content: flex-start\n    order: 1\n  .pagination-previous,\n  .pagination-next,\n  .pagination-link,\n  .pagination-ellipsis\n    margin-bottom: 0\n    margin-top: 0\n  .pagination-previous\n    order: 2\n  .pagination-next\n    order: 3\n  .pagination\n    justify-content: space-between\n    margin-bottom: 0\n    margin-top: 0\n    &.is-centered\n      .pagination-previous\n        order: 1\n      .pagination-list\n        justify-content: center\n        order: 2\n      .pagination-next\n        order: 3\n    &.is-right\n      .pagination-previous\n        order: 1\n      .pagination-next\n        order: 2\n      .pagination-list\n        justify-content: flex-end\n        order: 3\n","@import \"../utilities/mixins\"\n\n$panel-margin: $block-spacing !default\n$panel-item-border: 1px solid $border-light !default\n$panel-radius: $radius-large !default\n$panel-shadow: $shadow !default\n\n$panel-heading-background-color: $border-light !default\n$panel-heading-color: $text-strong !default\n$panel-heading-line-height: 1.25 !default\n$panel-heading-padding: 0.75em 1em !default\n$panel-heading-radius: $radius !default\n$panel-heading-size: 1.25em !default\n$panel-heading-weight: $weight-bold !default\n\n$panel-tabs-font-size: 0.875em !default\n$panel-tab-border-bottom: 1px solid $border !default\n$panel-tab-active-border-bottom-color: $link-active-border !default\n$panel-tab-active-color: $link-active !default\n\n$panel-list-item-color: $text !default\n$panel-list-item-hover-color: $link !default\n\n$panel-block-color: $text-strong !default\n$panel-block-hover-background-color: $background !default\n$panel-block-active-border-left-color: $link !default\n$panel-block-active-color: $link-active !default\n$panel-block-active-icon-color: $link !default\n\n$panel-icon-color: $text-light !default\n$panel-colors: $colors !default\n\n.panel\n  border-radius: $panel-radius\n  box-shadow: $panel-shadow\n  font-size: $size-normal\n  &:not(:last-child)\n    margin-bottom: $panel-margin\n  // Colors\n  @each $name, $components in $panel-colors\n    $color: nth($components, 1)\n    $color-invert: nth($components, 2)\n    &.is-#{$name}\n      .panel-heading\n        background-color: $color\n        color: $color-invert\n      .panel-tabs a.is-active\n        border-bottom-color: $color\n      .panel-block.is-active .panel-icon\n        color: $color\n\n.panel-tabs,\n.panel-block\n  &:not(:last-child)\n    border-bottom: $panel-item-border\n\n.panel-heading\n  background-color: $panel-heading-background-color\n  border-radius: $panel-radius $panel-radius 0 0\n  color: $panel-heading-color\n  font-size: $panel-heading-size\n  font-weight: $panel-heading-weight\n  line-height: $panel-heading-line-height\n  padding: $panel-heading-padding\n\n.panel-tabs\n  align-items: flex-end\n  display: flex\n  font-size: $panel-tabs-font-size\n  justify-content: center\n  a\n    border-bottom: $panel-tab-border-bottom\n    margin-bottom: -1px\n    padding: 0.5em\n    // Modifiers\n    &.is-active\n      border-bottom-color: $panel-tab-active-border-bottom-color\n      color: $panel-tab-active-color\n\n.panel-list\n  a\n    color: $panel-list-item-color\n    &:hover\n      color: $panel-list-item-hover-color\n\n.panel-block\n  align-items: center\n  color: $panel-block-color\n  display: flex\n  justify-content: flex-start\n  padding: 0.5em 0.75em\n  input[type=\"checkbox\"]\n    +ltr-property(\"margin\", 0.75em)\n  & > .control\n    flex-grow: 1\n    flex-shrink: 1\n    width: 100%\n  &.is-wrapped\n    flex-wrap: wrap\n  &.is-active\n    border-left-color: $panel-block-active-border-left-color\n    color: $panel-block-active-color\n    .panel-icon\n      color: $panel-block-active-icon-color\n  &:last-child\n    border-bottom-left-radius: $panel-radius\n    border-bottom-right-radius: $panel-radius\n\na.panel-block,\nlabel.panel-block\n  cursor: pointer\n  &:hover\n    background-color: $panel-block-hover-background-color\n\n.panel-icon\n  +fa(14px, 1em)\n  color: $panel-icon-color\n  +ltr-property(\"margin\", 0.75em)\n  .fa\n    font-size: inherit\n    line-height: inherit\n","@import \"../utilities/mixins\"\n\n$tabs-border-bottom-color: $border !default\n$tabs-border-bottom-style: solid !default\n$tabs-border-bottom-width: 1px !default\n$tabs-link-color: $text !default\n$tabs-link-hover-border-bottom-color: $text-strong !default\n$tabs-link-hover-color: $text-strong !default\n$tabs-link-active-border-bottom-color: $link !default\n$tabs-link-active-color: $link !default\n$tabs-link-padding: 0.5em 1em !default\n\n$tabs-boxed-link-radius: $radius !default\n$tabs-boxed-link-hover-background-color: $background !default\n$tabs-boxed-link-hover-border-bottom-color: $border !default\n\n$tabs-boxed-link-active-background-color: $scheme-main !default\n$tabs-boxed-link-active-border-color: $border !default\n$tabs-boxed-link-active-border-bottom-color: transparent !default\n\n$tabs-toggle-link-border-color: $border !default\n$tabs-toggle-link-border-style: solid !default\n$tabs-toggle-link-border-width: 1px !default\n$tabs-toggle-link-hover-background-color: $background !default\n$tabs-toggle-link-hover-border-color: $border-hover !default\n$tabs-toggle-link-radius: $radius !default\n$tabs-toggle-link-active-background-color: $link !default\n$tabs-toggle-link-active-border-color: $link !default\n$tabs-toggle-link-active-color: $link-invert !default\n\n.tabs\n  @extend %block\n  +overflow-touch\n  @extend %unselectable\n  align-items: stretch\n  display: flex\n  font-size: $size-normal\n  justify-content: space-between\n  overflow: hidden\n  overflow-x: auto\n  white-space: nowrap\n  a\n    align-items: center\n    border-bottom-color: $tabs-border-bottom-color\n    border-bottom-style: $tabs-border-bottom-style\n    border-bottom-width: $tabs-border-bottom-width\n    color: $tabs-link-color\n    display: flex\n    justify-content: center\n    margin-bottom: -#{$tabs-border-bottom-width}\n    padding: $tabs-link-padding\n    vertical-align: top\n    &:hover\n      border-bottom-color: $tabs-link-hover-border-bottom-color\n      color: $tabs-link-hover-color\n  li\n    display: block\n    &.is-active\n      a\n        border-bottom-color: $tabs-link-active-border-bottom-color\n        color: $tabs-link-active-color\n  ul\n    align-items: center\n    border-bottom-color: $tabs-border-bottom-color\n    border-bottom-style: $tabs-border-bottom-style\n    border-bottom-width: $tabs-border-bottom-width\n    display: flex\n    flex-grow: 1\n    flex-shrink: 0\n    justify-content: flex-start\n    &.is-left\n      padding-right: 0.75em\n    &.is-center\n      flex: none\n      justify-content: center\n      padding-left: 0.75em\n      padding-right: 0.75em\n    &.is-right\n      justify-content: flex-end\n      padding-left: 0.75em\n  .icon\n    &:first-child\n      +ltr-property(\"margin\", 0.5em)\n    &:last-child\n      +ltr-property(\"margin\", 0.5em, false)\n  // Alignment\n  &.is-centered\n    ul\n      justify-content: center\n  &.is-right\n    ul\n      justify-content: flex-end\n  // Styles\n  &.is-boxed\n    a\n      border: 1px solid transparent\n      +ltr\n        border-radius: $tabs-boxed-link-radius $tabs-boxed-link-radius 0 0\n      +rtl\n        border-radius: 0 0 $tabs-boxed-link-radius $tabs-boxed-link-radius\n      &:hover\n        background-color: $tabs-boxed-link-hover-background-color\n        border-bottom-color: $tabs-boxed-link-hover-border-bottom-color\n    li\n      &.is-active\n        a\n          background-color: $tabs-boxed-link-active-background-color\n          border-color: $tabs-boxed-link-active-border-color\n          border-bottom-color: $tabs-boxed-link-active-border-bottom-color !important\n  &.is-fullwidth\n    li\n      flex-grow: 1\n      flex-shrink: 0\n  &.is-toggle\n    a\n      border-color: $tabs-toggle-link-border-color\n      border-style: $tabs-toggle-link-border-style\n      border-width: $tabs-toggle-link-border-width\n      margin-bottom: 0\n      position: relative\n      &:hover\n        background-color: $tabs-toggle-link-hover-background-color\n        border-color: $tabs-toggle-link-hover-border-color\n        z-index: 2\n    li\n      & + li\n        +ltr-property(\"margin\", -#{$tabs-toggle-link-border-width}, false)\n      &:first-child a\n        +ltr\n          border-top-left-radius: $tabs-toggle-link-radius\n          border-bottom-left-radius: $tabs-toggle-link-radius\n        +rtl\n          border-top-right-radius: $tabs-toggle-link-radius\n          border-bottom-right-radius: $tabs-toggle-link-radius\n      &:last-child a\n        +ltr\n          border-top-right-radius: $tabs-toggle-link-radius\n          border-bottom-right-radius: $tabs-toggle-link-radius\n        +rtl\n          border-top-left-radius: $tabs-toggle-link-radius\n          border-bottom-left-radius: $tabs-toggle-link-radius\n      &.is-active\n        a\n          background-color: $tabs-toggle-link-active-background-color\n          border-color: $tabs-toggle-link-active-border-color\n          color: $tabs-toggle-link-active-color\n          z-index: 1\n    ul\n      border-bottom: none\n    &.is-toggle-rounded\n      li\n        &:first-child a\n          +ltr\n            border-bottom-left-radius: $radius-rounded\n            border-top-left-radius: $radius-rounded\n            padding-left: 1.25em\n          +rtl\n            border-bottom-right-radius: $radius-rounded\n            border-top-right-radius: $radius-rounded\n            padding-right: 1.25em\n        &:last-child a\n          +ltr\n            border-bottom-right-radius: $radius-rounded\n            border-top-right-radius: $radius-rounded\n            padding-right: 1.25em\n          +rtl\n            border-bottom-left-radius: $radius-rounded\n            border-top-left-radius: $radius-rounded\n            padding-left: 1.25em\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n","/* Bulma Grid */\n@charset \"utf-8\"\n\n@import \"columns\"\n@import \"tiles\"\n","@import \"../utilities/mixins\"\n\n$column-gap: 0.75rem !default\n\n.column\n  display: block\n  flex-basis: 0\n  flex-grow: 1\n  flex-shrink: 1\n  padding: $column-gap\n  .columns.is-mobile > &.is-narrow\n    flex: none\n    width: unset\n  .columns.is-mobile > &.is-full\n    flex: none\n    width: 100%\n  .columns.is-mobile > &.is-three-quarters\n    flex: none\n    width: 75%\n  .columns.is-mobile > &.is-two-thirds\n    flex: none\n    width: 66.6666%\n  .columns.is-mobile > &.is-half\n    flex: none\n    width: 50%\n  .columns.is-mobile > &.is-one-third\n    flex: none\n    width: 33.3333%\n  .columns.is-mobile > &.is-one-quarter\n    flex: none\n    width: 25%\n  .columns.is-mobile > &.is-one-fifth\n    flex: none\n    width: 20%\n  .columns.is-mobile > &.is-two-fifths\n    flex: none\n    width: 40%\n  .columns.is-mobile > &.is-three-fifths\n    flex: none\n    width: 60%\n  .columns.is-mobile > &.is-four-fifths\n    flex: none\n    width: 80%\n  .columns.is-mobile > &.is-offset-three-quarters\n    +ltr-property(\"margin\", 75%, false)\n  .columns.is-mobile > &.is-offset-two-thirds\n    +ltr-property(\"margin\", 66.6666%, false)\n  .columns.is-mobile > &.is-offset-half\n    +ltr-property(\"margin\", 50%, false)\n  .columns.is-mobile > &.is-offset-one-third\n    +ltr-property(\"margin\", 33.3333%, false)\n  .columns.is-mobile > &.is-offset-one-quarter\n    +ltr-property(\"margin\", 25%, false)\n  .columns.is-mobile > &.is-offset-one-fifth\n    +ltr-property(\"margin\", 20%, false)\n  .columns.is-mobile > &.is-offset-two-fifths\n    +ltr-property(\"margin\", 40%, false)\n  .columns.is-mobile > &.is-offset-three-fifths\n    +ltr-property(\"margin\", 60%, false)\n  .columns.is-mobile > &.is-offset-four-fifths\n    +ltr-property(\"margin\", 80%, false)\n  @for $i from 0 through 12\n    .columns.is-mobile > &.is-#{$i}\n      flex: none\n      width: percentage(divide($i, 12))\n    .columns.is-mobile > &.is-offset-#{$i}\n      +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +mobile\n    &.is-narrow-mobile\n      flex: none\n      width: unset\n    &.is-full-mobile\n      flex: none\n      width: 100%\n    &.is-three-quarters-mobile\n      flex: none\n      width: 75%\n    &.is-two-thirds-mobile\n      flex: none\n      width: 66.6666%\n    &.is-half-mobile\n      flex: none\n      width: 50%\n    &.is-one-third-mobile\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-mobile\n      flex: none\n      width: 25%\n    &.is-one-fifth-mobile\n      flex: none\n      width: 20%\n    &.is-two-fifths-mobile\n      flex: none\n      width: 40%\n    &.is-three-fifths-mobile\n      flex: none\n      width: 60%\n    &.is-four-fifths-mobile\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-mobile\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-mobile\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-mobile\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-mobile\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-mobile\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-mobile\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-mobile\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-mobile\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-mobile\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-mobile\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-mobile\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +tablet\n    &.is-narrow,\n    &.is-narrow-tablet\n      flex: none\n      width: unset\n    &.is-full,\n    &.is-full-tablet\n      flex: none\n      width: 100%\n    &.is-three-quarters,\n    &.is-three-quarters-tablet\n      flex: none\n      width: 75%\n    &.is-two-thirds,\n    &.is-two-thirds-tablet\n      flex: none\n      width: 66.6666%\n    &.is-half,\n    &.is-half-tablet\n      flex: none\n      width: 50%\n    &.is-one-third,\n    &.is-one-third-tablet\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter,\n    &.is-one-quarter-tablet\n      flex: none\n      width: 25%\n    &.is-one-fifth,\n    &.is-one-fifth-tablet\n      flex: none\n      width: 20%\n    &.is-two-fifths,\n    &.is-two-fifths-tablet\n      flex: none\n      width: 40%\n    &.is-three-fifths,\n    &.is-three-fifths-tablet\n      flex: none\n      width: 60%\n    &.is-four-fifths,\n    &.is-four-fifths-tablet\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters,\n    &.is-offset-three-quarters-tablet\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds,\n    &.is-offset-two-thirds-tablet\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half,\n    &.is-offset-half-tablet\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third,\n    &.is-offset-one-third-tablet\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter,\n    &.is-offset-one-quarter-tablet\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth,\n    &.is-offset-one-fifth-tablet\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths,\n    &.is-offset-two-fifths-tablet\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths,\n    &.is-offset-three-fifths-tablet\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths,\n    &.is-offset-four-fifths-tablet\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i},\n      &.is-#{$i}-tablet\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i},\n      &.is-offset-#{$i}-tablet\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +touch\n    &.is-narrow-touch\n      flex: none\n      width: unset\n    &.is-full-touch\n      flex: none\n      width: 100%\n    &.is-three-quarters-touch\n      flex: none\n      width: 75%\n    &.is-two-thirds-touch\n      flex: none\n      width: 66.6666%\n    &.is-half-touch\n      flex: none\n      width: 50%\n    &.is-one-third-touch\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-touch\n      flex: none\n      width: 25%\n    &.is-one-fifth-touch\n      flex: none\n      width: 20%\n    &.is-two-fifths-touch\n      flex: none\n      width: 40%\n    &.is-three-fifths-touch\n      flex: none\n      width: 60%\n    &.is-four-fifths-touch\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-touch\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-touch\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-touch\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-touch\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-touch\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-touch\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-touch\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-touch\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-touch\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-touch\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-touch\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +desktop\n    &.is-narrow-desktop\n      flex: none\n      width: unset\n    &.is-full-desktop\n      flex: none\n      width: 100%\n    &.is-three-quarters-desktop\n      flex: none\n      width: 75%\n    &.is-two-thirds-desktop\n      flex: none\n      width: 66.6666%\n    &.is-half-desktop\n      flex: none\n      width: 50%\n    &.is-one-third-desktop\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-desktop\n      flex: none\n      width: 25%\n    &.is-one-fifth-desktop\n      flex: none\n      width: 20%\n    &.is-two-fifths-desktop\n      flex: none\n      width: 40%\n    &.is-three-fifths-desktop\n      flex: none\n      width: 60%\n    &.is-four-fifths-desktop\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-desktop\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-desktop\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-desktop\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-desktop\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-desktop\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-desktop\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-desktop\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-desktop\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-desktop\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-desktop\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-desktop\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +widescreen\n    &.is-narrow-widescreen\n      flex: none\n      width: unset\n    &.is-full-widescreen\n      flex: none\n      width: 100%\n    &.is-three-quarters-widescreen\n      flex: none\n      width: 75%\n    &.is-two-thirds-widescreen\n      flex: none\n      width: 66.6666%\n    &.is-half-widescreen\n      flex: none\n      width: 50%\n    &.is-one-third-widescreen\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-widescreen\n      flex: none\n      width: 25%\n    &.is-one-fifth-widescreen\n      flex: none\n      width: 20%\n    &.is-two-fifths-widescreen\n      flex: none\n      width: 40%\n    &.is-three-fifths-widescreen\n      flex: none\n      width: 60%\n    &.is-four-fifths-widescreen\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-widescreen\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-widescreen\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-widescreen\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-widescreen\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-widescreen\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-widescreen\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-widescreen\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-widescreen\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-widescreen\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-widescreen\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-widescreen\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +fullhd\n    &.is-narrow-fullhd\n      flex: none\n      width: unset\n    &.is-full-fullhd\n      flex: none\n      width: 100%\n    &.is-three-quarters-fullhd\n      flex: none\n      width: 75%\n    &.is-two-thirds-fullhd\n      flex: none\n      width: 66.6666%\n    &.is-half-fullhd\n      flex: none\n      width: 50%\n    &.is-one-third-fullhd\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-fullhd\n      flex: none\n      width: 25%\n    &.is-one-fifth-fullhd\n      flex: none\n      width: 20%\n    &.is-two-fifths-fullhd\n      flex: none\n      width: 40%\n    &.is-three-fifths-fullhd\n      flex: none\n      width: 60%\n    &.is-four-fifths-fullhd\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-fullhd\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-fullhd\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-fullhd\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-fullhd\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-fullhd\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-fullhd\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-fullhd\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-fullhd\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-fullhd\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-fullhd\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-fullhd\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n\n.columns\n  +ltr-property(\"margin\", (-$column-gap), false)\n  +ltr-property(\"margin\", (-$column-gap))\n  margin-top: (-$column-gap)\n  &:last-child\n    margin-bottom: (-$column-gap)\n  &:not(:last-child)\n    margin-bottom: calc(1.5rem - #{$column-gap})\n  // Modifiers\n  &.is-centered\n    justify-content: center\n  &.is-gapless\n    +ltr-property(\"margin\", 0, false)\n    +ltr-property(\"margin\", 0)\n    margin-top: 0\n    & > .column\n      margin: 0\n      padding: 0 !important\n    &:not(:last-child)\n      margin-bottom: 1.5rem\n    &:last-child\n      margin-bottom: 0\n  &.is-mobile\n    display: flex\n  &.is-multiline\n    flex-wrap: wrap\n  &.is-vcentered\n    align-items: center\n  // Responsiveness\n  +tablet\n    &:not(.is-desktop)\n      display: flex\n  +desktop\n    // Modifiers\n    &.is-desktop\n      display: flex\n\n@if $variable-columns\n  .columns.is-variable\n    --columnGap: 0.75rem\n    +ltr-property(\"margin\", calc(-1 * var(--columnGap)), false)\n    +ltr-property(\"margin\", calc(-1 * var(--columnGap)))\n    > .column\n      padding-left: var(--columnGap)\n      padding-right: var(--columnGap)\n    @for $i from 0 through 8\n      &.is-#{$i}\n        --columnGap: #{$i * 0.25rem}\n      +mobile\n        &.is-#{$i}-mobile\n          --columnGap: #{$i * 0.25rem}\n      +tablet\n        &.is-#{$i}-tablet\n          --columnGap: #{$i * 0.25rem}\n      +tablet-only\n        &.is-#{$i}-tablet-only\n          --columnGap: #{$i * 0.25rem}\n      +touch\n        &.is-#{$i}-touch\n          --columnGap: #{$i * 0.25rem}\n      +desktop\n        &.is-#{$i}-desktop\n          --columnGap: #{$i * 0.25rem}\n      +desktop-only\n        &.is-#{$i}-desktop-only\n          --columnGap: #{$i * 0.25rem}\n      +widescreen\n        &.is-#{$i}-widescreen\n          --columnGap: #{$i * 0.25rem}\n      +widescreen-only\n        &.is-#{$i}-widescreen-only\n          --columnGap: #{$i * 0.25rem}\n      +fullhd\n        &.is-#{$i}-fullhd\n          --columnGap: #{$i * 0.25rem}\n","@import \"../utilities/mixins\"\n\n$tile-spacing: 0.75rem !default\n\n.tile\n  align-items: stretch\n  display: block\n  flex-basis: 0\n  flex-grow: 1\n  flex-shrink: 1\n  min-height: min-content\n  // Modifiers\n  &.is-ancestor\n    margin-left: $tile-spacing * -1\n    margin-right: $tile-spacing * -1\n    margin-top: $tile-spacing * -1\n    &:last-child\n      margin-bottom: $tile-spacing * -1\n    &:not(:last-child)\n      margin-bottom: $tile-spacing\n  &.is-child\n    margin: 0 !important\n  &.is-parent\n    padding: $tile-spacing\n  &.is-vertical\n    flex-direction: column\n    & > .tile.is-child:not(:last-child)\n      margin-bottom: 1.5rem !important\n  // Responsiveness\n  +tablet\n    &:not(.is-child)\n      display: flex\n    @for $i from 1 through 12\n      &.is-#{$i}\n        flex: none\n        width: (divide($i, 12)) * 100%\n","/* Bulma Helpers */\n@charset \"utf-8\"\n\n@import \"color\"\n@import \"flexbox\"\n@import \"float\"\n@import \"other\"\n@import \"overflow\"\n@import \"position\"\n@import \"spacing\"\n@import \"typography\"\n@import \"visibility\"\n","@import \"../utilities/derived-variables\"\n\n@each $name, $pair in $colors\n  $color: nth($pair, 1)\n  .has-text-#{$name}\n    color: $color !important\n  a.has-text-#{$name}\n    &:hover,\n    &:focus\n      color: bulmaDarken($color, 10%) !important\n  .has-background-#{$name}\n    background-color: $color !important\n  @if length($pair) >= 4\n    $color-light: nth($pair, 3)\n    $color-dark: nth($pair, 4)\n    // Light\n    .has-text-#{$name}-light\n      color: $color-light !important\n    a.has-text-#{$name}-light\n      &:hover,\n      &:focus\n        color: bulmaDarken($color-light, 10%) !important\n    .has-background-#{$name}-light\n      background-color: $color-light !important\n    // Dark\n    .has-text-#{$name}-dark\n      color: $color-dark !important\n    a.has-text-#{$name}-dark\n      &:hover,\n      &:focus\n        color: bulmaLighten($color-dark, 10%) !important\n    .has-background-#{$name}-dark\n      background-color: $color-dark !important\n\n@each $name, $shade in $shades\n  .has-text-#{$name}\n    color: $shade !important\n  .has-background-#{$name}\n    background-color: $shade !important\n","$flex-direction-values: row, row-reverse, column, column-reverse\n@each $value in $flex-direction-values\n  .is-flex-direction-#{$value}\n    flex-direction: $value !important\n\n$flex-wrap-values: nowrap, wrap, wrap-reverse\n@each $value in $flex-wrap-values\n  .is-flex-wrap-#{$value}\n    flex-wrap: $value !important\n\n$justify-content-values: flex-start, flex-end, center, space-between, space-around, space-evenly, start, end, left, right\n@each $value in $justify-content-values\n  .is-justify-content-#{$value}\n    justify-content: $value !important\n\n$align-content-values: flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, start, end, baseline\n@each $value in $align-content-values\n  .is-align-content-#{$value}\n    align-content: $value !important\n\n$align-items-values: stretch, flex-start, flex-end, center, baseline, start, end, self-start, self-end\n@each $value in $align-items-values\n  .is-align-items-#{$value}\n    align-items: $value !important\n\n$align-self-values: auto, flex-start, flex-end, center, baseline, stretch\n@each $value in $align-self-values\n  .is-align-self-#{$value}\n    align-self: $value !important\n\n$flex-operators: grow, shrink\n@each $operator in $flex-operators\n  @for $i from 0 through 5\n    .is-flex-#{$operator}-#{$i}\n      flex-#{$operator}: $i !important\n","@import \"../utilities/mixins\"\n\n.is-clearfix\n  +clearfix\n\n.is-pulled-left\n  float: left !important\n\n.is-pulled-right\n  float: right !important\n","@import \"../utilities/mixins\"\n\n.is-radiusless\n  border-radius: 0 !important\n\n.is-shadowless\n  box-shadow: none !important\n\n.is-clickable\n  cursor: pointer !important\n  pointer-events: all !important\n\n.is-unselectable\n  @extend %unselectable\n",".is-clipped\n  overflow: hidden !important\n","@import \"../utilities/mixins\"\n\n.is-overlay\n  @extend %overlay\n\n.is-relative\n  position: relative !important\n",".is-marginless\n  margin: 0 !important\n\n.is-paddingless\n  padding: 0 !important\n\n$spacing-shortcuts: (\"margin\": \"m\", \"padding\": \"p\") !default\n$spacing-directions: (\"top\": \"t\", \"right\": \"r\", \"bottom\": \"b\", \"left\": \"l\") !default\n$spacing-horizontal: \"x\" !default\n$spacing-vertical: \"y\" !default\n$spacing-values: (\"0\": 0, \"1\": 0.25rem, \"2\": 0.5rem, \"3\": 0.75rem, \"4\": 1rem, \"5\": 1.5rem, \"6\": 3rem, \"auto\": auto) !default\n\n@each $property, $shortcut in $spacing-shortcuts\n  @each $name, $value in $spacing-values\n    // All directions\n    .#{$shortcut}-#{$name}\n      #{$property}: $value !important\n    // Cardinal directions\n    @each $direction, $suffix in $spacing-directions\n      .#{$shortcut}#{$suffix}-#{$name}\n        #{$property}-#{$direction}: $value !important\n    // Horizontal axis\n    @if $spacing-horizontal != null\n      .#{$shortcut}#{$spacing-horizontal}-#{$name}\n        #{$property}-left: $value !important\n        #{$property}-right: $value !important\n    // Vertical axis\n    @if $spacing-vertical != null\n      .#{$shortcut}#{$spacing-vertical}-#{$name}\n        #{$property}-top: $value !important\n        #{$property}-bottom: $value !important\n","@import \"../utilities/mixins\"\n\n=typography-size($target:'')\n  @each $size in $sizes\n    $i: index($sizes, $size)\n    .is-size-#{$i}#{if($target == '', '', '-' + $target)}\n      font-size: $size !important\n\n+typography-size()\n\n+mobile\n  +typography-size('mobile')\n\n+tablet\n  +typography-size('tablet')\n\n+touch\n  +typography-size('touch')\n\n+desktop\n  +typography-size('desktop')\n\n+widescreen\n  +typography-size('widescreen')\n\n+fullhd\n  +typography-size('fullhd')\n\n$alignments: ('centered': 'center', 'justified': 'justify', 'left': 'left', 'right': 'right')\n\n@each $alignment, $text-align in $alignments\n  .has-text-#{$alignment}\n    text-align: #{$text-align} !important\n\n@each $alignment, $text-align in $alignments\n  +mobile\n    .has-text-#{$alignment}-mobile\n      text-align: #{$text-align} !important\n  +tablet\n    .has-text-#{$alignment}-tablet\n      text-align: #{$text-align} !important\n  +tablet-only\n    .has-text-#{$alignment}-tablet-only\n      text-align: #{$text-align} !important\n  +touch\n    .has-text-#{$alignment}-touch\n      text-align: #{$text-align} !important\n  +desktop\n    .has-text-#{$alignment}-desktop\n      text-align: #{$text-align} !important\n  +desktop-only\n    .has-text-#{$alignment}-desktop-only\n      text-align: #{$text-align} !important\n  +widescreen\n    .has-text-#{$alignment}-widescreen\n      text-align: #{$text-align} !important\n  +widescreen-only\n    .has-text-#{$alignment}-widescreen-only\n      text-align: #{$text-align} !important\n  +fullhd\n    .has-text-#{$alignment}-fullhd\n      text-align: #{$text-align} !important\n\n.is-capitalized\n  text-transform: capitalize !important\n\n.is-lowercase\n  text-transform: lowercase !important\n\n.is-uppercase\n  text-transform: uppercase !important\n\n.is-italic\n  font-style: italic !important\n  \n.is-underlined\n  text-decoration: underline !important\n\n.has-text-weight-light\n  font-weight: $weight-light !important\n.has-text-weight-normal\n  font-weight: $weight-normal !important\n.has-text-weight-medium\n  font-weight: $weight-medium !important\n.has-text-weight-semibold\n  font-weight: $weight-semibold !important\n.has-text-weight-bold\n  font-weight: $weight-bold !important\n\n.is-family-primary\n  font-family: $family-primary !important\n\n.is-family-secondary\n  font-family: $family-secondary !important\n\n.is-family-sans-serif\n  font-family: $family-sans-serif !important\n\n.is-family-monospace\n  font-family: $family-monospace !important\n\n.is-family-code\n  font-family: $family-code !important\n","@import \"../utilities/mixins\"\n\n$displays: 'block' 'flex' 'inline' 'inline-block' 'inline-flex'\n\n@each $display in $displays\n  .is-#{$display}\n    display: #{$display} !important\n  +mobile\n    .is-#{$display}-mobile\n      display: #{$display} !important\n  +tablet\n    .is-#{$display}-tablet\n      display: #{$display} !important\n  +tablet-only\n    .is-#{$display}-tablet-only\n      display: #{$display} !important\n  +touch\n    .is-#{$display}-touch\n      display: #{$display} !important\n  +desktop\n    .is-#{$display}-desktop\n      display: #{$display} !important\n  +desktop-only\n    .is-#{$display}-desktop-only\n      display: #{$display} !important\n  +widescreen\n    .is-#{$display}-widescreen\n      display: #{$display} !important\n  +widescreen-only\n    .is-#{$display}-widescreen-only\n      display: #{$display} !important\n  +fullhd\n    .is-#{$display}-fullhd\n      display: #{$display} !important\n\n.is-hidden\n  display: none !important\n\n.is-sr-only\n  border: none !important\n  clip: rect(0, 0, 0, 0) !important\n  height: 0.01em !important\n  overflow: hidden !important\n  padding: 0 !important\n  position: absolute !important\n  white-space: nowrap !important\n  width: 0.01em !important\n\n+mobile\n  .is-hidden-mobile\n    display: none !important\n\n+tablet\n  .is-hidden-tablet\n    display: none !important\n\n+tablet-only\n  .is-hidden-tablet-only\n    display: none !important\n\n+touch\n  .is-hidden-touch\n    display: none !important\n\n+desktop\n  .is-hidden-desktop\n    display: none !important\n\n+desktop-only\n  .is-hidden-desktop-only\n    display: none !important\n\n+widescreen\n  .is-hidden-widescreen\n    display: none !important\n\n+widescreen-only\n  .is-hidden-widescreen-only\n    display: none !important\n\n+fullhd\n  .is-hidden-fullhd\n    display: none !important\n\n.is-invisible\n  visibility: hidden !important\n\n+mobile\n  .is-invisible-mobile\n    visibility: hidden !important\n\n+tablet\n  .is-invisible-tablet\n    visibility: hidden !important\n\n+tablet-only\n  .is-invisible-tablet-only\n    visibility: hidden !important\n\n+touch\n  .is-invisible-touch\n    visibility: hidden !important\n\n+desktop\n  .is-invisible-desktop\n    visibility: hidden !important\n\n+desktop-only\n  .is-invisible-desktop-only\n    visibility: hidden !important\n\n+widescreen\n  .is-invisible-widescreen\n    visibility: hidden !important\n\n+widescreen-only\n  .is-invisible-widescreen-only\n    visibility: hidden !important\n\n+fullhd\n  .is-invisible-fullhd\n    visibility: hidden !important\n","/* Bulma Layout */\n@charset \"utf-8\"\n\n@import \"hero\"\n@import \"section\"\n@import \"footer\"\n","@import \"../utilities/mixins\"\n\n$hero-body-padding: 3rem 1.5rem !default\n$hero-body-padding-tablet: 3rem 3rem !default\n$hero-body-padding-small: 1.5rem !default\n$hero-body-padding-medium: 9rem 4.5rem !default\n$hero-body-padding-large: 18rem 6rem !default\n\n$hero-colors: $colors !default\n\n// Main container\n.hero\n  align-items: stretch\n  display: flex\n  flex-direction: column\n  justify-content: space-between\n  .navbar\n    background: none\n  .tabs\n    ul\n      border-bottom: none\n  // Colors\n  @each $name, $pair in $hero-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      color: $color-invert\n      a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n      strong\n        color: inherit\n      .title\n        color: $color-invert\n      .subtitle\n        color: bulmaRgba($color-invert, 0.9)\n        a:not(.button),\n        strong\n          color: $color-invert\n      .navbar-menu\n        +touch\n          background-color: $color\n      .navbar-item,\n      .navbar-link\n        color: bulmaRgba($color-invert, 0.7)\n      a.navbar-item,\n      .navbar-link\n        &:hover,\n        &.is-active\n          background-color: bulmaDarken($color, 5%)\n          color: $color-invert\n      .tabs\n        a\n          color: $color-invert\n          opacity: 0.9\n          &:hover\n            opacity: 1\n        li\n          &.is-active a\n            color: $color !important\n            opacity: 1\n        &.is-boxed,\n        &.is-toggle\n          a\n            color: $color-invert\n            &:hover\n              background-color: bulmaRgba($scheme-invert, 0.1)\n          li.is-active a\n            &,\n            &:hover\n              background-color: $color-invert\n              border-color: $color-invert\n              color: $color\n      // Modifiers\n      @if type-of($color) == 'color'\n        &.is-bold\n          $gradient-top-left: darken(saturate(adjust-hue($color, -10deg), 10%), 10%)\n          $gradient-bottom-right: lighten(saturate(adjust-hue($color, 10deg), 5%), 5%)\n          background-image: linear-gradient(141deg, $gradient-top-left 0%, $color 71%, $gradient-bottom-right 100%)\n          +mobile\n            .navbar-menu\n              background-image: linear-gradient(141deg, $gradient-top-left 0%, $color 71%, $gradient-bottom-right 100%)\n  // Sizes\n  &.is-small\n    .hero-body\n      padding: $hero-body-padding-small\n  &.is-medium\n    +tablet\n      .hero-body\n        padding: $hero-body-padding-medium\n  &.is-large\n    +tablet\n      .hero-body\n        padding: $hero-body-padding-large\n  &.is-halfheight,\n  &.is-fullheight,\n  &.is-fullheight-with-navbar\n    .hero-body\n      align-items: center\n      display: flex\n      & > .container\n        flex-grow: 1\n        flex-shrink: 1\n  &.is-halfheight\n    min-height: 50vh\n  &.is-fullheight\n    min-height: 100vh\n\n// Components\n\n.hero-video\n  @extend %overlay\n  overflow: hidden\n  video\n    left: 50%\n    min-height: 100%\n    min-width: 100%\n    position: absolute\n    top: 50%\n    transform: translate3d(-50%, -50%, 0)\n  // Modifiers\n  &.is-transparent\n    opacity: 0.3\n  // Responsiveness\n  +mobile\n    display: none\n\n.hero-buttons\n  margin-top: 1.5rem\n  // Responsiveness\n  +mobile\n    .button\n      display: flex\n      &:not(:last-child)\n        margin-bottom: 0.75rem\n  +tablet\n    display: flex\n    justify-content: center\n    .button:not(:last-child)\n      +ltr-property(\"margin\", 1.5rem)\n\n// Containers\n\n.hero-head,\n.hero-foot\n  flex-grow: 0\n  flex-shrink: 0\n\n.hero-body\n  flex-grow: 1\n  flex-shrink: 0\n  padding: $hero-body-padding\n  +tablet\n    padding: $hero-body-padding-tablet\n","@import \"../utilities/mixins\"\n\n$section-padding: 3rem 1.5rem !default\n$section-padding-desktop: 3rem 3rem !default\n$section-padding-medium: 9rem 4.5rem !default\n$section-padding-large: 18rem 6rem !default\n\n.section\n  padding: $section-padding\n  // Responsiveness\n  +desktop\n    padding: $section-padding-desktop\n    // Sizes\n    &.is-medium\n      padding: $section-padding-medium\n    &.is-large\n      padding: $section-padding-large\n","@import \"../utilities/derived-variables\"\n\n$footer-background-color: $scheme-main-bis !default\n$footer-color: false !default\n$footer-padding: 3rem 1.5rem 6rem !default\n\n.footer\n  background-color: $footer-background-color\n  padding: $footer-padding\n  @if $footer-color\n    color: $footer-color\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./src/style.scss":
/*!************************!*\
  !*** ./src/style.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/bulma/bulma.sass":
/*!***************************************!*\
  !*** ./node_modules/bulma/bulma.sass ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../css-loader/dist/cjs.js!../sass-loader/dist/cjs.js!./bulma.sass */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/bulma/bulma.sass");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ "./src/style.scss");
/* harmony import */ var bulma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bulma */ "./node_modules/bulma/bulma.sass");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./module */ "./src/module.js");
/* harmony import */ var _data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data/fish//allfish.js */ "./src/data/fish/allfish.js");
/* harmony import */ var _c4rn_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./c4rn.js */ "./src/c4rn.js");






function trackDataIdClicks(dataIdValue) {
  gtag('event', 'clic', {
    'event_category': 'bouton',
    'event_action': 'clic',
    'event_label': dataIdValue
  });
}
function getQueryParamValue(key) {
  const urlParams = new URLSearchParams(window.location.search);
  const param = urlParams.get(key);
  return param;
}
function getCookieValue(name) {
  const cookies = document.cookie.split(';');
  for (let i = 0; i < cookies.length; i++) {
    const cookie = cookies[i].trim();
    if (cookie.startsWith(name + '=')) {
      return cookie.substring(name.length + 1);
    }
  }
  return '';
}
window.lang = getCookieValue("language") ? getCookieValue("language") : "en";
function findMatchingId(originalId, tolerance) {
  const originalFish = lodash__WEBPACK_IMPORTED_MODULE_2___default().find(_data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes, {
    id: originalId
  });
  if (!originalFish) {
    return []; // Aucune correspondance trouvée
  }

  const originalPositions = originalFish.positions;
  const matchingFish = lodash__WEBPACK_IMPORTED_MODULE_2___default().filter(_data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes, f => {
    if (f.id === originalId) {
      return false; // Ignorer l'ID d'origine
    }

    const isMatchingPosition = lodash__WEBPACK_IMPORTED_MODULE_2___default().some(f.positions, pos => {
      return lodash__WEBPACK_IMPORTED_MODULE_2___default().some(originalPositions, (originalPos, index) => {
        const isMatching = pos.x > originalPos.x - tolerance && pos.x < originalPos.x + tolerance && pos.y > originalPos.y - tolerance && pos.y < originalPos.y + tolerance;
        if (isMatching) {
          f.originalPosition = index; // Ajouter originalPosition à l'objet correspondant
        }

        return isMatching;
      });
    });
    return isMatchingPosition && f.map === originalFish.map;
  });
  return lodash__WEBPACK_IMPORTED_MODULE_2___default().map(matchingFish, fish => {
    const matchingPositions = lodash__WEBPACK_IMPORTED_MODULE_2___default().filter(fish.positions, pos => {
      return pos.x > originalPositions[0].x - tolerance && pos.x < originalPositions[0].x + tolerance && pos.y > originalPositions[0].y - tolerance && pos.y < originalPositions[0].y + tolerance;
    });
    const neighborPositions = lodash__WEBPACK_IMPORTED_MODULE_2___default().map(matchingPositions, pos => {
      return {
        x: pos.x,
        y: pos.y
      };
    });
    return {
      id: fish.id,
      neighborPositions: neighborPositions,
      name: fish.name,
      originalPosition: fish.originalPosition
    };
  });
}
document.addEventListener('DOMContentLoaded', () => {
  let currentId = "01";
  let currentFish = lodash__WEBPACK_IMPORTED_MODULE_2___default().find(_data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes, {
    id: currentId
  });
  let currentMinPoints = currentFish.type == "common" ? 300 : currentFish.type == "rare" ? 400 : currentFish.type == "epic" ? 500 : 5000;
  let unit = "kgs";
  document.querySelector(".weight-toggle-container input").addEventListener("change", e => {
    unit = e.target.checked ? "kgs" : "lbs";
    Array.from(document.querySelectorAll("[data-unit")).forEach(element => {
      element.setAttribute("data-unit", unit);
    });
    loadFish(currentId, window.lang);
  });

  // Functions to open and close a modal
  function openModal($el) {
    $el.classList.add('is-active');
  }
  function closeModal($el) {
    $el.classList.remove('is-active');
  }
  function closeAllModals() {
    (document.querySelectorAll('.modal') || []).forEach($modal => {
      closeModal($modal);
    });
  }

  // Add a click event on buttons to open a specific modal
  (document.querySelectorAll('.js-modal-trigger') || []).forEach($trigger => {
    const modal = $trigger.dataset.target;
    const $target = document.getElementById(modal);
    $trigger.addEventListener('click', () => {
      openModal($target);
    });
  });

  // Add a click event on various child elements to close the parent modal
  (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button') || []).forEach($close => {
    const $target = $close.closest('.modal');
    $close.addEventListener('click', () => {
      closeModal($target);
    });
  });

  // Add a keyboard event to close all modals
  document.addEventListener('keydown', event => {
    const e = event || window.event;
    if (e.keyCode === 27) {
      // Escape key
      closeAllModals();
    }
  });
  function toggleSideMenu() {
    document.querySelector(".csidebar").classList.toggle("visible");
    document.querySelector(".menu-toggle").classList.toggle("toggle-is-visible");
  }
  document.querySelector(".menu-toggle").addEventListener("click", () => {
    toggleSideMenu();
  });

  /**SWIPE */

  document.addEventListener('touchstart', handleTouchStart, false);
  document.addEventListener('touchmove', handleTouchMove, false);
  var xDown = null;
  var yDown = null;
  function handleTouchStart(evt) {
    const firstTouch = evt.touches[0];
    xDown = firstTouch.clientX;
    yDown = firstTouch.clientY;
  }
  ;
  function handleTouchMove(evt) {
    if (!xDown || !yDown) {
      return;
    }
    var xUp = evt.touches[0].clientX;
    var yUp = evt.touches[0].clientY;
    var xDiff = xDown - xUp;
    var yDiff = yDown - yUp;
    if (Math.abs(xDiff) > Math.abs(yDiff)) {
      if (xDiff > 0) {
        // Swipe to the left
        if (!isTargetElementRange(evt.target)) {
          triggerSwipeLeftEvent();
        }
      } else {
        // Swipe to the right
        if (!isTargetElementRange(evt.target)) {
          triggerSwipeRightEvent();
        }
      }
    }

    // Reset values
    xDown = null;
    yDown = null;
  }
  ;
  function isTargetElementRange(targetElement) {
    return targetElement.id === 'range';
  }
  function triggerSwipeLeftEvent() {
    document.querySelector(".csidebar").classList.remove("visible");
  }
  function triggerSwipeRightEvent() {
    document.querySelector(".csidebar").classList.add("visible");
  }
  _data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes.forEach(fish => {
    (0,_module__WEBPACK_IMPORTED_MODULE_3__.createList)(fish, window.lang);
  });
  function bindEventListenerToItem() {
    Array.from(document.querySelectorAll(".item")).forEach(item => {
      item.addEventListener("click", () => {
        currentId = item.getAttribute("data-id");
        loadFish(currentId, window.lang);
        triggerSwipeRightEvent();
      });
    });
  }
  bindEventListenerToItem();
  Array.from(document.querySelectorAll("[data-lang")).forEach(elem => {
    elem.classList.remove("selected-language");
  });
  document.querySelector("[data-lang='" + window.lang + "'").classList.add("selected-language");
  Array.from(document.querySelectorAll("[data-lang")).forEach(langBtn => {
    langBtn.addEventListener("click", () => {
      window.lang = langBtn.getAttribute("data-lang");
      Array.from(document.querySelectorAll("[data-lang")).forEach(elem => {
        elem.classList.remove("selected-language");
        langBtn.classList.add("selected-language");
      });
      document.cookie = "language=" + window.lang + "; expires=Fri, 31 Dec 9999 23:59:59 GMT";
      document.querySelector("#fish-list").innerHTML = "";
      _data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes.forEach(fish => {
        (0,_module__WEBPACK_IMPORTED_MODULE_3__.createList)(fish, window.lang);
      });
      bindEventListenerToItem(window.lang);
      loadFish(currentId, window.lang);
    });
  });
  function loadFish(id) {
    // TODO NEIGHBOR
    console.log(findMatchingId(id, 10));
    const fish = lodash__WEBPACK_IMPORTED_MODULE_2___default().find(_data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes, {
      id: id
    });
    currentFish = fish;
    currentMinPoints = currentFish.type == "common" ? 300 : currentFish.type == "rare" ? 400 : currentFish.type == "epic" ? 500 : 5000;
    updateRange();
    Array.from(document.querySelectorAll(".unit")).forEach(elem => {
      elem.innerHTML = unit;
    });
    document.getElementById("range").value = 50;
    document.querySelector(".cdata-container").setAttribute("data-map", fish.map);
    const isIn = fish.seasons[new Date().getMonth()] ? "in" : "out";
    document.querySelector("#season-message").setAttribute("class", isIn);
    document.querySelector(".season-max-weight .mm-value").innerHTML = (currentFish[unit].min + (currentFish[unit].max - currentFish[unit].min) * 0.2).toFixed(2);
    document.querySelector(".season-max-points .mm-value").innerHTML = currentMinPoints + currentMinPoints * 0.2;
    document.querySelector("#no-shadow").setAttribute("data-noshadow", typeof currentFish.attributes[0].shadow[0] == "undefined" ? true : false);
    currentFish.attributes.forEach(attribute => {
      const attributeName = Object.keys(attribute)[0];
      const elem = document.querySelector(`[data-fishattribute='${attributeName}']`) || false;
      if (elem) {
        Array.from(elem.querySelectorAll(".svg-container")).forEach((svg, index) => {
          svg.setAttribute("data-current-svg", attribute[attributeName].includes(index) || false);
        });
      }
    });
    document.getElementById("fishName").innerHTML = fish.name[window.lang] ? fish.name[window.lang] : fish.name.en;
    document.getElementById("fishType").innerHTML = fish.type;
    document.getElementById("map").setAttribute("src", `./images/map-${fish.map}.jpg`);
    document.getElementById("mapName").innerHTML = fish.map;
    document.getElementById("mapName").setAttribute("class", `map-${fish.map}`);
    document.getElementById("positionNote").innerHTML = fish.positionNote;
    document.getElementById("positions-container").innerHTML = "";
    for (let i = 0; i < fish.positions.length; i++) {
      const position = document.createElement("div");
      position.setAttribute("class", "ccross");
      position.setAttribute("data-fishid", id);
      position.setAttribute("style", `background-image:url("./images/${id}.png");top:${fish.positions[i].x}%;left:${fish.positions[i].y}%`);
      document.getElementById("positions-container").appendChild(position);
    }
    fish.seasons.forEach((month, index) => {
      month ? document.querySelectorAll(".months-container > div")[index].setAttribute("class", "season") : document.querySelectorAll(".months-container > div")[index].removeAttribute("class");
    });
    document.querySelector("#minmax-min-points").innerHTML = currentMinPoints;
    document.querySelector("#minmax-max-points").innerHTML = currentMinPoints * 2;
    document.querySelector(".cdata-container").setAttribute("data-season", currentFish.seasons[new Date().getMonth()]);
    document.getElementById("fish-image").setAttribute("src", `./images/${fish.id}.png`);
    Array.from(document.querySelectorAll("#minweight, #minmax-min-weight")).forEach(element => {
      element.innerHTML = fish[unit].min;
    });
    Array.from(document.querySelectorAll("#maxweight, #minmax-max-weight")).forEach(element => {
      element.innerHTML = fish[unit].max;
    });
    Array.from(document.querySelectorAll(".step-weight")).forEach((step, index) => {
      const fifth = (fish[unit].max - fish[unit].min) * 0.2;
      step.innerHTML = (fish[unit].min + fifth * (index * 1)).toFixed(2);
    });
    Array.from(document.querySelectorAll(".step-points")).forEach((step, index) => {
      const fifth = currentMinPoints / 5;
      step.innerHTML = currentMinPoints + fifth * index;
    });
    if (currentFish.type == "monster") {
      function setTodaySpot(date, collection, referenceDate) {
        for (let i = 0; i < collection.length; i++) {
          let dateN = new Date(date);
          dateN.setDate(dateN.getDate() + (i - 1));
          const dateText = (dateN.getMonth() + 1).toString().padStart(2, "0") + "/" + dateN.getDate().toString().padStart(2, "0");
          const timeDiff = Math.floor((dateN - referenceDate) / (1000 * 60 * 60 * 24));
          const index = timeDiff >= 0 ? timeDiff % collection.length : (collection.length + timeDiff) % collection.length;
          collection[index].setAttribute('data-today-spot', 'false');
          collection[index].removeAttribute('data-spot-day');
          if (dateN.getDate() == new Date(date).getDate()) {
            collection[index].setAttribute('data-today-spot', 'true');
          }
          collection[index].setAttribute('data-spot-day', dateText);
        }
      }
      const currentDate = new Date().setDate(new Date().getDate() + 0);
      const htmlCollection = document.getElementsByClassName('ccross');
      const referenceDate = new Date(2023, 5, 1);
      setTodaySpot(currentDate, htmlCollection, referenceDate);
    }
    document.querySelector(".active")?.classList.remove("active");
    document.querySelector(`[data-id="${id}"]`).classList.add("active");
    if (currentFish.difficulty !== 'undefined') {
      Array.from(document.querySelectorAll(".difficulty")).forEach((elem, index) => {
        if (currentFish.difficulty == index) {
          elem.style.display = "block";
        } else {
          elem.style.display = "none";
        }
      });
    }
    document.querySelector("html").setAttribute("class", currentFish.type);
    if (getQueryParamValue("c4rn")) {
      (0,_c4rn_js__WEBPACK_IMPORTED_MODULE_5__.loadC4rn)(id);
    }
  }
  loadFish(currentId, window.lang);
  document.querySelectorAll(".months-container > div")[new Date().getMonth()].setAttribute("data-current", "true");
  function updateRange(percent = 10) {
    document.getElementById("range-values-container").style.left = percent + "%";
    document.getElementById("percent").innerHTML = Number(percent).toFixed(2);
    Array.from(document.querySelectorAll(".stars-container .svg-container")).forEach((container, index) => {
      container.setAttribute("data-current-svg", percent > index * 20);
    });
    document.querySelector("#weight").value = ((currentFish[unit].max - currentFish[unit].min) * (Number(percent) / 100) + currentFish[unit].min).toFixed(3);
    document.querySelector("#points").value = (currentMinPoints + currentMinPoints * (percent / 100)).toFixed();
    document.querySelector("#range-color").style.width = percent + "%";
    document.getElementById("range").value = percent;
  }
  document.querySelector("#range").addEventListener("input", e => {
    updateRange(e.target.value);
  });
  Array.from(document.querySelectorAll(".range-input")).forEach(input => {
    input.addEventListener("keyup", () => {
      if (input.getAttribute("id") == "points") {
        if (input.value >= currentMinPoints && input.value <= currentMinPoints * 2) {
          const currentPercent = (input.value - currentMinPoints) / currentMinPoints * 100;
          updateRange(currentPercent);
        }
      }
      if (input.getAttribute("id") == "weight") {
        if (input.value >= currentFish[unit].min && input.value <= currentFish[unit].max) {
          if (/^\d+(\.\d{3})$/.test(input.value)) {
            const currentPercent = (input.value - currentFish[unit].min) / (currentFish[unit].max - currentFish[unit].min) * 100;
            updateRange(currentPercent);
          }
        }
      }
    });
  });
  document.addEventListener("click", e => {
    if (e.target.classList.contains("list-title")) {
      e.target.closest(".list-container").classList.toggle("hidden-list");
    }
    if (e.target.classList.contains("fishp")) {
      const clickedId = e.target.closest(".item").getAttribute("data-id");
      trackDataIdClicks(clickedId);
    }
  });
  const items = Array.from(document.querySelectorAll(".item"));
  function checkScreenWidth() {
    var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    var isLessThan768 = screenWidth < 768;
    if (isLessThan768) {
      document.querySelector(".csidebar").classList.remove("visible");
      items.forEach(item => {
        item.addEventListener("click", () => {
          document.querySelector(".csidebar").classList.remove("visible");
        });
      });
    }
  }
  window.addEventListener('load', function () {
    checkScreenWidth();
  });
  window.addEventListener('resize', function () {
    checkScreenWidth();
  });
  var scrollableElement = document.querySelector('.section.cscrollable');
  scrollableElement.addEventListener('scroll', function (event) {
    var scrollTop = event.target.scrollTop;
    if (scrollTop > 50) {
      document.querySelector("#header .is-flex:first-of-type").classList.add("sticky");
      var eventScrollMoreThan50 = new CustomEvent('scrollMoreThan50Event');
      document.dispatchEvent(eventScrollMoreThan50);
    } else if (scrollTop >= 0 && scrollTop <= 50) {
      document.querySelector("#header .is-flex:first-of-type").classList.remove("sticky");
      var eventScrollBetween0And50 = new CustomEvent('scrollBetween0And50Event');
      document.dispatchEvent(eventScrollBetween0And50);
    }
  });
});
function onPageLoad(callback) {
  if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
    callback();
  } else {
    document.addEventListener('DOMContentLoaded', callback);
  }
}
onPageLoad(function () {
  setTimeout(() => {
    document.body.classList.remove("is-loading");
  }, 500);
});
if (getQueryParamValue("c4rn")) {
  const steinScript = document.createElement("script");
  steinScript.setAttribute("src", "https://unpkg.com/stein-js-client");
  document.body.appendChild(steinScript);
  setTimeout(() => {
    const key = getQueryParamValue("c4rn");
    const store = new SteinStore("https://api.steinhq.com/v1/storages/" + key);
    store.read("c4rna", {
      limit: 100,
      offset: 0
    }).then(data => {
      window.c4rn = data;
    });
  }, 800);
}
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,