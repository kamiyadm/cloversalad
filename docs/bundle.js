/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/c4rn.js":
/*!*********************!*\
  !*** ./src/c4rn.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "loadC4rn": () => (/* binding */ loadC4rn)
/* harmony export */ });
//http://localhost:8080/?c4rn=64823a5feced9b09e9d4aaf5

function loadC4rn(fishId) {
  function findObjectById(array, id) {
    return _.find(array, {
      id: id
    });
  }
  function convertToJSON(jsonString) {
    try {
      var fixedString = jsonString.replace(/([a-zA-Z0-9]+?):/g, '"$1":');
      var jsonArrayString = "[" + fixedString + "]";
      var data = JSON.parse(jsonArrayString);
      var json = JSON.stringify(data);
      return json;
    } catch (error) {
      console.error('Erreur lors de la conversion en JSON :', error);
      return null;
    }
  }
  function testWindowC4rn() {
    let count = 0;
    const interval = setInterval(() => {
      if (window.c4rn !== undefined) {
        c4rnNote();
        clearInterval(interval);
      } else {
        count++;
        if (count === 50) {
          console.log('window.c4rn introuvable après 50 essais.');
          clearInterval(interval);
        }
      }
    }, 50);
  }
  testWindowC4rn();
  function c4rnNote() {
    const c4rnFish = findObjectById(window.c4rn, fishId);
    if (c4rnFish) {
      if (c4rnFish.note !== null) {
        document.getElementById("positionNote").innerHTML = c4rnFish.note;
      }
      var convertedJSON = convertToJSON(c4rnFish.pos);
      if (convertedJSON) {
        const c4rnPos = JSON.parse(convertedJSON);
        c4rnPos.forEach(pos => {
          const posElem = document.createElement("div");
          posElem.setAttribute("class", "ccross");
          posElem.setAttribute("data-fishid", fishId);
          posElem.setAttribute("style", "background-image:url('./images/c4rn.png')");
          posElem.style.left = pos.x + "%";
          posElem.style.top = pos.y + "%";
          document.getElementById("positions-container").appendChild(posElem);
        });
      }
    }
  }
}

/***/ }),

/***/ "./src/data/fish/alaska.js":
/*!*********************************!*\
  !*** ./src/data/fish/alaska.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "alaskaFish": () => (/* binding */ alaskaFish)
/* harmony export */ });
const alaskaFish = [{
  id: "31",
  type: "common",
  name: {
    en: "arctic char",
    fr: "omble chevalier",
    pt: "truta de àrtico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, false, false, false],
  kgs: {
    min: 3,
    max: 15
  },
  lbs: {
    min: 6.61,
    max: 33.07
  },
  map: "alaska",
  positions: [{
    x: 30,
    y: 85
  }],
  positionNote: ""
}, {
  id: "32",
  type: "common",
  name: {
    en: "atka mackerel",
    fr: "maquereau atka",
    pt: "cavala atka"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 2
  },
  lbs: {
    min: 2.2,
    max: 4.41
  },
  map: "alaska",
  positions: [{
    x: 30,
    y: 55
  }, {
    x: 15,
    y: 15
  }, {
    x: 30,
    y: 85
  }, {
    x: 85,
    y: 85
  }],
  positionNote: ""
}, {
  id: "33",
  type: "common",
  name: {
    en: "yellow irish lord",
    fr: "seigneur irlandais jaune",
    pt: "lord irlandês amarelo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 3
  },
  lbs: {
    min: 2.2,
    max: 6.61
  },
  map: "alaska",
  positions: [{
    x: 65,
    y: 40
  }, {
    x: 45,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 35,
    y: 20
  }],
  positionNote: ""
}, {
  id: "34",
  type: "common",
  name: {
    en: "lancetfish",
    fr: "cavalo féroce",
    pt: "lirio ferro"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 9
  },
  lbs: {
    min: 2.2,
    max: 19.84
  },
  map: "alaska",
  positions: [{
    x: 30,
    y: 55
  }, {
    x: 65,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 85,
    y: 65
  }],
  positionNote: ""
}, {
  id: "35",
  type: "common",
  name: {
    en: "steelhead",
    fr: "truite arc-en-ciel",
    pt: "truita arco-iris"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, false, false, false, false, true, true, true, true],
  kgs: {
    min: 3,
    max: 25
  },
  lbs: {
    min: 6.61,
    max: 55.12
  },
  map: "alaska",
  positions: [{
    x: 65,
    y: 40
  }, {
    x: 65,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 35,
    y: 20
  }],
  positionNote: ""
}, {
  id: "36",
  type: "common",
  name: {
    en: "silver salmon",
    fr: "saumon coho",
    pt: "salmão prateado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, false, false, true, true, true, true, false, false],
  kgs: {
    min: 1,
    max: 15
  },
  lbs: {
    min: 2.20,
    max: 33.07
  },
  map: "alaska",
  positions: [{
    x: 50,
    y: 70
  }, {
    x: 65,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 35,
    y: 20
  }],
  positionNote: ""
}, {
  id: "37",
  type: "common",
  name: {
    en: "rougheye rockfish",
    fr: "sébaste à oeil épineux",
    pt: "peixe-rock rougheye"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 7
  },
  lbs: {
    min: 4.41,
    max: 15.43
  },
  map: "alaska",
  positions: [{
    x: 45,
    y: 85
  }, {
    x: 65,
    y: 85
  }, {
    x: 85,
    y: 15
  }, {
    x: 15,
    y: 50
  }],
  positionNote: ""
}, {
  id: "38",
  type: "common",
  name: {
    en: "pacific herring",
    fr: "hareng du pacifique",
    pt: "arenque de pacifico"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, false, false, false, false, false, false, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.3
  },
  lbs: {
    min: 0.22,
    max: 0.66
  },
  map: "alaska",
  positions: [{
    x: 10,
    y: 85
  }, {
    x: 10,
    y: 35
  }, {
    x: 50,
    y: 70
  }, {
    x: 15,
    y: 50
  }],
  positionNote: ""
}, {
  id: "39",
  type: "common",
  name: {
    en: "sockeye salmon",
    fr: "saumon rouge",
    pt: "salmão-vermelho"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "alaska",
  positions: [{
    x: 64,
    y: 40
  }, {
    x: 70,
    y: 60
  }, {
    x: 50,
    y: 70
  }, {
    x: 85,
    y: 40
  }],
  positionNote: ""
}, {
  id: "310",
  type: "common",
  name: {
    en: "dolly varden",
    fr: "dolly varden",
    pt: "truta dolly varden"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 18
  },
  lbs: {
    min: 6.61,
    max: 39.68
  },
  map: "alaska",
  positions: [{
    x: 64,
    y: 40
  }, {
    x: 85,
    y: 65
  }, {
    x: 70,
    y: 85
  }, {
    x: 80,
    y: 40
  }],
  positionNote: ""
}, {
  id: "311",
  type: "common",
  name: {
    en: "coalfish",
    fr: "charbonnier",
    pt: "peixe-carvão de pacifico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, false, false, false, false],
  kgs: {
    min: 3,
    max: 18
  },
  lbs: {
    min: 11.02,
    max: 68.34
  },
  map: "alaska",
  positions: [{
    x: 64,
    y: 40
  }, {
    x: 85,
    y: 45
  }, {
    x: 30,
    y: 55
  }, {
    x: 40,
    y: 15
  }],
  positionNote: ""
}, {
  id: "312",
  type: "common",
  name: {
    en: "chum salmon",
    fr: "saumon chien",
    pt: "salmão cão"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, true, true, false],
  kgs: {
    min: 2,
    max: 16
  },
  lbs: {
    min: 4.41,
    max: 35.27
  },
  map: "alaska",
  positions: [{
    x: 50,
    y: 70
  }, {
    x: 85,
    y: 15
  }, {
    x: 30,
    y: 55
  }, {
    x: 15,
    y: 50
  }],
  positionNote: ""
}, {
  id: "313",
  type: "common",
  name: {
    en: "capelin",
    fr: "capelan",
    pt: "capelim"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.01,
    max: 0.1
  },
  lbs: {
    min: 0.02,
    max: 0.22
  },
  map: "alaska",
  positions: [{
    x: 90,
    y: 85
  }, {
    x: 85,
    y: 15
  }, {
    x: 30,
    y: 85
  }, {
    x: 15,
    y: 50
  }],
  positionNote: ""
}, {
  id: "314",
  type: "common",
  name: {
    en: "burbot",
    fr: "lotte",
    pt: "burbot"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, false, false, false, false, false, false, false, true, true, true],
  kgs: {
    min: 5,
    max: 34
  },
  lbs: {
    min: 11.02,
    max: 74.96
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 65
  }, {
    x: 80,
    y: 45
  }, {
    x: 30,
    y: 85
  }, {
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "315",
  type: "common",
  name: {
    en: "bigmouth sculpin",
    fr: "chabot à grande-bouche",
    pt: "escultor de bigmouth"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.5,
    max: 3
  },
  lbs: {
    min: 1.10,
    max: 6.61
  },
  map: "alaska",
  positions: [{
    x: 65,
    y: 85
  }, {
    x: 80,
    y: 45
  }, {
    x: 50,
    y: 70
  }, {
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "316",
  type: "common",
  name: {
    en: "arctic greyling",
    fr: "ombre arctique",
    pt: "grayling àrtico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, false, true, true, false, false, false, false, false],
  kgs: {
    min: 2,
    max: 4
  },
  lbs: {
    min: 4.41,
    max: 8.82
  },
  map: "alaska",
  positions: [{
    x: 30,
    y: 85
  }, {
    x: 85,
    y: 85
  }, {
    x: 25,
    y: 55
  }, {
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "317",
  type: "common",
  name: {
    en: "humpback salmon",
    fr: "saumon rose à bosse",
    pt: "salmão rosado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, true, true, true, true, true, false, false, false, false],
  kgs: {
    min: 2,
    max: 7
  },
  lbs: {
    min: 4.41,
    max: 15.43
  },
  map: "alaska",
  positions: [{
    x: 50,
    y: 70
  }, {
    x: 85,
    y: 15
  }, {
    x: 65,
    y: 40
  }, {
    x: 40,
    y: 20
  }],
  positionNote: ""
}, {
  id: "318",
  type: "rare",
  name: {
    en: "halibut",
    fr: "flétan du pacifique",
    pt: "halibute"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 20,
    max: 363
  },
  lbs: {
    min: 44.09,
    max: 800.28
  },
  map: "alaska",
  positions: [{
    x: 90,
    y: 25
  }, {
    x: 30,
    y: 55
  }],
  positionNote: ""
}, {
  id: "319",
  type: "rare",
  name: {
    en: "blue lingcod",
    fr: "morue-lingue bleue",
    pt: "bacalhau ling"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 20,
    max: 363
  },
  lbs: {
    min: 11.02,
    max: 130.07
  },
  map: "alaska",
  positions: [{
    x: 45,
    y: 85
  }, {
    x: 70,
    y: 85
  }, {
    x: 15,
    y: 50
  }, {
    x: 75,
    y: 15
  }],
  positionNote: ""
}, {
  id: "320",
  type: "rare",
  name: {
    en: "spiny skate",
    fr: "raie blanche du pacifique",
    pt: "arraia branco de pacifico"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 60
  },
  lbs: {
    min: 2.20,
    max: 132.28
  },
  map: "alaska",
  positions: [{
    x: 45,
    y: 85
  }, {
    x: 70,
    y: 85
  }, {
    x: 15,
    y: 50
  }, {
    x: 75,
    y: 15
  }, {
    x: 50,
    y: 70
  }, {
    x: 85,
    y: 15
  }, {
    x: 30,
    y: 55
  }, {
    x: 85,
    y: 40
  }],
  positionNote: "Is basically everywhere..."
}, {
  id: "321",
  type: "rare",
  name: {
    en: "wolf eel",
    fr: "poisson loup à ocelles",
    pt: "enguia-lobo"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 18
  },
  lbs: {
    min: 6.61,
    max: 39.68
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 65
  }, {
    x: 70,
    y: 85
  }, {
    x: 80,
    y: 45
  }],
  positionNote: ""
}, {
  id: "322",
  type: "epic",
  name: {
    en: "king salmon",
    fr: "saumon royal",
    pt: "salmão-rei"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 5,
    max: 61
  },
  lbs: {
    min: 11.02,
    max: 134.48
  },
  map: "alaska",
  positions: [{
    x: 65,
    y: 40
  }, {
    x: 50,
    y: 75
  }],
  positionNote: ""
}, {
  id: "323",
  type: "epic",
  name: {
    en: "salmon shark",
    fr: "requin saumon",
    pt: "tubarão-salmão"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 40,
    max: 175
  },
  lbs: {
    min: 88.18,
    max: 385.81
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 40
  }, {
    x: 50,
    y: 75
  }, {
    x: 55,
    y: 15
  }],
  positionNote: "position has been changed recently.<br>Try the west spot first.<br>Please send a message if you have found a solid spot."
}, {
  id: "324",
  type: "epic",
  name: {
    en: "pacific sleeper shark",
    fr: "requin dormeur du pacifique",
    pt: "tubarão-dormedor de pacifico"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 363
  },
  lbs: {
    min: 22.05,
    max: 800.28
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 40
  }, {
    x: 50,
    y: 75
  }, {
    x: 30,
    y: 85
  }, {
    x: 80,
    y: 15
  }],
  positionNote: ""
}, {
  id: "325",
  type: "epic",
  name: {
    en: "sunfish",
    fr: "môle",
    pt: "peixe-luna"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, false, false, false],
  kgs: {
    min: 100,
    max: 2400
  },
  lbs: {
    min: 220.46,
    max: 5291.09
  },
  map: "alaska",
  positions: [{
    x: 85,
    y: 15
  }],
  positionNote: "Very difficult to find. Be patient."
}, {
  id: "326",
  type: "monster",
  name: {
    en: "kraken",
    fr: "kraken",
    pt: "kraken"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, false, true, false, true, false, true, false, true, false, true, false],
  kgs: {
    min: 200,
    max: 500
  },
  lbs: {
    min: 440.92,
    max: 1102.31
  },
  map: "alaska",
  positions: [{
    x: 14,
    y: 66
  }, {
    x: 17,
    y: 74
  }, {
    x: 17,
    y: 88
  }, {
    x: 29,
    y: 85
  }],
  positionNote: "MONSTER<br>Spot rotation: it changes every day.<br>Try monster baits to find the bubbles, then cast and wait into the bubbles.<br>If you don't have any monster baits, try cast and reel and wait (and be patient)."
}];

/***/ }),

/***/ "./src/data/fish/allfish.js":
/*!**********************************!*\
  !*** ./src/data/fish/allfish.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fishes": () => (/* binding */ fishes)
/* harmony export */ });
/* harmony import */ var _paradise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paradise.js */ "./src/data/fish/paradise.js");
/* harmony import */ var _gl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gl.js */ "./src/data/fish/gl.js");
/* harmony import */ var _cr_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cr.js */ "./src/data/fish/cr.js");
/* harmony import */ var _alaska_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./alaska.js */ "./src/data/fish/alaska.js");
/* harmony import */ var _australia_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./australia.js */ "./src/data/fish/australia.js");
/* harmony import */ var _scotland_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scotland.js */ "./src/data/fish/scotland.js");






const fishes = [..._paradise_js__WEBPACK_IMPORTED_MODULE_0__.paradiseFish, ..._gl_js__WEBPACK_IMPORTED_MODULE_1__.glFish, ..._cr_js__WEBPACK_IMPORTED_MODULE_2__.crFish, ..._alaska_js__WEBPACK_IMPORTED_MODULE_3__.alaskaFish, ..._australia_js__WEBPACK_IMPORTED_MODULE_4__.australiaFish, ..._scotland_js__WEBPACK_IMPORTED_MODULE_5__.scotlandFish];


/***/ }),

/***/ "./src/data/fish/australia.js":
/*!************************************!*\
  !*** ./src/data/fish/australia.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "australiaFish": () => (/* binding */ australiaFish)
/* harmony export */ });
const australiaFish = [{
  id: "40",
  type: "common",
  name: {
    en: "Black Bream",
    fr: "daurade noire",
    pt: "sargo-preto"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 4
  },
  lbs: {
    min: 2.2,
    max: 8.82
  },
  map: "australia",
  positions: [{
    x: 5,
    y: 95
  }, {
    x: 85,
    y: 47
  }, {
    x: 70,
    y: 30
  }],
  positionNote: ""
}, {
  id: "41",
  type: "common",
  name: {
    en: "dusky flathead",
    fr: "poisson-crocodile",
    pt: "flathead"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, false, false, false, false, false, true, true, true],
  kgs: {
    min: 3,
    max: 15
  },
  lbs: {
    min: 6.61,
    max: 33.07
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 95,
    y: 30
  }],
  positionNote: ""
}, {
  id: "42",
  type: "common",
  name: {
    en: "Red Emperor Snapper",
    fr: "vivaneau bourgeois",
    pt: "jenahak"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 12,
    max: 32
  },
  lbs: {
    min: 26.46,
    max: 70.55
  },
  map: "australia",
  positions: [{
    x: 85,
    y: 47
  }],
  positionNote: " "
}, {
  id: "43",
  type: "common",
  name: {
    en: "Shortfin Mako Shark",
    fr: "requin mako",
    pt: "tubarão-mako"
  },
  difficulty: 1,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 114,
    max: 505
  },
  lbs: {
    min: 251.33,
    max: 1113.33
  },
  map: "australia",
  positions: [{
    x: 5,
    y: 95
  }],
  positionNote: " "
}, {
  id: "44",
  type: "common",
  name: {
    en: "Carpet Shark",
    fr: "requin-tapis barbu",
    pt: "tubarão tapete"
  },
  attributes: [{
    shadow: [2, 3, 4]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 15,
    max: 70
  },
  lbs: {
    min: 33.07,
    max: 154.32
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 60
  }, {
    x: 55,
    y: 80
  }, {
    x: 82,
    y: 90
  }],
  positionNote: ""
}, {
  id: "45",
  type: "common",
  name: {
    en: "port Jackson Shark",
    fr: "requin de port-jackson",
    pt: "tubarão de port jackson"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 1,
  seasons: [false, false, false, false, true, true, true, true, true, true, false, false],
  kgs: {
    min: 5,
    max: 16
  },
  lbs: {
    min: 11.02,
    max: 35.27
  },
  map: "australia",
  positions: [{
    x: 75,
    y: 20
  }, {
    x: 10,
    y: 40
  }],
  positionNote: ""
}, {
  id: "46",
  type: "common",
  name: {
    en: "Spanish Mackerel",
    fr: "thazard rayé",
    pt: "cavala espanhola de barreiras estreitas"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 20,
    max: 70
  },
  lbs: {
    min: 44.09,
    max: 154.32
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 50,
    y: 30
  }, {
    x: 60,
    y: 95
  }],
  positionNote: ""
}, {
  id: "47",
  type: "common",
  name: {
    en: "Albacore",
    fr: "thon blanc",
    pt: "albacora"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 12,
    max: 60
  },
  lbs: {
    min: 26.46,
    max: 132.28
  },
  map: "australia",
  positions: [{
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }, {
    x: 60,
    y: 55
  }],
  positionNote: " "
}, {
  id: "48",
  type: "common",
  name: {
    en: "Barramundi",
    fr: "barramundi",
    pt: "perca-gigante"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, true, true, true, true, false, false, false, false, false, false, false],
  kgs: {
    min: 12,
    max: 60
  },
  lbs: {
    min: 26.46,
    max: 132.28
  },
  map: "australia",
  positions: [{
    x: 50,
    y: 30
  }, {
    x: 25,
    y: 55
  }],
  positionNote: " .<br>(Steve required 90kgs of it for the main quest)"
}, {
  id: "49",
  type: "common",
  name: {
    en: "Unicorn Leatherjacket",
    fr: "bourse loulou",
    pt: "porco liso"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, false, false, false, false, false, false, false, true, true, true],
  kgs: {
    min: 0.5,
    max: 2.7
  },
  lbs: {
    min: 1.1,
    max: 5.95
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }],
  positionNote: ""
}, {
  id: "410",
  type: "common",
  name: {
    en: "Tailor",
    fr: "tassergal",
    pt: "enchova"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, true, true, true, true, true, false, false, false, false, false, false],
  kgs: {
    min: 3,
    max: 14.4
  },
  lbs: {
    min: 6.61,
    max: 31.75
  },
  map: "australia",
  positions: [{
    x: 35,
    y: 40
  }, {
    x: 50,
    y: 30
  }],
  positionNote: " "
}, {
  id: "411",
  type: "common",
  name: {
    en: "Leafy Seadragon",
    fr: "dragon de mer feuillu",
    pt: "dragão marinho folhado"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.05,
    max: 0.1
  },
  lbs: {
    min: 0.11,
    max: 0.22
  },
  map: "australia",
  positions: [{
    x: 50,
    y: 30
  }],
  positionNote: ""
}, {
  id: "412",
  type: "common",
  name: {
    en: "Rock Flagtail",
    fr: "doule de roche",
    pt: "truta de montanha"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: []
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 1000
  },
  lbs: {
    min: 0.1,
    max: 1000
  },
  map: "australia",
  positions: [{
    x: 5,
    y: 95
  }, {
    x: 30,
    y: 65
  }, {
    x: 10,
    y: 45
  }],
  positionNote: "!!BUG!!<br>No data about this fish. It carasteristics are not available in the in game bestiary."
}, {
  id: "413",
  type: "common",
  name: {
    en: "Black-Saddler Coral Grouper",
    fr: "mérou corallien à selle noire",
    pt: "garoupa de sela negra"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 8,
    max: 24
  },
  lbs: {
    min: 17.64,
    max: 52.91
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }, {
    x: 55,
    y: 80
  }],
  positionNote: ""
}, {
  id: "414",
  type: "common",
  name: {
    en: "Common Stargazer",
    fr: "stragazer",
    pt: "stragazer"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 9
  },
  lbs: {
    min: 4.41,
    max: 19.84
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }, {
    x: 70,
    y: 30
  }],
  positionNote: ""
}, {
  id: "415",
  type: "common",
  name: {
    en: "Skipjack Tuna",
    fr: "bonite à ventre rayé",
    pt: "bonito"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 40
  },
  lbs: {
    min: 22.05,
    max: 88.18
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 5,
    y: 95
  }],
  positionNote: ""
}, {
  id: "416",
  type: "common",
  name: {
    en: "Fingermark",
    fr: "vivaneau ziebelo",
    pt: "pargo de joão"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 10
  },
  lbs: {
    min: 4.41,
    max: 22.05
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 60
  }],
  positionNote: ""
}, {
  id: "417",
  type: "common",
  name: {
    en: "Coral Trout",
    fr: "saumonée léopard",
    pt: "garoupa coral leopardo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, true, true, false],
  kgs: {
    min: 10,
    max: 23
  },
  lbs: {
    min: 22.05,
    max: 50.71
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }],
  positionNote: ""
}, {
  id: "418",
  type: "common",
  name: {
    en: "John Dory",
    fr: "saint pierre",
    pt: "peixe galo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }, {
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }, {
    x: 85,
    y: 47
  }, {
    x: 5,
    y: 95
  }],
  positionNote: ""
}, {
  id: "419",
  type: "common",
  name: {
    en: "Luderick",
    fr: "parore",
    pt: "perca preta"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, true, true, false],
  kgs: {
    min: 1,
    max: 4
  },
  lbs: {
    min: 2.2,
    max: 8.82
  },
  map: "australia",
  positions: [{
    x: 95,
    y: 30
  }],
  positionNote: ""
}, {
  id: "420",
  type: "common",
  name: {
    en: "Mangrove Jack",
    fr: "vivaneau des mangroves",
    pt: "pargo vermelho do mangue"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 8.70
  },
  lbs: {
    min: 6.61,
    max: 19.18
  },
  map: "australia",
  positions: [{
    x: 5,
    y: 95
  }, {
    x: 30,
    y: 60
  }, {
    x: 50,
    y: 30
  }],
  positionNote: ""
}, {
  id: "421",
  type: "common",
  name: {
    en: "Golden Trevally",
    fr: "carangue royale",
    pt: "xaréu dourado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 4,
    max: 15
  },
  lbs: {
    min: 8.82,
    max: 33.07
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }, {
    x: 5,
    y: 95
  }, {
    x: 85,
    y: 47
  }, {
    x: 70,
    y: 30
  }, {
    x: 30,
    y: 60
  }],
  positionNote: ""
}, {
  id: "422",
  type: "rare",
  name: {
    en: "Queensland Grouper",
    fr: "mérou géant",
    pt: "garoupa gigante"
  },
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 2,
  seasons: [true, true, true, false, false, false, false, false, false, false, false, true],
  kgs: {
    min: 200,
    max: 600
  },
  lbs: {
    min: 440.92,
    max: 1322.77
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 60
  }, {
    x: 80,
    y: 90
  }, {
    x: 50,
    y: 70
  }],
  positionNote: ""
}, {
  id: "423",
  type: "rare",
  name: {
    en: "Smooth Oreo Dory",
    fr: "lompe",
    pt: "oreo dory"
  },
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 1,
  seasons: [true, true, true, true, false, false, false, false, false, true, true, true],
  kgs: {
    min: 2,
    max: 5
  },
  lbs: {
    min: 4.41,
    max: 11.02
  },
  map: "australia",
  positions: [{
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }],
  positionNote: ""
}, {
  id: "424",
  type: "rare",
  name: {
    en: "Swordfish",
    fr: "espadon",
    pt: "espadarte"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 150,
    max: 650
  },
  lbs: {
    min: 330.69,
    max: 1433.01
  },
  map: "australia",
  positions: [{
    x: 42,
    y: 94
  }, {
    x: 5,
    y: 95
  }],
  positionNote: ""
}, {
  id: "425",
  type: "rare",
  name: {
    en: "spotted handfish",
    fr: "poisson main tacheté",
    pt: "peixe mão malhado"
  },
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.2,
    max: 0.6
  },
  lbs: {
    min: 0.44,
    max: 1.32
  },
  map: "australia",
  positions: [{
    x: 85,
    y: 45
  }],
  positionNote: ""
}, {
  id: "426",
  type: "rare",
  name: {
    en: "Giant Trevally",
    fr: "carangue à grosse tête",
    pt: "xaréu gigante"
  },
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 21,
    max: 80
  },
  lbs: {
    min: 46.3,
    max: 176.37
  },
  map: "australia",
  positions: [{
    x: 15,
    y: 45
  }],
  positionNote: ""
}, {
  id: "427",
  type: "epic",
  name: {
    en: "tiger shark",
    fr: "requin tigre",
    pt: "tubarão tigre"
  },
  difficulty: 2,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 300,
    max: 807
  },
  lbs: {
    min: 661.39,
    max: 1779.13
  },
  map: "australia",
  positions: [{
    x: 40,
    y: 95
  }],
  positionNote: ""
}, {
  id: "428",
  type: "common",
  name: {
    en: "manta ray",
    fr: "raie manta",
    pt: "arraia"
  },
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 2,
  seasons: [true, true, true, false, false, false, false, false, false, true, true, true],
  kgs: {
    min: 400,
    max: 3000
  },
  lbs: {
    min: 881.85,
    max: 6613.87
  },
  map: "australia",
  positions: [{
    x: 30,
    y: 65
  }],
  positionNote: ""
}, {
  id: "429",
  type: "epic",
  name: {
    en: "Hoodwinker Sunfish",
    fr: "môle",
    pt: "peixe lua"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 300,
    max: 2000
  },
  lbs: {
    min: 661.39,
    max: 4409.25
  },
  map: "australia",
  positions: [{
    x: 95,
    y: 65
  }],
  positionNote: "Not sure if it has a shadow or not. Please confirm if you want to <3"
}];

/***/ }),

/***/ "./src/data/fish/cr.js":
/*!*****************************!*\
  !*** ./src/data/fish/cr.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "crFish": () => (/* binding */ crFish)
/* harmony export */ });
const crFish = [{
  id: "21",
  type: "common",
  name: {
    en: "barracuda",
    fr: "barracuda",
    pt: "grande barracuda"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 50
  },
  lbs: {
    min: 6.61,
    max: 110.23
  },
  map: "costa-rica",
  positions: [{
    x: 25,
    y: 60
  }, {
    x: 65,
    y: 25
  }],
  positionNote: ""
}, {
  id: "22",
  type: "common",
  name: {
    en: "roosterfish",
    fr: "poisson coq",
    pt: "peixe galo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 51
  },
  lbs: {
    min: 11.02,
    max: 112.44
  },
  map: "costa-rica",
  positions: [{
    x: 45,
    y: 15
  }, {
    x: 85,
    y: 45
  }],
  positionNote: ""
}, {
  id: "23",
  type: "common",
  name: {
    en: "dorado",
    fr: "dorade coryphène",
    pt: "dourado-do-mar"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 40
  },
  lbs: {
    min: 11.02,
    max: 88.18
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 85
  }, {
    x: 90,
    y: 80
  }],
  positionNote: ""
}, {
  id: "24",
  type: "common",
  name: {
    en: "pompano",
    fr: "pompaneau sole",
    pt: "pampo verdadeiro"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 9
  },
  lbs: {
    min: 2.20,
    max: 19.84
  },
  map: "costa-rica",
  positions: [{
    x: 45,
    y: 65
  }, {
    x: 70,
    y: 90
  }],
  positionNote: ""
}, {
  id: "25",
  type: "common",
  name: {
    en: "wahoo",
    fr: "thazard noir",
    pt: "cavala da india"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 250
  },
  lbs: {
    min: 11.02,
    max: 551.16
  },
  map: "costa-rica",
  positions: [{
    x: 85,
    y: 45
  }, {
    x: 85,
    y: 15
  }],
  positionNote: ""
}, {
  id: "26",
  type: "common",
  name: {
    en: "tripletail",
    fr: "croupia roche",
    pt: "prejereba"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, false, false, false],
  kgs: {
    min: 1,
    max: 19
  },
  lbs: {
    min: 2.20,
    max: 41.89
  },
  map: "costa-rica",
  positions: [{
    x: 45,
    y: 15
  }, {
    x: 55,
    y: 35
  }],
  positionNote: ""
}, {
  id: "27",
  type: "common",
  name: {
    en: "tarpon",
    fr: "tarpon de l'atlantique",
    pt: "tarpão"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 161
  },
  lbs: {
    min: 22.05,
    max: 354.94
  },
  map: "costa-rica",
  positions: [{
    x: 30,
    y: 30
  }, {
    x: 55,
    y: 35
  }],
  positionNote: ""
}, {
  id: "28",
  type: "common",
  name: {
    en: "yellowfin tuna",
    fr: "thon jaune",
    pt: "albacora"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 200
  },
  lbs: {
    min: 22.05,
    max: 440.92
  },
  map: "costa-rica",
  positions: [{
    x: 60,
    y: 35
  }, {
    x: 40,
    y: 85
  }, {
    x: 65,
    y: 55
  }],
  positionNote: ""
}, {
  id: "29",
  type: "common",
  name: {
    en: "sierra mackerel",
    fr: "thazard sierra",
    pt: "serra do pacifico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 8.9
  },
  lbs: {
    min: 4.41,
    max: 19.62
  },
  map: "costa-rica",
  positions: [{
    x: 50,
    y: 60
  }, {
    x: 15,
    y: 15
  }, {
    x: 85,
    y: 50
  }],
  positionNote: ""
}, {
  id: "210",
  type: "common",
  name: {
    en: "pacific sailfish",
    fr: "voilier de l'indo-pacifique",
    pt: "agulhão vela"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 100
  },
  lbs: {
    min: 22.05,
    max: 220.46
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 85
  }, {
    x: 15,
    y: 15
  }, {
    x: 85,
    y: 50
  }, {
    x: 85,
    y: 25
  }],
  positionNote: ""
}, {
  id: "211",
  type: "common",
  name: {
    en: "jack crevalle",
    fr: "carangue crevalle",
    pt: "charo-largo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 5,
    max: 32
  },
  lbs: {
    min: 11.02,
    max: 70.55
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 25,
    y: 55
  }, {
    x: 65,
    y: 55
  }],
  positionNote: ""
}, {
  id: "212",
  type: "common",
  name: {
    en: "cubera snapper",
    fr: "vivaneau cubéra",
    pt: "caranha"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, true, true, false],
  kgs: {
    min: 10,
    max: 57
  },
  lbs: {
    min: 22.05,
    max: 125.66
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 25,
    y: 55
  }, {
    x: 70,
    y: 90
  }],
  positionNote: ""
}, {
  id: "213",
  type: "common",
  name: {
    en: "broomtail grouper",
    fr: "mérou genêt-queue",
    pt: "garoupa de mangue"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 91
  },
  lbs: {
    min: 22.05,
    max: 200.62
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 50,
    y: 35
  }, {
    x: 45,
    y: 85
  }, {
    x: 75,
    y: 45
  }, {
    x: 85,
    y: 15
  }],
  positionNote: ""
}, {
  id: "214",
  type: "common",
  name: {
    en: "snook",
    fr: "brochet de mer",
    pt: "robalo branco"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 24
  },
  lbs: {
    min: 4.41,
    max: 52.91
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 70,
    y: 55
  }, {
    x: 25,
    y: 55
  }],
  positionNote: ""
}, {
  id: "215",
  type: "rare",
  name: {
    en: "blue marlin",
    fr: "makaire bleu",
    pt: "marlim azul"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 50,
    max: 636
  },
  lbs: {
    min: 110.23,
    max: 1402.14
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "216",
  type: "rare",
  name: {
    en: "striped marlin",
    fr: "marlin rayé",
    pt: "marlim listrado"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 50,
    max: 440
  },
  lbs: {
    min: 110.23,
    max: 970.03
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }],
  positionNote: ""
}, {
  id: "217",
  type: "rare",
  name: {
    en: "nurse shark",
    fr: "requin nourrice atlantique",
    pt: "tubarão enfermeiro"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 50,
    max: 440
  },
  lbs: {
    min: 44.09,
    max: 240.30
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 25
  }, {
    x: 45,
    y: 85
  }],
  positionNote: ""
}, {
  id: "218",
  type: "rare",
  name: {
    en: "black marlin",
    fr: "makaire noir",
    pt: "marlim preto"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, false, false, false, true, true, true, true, false, false],
  kgs: {
    min: 50,
    max: 750
  },
  lbs: {
    min: 110.23,
    max: 1653.47
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 45,
    y: 85
  }],
  positionNote: ""
}, {
  id: "219",
  type: "epic",
  name: {
    en: "bull shark",
    fr: "requin-bouledogue",
    pt: "tubarão cabeça chata"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, false, false, false],
  kgs: {
    min: 10,
    max: 316
  },
  lbs: {
    min: 22.05,
    max: 696.66
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 45,
    y: 85
  }],
  positionNote: ""
}, {
  id: "220",
  type: "epic",
  name: {
    en: "hammerhead shark",
    fr: "requin-marteau halicorne",
    pt: "tubarão-martelo- recortado"
  },
  difficulty: 2,
  attributes: [{
    shadow: [3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 20,
    max: 152
  },
  lbs: {
    min: 44.09,
    max: 335.10
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 25
  }],
  positionNote: ""
}, {
  id: "221",
  type: "epic",
  name: {
    en: "whale shark",
    fr: "requin-baleine",
    pt: "tubarão-baleia"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 200,
    max: 3400
  },
  lbs: {
    min: 440.92,
    max: 7495.72
  },
  map: "costa-rica",
  positions: [{
    x: 15,
    y: 25
  }],
  positionNote: ""
}, {
  id: "222",
  type: "epic",
  name: {
    en: "whitetip shark",
    fr: "requin longimane",
    pt: "galha branca oceânico"
  },
  difficulty: 2,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 20,
    max: 167
  },
  lbs: {
    min: 44.09,
    max: 368.17
  },
  map: "costa-rica",
  positions: [{
    x: 10,
    y: 15
  }],
  positionNote: ""
}, {
  id: "223",
  type: "monster",
  name: {
    en: "don pedro",
    fr: "don pedro",
    pt: "don pedro"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, true, false, true, false, true, false, true, false, true, false, true],
  kgs: {
    min: 850,
    max: 1400
  },
  lbs: {
    min: 1873.93,
    max: 3086.47
  },
  map: "costa-rica",
  positions: [{
    x: 85,
    y: 45
  }, {
    x: 85,
    y: 30
  }, {
    x: 85,
    y: 15
  }],
  positionNote: "MONSTER<br>Spot rotation: it changes every day.<br>Try monster baits to find the bubbles, then cast and wait into the bubbles.<br>If you don't have any monster baits, try cast and reel and wait (and be patient)."
}];

/***/ }),

/***/ "./src/data/fish/gl.js":
/*!*****************************!*\
  !*** ./src/data/fish/gl.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "glFish": () => (/* binding */ glFish)
/* harmony export */ });
const glFish = [{
  id: "11",
  type: "common",
  name: {
    en: "alewife",
    fr: "gaspareau",
    pt: "alosa cinzenta"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.2
  },
  lbs: {
    min: 0.22,
    max: 0.44
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 20
  }, {
    x: 30,
    y: 45
  }, {
    x: 50,
    y: 70
  }, {
    x: 75,
    y: 80
  }],
  positionNote: ""
}, {
  id: "12",
  type: "common",
  name: {
    en: "brook trout",
    fr: "omble des fontaines",
    pt: "truta de riacho"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 45
  }],
  positionNote: ""
}, {
  id: "13",
  type: "common",
  name: {
    en: "brown trout",
    fr: "truite brune",
    pt: "truta marisca"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 8.82,
    max: 110.23
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 45
  }, {
    x: 85,
    y: 30
  }],
  positionNote: ""
}, {
  id: "14",
  type: "common",
  name: {
    en: "largemouth bass",
    fr: "achigan à grande bouche",
    pt: "achigã"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, false, false, false, false, false, true, true, true],
  kgs: {
    min: 2,
    max: 10
  },
  lbs: {
    min: 4.41,
    max: 22.05
  },
  map: "great-lakes",
  positions: [{
    x: 60,
    y: 15
  }],
  positionNote: ""
}, {
  id: "15",
  type: "common",
  name: {
    en: "yellow perch",
    fr: "perchaude",
    pt: "perca amarela"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 0.5,
    max: 1.9
  },
  lbs: {
    min: 1.10,
    max: 4.19
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 15
  }, {
    x: 35,
    y: 40
  }, {
    x: 20,
    y: 80
  }, {
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "16",
  type: "common",
  name: {
    en: "white crappie",
    fr: "crapet calicot",
    pt: "promoxis"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 2.4
  },
  lbs: {
    min: 2.20,
    max: 5.29
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 15
  }, {
    x: 75,
    y: 80
  }, {
    x: 20,
    y: 75
  }, {
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "17",
  type: "common",
  name: {
    en: "white bass",
    fr: "bar blanc",
    pt: "bass branco"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, true, true, true, true, true, true, false, false, false, false, false],
  kgs: {
    min: 1,
    max: 3.2
  },
  lbs: {
    min: 2.20,
    max: 7.05
  },
  map: "great-lakes",
  positions: [{
    x: 65,
    y: 15
  }, {
    x: 90,
    y: 30
  }],
  positionNote: ""
}, {
  id: "18",
  type: "common",
  name: {
    en: "walleye",
    fr: "doré jaune",
    pt: "picão-verde"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 2,
    max: 11.3
  },
  lbs: {
    min: 4.41,
    max: 24.91
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 40
  }, {
    x: 80,
    y: 15
  }, {
    x: 75,
    y: 80
  }],
  positionNote: ""
}, {
  id: "19",
  type: "common",
  name: {
    en: "sea lamprey",
    fr: "lamproie marine",
    pt: "lampreia-marinha"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.5,
    max: 2.5
  },
  lbs: {
    min: 1.10,
    max: 5.51
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 40
  }, {
    x: 65,
    y: 15
  }, {
    x: 75,
    y: 80
  }, {
    x: 80,
    y: 50
  }],
  positionNote: ""
}, {
  id: "110",
  type: "common",
  name: {
    en: "pink salmon",
    fr: "saumon rose à bosse",
    pt: "salmão-rosado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 7
  },
  lbs: {
    min: 4.41,
    max: 15.43
  },
  map: "great-lakes",
  positions: [{
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "111",
  type: "common",
  name: {
    en: "smallmouth bass",
    fr: "achigan à petite bouche",
    pt: "achigã-boca-pequena"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, false, false, false, false, false, true, true, true],
  kgs: {
    min: 1,
    max: 5.4
  },
  lbs: {
    min: 2.20,
    max: 11.90
  },
  map: "great-lakes",
  positions: [{
    x: 60,
    y: 15
  }],
  positionNote: ""
}, {
  id: "112",
  type: "common",
  name: {
    en: "round whitefish",
    fr: "ménomini rond",
    pt: "peixe branco redondo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 1,
    max: 2.7
  },
  lbs: {
    min: 2.20,
    max: 5.95
  },
  map: "great-lakes",
  positions: [{
    x: 60,
    y: 15
  }, {
    x: 75,
    y: 70
  }, {
    x: 15,
    y: 75
  }],
  positionNote: ""
}, {
  id: "113",
  type: "common",
  name: {
    en: "redear sunfish",
    fr: "crapet à oreilles rouges",
    pt: "poleiro do sol"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, false, false, false, false, false, false, false, false, true],
  kgs: {
    min: 0.1,
    max: 3
  },
  lbs: {
    min: 0.22,
    max: 6.61
  },
  map: "great-lakes",
  positions: [{
    x: 60,
    y: 15
  }],
  positionNote: ""
}, {
  id: "114",
  type: "common",
  name: {
    en: "channel catfish",
    fr: "barbue de rivière",
    pt: "bagre-americano"
  },
  difficulty: 0,
  attributes: [{
    shadow: [3]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 26
  },
  lbs: {
    min: 11.02,
    max: 57.32
  },
  map: "great-lakes",
  positions: [{
    x: 25,
    y: 75
  }],
  positionNote: ""
}, {
  id: "115",
  type: "common",
  name: {
    en: "bloater",
    fr: "bloater",
    pt: "inchado"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.5
  },
  lbs: {
    min: 0.22,
    max: 1.10
  },
  map: "great-lakes",
  positions: [{
    x: 25,
    y: 75
  }, {
    x: 40,
    y: 15
  }, {
    x: 30,
    y: 40
  }, {
    x: 90,
    y: 30
  }, {
    x: 70,
    y: 75
  }],
  positionNote: ""
}, {
  id: "116",
  type: "common",
  name: {
    en: "coho salmon",
    fr: "saumon coho",
    pt: "salmão-prateado"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, false, false, false, true, true, true, true, true, true, false],
  kgs: {
    min: 1,
    max: 15
  },
  lbs: {
    min: 2.20,
    max: 33.07
  },
  map: "great-lakes",
  positions: [{
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "117",
  type: "rare",
  name: {
    en: "chinook salmon",
    fr: "saumon royal",
    pt: "salmão-rei"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 5,
    max: 61
  },
  lbs: {
    min: 11.02,
    max: 134.48
  },
  map: "great-lakes",
  positions: [{
    x: 75,
    y: 55
  }],
  positionNote: ""
}, {
  id: "118",
  type: "rare",
  name: {
    en: "muskie",
    fr: "maskinongé",
    pt: "lùcio-almiscarado"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [false, true, true, true, true, true, true, true, false, false, false, false],
  kgs: {
    min: 2,
    max: 31
  },
  lbs: {
    min: 4.41,
    max: 68.34
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 15
  }, {
    x: 50,
    y: 75
  }, {
    x: 40,
    y: 45
  }, {
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "119",
  type: "rare",
  name: {
    en: "flathead catfish",
    fr: "poisson-chat à tête plate",
    pt: "peixe-gato amarelo"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [false, false, false, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 5,
    max: 55
  },
  lbs: {
    min: 11.02,
    max: 121.25
  },
  day: false,
  night: true,
  map: "great-lakes",
  positions: [{
    x: 45,
    y: 45
  }, {
    x: 85,
    y: 25
  }, {
    x: 15,
    y: 78
  }],
  positionNote: ""
}, {
  id: "120",
  type: "rare",
  name: {
    en: "lake trout",
    fr: "le touladi",
    pt: "truta de lago"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2, 3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, false, false, false, false, false, false, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 32
  },
  lbs: {
    min: 11.02,
    max: 70.55
  },
  map: "great-lakes",
  positions: [{
    x: 15,
    y: 80
  }, {
    x: 40,
    y: 40
  }],
  positionNote: ""
}, {
  id: "121",
  type: "epic",
  name: {
    en: "longnose gar",
    fr: "lépisosté osseux",
    pt: "lepisosteus"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 22
  },
  lbs: {
    min: 11.02,
    max: 48.50
  },
  map: "great-lakes",
  positions: [{
    x: 80,
    y: 10
  }],
  positionNote: ""
}, {
  id: "122",
  type: "epic",
  name: {
    en: "american eel",
    fr: "anguille d'amérique",
    pt: "enguia-americana"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, false, false, true],
  kgs: {
    min: 2,
    max: 7.3
  },
  lbs: {
    min: 4.41,
    max: 16.09
  },
  map: "great-lakes",
  positions: [{
    x: 90,
    y: 65
  }],
  positionNote: ""
}, {
  id: "123",
  type: "epic",
  name: {
    en: "goldfish",
    fr: "poisson rouge",
    pt: "quinguio"
  },
  difficulty: 1,
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.7
  },
  lbs: {
    min: 0.22,
    max: 1.54
  },
  map: "great-lakes",
  positions: [{
    x: 50,
    y: 70
  }],
  positionNote: ""
}, {
  id: "124",
  type: "epic",
  name: {
    en: "lake sturgeon",
    fr: "esturgeon jaune",
    pt: "esturjão de lago"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [false, false, true, true, true, true, true, true, false, false, false, false],
  kgs: {
    min: 5,
    max: 125
  },
  lbs: {
    min: 11.02,
    max: 275.58
  },
  map: "great-lakes",
  positions: [{
    x: 40,
    y: 15
  }],
  positionNote: ""
}, {
  id: "125",
  type: "monster",
  name: {
    en: "bessie",
    fr: "bessie",
    pt: "bessie"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, false, false, true, true, false, false, true, true, false, true],
  kgs: {
    min: 200,
    max: 500
  },
  lbs: {
    min: 440.92,
    max: 1102.31
  },
  map: "great-lakes",
  positions: [{
    x: 70,
    y: 90
  }, {
    x: 75,
    y: 80
  }, {
    x: 75,
    y: 65
  }, {
    x: 90,
    y: 65
  }],
  positionNote: "MONSTER<br>Spot rotation: it changes every day.<br>Try monster baits to find the bubbles, then cast and wait into the bubbles.<br>If you don't have any monster baits, try cast and reel and wait (and be patient)."
}];

/***/ }),

/***/ "./src/data/fish/paradise.js":
/*!***********************************!*\
  !*** ./src/data/fish/paradise.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paradiseFish": () => (/* binding */ paradiseFish)
/* harmony export */ });
const paradiseFish = [{
  id: "01",
  type: "common",
  name: {
    en: "bluefish",
    fr: "tassergal",
    pt: "anchova"
  },
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 3,
    max: 14.4
  },
  lbs: {
    min: 6.61,
    max: 31.75
  },
  map: "paradise",
  positions: [{
    x: 30,
    y: 50
  }],
  positionNote: ""
}, {
  id: "02",
  type: "common",
  name: {
    en: "spot-fin porcupinefish",
    fr: "poisson porc-épic",
    pt: "peixe-ouriço"
  },
  difficulty: 0,
  attributes: [{
    shadow: [0]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 2.8
  },
  lbs: {
    min: 2.2,
    max: 6.17
  },
  map: "paradise",
  positions: [{
    x: 50,
    y: 75
  }],
  positionNote: ""
}, {
  id: "03",
  type: "common",
  name: {
    en: "snubnose pompano",
    fr: "pompaneau lune",
    pt: "pampo"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 9
  },
  lbs: {
    min: 2.2,
    max: 19.84
  },
  map: "paradise",
  positions: [{
    x: 60,
    y: 60
  }, {
    x: 75,
    y: 50
  }, {
    x: 20,
    y: 75
  }, {
    x: 50,
    y: 75
  }],
  positionNote: ""
}, {
  id: "04",
  type: "common",
  trusted: true,
  name: {
    en: "largetooth flounder",
    fr: "flet",
    pt: "linguando grande"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 3
  },
  lbs: {
    min: 2.2,
    max: 6.61
  },
  map: "paradise",
  positions: [{
    x: 75,
    y: 50
  }],
  shadow: [1, 2],
  rods: [0, 1, 2, 3, 4, 5],
  positionNote: ""
}, {
  id: "05",
  type: "common",
  trusted: true,
  name: {
    en: "blue trevally",
    fr: "carangue rayée",
    pt: "xaréu gigante"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "paradise",
  positions: [{
    x: 50,
    y: 75
  }, {
    x: 75,
    y: 50
  }],
  positionNote: ""
}, {
  id: "06",
  type: "common",
  trusted: true,
  name: {
    en: "bonefish",
    fr: "bonefish",
    pt: "ubarana-focinho-de-rato"
  },
  difficulty: 0,
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 10
  },
  lbs: {
    min: 2.2,
    max: 22.05
  },
  map: "paradise",
  positions: [{
    x: 30,
    y: 45
  }, {
    x: 75,
    y: 10
  }, {
    x: 90,
    y: 15
  }, {
    x: 90,
    y: 85
  }],
  shadow: [2],
  rods: [0, 1, 2, 3, 4, 5],
  positionNote: ""
}, {
  id: "07",
  type: "common",
  trusted: true,
  name: {
    en: "longtail tuna",
    fr: "thon tonggol",
    pt: "atum-do-indico"
  },
  difficulty: 0,
  attributes: [{
    shadow: [1, 2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 5,
    max: 35.9
  },
  lbs: {
    min: 11.02,
    max: 79.15
  },
  map: "paradise",
  positions: [{
    x: 50,
    y: 25
  }],
  positionNote: ""
}, {
  id: "08",
  type: "common",
  trusted: true,
  name: {
    en: "clownfish",
    fr: "poisson-clown du pacific",
    pt: "peixe-palhaço-percula"
  },
  difficulty: 0,
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.01,
    max: 0.05
  },
  lbs: {
    min: 0.02,
    max: 0.11
  },
  map: "paradise",
  positions: [{
    x: 70,
    y: 70
  }],
  positionNote: ""
}, {
  id: "09",
  type: "rare",
  trusted: true,
  name: {
    en: "green humphead parrotfish",
    fr: "poisson-perroquet à bosse",
    pt: "peixe-papagaio"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 43
  },
  lbs: {
    min: 4.41,
    max: 94.8
  },
  day: true,
  night: false,
  map: "paradise",
  positions: [{
    x: 70,
    y: 70
  }, {
    x: 50,
    y: 75
  }, {
    x: 75,
    y: 50
  }, {
    x: 50,
    y: 20
  }, {
    x: 20,
    y: 80
  }, {
    x: 20,
    y: 10
  }],
  positionNote: ""
}, {
  id: "010",
  type: "rare",
  name: {
    en: "white-tuna",
    fr: "thon à dents de chien",
    pt: "atum branco"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 40,
    max: 131
  },
  lbs: {
    min: 88.18,
    max: 288.81
  },
  day: true,
  night: true,
  map: "paradise",
  positions: [{
    x: 50,
    y: 25
  }],
  positionNote: ""
}, {
  id: "011",
  type: "epic",
  name: {
    en: "pelagic stingray",
    fr: "pastenague violette",
    pt: "arraia pelàgica"
  },
  difficulty: 1,
  attributes: [{
    shadow: [3]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 4,
    max: 49
  },
  lbs: {
    min: 8.82,
    max: 108.03
  },
  map: "paradise",
  positions: [{
    x: 15,
    y: 15
  }, {
    x: 15,
    y: 75
  }, {
    x: 90,
    y: 15
  }],
  shadow: [3],
  rods: [2, 3, 5],
  positionNote: ""
}, {
  id: "012",
  type: "epic",
  trusted: true,
  name: {
    en: "pacific footballfish",
    fr: "poisson-football",
    pt: "peixe-futebol de pacifico"
  },
  difficulty: 1,
  attributes: [{
    shadow: [2]
  }, {
    rods: [1, 2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 2
  },
  lbs: {
    min: 2.2,
    max: 4.41
  },
  map: "paradise",
  positions: [{
    x: 20,
    y: 70
  }, {
    x: 90,
    y: 10
  }, {
    x: 20,
    y: 15
  }],
  positionNote: ""
}, {
  id: "013",
  type: "monster",
  trusted: true,
  name: {
    en: "shredder",
    fr: "shredder",
    pt: "shredder"
  },
  difficulty: 2,
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 150,
    max: 200
  },
  lbs: {
    min: 330.69,
    max: 440.92
  },
  map: "paradise",
  positions: [{
    spot: "Spot 1 - North of Garbage Patch",
    x: 15,
    y: 15
  }, {
    spot: "Spot 2 - Bluefish Point",
    x: 15,
    y: 45
  }, {
    spot: "Spot 3 - Dark Water",
    x: 15,
    y: 75
  }],
  shadow: [],
  rods: [2, 3, 5],
  positionNote: "MONSTER<br>Spot rotation: it changes every day.<br>Try monster baits to find the bubbles, then cast and wait into the bubbles.<br>If you don't have any monster baits, try cast and reel and wait (and be patient)."
}];

/***/ }),

/***/ "./src/data/fish/scotland.js":
/*!***********************************!*\
  !*** ./src/data/fish/scotland.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scotlandFish": () => (/* binding */ scotlandFish)
/* harmony export */ });
const scotlandFish = [{
  id: "54",
  type: "common",
  name: {
    en: "Carp",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 2,
    max: 40
  },
  lbs: {
    min: 4.41,
    max: 88.18
  },
  map: "scotland",
  positions: [{
    x: 50,
    y: 90
  }, {
    x: 20,
    y: 77
  }, {
    x: 20,
    y: 90
  }],
  positionNote: ""
}, {
  id: "522",
  type: "common",
  name: {
    en: "Sea Trout",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [false, false, false, true, true, true, true, true, true, true, true, false],
  kgs: {
    min: 15,
    max: 50
  },
  lbs: {
    min: 33.07,
    max: 110.23
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 90
  }],
  positionNote: ""
}, {
  id: "513",
  type: "common",
  name: {
    en: "Grey Trout",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, false, false, false, false, false, true, true, true, true, true, true],
  kgs: {
    min: 10,
    max: 32
  },
  lbs: {
    min: 22.05,
    max: 70.55
  },
  map: "scotland",
  positions: [{
    x: 90,
    y: 40
  }, {
    x: 10,
    y: 65
  }],
  positionNote: ""
}, {
  id: "525",
  type: "common",
  name: {
    en: "Twaite Shad",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.3,
    max: 1.5
  },
  lbs: {
    min: 0.66,
    max: 3.31
  },
  map: "scotland",
  positions: [{
    x: 65,
    y: 90
  }],
  positionNote: ""
}, {
  id: "517",
  type: "common",
  name: {
    en: "Powan",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 4,
    max: 11
  },
  lbs: {
    min: 8.82,
    max: 24.25
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 10
  }],
  positionNote: ""
}, {
  id: "512",
  type: "common",
  name: {
    en: "Freshwater Bream",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [false, false, true, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 1,
    max: 6
  },
  lbs: {
    min: 2.20,
    max: 13.23
  },
  map: "scotland",
  positions: [{
    x: 85,
    y: 60
  }],
  positionNote: ""
}, {
  id: "524",
  type: "common",
  name: {
    en: "Three-Spined Stickleback",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.3
  },
  lbs: {
    min: 0.22,
    max: 0.66
  },
  map: "scotland",
  positions: [{
    x: 87,
    y: 38
  }],
  positionNote: ""
}, {
  id: "53",
  type: "common",
  name: {
    en: "Chub",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, false, false, false, false, true, true, true, true],
  kgs: {
    min: 1,
    max: 8
  },
  lbs: {
    min: 2.20,
    max: 17.64
  },
  map: "scotland",
  positions: [{
    x: 20,
    y: 45
  }],
  positionNote: ""
}, {
  id: "523",
  type: "common",
  name: {
    en: "Tench",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [false, false, false, true, true, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 7.5
  },
  lbs: {
    min: 4.41,
    max: 16.53
  },
  map: "scotland",
  positions: [{
    x: 87,
    y: 38
  }],
  positionNote: ""
}, {
  id: "51",
  type: "common",
  name: {
    en: "Allis Shad",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 4
  },
  lbs: {
    min: 2.20,
    max: 8.82
  },
  map: "scotland",
  positions: [{
    x: 65,
    y: 10
  }],
  positionNote: ""
}, {
  id: "516",
  type: "common",
  name: {
    en: "Northern Pike",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [false, false, true, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 9,
    max: 28
  },
  lbs: {
    min: 19.84,
    max: 61.73
  },
  map: "scotland",
  positions: [{
    x: 85,
    y: 60
  }],
  positionNote: ""
}, {
  id: "518",
  type: "common",
  name: {
    en: "Rainbow Trout",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, false, false, false, false, true, true, true, true],
  kgs: {
    min: 9,
    max: 25
  },
  lbs: {
    min: 19.84,
    max: 55.12
  },
  map: "scotland",
  positions: [{
    x: 65,
    y: 10
  }, {
    x: 65,
    y: 90
  }],
  positionNote: ""
}, {
  id: "514",
  type: "common",
  name: {
    en: "Gudgeon",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.2
  },
  lbs: {
    min: 0.22,
    max: 0.44
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 10
  }],
  positionNote: ""
}, {
  id: "526",
  type: "common",
  name: {
    en: "Vendace",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.2,
    max: 1
  },
  lbs: {
    min: 0.44,
    max: 2.20
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 10
  }],
  positionNote: ""
}, {
  id: "519",
  type: "common",
  name: {
    en: "Roach",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.2,
    max: 1.8
  },
  lbs: {
    min: 0.44,
    max: 3.97
  },
  map: "scotland",
  positions: [{
    x: 21,
    y: 43
  }],
  positionNote: ""
}, {
  id: "520",
  type: "common",
  name: {
    en: "Rudd",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.4,
    max: 1.2
  },
  lbs: {
    min: 0.88,
    max: 2.65
  },
  map: "scotland",
  positions: [{
    x: 21,
    y: 43
  }],
  positionNote: ""
}, {
  id: "515",
  type: "common",
  name: {
    en: "Lamprey",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.5,
    max: 2.5
  },
  lbs: {
    min: 1.10,
    max: 5.51
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 10
  }],
  positionNote: ""
}, {
  id: "59",
  type: "common",
  name: {
    en: "European Perch",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 4.8
  },
  lbs: {
    min: 2.20,
    max: 10.58
  },
  map: "scotland",
  positions: [{
    x: 20,
    y: 80
  }, {
    x: 40,
    y: 50
  }, {
    x: 30,
    y: 60
  }],
  positionNote: ""
}, {
  id: "56",
  type: "common",
  name: {
    en: "Dace",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [0, 1]
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [false, true, true, true, true, true, false, false, false, false, false, false],
  kgs: {
    min: 0.2,
    max: 1.0
  },
  lbs: {
    min: 0.44,
    max: 2.2
  },
  map: "scotland",
  positions: [{
    x: 20,
    y: 77
  }],
  positionNote: ""
}, {
  id: "510",
  type: "common",
  name: {
    en: "European Smelt",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [0, 1, 2, 3, 4, 5]
  }, {
    moment: [1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 0.1,
    max: 0.17
  },
  lbs: {
    min: 0.22,
    max: 0.37
  },
  map: "scotland",
  positions: [{
    x: 65,
    y: 10
  }],
  positionNote: ""
}, {
  id: "57",
  type: "rare",
  name: {
    en: "European Eel",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  difficulty: 1,
  seasons: [false, false, false, false, false, true, true, true, true, false, false, false],
  kgs: {
    min: 2,
    max: 8
  },
  lbs: {
    min: 4.41,
    max: 17.64
  },
  map: "scotland",
  positions: [{
    x: 90,
    y: 20
  }, {
    x: 90,
    y: 50
  }],
  positionNote: ""
}, {
  id: "58",
  type: "rare",
  name: {
    en: "European Grayling",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  difficulty: 1,
  seasons: [false, false, false, false, false, false, false, false, true, true, true, true],
  kgs: {
    min: 1,
    max: 6.7
  },
  lbs: {
    min: 2.20,
    max: 14.77
  },
  map: "scotland",
  positions: [{
    x: 90,
    y: 40
  }, {
    x: 10,
    y: 65
  }, {
    x: 75,
    y: 75
  }],
  positionNote: ""
}, {
  id: "511",
  type: "rare",
  name: {
    en: "European Whitefish",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [2]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 1,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 1,
    max: 10
  },
  lbs: {
    min: 2.20,
    max: 22.05
  },
  map: "scotland",
  positions: [{
    x: 85,
    y: 45
  }],
  positionNote: ""
}, {
  id: "52",
  type: "epic",
  name: {
    en: "Bull Trout",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 1,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 4,
    max: 14.5
  },
  lbs: {
    min: 8.82,
    max: 31.97
  },
  map: "scotland",
  positions: [{
    x: 90,
    y: 50
  }],
  positionNote: ""
}, {
  id: "521",
  type: "epic",
  name: {
    en: "Scottish Salmon",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0]
  }],
  difficulty: 2,
  seasons: [false, false, false, true, true, true, true, true, true, true, false, false],
  kgs: {
    min: 12,
    max: 46
  },
  lbs: {
    min: 24.46,
    max: 101.41
  },
  map: "scotland",
  positions: [{
    x: 40,
    y: 90
  }],
  positionNote: ""
}, {
  id: "55",
  type: "epic",
  name: {
    en: "Common Sturgeon",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: [3, 4]
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [1]
  }],
  difficulty: 1,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 112,
    max: 400
  },
  lbs: {
    min: 246.92,
    max: 881.85
  },
  map: "scotland",
  positions: [{
    x: 57,
    y: 15
  }],
  positionNote: ""
}, {
  id: "527",
  type: "monster",
  name: {
    en: "Nessie",
    fr: "unknow",
    pt: "unkonw"
  },
  attributes: [{
    shadow: []
  }, {
    rods: [2, 3, 5]
  }, {
    moment: [0, 1]
  }],
  difficulty: 0,
  seasons: [true, true, true, true, true, true, true, true, true, true, true, true],
  kgs: {
    min: 250,
    max: 350
  },
  lbs: {
    min: 551.16,
    max: 771.62
  },
  map: "scotland",
  positions: [{
    x: 57,
    y: 15
  }],
  positionNote: ""
}];

/***/ }),

/***/ "./src/module.js":
/*!***********************!*\
  !*** ./src/module.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createList": () => (/* binding */ createList)
/* harmony export */ });
function createList(fish, language) {
  if (!document.querySelector(`#list-${fish.map}`)) {
    const listContainer = document.createElement("div");
    listContainer.setAttribute("class", "list-container hidden-list");
    listContainer.setAttribute("id", `list-${fish.map}`);
    document.querySelector("#fish-list").appendChild(listContainer);
    const listTitle = document.createElement("div");
    listTitle.setAttribute("class", "is-flex my-2 is-align-items-center list-title");
    listContainer.appendChild(listTitle);
    const xhr = new XMLHttpRequest();
    const url = `images/${fish.map}.svg`;
    xhr.open("GET", url, true);
    xhr.setRequestHeader("Content-Type", "image/svg+xml");
    xhr.onload = function () {
      if (xhr.status === 200) {
        const svgElement = xhr.responseXML.documentElement;
        listTitle.appendChild(svgElement);
      }
    };
    xhr.send();
    const iconArrow = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    iconArrow.setAttribute("class", "icon-arrow");
    iconArrow.setAttribute("width", "24");
    iconArrow.setAttribute("height", "24");
    iconArrow.setAttribute("viewBox", "0 0 24 24");
    listTitle.appendChild(iconArrow);
    const pathArrow = document.createElementNS("http://www.w3.org/2000/svg", "path");
    pathArrow.setAttribute("fill", "currentColor");
    pathArrow.setAttribute("d", "M16.59 8.59004L12 13.17L7.41 8.59004L6 10L12 16L18 10L16.59 8.59004Z");
    iconArrow.appendChild(pathArrow);
    const titleText = document.createElement("span");
    titleText.innerHTML = fish.map;
    listTitle.appendChild(titleText);
    const innerList = document.createElement("div");
    innerList.setAttribute("class", "inner-list");
    listContainer.appendChild(innerList);
  }
  const item = document.createElement("div");
  item.setAttribute("class", `item is-flex is-align-items-center py-1 px-4 map-${fish.map} ${fish.type}`);
  item.setAttribute("data-id", fish.id);
  item.setAttribute("data-season", fish.seasons[new Date().getMonth()] ? "in" : "out");
  if (fish.inprogress) {
    item.setAttribute("style", "pointer-events:none;background-color: #191919;color: #853535;");
  }
  const figure = document.createElement("figure");
  figure.setAttribute("class", "image is-24x24 mr-3");
  item.appendChild(figure);
  const img = document.createElement("img");
  img.setAttribute("src", `./images/${fish.id}.png`);
  img.setAttribute("class", "is-rounded");
  figure.appendChild(img);
  const p = document.createElement("p");
  p.setAttribute("class", "is-size-6 fishp");
  p.innerHTML = fish.name[language] ? fish.name[language] : fish.name.en;
  item.appendChild(p);
  document.querySelector(`#list-${fish.map} .inner-list`).appendChild(item);
}

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/bulma/bulma.sass":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/bulma/bulma.sass ***!
  \********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@charset \"UTF-8\";\n/*! bulma.io v0.9.4 | MIT License | github.com/jgthms/bulma */\n/* Bulma Utilities */\n.pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis, .file-cta,\n.file-name, .select select, .textarea, .input, .button {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  align-items: center;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  box-shadow: none;\n  display: inline-flex;\n  font-size: 1rem;\n  height: 2.5em;\n  justify-content: flex-start;\n  line-height: 1.5;\n  padding-bottom: calc(0.5em - 1px);\n  padding-left: calc(0.75em - 1px);\n  padding-right: calc(0.75em - 1px);\n  padding-top: calc(0.5em - 1px);\n  position: relative;\n  vertical-align: top;\n}\n.pagination-previous:focus,\n.pagination-next:focus,\n.pagination-link:focus,\n.pagination-ellipsis:focus, .file-cta:focus,\n.file-name:focus, .select select:focus, .textarea:focus, .input:focus, .button:focus, .is-focused.pagination-previous,\n.is-focused.pagination-next,\n.is-focused.pagination-link,\n.is-focused.pagination-ellipsis, .is-focused.file-cta,\n.is-focused.file-name, .select select.is-focused, .is-focused.textarea, .is-focused.input, .is-focused.button, .pagination-previous:active,\n.pagination-next:active,\n.pagination-link:active,\n.pagination-ellipsis:active, .file-cta:active,\n.file-name:active, .select select:active, .textarea:active, .input:active, .button:active, .is-active.pagination-previous,\n.is-active.pagination-next,\n.is-active.pagination-link,\n.is-active.pagination-ellipsis, .is-active.file-cta,\n.is-active.file-name, .select select.is-active, .is-active.textarea, .is-active.input, .is-active.button {\n  outline: none;\n}\n[disabled].pagination-previous,\n[disabled].pagination-next,\n[disabled].pagination-link,\n[disabled].pagination-ellipsis, [disabled].file-cta,\n[disabled].file-name, .select select[disabled], [disabled].textarea, [disabled].input, [disabled].button, fieldset[disabled] .pagination-previous,\nfieldset[disabled] .pagination-next,\nfieldset[disabled] .pagination-link,\nfieldset[disabled] .pagination-ellipsis, fieldset[disabled] .file-cta,\nfieldset[disabled] .file-name, fieldset[disabled] .select select, .select fieldset[disabled] select, fieldset[disabled] .textarea, fieldset[disabled] .input, fieldset[disabled] .button {\n  cursor: not-allowed;\n}\n\n.is-unselectable, .tabs, .pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis, .breadcrumb, .file, .button {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.navbar-link:not(.is-arrowless)::after, .select:not(.is-multiple):not(.is-loading)::after {\n  border: 3px solid transparent;\n  border-radius: 2px;\n  border-right: 0;\n  border-top: 0;\n  content: \" \";\n  display: block;\n  height: 0.625em;\n  margin-top: -0.4375em;\n  pointer-events: none;\n  position: absolute;\n  top: 50%;\n  transform: rotate(-45deg);\n  transform-origin: center;\n  width: 0.625em;\n}\n\n.tabs:not(:last-child), .pagination:not(:last-child), .message:not(:last-child), .level:not(:last-child), .breadcrumb:not(:last-child), .block:not(:last-child), .title:not(:last-child),\n.subtitle:not(:last-child), .table-container:not(:last-child), .table:not(:last-child), .progress:not(:last-child), .notification:not(:last-child), .content:not(:last-child), .box:not(:last-child) {\n  margin-bottom: 1.5rem;\n}\n\n.modal-close, .delete {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  background-color: rgba(10, 10, 10, 0.2);\n  border: none;\n  border-radius: 9999px;\n  cursor: pointer;\n  pointer-events: auto;\n  display: inline-block;\n  flex-grow: 0;\n  flex-shrink: 0;\n  font-size: 0;\n  height: 20px;\n  max-height: 20px;\n  max-width: 20px;\n  min-height: 20px;\n  min-width: 20px;\n  outline: none;\n  position: relative;\n  vertical-align: top;\n  width: 20px;\n}\n.modal-close::before, .delete::before, .modal-close::after, .delete::after {\n  background-color: hsl(0, 0%, 100%);\n  content: \"\";\n  display: block;\n  left: 50%;\n  position: absolute;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%) rotate(45deg);\n  transform-origin: center center;\n}\n.modal-close::before, .delete::before {\n  height: 2px;\n  width: 50%;\n}\n.modal-close::after, .delete::after {\n  height: 50%;\n  width: 2px;\n}\n.modal-close:hover, .delete:hover, .modal-close:focus, .delete:focus {\n  background-color: rgba(10, 10, 10, 0.3);\n}\n.modal-close:active, .delete:active {\n  background-color: rgba(10, 10, 10, 0.4);\n}\n.is-small.modal-close, .is-small.delete {\n  height: 16px;\n  max-height: 16px;\n  max-width: 16px;\n  min-height: 16px;\n  min-width: 16px;\n  width: 16px;\n}\n.is-medium.modal-close, .is-medium.delete {\n  height: 24px;\n  max-height: 24px;\n  max-width: 24px;\n  min-height: 24px;\n  min-width: 24px;\n  width: 24px;\n}\n.is-large.modal-close, .is-large.delete {\n  height: 32px;\n  max-height: 32px;\n  max-width: 32px;\n  min-height: 32px;\n  min-width: 32px;\n  width: 32px;\n}\n\n.control.is-loading::after, .select.is-loading::after, .loader, .button.is-loading::after {\n  animation: spinAround 500ms infinite linear;\n  border: 2px solid hsl(0, 0%, 86%);\n  border-radius: 9999px;\n  border-right-color: transparent;\n  border-top-color: transparent;\n  content: \"\";\n  display: block;\n  height: 1em;\n  position: relative;\n  width: 1em;\n}\n\n.hero-video, .is-overlay, .modal-background, .modal, .image.is-square img,\n.image.is-square .has-ratio, .image.is-1by1 img,\n.image.is-1by1 .has-ratio, .image.is-5by4 img,\n.image.is-5by4 .has-ratio, .image.is-4by3 img,\n.image.is-4by3 .has-ratio, .image.is-3by2 img,\n.image.is-3by2 .has-ratio, .image.is-5by3 img,\n.image.is-5by3 .has-ratio, .image.is-16by9 img,\n.image.is-16by9 .has-ratio, .image.is-2by1 img,\n.image.is-2by1 .has-ratio, .image.is-3by1 img,\n.image.is-3by1 .has-ratio, .image.is-4by5 img,\n.image.is-4by5 .has-ratio, .image.is-3by4 img,\n.image.is-3by4 .has-ratio, .image.is-2by3 img,\n.image.is-2by3 .has-ratio, .image.is-3by5 img,\n.image.is-3by5 .has-ratio, .image.is-9by16 img,\n.image.is-9by16 .has-ratio, .image.is-1by2 img,\n.image.is-1by2 .has-ratio, .image.is-1by3 img,\n.image.is-1by3 .has-ratio {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.navbar-burger {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n  background: none;\n  border: none;\n  color: currentColor;\n  font-family: inherit;\n  font-size: 1em;\n  margin: 0;\n  padding: 0;\n}\n\n/* Bulma Base */ /*! minireset.css v0.0.6 | MIT License | github.com/jgthms/minireset.css */\nhtml,\nbody,\np,\nol,\nul,\nli,\ndl,\ndt,\ndd,\nblockquote,\nfigure,\nfieldset,\nlegend,\ntextarea,\npre,\niframe,\nhr,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n  padding: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: 100%;\n  font-weight: normal;\n}\n\nul {\n  list-style: none;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  margin: 0;\n}\n\nhtml {\n  box-sizing: border-box;\n}\n\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n\nimg,\nvideo {\n  height: auto;\n  max-width: 100%;\n}\n\niframe {\n  border: 0;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd,\nth {\n  padding: 0;\n}\ntd:not([align]),\nth:not([align]) {\n  text-align: inherit;\n}\n\nhtml {\n  background-color: hsl(0, 0%, 100%);\n  font-size: 16px;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  min-width: 300px;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  text-rendering: optimizeLegibility;\n  text-size-adjust: 100%;\n}\n\narticle,\naside,\nfigure,\nfooter,\nheader,\nhgroup,\nsection {\n  display: block;\n}\n\nbody,\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n}\n\ncode,\npre {\n  -moz-osx-font-smoothing: auto;\n  -webkit-font-smoothing: auto;\n  font-family: monospace;\n}\n\nbody {\n  color: hsl(0, 0%, 29%);\n  font-size: 1em;\n  font-weight: 400;\n  line-height: 1.5;\n}\n\na {\n  color: hsl(229, 53%, 53%);\n  cursor: pointer;\n  text-decoration: none;\n}\na strong {\n  color: currentColor;\n}\na:hover {\n  color: hsl(0, 0%, 21%);\n}\n\ncode {\n  background-color: hsl(0, 0%, 96%);\n  color: #da1039;\n  font-size: 0.875em;\n  font-weight: normal;\n  padding: 0.25em 0.5em 0.25em;\n}\n\nhr {\n  background-color: hsl(0, 0%, 96%);\n  border: none;\n  display: block;\n  height: 2px;\n  margin: 1.5rem 0;\n}\n\nimg {\n  height: auto;\n  max-width: 100%;\n}\n\ninput[type=checkbox],\ninput[type=radio] {\n  vertical-align: baseline;\n}\n\nsmall {\n  font-size: 0.875em;\n}\n\nspan {\n  font-style: inherit;\n  font-weight: inherit;\n}\n\nstrong {\n  color: hsl(0, 0%, 21%);\n  font-weight: 700;\n}\n\nfieldset {\n  border: none;\n}\n\npre {\n  -webkit-overflow-scrolling: touch;\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 29%);\n  font-size: 0.875em;\n  overflow-x: auto;\n  padding: 1.25rem 1.5rem;\n  white-space: pre;\n  word-wrap: normal;\n}\npre code {\n  background-color: transparent;\n  color: currentColor;\n  font-size: 1em;\n  padding: 0;\n}\n\ntable td,\ntable th {\n  vertical-align: top;\n}\ntable td:not([align]),\ntable th:not([align]) {\n  text-align: inherit;\n}\ntable th {\n  color: hsl(0, 0%, 21%);\n}\n\n@keyframes spinAround {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(359deg);\n  }\n}\n/* Bulma Elements */\n.box {\n  background-color: hsl(0, 0%, 100%);\n  border-radius: 6px;\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\n  color: hsl(0, 0%, 29%);\n  display: block;\n  padding: 1.25rem;\n}\n\na.box:hover, a.box:focus {\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0 0 1px hsl(229, 53%, 53%);\n}\na.box:active {\n  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.2), 0 0 0 1px hsl(229, 53%, 53%);\n}\n\n.button {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 86%);\n  border-width: 1px;\n  color: hsl(0, 0%, 21%);\n  cursor: pointer;\n  justify-content: center;\n  padding-bottom: calc(0.5em - 1px);\n  padding-left: 1em;\n  padding-right: 1em;\n  padding-top: calc(0.5em - 1px);\n  text-align: center;\n  white-space: nowrap;\n}\n.button strong {\n  color: inherit;\n}\n.button .icon, .button .icon.is-small, .button .icon.is-medium, .button .icon.is-large {\n  height: 1.5em;\n  width: 1.5em;\n}\n.button .icon:first-child:not(:last-child) {\n  margin-left: calc(-0.5em - 1px);\n  margin-right: 0.25em;\n}\n.button .icon:last-child:not(:first-child) {\n  margin-left: 0.25em;\n  margin-right: calc(-0.5em - 1px);\n}\n.button .icon:first-child:last-child {\n  margin-left: calc(-0.5em - 1px);\n  margin-right: calc(-0.5em - 1px);\n}\n.button:hover, .button.is-hovered {\n  border-color: hsl(0, 0%, 71%);\n  color: hsl(0, 0%, 21%);\n}\n.button:focus, .button.is-focused {\n  border-color: hsl(229, 53%, 53%);\n  color: hsl(0, 0%, 21%);\n}\n.button:focus:not(:active), .button.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.button:active, .button.is-active {\n  border-color: hsl(0, 0%, 29%);\n  color: hsl(0, 0%, 21%);\n}\n.button.is-text {\n  background-color: transparent;\n  border-color: transparent;\n  color: hsl(0, 0%, 29%);\n  text-decoration: underline;\n}\n.button.is-text:hover, .button.is-text.is-hovered, .button.is-text:focus, .button.is-text.is-focused {\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 21%);\n}\n.button.is-text:active, .button.is-text.is-active {\n  background-color: #e8e8e8;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-text[disabled], fieldset[disabled] .button.is-text {\n  background-color: transparent;\n  border-color: transparent;\n  box-shadow: none;\n}\n.button.is-ghost {\n  background: none;\n  border-color: transparent;\n  color: hsl(229, 53%, 53%);\n  text-decoration: none;\n}\n.button.is-ghost:hover, .button.is-ghost.is-hovered {\n  color: hsl(229, 53%, 53%);\n  text-decoration: underline;\n}\n.button.is-white {\n  background-color: hsl(0, 0%, 100%);\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white:hover, .button.is-white.is-hovered {\n  background-color: #f9f9f9;\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white:focus, .button.is-white.is-focused {\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white:focus:not(:active), .button.is-white.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25);\n}\n.button.is-white:active, .button.is-white.is-active {\n  background-color: #f2f2f2;\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white[disabled], fieldset[disabled] .button.is-white {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 100%);\n  box-shadow: none;\n}\n.button.is-white.is-inverted {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-inverted:hover, .button.is-white.is-inverted.is-hovered {\n  background-color: black;\n}\n.button.is-white.is-inverted[disabled], fieldset[disabled] .button.is-white.is-inverted {\n  background-color: hsl(0, 0%, 4%);\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 4%) hsl(0, 0%, 4%) !important;\n}\n.button.is-white.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-outlined:hover, .button.is-white.is-outlined.is-hovered, .button.is-white.is-outlined:focus, .button.is-white.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 100%) hsl(0, 0%, 100%) !important;\n}\n.button.is-white.is-outlined.is-loading:hover::after, .button.is-white.is-outlined.is-loading.is-hovered::after, .button.is-white.is-outlined.is-loading:focus::after, .button.is-white.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 4%) hsl(0, 0%, 4%) !important;\n}\n.button.is-white.is-outlined[disabled], fieldset[disabled] .button.is-white.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 100%);\n  box-shadow: none;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-white.is-inverted.is-outlined:hover, .button.is-white.is-inverted.is-outlined.is-hovered, .button.is-white.is-inverted.is-outlined:focus, .button.is-white.is-inverted.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-white.is-inverted.is-outlined.is-loading:hover::after, .button.is-white.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-white.is-inverted.is-outlined.is-loading:focus::after, .button.is-white.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 100%) hsl(0, 0%, 100%) !important;\n}\n.button.is-white.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-white.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 4%);\n  box-shadow: none;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black {\n  background-color: hsl(0, 0%, 4%);\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black:hover, .button.is-black.is-hovered {\n  background-color: #040404;\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black:focus, .button.is-black.is-focused {\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black:focus:not(:active), .button.is-black.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25);\n}\n.button.is-black:active, .button.is-black.is-active {\n  background-color: black;\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black[disabled], fieldset[disabled] .button.is-black {\n  background-color: hsl(0, 0%, 4%);\n  border-color: hsl(0, 0%, 4%);\n  box-shadow: none;\n}\n.button.is-black.is-inverted {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-inverted:hover, .button.is-black.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-black.is-inverted[disabled], fieldset[disabled] .button.is-black.is-inverted {\n  background-color: hsl(0, 0%, 100%);\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 100%) hsl(0, 0%, 100%) !important;\n}\n.button.is-black.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-outlined:hover, .button.is-black.is-outlined.is-hovered, .button.is-black.is-outlined:focus, .button.is-black.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 4%);\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 4%) hsl(0, 0%, 4%) !important;\n}\n.button.is-black.is-outlined.is-loading:hover::after, .button.is-black.is-outlined.is-loading.is-hovered::after, .button.is-black.is-outlined.is-loading:focus::after, .button.is-black.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 100%) hsl(0, 0%, 100%) !important;\n}\n.button.is-black.is-outlined[disabled], fieldset[disabled] .button.is-black.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 4%);\n  box-shadow: none;\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 100%);\n}\n.button.is-black.is-inverted.is-outlined:hover, .button.is-black.is-inverted.is-outlined.is-hovered, .button.is-black.is-inverted.is-outlined:focus, .button.is-black.is-inverted.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.button.is-black.is-inverted.is-outlined.is-loading:hover::after, .button.is-black.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-black.is-inverted.is-outlined.is-loading:focus::after, .button.is-black.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 4%) hsl(0, 0%, 4%) !important;\n}\n.button.is-black.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-black.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 100%);\n  box-shadow: none;\n  color: hsl(0, 0%, 100%);\n}\n.button.is-light {\n  background-color: hsl(0, 0%, 96%);\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light:hover, .button.is-light.is-hovered {\n  background-color: #eeeeee;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light:focus, .button.is-light.is-focused {\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light:focus:not(:active), .button.is-light.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25);\n}\n.button.is-light:active, .button.is-light.is-active {\n  background-color: #e8e8e8;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light[disabled], fieldset[disabled] .button.is-light {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 96%);\n  box-shadow: none;\n}\n.button.is-light.is-inverted {\n  background-color: rgba(0, 0, 0, 0.7);\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-inverted:hover, .button.is-light.is-inverted.is-hovered {\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light.is-inverted[disabled], fieldset[disabled] .button.is-light.is-inverted {\n  background-color: rgba(0, 0, 0, 0.7);\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-loading::after {\n  border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;\n}\n.button.is-light.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-outlined:hover, .button.is-light.is-outlined.is-hovered, .button.is-light.is-outlined:focus, .button.is-light.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 96%) hsl(0, 0%, 96%) !important;\n}\n.button.is-light.is-outlined.is-loading:hover::after, .button.is-light.is-outlined.is-loading.is-hovered::after, .button.is-light.is-outlined.is-loading:focus::after, .button.is-light.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;\n}\n.button.is-light.is-outlined[disabled], fieldset[disabled] .button.is-light.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 96%);\n  box-shadow: none;\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.7);\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-light.is-inverted.is-outlined:hover, .button.is-light.is-inverted.is-outlined.is-hovered, .button.is-light.is-inverted.is-outlined:focus, .button.is-light.is-inverted.is-outlined.is-focused {\n  background-color: rgba(0, 0, 0, 0.7);\n  color: hsl(0, 0%, 96%);\n}\n.button.is-light.is-inverted.is-outlined.is-loading:hover::after, .button.is-light.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-light.is-inverted.is-outlined.is-loading:focus::after, .button.is-light.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 96%) hsl(0, 0%, 96%) !important;\n}\n.button.is-light.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-light.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.7);\n  box-shadow: none;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-dark:hover, .button.is-dark.is-hovered {\n  background-color: #2f2f2f;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-dark:focus, .button.is-dark.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-dark:focus:not(:active), .button.is-dark.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25);\n}\n.button.is-dark:active, .button.is-dark.is-active {\n  background-color: #292929;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-dark[disabled], fieldset[disabled] .button.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  border-color: hsl(0, 0%, 21%);\n  box-shadow: none;\n}\n.button.is-dark.is-inverted {\n  background-color: #fff;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-inverted:hover, .button.is-dark.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-dark.is-inverted[disabled], fieldset[disabled] .button.is-dark.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-dark.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 21%);\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-outlined:hover, .button.is-dark.is-outlined.is-hovered, .button.is-dark.is-outlined:focus, .button.is-dark.is-outlined.is-focused {\n  background-color: hsl(0, 0%, 21%);\n  border-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.button.is-dark.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(0, 0%, 21%) hsl(0, 0%, 21%) !important;\n}\n.button.is-dark.is-outlined.is-loading:hover::after, .button.is-dark.is-outlined.is-loading.is-hovered::after, .button.is-dark.is-outlined.is-loading:focus::after, .button.is-dark.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-dark.is-outlined[disabled], fieldset[disabled] .button.is-dark.is-outlined {\n  background-color: transparent;\n  border-color: hsl(0, 0%, 21%);\n  box-shadow: none;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-dark.is-inverted.is-outlined:hover, .button.is-dark.is-inverted.is-outlined.is-hovered, .button.is-dark.is-inverted.is-outlined:focus, .button.is-dark.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(0, 0%, 21%);\n}\n.button.is-dark.is-inverted.is-outlined.is-loading:hover::after, .button.is-dark.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-dark.is-inverted.is-outlined.is-loading:focus::after, .button.is-dark.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(0, 0%, 21%) hsl(0, 0%, 21%) !important;\n}\n.button.is-dark.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-dark.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-primary:hover, .button.is-primary.is-hovered {\n  background-color: #00c4a7;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-primary:focus, .button.is-primary.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-primary:focus:not(:active), .button.is-primary.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25);\n}\n.button.is-primary:active, .button.is-primary.is-active {\n  background-color: #00b89c;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-primary[disabled], fieldset[disabled] .button.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  border-color: hsl(171, 100%, 41%);\n  box-shadow: none;\n}\n.button.is-primary.is-inverted {\n  background-color: #fff;\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-inverted:hover, .button.is-primary.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-primary.is-inverted[disabled], fieldset[disabled] .button.is-primary.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-primary.is-outlined {\n  background-color: transparent;\n  border-color: hsl(171, 100%, 41%);\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-outlined:hover, .button.is-primary.is-outlined.is-hovered, .button.is-primary.is-outlined:focus, .button.is-primary.is-outlined.is-focused {\n  background-color: hsl(171, 100%, 41%);\n  border-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.button.is-primary.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(171, 100%, 41%) hsl(171, 100%, 41%) !important;\n}\n.button.is-primary.is-outlined.is-loading:hover::after, .button.is-primary.is-outlined.is-loading.is-hovered::after, .button.is-primary.is-outlined.is-loading:focus::after, .button.is-primary.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-primary.is-outlined[disabled], fieldset[disabled] .button.is-primary.is-outlined {\n  background-color: transparent;\n  border-color: hsl(171, 100%, 41%);\n  box-shadow: none;\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-primary.is-inverted.is-outlined:hover, .button.is-primary.is-inverted.is-outlined.is-hovered, .button.is-primary.is-inverted.is-outlined:focus, .button.is-primary.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(171, 100%, 41%);\n}\n.button.is-primary.is-inverted.is-outlined.is-loading:hover::after, .button.is-primary.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-primary.is-inverted.is-outlined.is-loading:focus::after, .button.is-primary.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(171, 100%, 41%) hsl(171, 100%, 41%) !important;\n}\n.button.is-primary.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-primary.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-primary.is-light {\n  background-color: #ebfffc;\n  color: #00947e;\n}\n.button.is-primary.is-light:hover, .button.is-primary.is-light.is-hovered {\n  background-color: #defffa;\n  border-color: transparent;\n  color: #00947e;\n}\n.button.is-primary.is-light:active, .button.is-primary.is-light.is-active {\n  background-color: #d1fff8;\n  border-color: transparent;\n  color: #00947e;\n}\n.button.is-link {\n  background-color: hsl(229, 53%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-link:hover, .button.is-link.is-hovered {\n  background-color: #3e56c4;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-link:focus, .button.is-link.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-link:focus:not(:active), .button.is-link.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.button.is-link:active, .button.is-link.is-active {\n  background-color: #3a51bb;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-link[disabled], fieldset[disabled] .button.is-link {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  box-shadow: none;\n}\n.button.is-link.is-inverted {\n  background-color: #fff;\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-inverted:hover, .button.is-link.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-link.is-inverted[disabled], fieldset[disabled] .button.is-link.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-link.is-outlined {\n  background-color: transparent;\n  border-color: hsl(229, 53%, 53%);\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-outlined:hover, .button.is-link.is-outlined.is-hovered, .button.is-link.is-outlined:focus, .button.is-link.is-outlined.is-focused {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.button.is-link.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(229, 53%, 53%) hsl(229, 53%, 53%) !important;\n}\n.button.is-link.is-outlined.is-loading:hover::after, .button.is-link.is-outlined.is-loading.is-hovered::after, .button.is-link.is-outlined.is-loading:focus::after, .button.is-link.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-link.is-outlined[disabled], fieldset[disabled] .button.is-link.is-outlined {\n  background-color: transparent;\n  border-color: hsl(229, 53%, 53%);\n  box-shadow: none;\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-link.is-inverted.is-outlined:hover, .button.is-link.is-inverted.is-outlined.is-hovered, .button.is-link.is-inverted.is-outlined:focus, .button.is-link.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(229, 53%, 53%);\n}\n.button.is-link.is-inverted.is-outlined.is-loading:hover::after, .button.is-link.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-link.is-inverted.is-outlined.is-loading:focus::after, .button.is-link.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(229, 53%, 53%) hsl(229, 53%, 53%) !important;\n}\n.button.is-link.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-link.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-link.is-light {\n  background-color: #eff1fa;\n  color: #3850b7;\n}\n.button.is-link.is-light:hover, .button.is-link.is-light.is-hovered {\n  background-color: #e6e9f7;\n  border-color: transparent;\n  color: #3850b7;\n}\n.button.is-link.is-light:active, .button.is-link.is-light.is-active {\n  background-color: #dce0f4;\n  border-color: transparent;\n  color: #3850b7;\n}\n.button.is-info {\n  background-color: hsl(207, 61%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-info:hover, .button.is-info.is-hovered {\n  background-color: #3488ce;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-info:focus, .button.is-info.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-info:focus:not(:active), .button.is-info.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(62, 142, 208, 0.25);\n}\n.button.is-info:active, .button.is-info.is-active {\n  background-color: #3082c5;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-info[disabled], fieldset[disabled] .button.is-info {\n  background-color: hsl(207, 61%, 53%);\n  border-color: hsl(207, 61%, 53%);\n  box-shadow: none;\n}\n.button.is-info.is-inverted {\n  background-color: #fff;\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-inverted:hover, .button.is-info.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-info.is-inverted[disabled], fieldset[disabled] .button.is-info.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-info.is-outlined {\n  background-color: transparent;\n  border-color: hsl(207, 61%, 53%);\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-outlined:hover, .button.is-info.is-outlined.is-hovered, .button.is-info.is-outlined:focus, .button.is-info.is-outlined.is-focused {\n  background-color: hsl(207, 61%, 53%);\n  border-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.button.is-info.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(207, 61%, 53%) hsl(207, 61%, 53%) !important;\n}\n.button.is-info.is-outlined.is-loading:hover::after, .button.is-info.is-outlined.is-loading.is-hovered::after, .button.is-info.is-outlined.is-loading:focus::after, .button.is-info.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-info.is-outlined[disabled], fieldset[disabled] .button.is-info.is-outlined {\n  background-color: transparent;\n  border-color: hsl(207, 61%, 53%);\n  box-shadow: none;\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-info.is-inverted.is-outlined:hover, .button.is-info.is-inverted.is-outlined.is-hovered, .button.is-info.is-inverted.is-outlined:focus, .button.is-info.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(207, 61%, 53%);\n}\n.button.is-info.is-inverted.is-outlined.is-loading:hover::after, .button.is-info.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-info.is-inverted.is-outlined.is-loading:focus::after, .button.is-info.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(207, 61%, 53%) hsl(207, 61%, 53%) !important;\n}\n.button.is-info.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-info.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-info.is-light {\n  background-color: #eff5fb;\n  color: #296fa8;\n}\n.button.is-info.is-light:hover, .button.is-info.is-light.is-hovered {\n  background-color: #e4eff9;\n  border-color: transparent;\n  color: #296fa8;\n}\n.button.is-info.is-light:active, .button.is-info.is-light.is-active {\n  background-color: #dae9f6;\n  border-color: transparent;\n  color: #296fa8;\n}\n.button.is-success {\n  background-color: hsl(153, 53%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-success:hover, .button.is-success.is-hovered {\n  background-color: #3ec487;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-success:focus, .button.is-success.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-success:focus:not(:active), .button.is-success.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(72, 199, 142, 0.25);\n}\n.button.is-success:active, .button.is-success.is-active {\n  background-color: #3abb81;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-success[disabled], fieldset[disabled] .button.is-success {\n  background-color: hsl(153, 53%, 53%);\n  border-color: hsl(153, 53%, 53%);\n  box-shadow: none;\n}\n.button.is-success.is-inverted {\n  background-color: #fff;\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-inverted:hover, .button.is-success.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-success.is-inverted[disabled], fieldset[disabled] .button.is-success.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-success.is-outlined {\n  background-color: transparent;\n  border-color: hsl(153, 53%, 53%);\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-outlined:hover, .button.is-success.is-outlined.is-hovered, .button.is-success.is-outlined:focus, .button.is-success.is-outlined.is-focused {\n  background-color: hsl(153, 53%, 53%);\n  border-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.button.is-success.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(153, 53%, 53%) hsl(153, 53%, 53%) !important;\n}\n.button.is-success.is-outlined.is-loading:hover::after, .button.is-success.is-outlined.is-loading.is-hovered::after, .button.is-success.is-outlined.is-loading:focus::after, .button.is-success.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-success.is-outlined[disabled], fieldset[disabled] .button.is-success.is-outlined {\n  background-color: transparent;\n  border-color: hsl(153, 53%, 53%);\n  box-shadow: none;\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-success.is-inverted.is-outlined:hover, .button.is-success.is-inverted.is-outlined.is-hovered, .button.is-success.is-inverted.is-outlined:focus, .button.is-success.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(153, 53%, 53%);\n}\n.button.is-success.is-inverted.is-outlined.is-loading:hover::after, .button.is-success.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-success.is-inverted.is-outlined.is-loading:focus::after, .button.is-success.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(153, 53%, 53%) hsl(153, 53%, 53%) !important;\n}\n.button.is-success.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-success.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-success.is-light {\n  background-color: #effaf5;\n  color: #257953;\n}\n.button.is-success.is-light:hover, .button.is-success.is-light.is-hovered {\n  background-color: #e6f7ef;\n  border-color: transparent;\n  color: #257953;\n}\n.button.is-success.is-light:active, .button.is-success.is-light.is-active {\n  background-color: #dcf4e9;\n  border-color: transparent;\n  color: #257953;\n}\n.button.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning:hover, .button.is-warning.is-hovered {\n  background-color: #ffdc7d;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning:focus, .button.is-warning.is-focused {\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning:focus:not(:active), .button.is-warning.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(255, 224, 138, 0.25);\n}\n.button.is-warning:active, .button.is-warning.is-active {\n  background-color: #ffd970;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning[disabled], fieldset[disabled] .button.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  border-color: hsl(44, 100%, 77%);\n  box-shadow: none;\n}\n.button.is-warning.is-inverted {\n  background-color: rgba(0, 0, 0, 0.7);\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-inverted:hover, .button.is-warning.is-inverted.is-hovered {\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning.is-inverted[disabled], fieldset[disabled] .button.is-warning.is-inverted {\n  background-color: rgba(0, 0, 0, 0.7);\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-loading::after {\n  border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;\n}\n.button.is-warning.is-outlined {\n  background-color: transparent;\n  border-color: hsl(44, 100%, 77%);\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-outlined:hover, .button.is-warning.is-outlined.is-hovered, .button.is-warning.is-outlined:focus, .button.is-warning.is-outlined.is-focused {\n  background-color: hsl(44, 100%, 77%);\n  border-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(44, 100%, 77%) hsl(44, 100%, 77%) !important;\n}\n.button.is-warning.is-outlined.is-loading:hover::after, .button.is-warning.is-outlined.is-loading.is-hovered::after, .button.is-warning.is-outlined.is-loading:focus::after, .button.is-warning.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;\n}\n.button.is-warning.is-outlined[disabled], fieldset[disabled] .button.is-warning.is-outlined {\n  background-color: transparent;\n  border-color: hsl(44, 100%, 77%);\n  box-shadow: none;\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.7);\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning.is-inverted.is-outlined:hover, .button.is-warning.is-inverted.is-outlined.is-hovered, .button.is-warning.is-inverted.is-outlined:focus, .button.is-warning.is-inverted.is-outlined.is-focused {\n  background-color: rgba(0, 0, 0, 0.7);\n  color: hsl(44, 100%, 77%);\n}\n.button.is-warning.is-inverted.is-outlined.is-loading:hover::after, .button.is-warning.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-warning.is-inverted.is-outlined.is-loading:focus::after, .button.is-warning.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(44, 100%, 77%) hsl(44, 100%, 77%) !important;\n}\n.button.is-warning.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-warning.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: rgba(0, 0, 0, 0.7);\n  box-shadow: none;\n  color: rgba(0, 0, 0, 0.7);\n}\n.button.is-warning.is-light {\n  background-color: #fffaeb;\n  color: #946c00;\n}\n.button.is-warning.is-light:hover, .button.is-warning.is-light.is-hovered {\n  background-color: #fff6de;\n  border-color: transparent;\n  color: #946c00;\n}\n.button.is-warning.is-light:active, .button.is-warning.is-light.is-active {\n  background-color: #fff3d1;\n  border-color: transparent;\n  color: #946c00;\n}\n.button.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-danger:hover, .button.is-danger.is-hovered {\n  background-color: #f03a5f;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-danger:focus, .button.is-danger.is-focused {\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-danger:focus:not(:active), .button.is-danger.is-focused:not(:active) {\n  box-shadow: 0 0 0 0.125em rgba(241, 70, 104, 0.25);\n}\n.button.is-danger:active, .button.is-danger.is-active {\n  background-color: #ef2e55;\n  border-color: transparent;\n  color: #fff;\n}\n.button.is-danger[disabled], fieldset[disabled] .button.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  border-color: hsl(348, 86%, 61%);\n  box-shadow: none;\n}\n.button.is-danger.is-inverted {\n  background-color: #fff;\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-inverted:hover, .button.is-danger.is-inverted.is-hovered {\n  background-color: #f2f2f2;\n}\n.button.is-danger.is-inverted[disabled], fieldset[disabled] .button.is-danger.is-inverted {\n  background-color: #fff;\n  border-color: transparent;\n  box-shadow: none;\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-loading::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-danger.is-outlined {\n  background-color: transparent;\n  border-color: hsl(348, 86%, 61%);\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-outlined:hover, .button.is-danger.is-outlined.is-hovered, .button.is-danger.is-outlined:focus, .button.is-danger.is-outlined.is-focused {\n  background-color: hsl(348, 86%, 61%);\n  border-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.button.is-danger.is-outlined.is-loading::after {\n  border-color: transparent transparent hsl(348, 86%, 61%) hsl(348, 86%, 61%) !important;\n}\n.button.is-danger.is-outlined.is-loading:hover::after, .button.is-danger.is-outlined.is-loading.is-hovered::after, .button.is-danger.is-outlined.is-loading:focus::after, .button.is-danger.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent #fff #fff !important;\n}\n.button.is-danger.is-outlined[disabled], fieldset[disabled] .button.is-danger.is-outlined {\n  background-color: transparent;\n  border-color: hsl(348, 86%, 61%);\n  box-shadow: none;\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  color: #fff;\n}\n.button.is-danger.is-inverted.is-outlined:hover, .button.is-danger.is-inverted.is-outlined.is-hovered, .button.is-danger.is-inverted.is-outlined:focus, .button.is-danger.is-inverted.is-outlined.is-focused {\n  background-color: #fff;\n  color: hsl(348, 86%, 61%);\n}\n.button.is-danger.is-inverted.is-outlined.is-loading:hover::after, .button.is-danger.is-inverted.is-outlined.is-loading.is-hovered::after, .button.is-danger.is-inverted.is-outlined.is-loading:focus::after, .button.is-danger.is-inverted.is-outlined.is-loading.is-focused::after {\n  border-color: transparent transparent hsl(348, 86%, 61%) hsl(348, 86%, 61%) !important;\n}\n.button.is-danger.is-inverted.is-outlined[disabled], fieldset[disabled] .button.is-danger.is-inverted.is-outlined {\n  background-color: transparent;\n  border-color: #fff;\n  box-shadow: none;\n  color: #fff;\n}\n.button.is-danger.is-light {\n  background-color: #feecf0;\n  color: #cc0f35;\n}\n.button.is-danger.is-light:hover, .button.is-danger.is-light.is-hovered {\n  background-color: #fde0e6;\n  border-color: transparent;\n  color: #cc0f35;\n}\n.button.is-danger.is-light:active, .button.is-danger.is-light.is-active {\n  background-color: #fcd4dc;\n  border-color: transparent;\n  color: #cc0f35;\n}\n.button.is-small {\n  font-size: 0.75rem;\n}\n.button.is-small:not(.is-rounded) {\n  border-radius: 2px;\n}\n.button.is-normal {\n  font-size: 1rem;\n}\n.button.is-medium {\n  font-size: 1.25rem;\n}\n.button.is-large {\n  font-size: 1.5rem;\n}\n.button[disabled], fieldset[disabled] .button {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 86%);\n  box-shadow: none;\n  opacity: 0.5;\n}\n.button.is-fullwidth {\n  display: flex;\n  width: 100%;\n}\n.button.is-loading {\n  color: transparent !important;\n  pointer-events: none;\n}\n.button.is-loading::after {\n  position: absolute;\n  left: calc(50% - (1em * 0.5));\n  top: calc(50% - (1em * 0.5));\n  position: absolute !important;\n}\n.button.is-static {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 86%);\n  color: hsl(0, 0%, 48%);\n  box-shadow: none;\n  pointer-events: none;\n}\n.button.is-rounded {\n  border-radius: 9999px;\n  padding-left: calc(1em + 0.25em);\n  padding-right: calc(1em + 0.25em);\n}\n\n.buttons {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n.buttons .button {\n  margin-bottom: 0.5rem;\n}\n.buttons .button:not(:last-child):not(.is-fullwidth) {\n  margin-right: 0.5rem;\n}\n.buttons:last-child {\n  margin-bottom: -0.5rem;\n}\n.buttons:not(:last-child) {\n  margin-bottom: 1rem;\n}\n.buttons.are-small .button:not(.is-normal):not(.is-medium):not(.is-large) {\n  font-size: 0.75rem;\n}\n.buttons.are-small .button:not(.is-normal):not(.is-medium):not(.is-large):not(.is-rounded) {\n  border-radius: 2px;\n}\n.buttons.are-medium .button:not(.is-small):not(.is-normal):not(.is-large) {\n  font-size: 1.25rem;\n}\n.buttons.are-large .button:not(.is-small):not(.is-normal):not(.is-medium) {\n  font-size: 1.5rem;\n}\n.buttons.has-addons .button:not(:first-child) {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.buttons.has-addons .button:not(:last-child) {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n  margin-right: -1px;\n}\n.buttons.has-addons .button:last-child {\n  margin-right: 0;\n}\n.buttons.has-addons .button:hover, .buttons.has-addons .button.is-hovered {\n  z-index: 2;\n}\n.buttons.has-addons .button:focus, .buttons.has-addons .button.is-focused, .buttons.has-addons .button:active, .buttons.has-addons .button.is-active, .buttons.has-addons .button.is-selected {\n  z-index: 3;\n}\n.buttons.has-addons .button:focus:hover, .buttons.has-addons .button.is-focused:hover, .buttons.has-addons .button:active:hover, .buttons.has-addons .button.is-active:hover, .buttons.has-addons .button.is-selected:hover {\n  z-index: 4;\n}\n.buttons.has-addons .button.is-expanded {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.buttons.is-centered {\n  justify-content: center;\n}\n.buttons.is-centered:not(.has-addons) .button:not(.is-fullwidth) {\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n}\n.buttons.is-right {\n  justify-content: flex-end;\n}\n.buttons.is-right:not(.has-addons) .button:not(.is-fullwidth) {\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n}\n\n@media screen and (max-width: 768px) {\n  .button.is-responsive.is-small {\n    font-size: 0.5625rem;\n  }\n  .button.is-responsive,\n  .button.is-responsive.is-normal {\n    font-size: 0.65625rem;\n  }\n  .button.is-responsive.is-medium {\n    font-size: 0.75rem;\n  }\n  .button.is-responsive.is-large {\n    font-size: 1rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .button.is-responsive.is-small {\n    font-size: 0.65625rem;\n  }\n  .button.is-responsive,\n  .button.is-responsive.is-normal {\n    font-size: 0.75rem;\n  }\n  .button.is-responsive.is-medium {\n    font-size: 1rem;\n  }\n  .button.is-responsive.is-large {\n    font-size: 1.25rem;\n  }\n}\n.container {\n  flex-grow: 1;\n  margin: 0 auto;\n  position: relative;\n  width: auto;\n}\n.container.is-fluid {\n  max-width: none !important;\n  padding-left: 32px;\n  padding-right: 32px;\n  width: 100%;\n}\n@media screen and (min-width: 1024px) {\n  .container {\n    max-width: 960px;\n  }\n}\n@media screen and (max-width: 1215px) {\n  .container.is-widescreen:not(.is-max-desktop) {\n    max-width: 1152px;\n  }\n}\n@media screen and (max-width: 1407px) {\n  .container.is-fullhd:not(.is-max-desktop):not(.is-max-widescreen) {\n    max-width: 1344px;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .container:not(.is-max-desktop) {\n    max-width: 1152px;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .container:not(.is-max-desktop):not(.is-max-widescreen) {\n    max-width: 1344px;\n  }\n}\n\n.content li + li {\n  margin-top: 0.25em;\n}\n.content p:not(:last-child),\n.content dl:not(:last-child),\n.content ol:not(:last-child),\n.content ul:not(:last-child),\n.content blockquote:not(:last-child),\n.content pre:not(:last-child),\n.content table:not(:last-child) {\n  margin-bottom: 1em;\n}\n.content h1,\n.content h2,\n.content h3,\n.content h4,\n.content h5,\n.content h6 {\n  color: hsl(0, 0%, 21%);\n  font-weight: 600;\n  line-height: 1.125;\n}\n.content h1 {\n  font-size: 2em;\n  margin-bottom: 0.5em;\n}\n.content h1:not(:first-child) {\n  margin-top: 1em;\n}\n.content h2 {\n  font-size: 1.75em;\n  margin-bottom: 0.5714em;\n}\n.content h2:not(:first-child) {\n  margin-top: 1.1428em;\n}\n.content h3 {\n  font-size: 1.5em;\n  margin-bottom: 0.6666em;\n}\n.content h3:not(:first-child) {\n  margin-top: 1.3333em;\n}\n.content h4 {\n  font-size: 1.25em;\n  margin-bottom: 0.8em;\n}\n.content h5 {\n  font-size: 1.125em;\n  margin-bottom: 0.8888em;\n}\n.content h6 {\n  font-size: 1em;\n  margin-bottom: 1em;\n}\n.content blockquote {\n  background-color: hsl(0, 0%, 96%);\n  border-left: 5px solid hsl(0, 0%, 86%);\n  padding: 1.25em 1.5em;\n}\n.content ol {\n  list-style-position: outside;\n  margin-left: 2em;\n  margin-top: 1em;\n}\n.content ol:not([type]) {\n  list-style-type: decimal;\n}\n.content ol:not([type]).is-lower-alpha {\n  list-style-type: lower-alpha;\n}\n.content ol:not([type]).is-lower-roman {\n  list-style-type: lower-roman;\n}\n.content ol:not([type]).is-upper-alpha {\n  list-style-type: upper-alpha;\n}\n.content ol:not([type]).is-upper-roman {\n  list-style-type: upper-roman;\n}\n.content ul {\n  list-style: disc outside;\n  margin-left: 2em;\n  margin-top: 1em;\n}\n.content ul ul {\n  list-style-type: circle;\n  margin-top: 0.5em;\n}\n.content ul ul ul {\n  list-style-type: square;\n}\n.content dd {\n  margin-left: 2em;\n}\n.content figure {\n  margin-left: 2em;\n  margin-right: 2em;\n  text-align: center;\n}\n.content figure:not(:first-child) {\n  margin-top: 2em;\n}\n.content figure:not(:last-child) {\n  margin-bottom: 2em;\n}\n.content figure img {\n  display: inline-block;\n}\n.content figure figcaption {\n  font-style: italic;\n}\n.content pre {\n  -webkit-overflow-scrolling: touch;\n  overflow-x: auto;\n  padding: 1.25em 1.5em;\n  white-space: pre;\n  word-wrap: normal;\n}\n.content sup,\n.content sub {\n  font-size: 75%;\n}\n.content table {\n  width: 100%;\n}\n.content table td,\n.content table th {\n  border: 1px solid hsl(0, 0%, 86%);\n  border-width: 0 0 1px;\n  padding: 0.5em 0.75em;\n  vertical-align: top;\n}\n.content table th {\n  color: hsl(0, 0%, 21%);\n}\n.content table th:not([align]) {\n  text-align: inherit;\n}\n.content table thead td,\n.content table thead th {\n  border-width: 0 0 2px;\n  color: hsl(0, 0%, 21%);\n}\n.content table tfoot td,\n.content table tfoot th {\n  border-width: 2px 0 0;\n  color: hsl(0, 0%, 21%);\n}\n.content table tbody tr:last-child td,\n.content table tbody tr:last-child th {\n  border-bottom-width: 0;\n}\n.content .tabs li + li {\n  margin-top: 0;\n}\n.content.is-small {\n  font-size: 0.75rem;\n}\n.content.is-normal {\n  font-size: 1rem;\n}\n.content.is-medium {\n  font-size: 1.25rem;\n}\n.content.is-large {\n  font-size: 1.5rem;\n}\n\n.icon {\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  height: 1.5rem;\n  width: 1.5rem;\n}\n.icon.is-small {\n  height: 1rem;\n  width: 1rem;\n}\n.icon.is-medium {\n  height: 2rem;\n  width: 2rem;\n}\n.icon.is-large {\n  height: 3rem;\n  width: 3rem;\n}\n\n.icon-text {\n  align-items: flex-start;\n  color: inherit;\n  display: inline-flex;\n  flex-wrap: wrap;\n  line-height: 1.5rem;\n  vertical-align: top;\n}\n.icon-text .icon {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n.icon-text .icon:not(:last-child) {\n  margin-right: 0.25em;\n}\n.icon-text .icon:not(:first-child) {\n  margin-left: 0.25em;\n}\n\ndiv.icon-text {\n  display: flex;\n}\n\n.image {\n  display: block;\n  position: relative;\n}\n.image img {\n  display: block;\n  height: auto;\n  width: 100%;\n}\n.image img.is-rounded {\n  border-radius: 9999px;\n}\n.image.is-fullwidth {\n  width: 100%;\n}\n.image.is-square img,\n.image.is-square .has-ratio, .image.is-1by1 img,\n.image.is-1by1 .has-ratio, .image.is-5by4 img,\n.image.is-5by4 .has-ratio, .image.is-4by3 img,\n.image.is-4by3 .has-ratio, .image.is-3by2 img,\n.image.is-3by2 .has-ratio, .image.is-5by3 img,\n.image.is-5by3 .has-ratio, .image.is-16by9 img,\n.image.is-16by9 .has-ratio, .image.is-2by1 img,\n.image.is-2by1 .has-ratio, .image.is-3by1 img,\n.image.is-3by1 .has-ratio, .image.is-4by5 img,\n.image.is-4by5 .has-ratio, .image.is-3by4 img,\n.image.is-3by4 .has-ratio, .image.is-2by3 img,\n.image.is-2by3 .has-ratio, .image.is-3by5 img,\n.image.is-3by5 .has-ratio, .image.is-9by16 img,\n.image.is-9by16 .has-ratio, .image.is-1by2 img,\n.image.is-1by2 .has-ratio, .image.is-1by3 img,\n.image.is-1by3 .has-ratio {\n  height: 100%;\n  width: 100%;\n}\n.image.is-square, .image.is-1by1 {\n  padding-top: 100%;\n}\n.image.is-5by4 {\n  padding-top: 80%;\n}\n.image.is-4by3 {\n  padding-top: 75%;\n}\n.image.is-3by2 {\n  padding-top: 66.6666%;\n}\n.image.is-5by3 {\n  padding-top: 60%;\n}\n.image.is-16by9 {\n  padding-top: 56.25%;\n}\n.image.is-2by1 {\n  padding-top: 50%;\n}\n.image.is-3by1 {\n  padding-top: 33.3333%;\n}\n.image.is-4by5 {\n  padding-top: 125%;\n}\n.image.is-3by4 {\n  padding-top: 133.3333%;\n}\n.image.is-2by3 {\n  padding-top: 150%;\n}\n.image.is-3by5 {\n  padding-top: 166.6666%;\n}\n.image.is-9by16 {\n  padding-top: 177.7777%;\n}\n.image.is-1by2 {\n  padding-top: 200%;\n}\n.image.is-1by3 {\n  padding-top: 300%;\n}\n.image.is-16x16 {\n  height: 16px;\n  width: 16px;\n}\n.image.is-24x24 {\n  height: 24px;\n  width: 24px;\n}\n.image.is-32x32 {\n  height: 32px;\n  width: 32px;\n}\n.image.is-48x48 {\n  height: 48px;\n  width: 48px;\n}\n.image.is-64x64 {\n  height: 64px;\n  width: 64px;\n}\n.image.is-96x96 {\n  height: 96px;\n  width: 96px;\n}\n.image.is-128x128 {\n  height: 128px;\n  width: 128px;\n}\n\n.notification {\n  background-color: hsl(0, 0%, 96%);\n  border-radius: 4px;\n  position: relative;\n  padding: 1.25rem 2.5rem 1.25rem 1.5rem;\n}\n.notification a:not(.button):not(.dropdown-item) {\n  color: currentColor;\n  text-decoration: underline;\n}\n.notification strong {\n  color: currentColor;\n}\n.notification code,\n.notification pre {\n  background: hsl(0, 0%, 100%);\n}\n.notification pre code {\n  background: transparent;\n}\n.notification > .delete {\n  right: 0.5rem;\n  position: absolute;\n  top: 0.5rem;\n}\n.notification .title,\n.notification .subtitle,\n.notification .content {\n  color: currentColor;\n}\n.notification.is-white {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.notification.is-black {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.notification.is-light {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.notification.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.notification.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.notification.is-primary.is-light {\n  background-color: #ebfffc;\n  color: #00947e;\n}\n.notification.is-link {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.notification.is-link.is-light {\n  background-color: #eff1fa;\n  color: #3850b7;\n}\n.notification.is-info {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.notification.is-info.is-light {\n  background-color: #eff5fb;\n  color: #296fa8;\n}\n.notification.is-success {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.notification.is-success.is-light {\n  background-color: #effaf5;\n  color: #257953;\n}\n.notification.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.notification.is-warning.is-light {\n  background-color: #fffaeb;\n  color: #946c00;\n}\n.notification.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.notification.is-danger.is-light {\n  background-color: #feecf0;\n  color: #cc0f35;\n}\n\n.progress {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  border: none;\n  border-radius: 9999px;\n  display: block;\n  height: 1rem;\n  overflow: hidden;\n  padding: 0;\n  width: 100%;\n}\n.progress::-webkit-progress-bar {\n  background-color: hsl(0, 0%, 93%);\n}\n.progress::-webkit-progress-value {\n  background-color: hsl(0, 0%, 29%);\n}\n.progress::-moz-progress-bar {\n  background-color: hsl(0, 0%, 29%);\n}\n.progress::-ms-fill {\n  background-color: hsl(0, 0%, 29%);\n  border: none;\n}\n.progress.is-white::-webkit-progress-value {\n  background-color: hsl(0, 0%, 100%);\n}\n.progress.is-white::-moz-progress-bar {\n  background-color: hsl(0, 0%, 100%);\n}\n.progress.is-white::-ms-fill {\n  background-color: hsl(0, 0%, 100%);\n}\n.progress.is-white:indeterminate {\n  background-image: linear-gradient(to right, hsl(0, 0%, 100%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-black::-webkit-progress-value {\n  background-color: hsl(0, 0%, 4%);\n}\n.progress.is-black::-moz-progress-bar {\n  background-color: hsl(0, 0%, 4%);\n}\n.progress.is-black::-ms-fill {\n  background-color: hsl(0, 0%, 4%);\n}\n.progress.is-black:indeterminate {\n  background-image: linear-gradient(to right, hsl(0, 0%, 4%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-light::-webkit-progress-value {\n  background-color: hsl(0, 0%, 96%);\n}\n.progress.is-light::-moz-progress-bar {\n  background-color: hsl(0, 0%, 96%);\n}\n.progress.is-light::-ms-fill {\n  background-color: hsl(0, 0%, 96%);\n}\n.progress.is-light:indeterminate {\n  background-image: linear-gradient(to right, hsl(0, 0%, 96%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-dark::-webkit-progress-value {\n  background-color: hsl(0, 0%, 21%);\n}\n.progress.is-dark::-moz-progress-bar {\n  background-color: hsl(0, 0%, 21%);\n}\n.progress.is-dark::-ms-fill {\n  background-color: hsl(0, 0%, 21%);\n}\n.progress.is-dark:indeterminate {\n  background-image: linear-gradient(to right, hsl(0, 0%, 21%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-primary::-webkit-progress-value {\n  background-color: hsl(171, 100%, 41%);\n}\n.progress.is-primary::-moz-progress-bar {\n  background-color: hsl(171, 100%, 41%);\n}\n.progress.is-primary::-ms-fill {\n  background-color: hsl(171, 100%, 41%);\n}\n.progress.is-primary:indeterminate {\n  background-image: linear-gradient(to right, hsl(171, 100%, 41%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-link::-webkit-progress-value {\n  background-color: hsl(229, 53%, 53%);\n}\n.progress.is-link::-moz-progress-bar {\n  background-color: hsl(229, 53%, 53%);\n}\n.progress.is-link::-ms-fill {\n  background-color: hsl(229, 53%, 53%);\n}\n.progress.is-link:indeterminate {\n  background-image: linear-gradient(to right, hsl(229, 53%, 53%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-info::-webkit-progress-value {\n  background-color: hsl(207, 61%, 53%);\n}\n.progress.is-info::-moz-progress-bar {\n  background-color: hsl(207, 61%, 53%);\n}\n.progress.is-info::-ms-fill {\n  background-color: hsl(207, 61%, 53%);\n}\n.progress.is-info:indeterminate {\n  background-image: linear-gradient(to right, hsl(207, 61%, 53%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-success::-webkit-progress-value {\n  background-color: hsl(153, 53%, 53%);\n}\n.progress.is-success::-moz-progress-bar {\n  background-color: hsl(153, 53%, 53%);\n}\n.progress.is-success::-ms-fill {\n  background-color: hsl(153, 53%, 53%);\n}\n.progress.is-success:indeterminate {\n  background-image: linear-gradient(to right, hsl(153, 53%, 53%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-warning::-webkit-progress-value {\n  background-color: hsl(44, 100%, 77%);\n}\n.progress.is-warning::-moz-progress-bar {\n  background-color: hsl(44, 100%, 77%);\n}\n.progress.is-warning::-ms-fill {\n  background-color: hsl(44, 100%, 77%);\n}\n.progress.is-warning:indeterminate {\n  background-image: linear-gradient(to right, hsl(44, 100%, 77%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress.is-danger::-webkit-progress-value {\n  background-color: hsl(348, 86%, 61%);\n}\n.progress.is-danger::-moz-progress-bar {\n  background-color: hsl(348, 86%, 61%);\n}\n.progress.is-danger::-ms-fill {\n  background-color: hsl(348, 86%, 61%);\n}\n.progress.is-danger:indeterminate {\n  background-image: linear-gradient(to right, hsl(348, 86%, 61%) 30%, hsl(0, 0%, 93%) 30%);\n}\n.progress:indeterminate {\n  animation-duration: 1.5s;\n  animation-iteration-count: infinite;\n  animation-name: moveIndeterminate;\n  animation-timing-function: linear;\n  background-color: hsl(0, 0%, 93%);\n  background-image: linear-gradient(to right, hsl(0, 0%, 29%) 30%, hsl(0, 0%, 93%) 30%);\n  background-position: top left;\n  background-repeat: no-repeat;\n  background-size: 150% 150%;\n}\n.progress:indeterminate::-webkit-progress-bar {\n  background-color: transparent;\n}\n.progress:indeterminate::-moz-progress-bar {\n  background-color: transparent;\n}\n.progress:indeterminate::-ms-fill {\n  animation-name: none;\n}\n.progress.is-small {\n  height: 0.75rem;\n}\n.progress.is-medium {\n  height: 1.25rem;\n}\n.progress.is-large {\n  height: 1.5rem;\n}\n\n@keyframes moveIndeterminate {\n  from {\n    background-position: 200% 0;\n  }\n  to {\n    background-position: -200% 0;\n  }\n}\n.table {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 21%);\n}\n.table td,\n.table th {\n  border: 1px solid hsl(0, 0%, 86%);\n  border-width: 0 0 1px;\n  padding: 0.5em 0.75em;\n  vertical-align: top;\n}\n.table td.is-white,\n.table th.is-white {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.table td.is-black,\n.table th.is-black {\n  background-color: hsl(0, 0%, 4%);\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.table td.is-light,\n.table th.is-light {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.table td.is-dark,\n.table th.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  border-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.table td.is-primary,\n.table th.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  border-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.table td.is-link,\n.table th.is-link {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.table td.is-info,\n.table th.is-info {\n  background-color: hsl(207, 61%, 53%);\n  border-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.table td.is-success,\n.table th.is-success {\n  background-color: hsl(153, 53%, 53%);\n  border-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.table td.is-warning,\n.table th.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  border-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.table td.is-danger,\n.table th.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  border-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.table td.is-narrow,\n.table th.is-narrow {\n  white-space: nowrap;\n  width: 1%;\n}\n.table td.is-selected,\n.table th.is-selected {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.table td.is-selected a,\n.table td.is-selected strong,\n.table th.is-selected a,\n.table th.is-selected strong {\n  color: currentColor;\n}\n.table td.is-vcentered,\n.table th.is-vcentered {\n  vertical-align: middle;\n}\n.table th {\n  color: hsl(0, 0%, 21%);\n}\n.table th:not([align]) {\n  text-align: left;\n}\n.table tr.is-selected {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.table tr.is-selected a,\n.table tr.is-selected strong {\n  color: currentColor;\n}\n.table tr.is-selected td,\n.table tr.is-selected th {\n  border-color: #fff;\n  color: currentColor;\n}\n.table thead {\n  background-color: transparent;\n}\n.table thead td,\n.table thead th {\n  border-width: 0 0 2px;\n  color: hsl(0, 0%, 21%);\n}\n.table tfoot {\n  background-color: transparent;\n}\n.table tfoot td,\n.table tfoot th {\n  border-width: 2px 0 0;\n  color: hsl(0, 0%, 21%);\n}\n.table tbody {\n  background-color: transparent;\n}\n.table tbody tr:last-child td,\n.table tbody tr:last-child th {\n  border-bottom-width: 0;\n}\n.table.is-bordered td,\n.table.is-bordered th {\n  border-width: 1px;\n}\n.table.is-bordered tr:last-child td,\n.table.is-bordered tr:last-child th {\n  border-bottom-width: 1px;\n}\n.table.is-fullwidth {\n  width: 100%;\n}\n.table.is-hoverable tbody tr:not(.is-selected):hover {\n  background-color: hsl(0, 0%, 98%);\n}\n.table.is-hoverable.is-striped tbody tr:not(.is-selected):hover {\n  background-color: hsl(0, 0%, 98%);\n}\n.table.is-hoverable.is-striped tbody tr:not(.is-selected):hover:nth-child(even) {\n  background-color: hsl(0, 0%, 96%);\n}\n.table.is-narrow td,\n.table.is-narrow th {\n  padding: 0.25em 0.5em;\n}\n.table.is-striped tbody tr:not(.is-selected):nth-child(even) {\n  background-color: hsl(0, 0%, 98%);\n}\n\n.table-container {\n  -webkit-overflow-scrolling: touch;\n  overflow: auto;\n  overflow-y: hidden;\n  max-width: 100%;\n}\n\n.tags {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n.tags .tag {\n  margin-bottom: 0.5rem;\n}\n.tags .tag:not(:last-child) {\n  margin-right: 0.5rem;\n}\n.tags:last-child {\n  margin-bottom: -0.5rem;\n}\n.tags:not(:last-child) {\n  margin-bottom: 1rem;\n}\n.tags.are-medium .tag:not(.is-normal):not(.is-large) {\n  font-size: 1rem;\n}\n.tags.are-large .tag:not(.is-normal):not(.is-medium) {\n  font-size: 1.25rem;\n}\n.tags.is-centered {\n  justify-content: center;\n}\n.tags.is-centered .tag {\n  margin-right: 0.25rem;\n  margin-left: 0.25rem;\n}\n.tags.is-right {\n  justify-content: flex-end;\n}\n.tags.is-right .tag:not(:first-child) {\n  margin-left: 0.5rem;\n}\n.tags.is-right .tag:not(:last-child) {\n  margin-right: 0;\n}\n.tags.has-addons .tag {\n  margin-right: 0;\n}\n.tags.has-addons .tag:not(:first-child) {\n  margin-left: 0;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.tags.has-addons .tag:not(:last-child) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.tag:not(body) {\n  align-items: center;\n  background-color: hsl(0, 0%, 96%);\n  border-radius: 4px;\n  color: hsl(0, 0%, 29%);\n  display: inline-flex;\n  font-size: 0.75rem;\n  height: 2em;\n  justify-content: center;\n  line-height: 1.5;\n  padding-left: 0.75em;\n  padding-right: 0.75em;\n  white-space: nowrap;\n}\n.tag:not(body) .delete {\n  margin-left: 0.25rem;\n  margin-right: -0.375rem;\n}\n.tag:not(body).is-white {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.tag:not(body).is-black {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.tag:not(body).is-light {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.tag:not(body).is-dark {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.tag:not(body).is-primary {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.tag:not(body).is-primary.is-light {\n  background-color: #ebfffc;\n  color: #00947e;\n}\n.tag:not(body).is-link {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.tag:not(body).is-link.is-light {\n  background-color: #eff1fa;\n  color: #3850b7;\n}\n.tag:not(body).is-info {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.tag:not(body).is-info.is-light {\n  background-color: #eff5fb;\n  color: #296fa8;\n}\n.tag:not(body).is-success {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.tag:not(body).is-success.is-light {\n  background-color: #effaf5;\n  color: #257953;\n}\n.tag:not(body).is-warning {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.tag:not(body).is-warning.is-light {\n  background-color: #fffaeb;\n  color: #946c00;\n}\n.tag:not(body).is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.tag:not(body).is-danger.is-light {\n  background-color: #feecf0;\n  color: #cc0f35;\n}\n.tag:not(body).is-normal {\n  font-size: 0.75rem;\n}\n.tag:not(body).is-medium {\n  font-size: 1rem;\n}\n.tag:not(body).is-large {\n  font-size: 1.25rem;\n}\n.tag:not(body) .icon:first-child:not(:last-child) {\n  margin-left: -0.375em;\n  margin-right: 0.1875em;\n}\n.tag:not(body) .icon:last-child:not(:first-child) {\n  margin-left: 0.1875em;\n  margin-right: -0.375em;\n}\n.tag:not(body) .icon:first-child:last-child {\n  margin-left: -0.375em;\n  margin-right: -0.375em;\n}\n.tag:not(body).is-delete {\n  margin-left: 1px;\n  padding: 0;\n  position: relative;\n  width: 2em;\n}\n.tag:not(body).is-delete::before, .tag:not(body).is-delete::after {\n  background-color: currentColor;\n  content: \"\";\n  display: block;\n  left: 50%;\n  position: absolute;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%) rotate(45deg);\n  transform-origin: center center;\n}\n.tag:not(body).is-delete::before {\n  height: 1px;\n  width: 50%;\n}\n.tag:not(body).is-delete::after {\n  height: 50%;\n  width: 1px;\n}\n.tag:not(body).is-delete:hover, .tag:not(body).is-delete:focus {\n  background-color: #e8e8e8;\n}\n.tag:not(body).is-delete:active {\n  background-color: #dbdbdb;\n}\n.tag:not(body).is-rounded {\n  border-radius: 9999px;\n}\n\na.tag:hover {\n  text-decoration: underline;\n}\n\n.title,\n.subtitle {\n  word-break: break-word;\n}\n.title em,\n.title span,\n.subtitle em,\n.subtitle span {\n  font-weight: inherit;\n}\n.title sub,\n.subtitle sub {\n  font-size: 0.75em;\n}\n.title sup,\n.subtitle sup {\n  font-size: 0.75em;\n}\n.title .tag,\n.subtitle .tag {\n  vertical-align: middle;\n}\n\n.title {\n  color: hsl(0, 0%, 21%);\n  font-size: 2rem;\n  font-weight: 600;\n  line-height: 1.125;\n}\n.title strong {\n  color: inherit;\n  font-weight: inherit;\n}\n.title:not(.is-spaced) + .subtitle {\n  margin-top: -1.25rem;\n}\n.title.is-1 {\n  font-size: 3rem;\n}\n.title.is-2 {\n  font-size: 2.5rem;\n}\n.title.is-3 {\n  font-size: 2rem;\n}\n.title.is-4 {\n  font-size: 1.5rem;\n}\n.title.is-5 {\n  font-size: 1.25rem;\n}\n.title.is-6 {\n  font-size: 1rem;\n}\n.title.is-7 {\n  font-size: 0.75rem;\n}\n\n.subtitle {\n  color: hsl(0, 0%, 29%);\n  font-size: 1.25rem;\n  font-weight: 400;\n  line-height: 1.25;\n}\n.subtitle strong {\n  color: hsl(0, 0%, 21%);\n  font-weight: 600;\n}\n.subtitle:not(.is-spaced) + .title {\n  margin-top: -1.25rem;\n}\n.subtitle.is-1 {\n  font-size: 3rem;\n}\n.subtitle.is-2 {\n  font-size: 2.5rem;\n}\n.subtitle.is-3 {\n  font-size: 2rem;\n}\n.subtitle.is-4 {\n  font-size: 1.5rem;\n}\n.subtitle.is-5 {\n  font-size: 1.25rem;\n}\n.subtitle.is-6 {\n  font-size: 1rem;\n}\n.subtitle.is-7 {\n  font-size: 0.75rem;\n}\n\n.heading {\n  display: block;\n  font-size: 11px;\n  letter-spacing: 1px;\n  margin-bottom: 5px;\n  text-transform: uppercase;\n}\n\n.number {\n  align-items: center;\n  background-color: hsl(0, 0%, 96%);\n  border-radius: 9999px;\n  display: inline-flex;\n  font-size: 1.25rem;\n  height: 2em;\n  justify-content: center;\n  margin-right: 1.5rem;\n  min-width: 2.5em;\n  padding: 0.25rem 0.5rem;\n  text-align: center;\n  vertical-align: top;\n}\n\n/* Bulma Form */\n.select select, .textarea, .input {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 86%);\n  border-radius: 4px;\n  color: hsl(0, 0%, 21%);\n}\n.select select::-moz-placeholder, .textarea::-moz-placeholder, .input::-moz-placeholder {\n  color: rgba(54, 54, 54, 0.3);\n}\n.select select::-webkit-input-placeholder, .textarea::-webkit-input-placeholder, .input::-webkit-input-placeholder {\n  color: rgba(54, 54, 54, 0.3);\n}\n.select select:-moz-placeholder, .textarea:-moz-placeholder, .input:-moz-placeholder {\n  color: rgba(54, 54, 54, 0.3);\n}\n.select select:-ms-input-placeholder, .textarea:-ms-input-placeholder, .input:-ms-input-placeholder {\n  color: rgba(54, 54, 54, 0.3);\n}\n.select select:hover, .textarea:hover, .input:hover, .select select.is-hovered, .is-hovered.textarea, .is-hovered.input {\n  border-color: hsl(0, 0%, 71%);\n}\n.select select:focus, .textarea:focus, .input:focus, .select select.is-focused, .is-focused.textarea, .is-focused.input, .select select:active, .textarea:active, .input:active, .select select.is-active, .is-active.textarea, .is-active.input {\n  border-color: hsl(229, 53%, 53%);\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.select select[disabled], [disabled].textarea, [disabled].input, fieldset[disabled] .select select, .select fieldset[disabled] select, fieldset[disabled] .textarea, fieldset[disabled] .input {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 96%);\n  box-shadow: none;\n  color: hsl(0, 0%, 48%);\n}\n.select select[disabled]::-moz-placeholder, [disabled].textarea::-moz-placeholder, [disabled].input::-moz-placeholder, fieldset[disabled] .select select::-moz-placeholder, .select fieldset[disabled] select::-moz-placeholder, fieldset[disabled] .textarea::-moz-placeholder, fieldset[disabled] .input::-moz-placeholder {\n  color: rgba(122, 122, 122, 0.3);\n}\n.select select[disabled]::-webkit-input-placeholder, [disabled].textarea::-webkit-input-placeholder, [disabled].input::-webkit-input-placeholder, fieldset[disabled] .select select::-webkit-input-placeholder, .select fieldset[disabled] select::-webkit-input-placeholder, fieldset[disabled] .textarea::-webkit-input-placeholder, fieldset[disabled] .input::-webkit-input-placeholder {\n  color: rgba(122, 122, 122, 0.3);\n}\n.select select[disabled]:-moz-placeholder, [disabled].textarea:-moz-placeholder, [disabled].input:-moz-placeholder, fieldset[disabled] .select select:-moz-placeholder, .select fieldset[disabled] select:-moz-placeholder, fieldset[disabled] .textarea:-moz-placeholder, fieldset[disabled] .input:-moz-placeholder {\n  color: rgba(122, 122, 122, 0.3);\n}\n.select select[disabled]:-ms-input-placeholder, [disabled].textarea:-ms-input-placeholder, [disabled].input:-ms-input-placeholder, fieldset[disabled] .select select:-ms-input-placeholder, .select fieldset[disabled] select:-ms-input-placeholder, fieldset[disabled] .textarea:-ms-input-placeholder, fieldset[disabled] .input:-ms-input-placeholder {\n  color: rgba(122, 122, 122, 0.3);\n}\n\n.textarea, .input {\n  box-shadow: inset 0 0.0625em 0.125em rgba(10, 10, 10, 0.05);\n  max-width: 100%;\n  width: 100%;\n}\n[readonly].textarea, [readonly].input {\n  box-shadow: none;\n}\n.is-white.textarea, .is-white.input {\n  border-color: hsl(0, 0%, 100%);\n}\n.is-white.textarea:focus, .is-white.input:focus, .is-white.is-focused.textarea, .is-white.is-focused.input, .is-white.textarea:active, .is-white.input:active, .is-white.is-active.textarea, .is-white.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25);\n}\n.is-black.textarea, .is-black.input {\n  border-color: hsl(0, 0%, 4%);\n}\n.is-black.textarea:focus, .is-black.input:focus, .is-black.is-focused.textarea, .is-black.is-focused.input, .is-black.textarea:active, .is-black.input:active, .is-black.is-active.textarea, .is-black.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25);\n}\n.is-light.textarea, .is-light.input {\n  border-color: hsl(0, 0%, 96%);\n}\n.is-light.textarea:focus, .is-light.input:focus, .is-light.is-focused.textarea, .is-light.is-focused.input, .is-light.textarea:active, .is-light.input:active, .is-light.is-active.textarea, .is-light.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25);\n}\n.is-dark.textarea, .is-dark.input {\n  border-color: hsl(0, 0%, 21%);\n}\n.is-dark.textarea:focus, .is-dark.input:focus, .is-dark.is-focused.textarea, .is-dark.is-focused.input, .is-dark.textarea:active, .is-dark.input:active, .is-dark.is-active.textarea, .is-dark.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25);\n}\n.is-primary.textarea, .is-primary.input {\n  border-color: hsl(171, 100%, 41%);\n}\n.is-primary.textarea:focus, .is-primary.input:focus, .is-primary.is-focused.textarea, .is-primary.is-focused.input, .is-primary.textarea:active, .is-primary.input:active, .is-primary.is-active.textarea, .is-primary.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25);\n}\n.is-link.textarea, .is-link.input {\n  border-color: hsl(229, 53%, 53%);\n}\n.is-link.textarea:focus, .is-link.input:focus, .is-link.is-focused.textarea, .is-link.is-focused.input, .is-link.textarea:active, .is-link.input:active, .is-link.is-active.textarea, .is-link.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.is-info.textarea, .is-info.input {\n  border-color: hsl(207, 61%, 53%);\n}\n.is-info.textarea:focus, .is-info.input:focus, .is-info.is-focused.textarea, .is-info.is-focused.input, .is-info.textarea:active, .is-info.input:active, .is-info.is-active.textarea, .is-info.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(62, 142, 208, 0.25);\n}\n.is-success.textarea, .is-success.input {\n  border-color: hsl(153, 53%, 53%);\n}\n.is-success.textarea:focus, .is-success.input:focus, .is-success.is-focused.textarea, .is-success.is-focused.input, .is-success.textarea:active, .is-success.input:active, .is-success.is-active.textarea, .is-success.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(72, 199, 142, 0.25);\n}\n.is-warning.textarea, .is-warning.input {\n  border-color: hsl(44, 100%, 77%);\n}\n.is-warning.textarea:focus, .is-warning.input:focus, .is-warning.is-focused.textarea, .is-warning.is-focused.input, .is-warning.textarea:active, .is-warning.input:active, .is-warning.is-active.textarea, .is-warning.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(255, 224, 138, 0.25);\n}\n.is-danger.textarea, .is-danger.input {\n  border-color: hsl(348, 86%, 61%);\n}\n.is-danger.textarea:focus, .is-danger.input:focus, .is-danger.is-focused.textarea, .is-danger.is-focused.input, .is-danger.textarea:active, .is-danger.input:active, .is-danger.is-active.textarea, .is-danger.is-active.input {\n  box-shadow: 0 0 0 0.125em rgba(241, 70, 104, 0.25);\n}\n.is-small.textarea, .is-small.input {\n  border-radius: 2px;\n  font-size: 0.75rem;\n}\n.is-medium.textarea, .is-medium.input {\n  font-size: 1.25rem;\n}\n.is-large.textarea, .is-large.input {\n  font-size: 1.5rem;\n}\n.is-fullwidth.textarea, .is-fullwidth.input {\n  display: block;\n  width: 100%;\n}\n.is-inline.textarea, .is-inline.input {\n  display: inline;\n  width: auto;\n}\n\n.input.is-rounded {\n  border-radius: 9999px;\n  padding-left: calc(calc(0.75em - 1px) + 0.375em);\n  padding-right: calc(calc(0.75em - 1px) + 0.375em);\n}\n.input.is-static {\n  background-color: transparent;\n  border-color: transparent;\n  box-shadow: none;\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.textarea {\n  display: block;\n  max-width: 100%;\n  min-width: 100%;\n  padding: calc(0.75em - 1px);\n  resize: vertical;\n}\n.textarea:not([rows]) {\n  max-height: 40em;\n  min-height: 8em;\n}\n.textarea[rows] {\n  height: initial;\n}\n.textarea.has-fixed-size {\n  resize: none;\n}\n\n.radio, .checkbox {\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1.25;\n  position: relative;\n}\n.radio input, .checkbox input {\n  cursor: pointer;\n}\n.radio:hover, .checkbox:hover {\n  color: hsl(0, 0%, 21%);\n}\n[disabled].radio, [disabled].checkbox, fieldset[disabled] .radio, fieldset[disabled] .checkbox,\n.radio input[disabled],\n.checkbox input[disabled] {\n  color: hsl(0, 0%, 48%);\n  cursor: not-allowed;\n}\n\n.radio + .radio {\n  margin-left: 0.5em;\n}\n\n.select {\n  display: inline-block;\n  max-width: 100%;\n  position: relative;\n  vertical-align: top;\n}\n.select:not(.is-multiple) {\n  height: 2.5em;\n}\n.select:not(.is-multiple):not(.is-loading)::after {\n  border-color: hsl(229, 53%, 53%);\n  right: 1.125em;\n  z-index: 4;\n}\n.select.is-rounded select {\n  border-radius: 9999px;\n  padding-left: 1em;\n}\n.select select {\n  cursor: pointer;\n  display: block;\n  font-size: 1em;\n  max-width: 100%;\n  outline: none;\n}\n.select select::-ms-expand {\n  display: none;\n}\n.select select[disabled]:hover, fieldset[disabled] .select select:hover {\n  border-color: hsl(0, 0%, 96%);\n}\n.select select:not([multiple]) {\n  padding-right: 2.5em;\n}\n.select select[multiple] {\n  height: auto;\n  padding: 0;\n}\n.select select[multiple] option {\n  padding: 0.5em 1em;\n}\n.select:not(.is-multiple):not(.is-loading):hover::after {\n  border-color: hsl(0, 0%, 21%);\n}\n.select.is-white:not(:hover)::after {\n  border-color: hsl(0, 0%, 100%);\n}\n.select.is-white select {\n  border-color: hsl(0, 0%, 100%);\n}\n.select.is-white select:hover, .select.is-white select.is-hovered {\n  border-color: #f2f2f2;\n}\n.select.is-white select:focus, .select.is-white select.is-focused, .select.is-white select:active, .select.is-white select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25);\n}\n.select.is-black:not(:hover)::after {\n  border-color: hsl(0, 0%, 4%);\n}\n.select.is-black select {\n  border-color: hsl(0, 0%, 4%);\n}\n.select.is-black select:hover, .select.is-black select.is-hovered {\n  border-color: black;\n}\n.select.is-black select:focus, .select.is-black select.is-focused, .select.is-black select:active, .select.is-black select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25);\n}\n.select.is-light:not(:hover)::after {\n  border-color: hsl(0, 0%, 96%);\n}\n.select.is-light select {\n  border-color: hsl(0, 0%, 96%);\n}\n.select.is-light select:hover, .select.is-light select.is-hovered {\n  border-color: #e8e8e8;\n}\n.select.is-light select:focus, .select.is-light select.is-focused, .select.is-light select:active, .select.is-light select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25);\n}\n.select.is-dark:not(:hover)::after {\n  border-color: hsl(0, 0%, 21%);\n}\n.select.is-dark select {\n  border-color: hsl(0, 0%, 21%);\n}\n.select.is-dark select:hover, .select.is-dark select.is-hovered {\n  border-color: #292929;\n}\n.select.is-dark select:focus, .select.is-dark select.is-focused, .select.is-dark select:active, .select.is-dark select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25);\n}\n.select.is-primary:not(:hover)::after {\n  border-color: hsl(171, 100%, 41%);\n}\n.select.is-primary select {\n  border-color: hsl(171, 100%, 41%);\n}\n.select.is-primary select:hover, .select.is-primary select.is-hovered {\n  border-color: #00b89c;\n}\n.select.is-primary select:focus, .select.is-primary select.is-focused, .select.is-primary select:active, .select.is-primary select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(0, 209, 178, 0.25);\n}\n.select.is-link:not(:hover)::after {\n  border-color: hsl(229, 53%, 53%);\n}\n.select.is-link select {\n  border-color: hsl(229, 53%, 53%);\n}\n.select.is-link select:hover, .select.is-link select.is-hovered {\n  border-color: #3a51bb;\n}\n.select.is-link select:focus, .select.is-link select.is-focused, .select.is-link select:active, .select.is-link select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(72, 95, 199, 0.25);\n}\n.select.is-info:not(:hover)::after {\n  border-color: hsl(207, 61%, 53%);\n}\n.select.is-info select {\n  border-color: hsl(207, 61%, 53%);\n}\n.select.is-info select:hover, .select.is-info select.is-hovered {\n  border-color: #3082c5;\n}\n.select.is-info select:focus, .select.is-info select.is-focused, .select.is-info select:active, .select.is-info select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(62, 142, 208, 0.25);\n}\n.select.is-success:not(:hover)::after {\n  border-color: hsl(153, 53%, 53%);\n}\n.select.is-success select {\n  border-color: hsl(153, 53%, 53%);\n}\n.select.is-success select:hover, .select.is-success select.is-hovered {\n  border-color: #3abb81;\n}\n.select.is-success select:focus, .select.is-success select.is-focused, .select.is-success select:active, .select.is-success select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(72, 199, 142, 0.25);\n}\n.select.is-warning:not(:hover)::after {\n  border-color: hsl(44, 100%, 77%);\n}\n.select.is-warning select {\n  border-color: hsl(44, 100%, 77%);\n}\n.select.is-warning select:hover, .select.is-warning select.is-hovered {\n  border-color: #ffd970;\n}\n.select.is-warning select:focus, .select.is-warning select.is-focused, .select.is-warning select:active, .select.is-warning select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(255, 224, 138, 0.25);\n}\n.select.is-danger:not(:hover)::after {\n  border-color: hsl(348, 86%, 61%);\n}\n.select.is-danger select {\n  border-color: hsl(348, 86%, 61%);\n}\n.select.is-danger select:hover, .select.is-danger select.is-hovered {\n  border-color: #ef2e55;\n}\n.select.is-danger select:focus, .select.is-danger select.is-focused, .select.is-danger select:active, .select.is-danger select.is-active {\n  box-shadow: 0 0 0 0.125em rgba(241, 70, 104, 0.25);\n}\n.select.is-small {\n  border-radius: 2px;\n  font-size: 0.75rem;\n}\n.select.is-medium {\n  font-size: 1.25rem;\n}\n.select.is-large {\n  font-size: 1.5rem;\n}\n.select.is-disabled::after {\n  border-color: hsl(0, 0%, 48%) !important;\n  opacity: 0.5;\n}\n.select.is-fullwidth {\n  width: 100%;\n}\n.select.is-fullwidth select {\n  width: 100%;\n}\n.select.is-loading::after {\n  margin-top: 0;\n  position: absolute;\n  right: 0.625em;\n  top: 0.625em;\n  transform: none;\n}\n.select.is-loading.is-small:after {\n  font-size: 0.75rem;\n}\n.select.is-loading.is-medium:after {\n  font-size: 1.25rem;\n}\n.select.is-loading.is-large:after {\n  font-size: 1.5rem;\n}\n\n.file {\n  align-items: stretch;\n  display: flex;\n  justify-content: flex-start;\n  position: relative;\n}\n.file.is-white .file-cta {\n  background-color: hsl(0, 0%, 100%);\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.file.is-white:hover .file-cta, .file.is-white.is-hovered .file-cta {\n  background-color: #f9f9f9;\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.file.is-white:focus .file-cta, .file.is-white.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(255, 255, 255, 0.25);\n  color: hsl(0, 0%, 4%);\n}\n.file.is-white:active .file-cta, .file.is-white.is-active .file-cta {\n  background-color: #f2f2f2;\n  border-color: transparent;\n  color: hsl(0, 0%, 4%);\n}\n.file.is-black .file-cta {\n  background-color: hsl(0, 0%, 4%);\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.file.is-black:hover .file-cta, .file.is-black.is-hovered .file-cta {\n  background-color: #040404;\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.file.is-black:focus .file-cta, .file.is-black.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(10, 10, 10, 0.25);\n  color: hsl(0, 0%, 100%);\n}\n.file.is-black:active .file-cta, .file.is-black.is-active .file-cta {\n  background-color: black;\n  border-color: transparent;\n  color: hsl(0, 0%, 100%);\n}\n.file.is-light .file-cta {\n  background-color: hsl(0, 0%, 96%);\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-light:hover .file-cta, .file.is-light.is-hovered .file-cta {\n  background-color: #eeeeee;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-light:focus .file-cta, .file.is-light.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(245, 245, 245, 0.25);\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-light:active .file-cta, .file.is-light.is-active .file-cta {\n  background-color: #e8e8e8;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-dark .file-cta {\n  background-color: hsl(0, 0%, 21%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-dark:hover .file-cta, .file.is-dark.is-hovered .file-cta {\n  background-color: #2f2f2f;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-dark:focus .file-cta, .file.is-dark.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(54, 54, 54, 0.25);\n  color: #fff;\n}\n.file.is-dark:active .file-cta, .file.is-dark.is-active .file-cta {\n  background-color: #292929;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-primary .file-cta {\n  background-color: hsl(171, 100%, 41%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-primary:hover .file-cta, .file.is-primary.is-hovered .file-cta {\n  background-color: #00c4a7;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-primary:focus .file-cta, .file.is-primary.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(0, 209, 178, 0.25);\n  color: #fff;\n}\n.file.is-primary:active .file-cta, .file.is-primary.is-active .file-cta {\n  background-color: #00b89c;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-link .file-cta {\n  background-color: hsl(229, 53%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-link:hover .file-cta, .file.is-link.is-hovered .file-cta {\n  background-color: #3e56c4;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-link:focus .file-cta, .file.is-link.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(72, 95, 199, 0.25);\n  color: #fff;\n}\n.file.is-link:active .file-cta, .file.is-link.is-active .file-cta {\n  background-color: #3a51bb;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-info .file-cta {\n  background-color: hsl(207, 61%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-info:hover .file-cta, .file.is-info.is-hovered .file-cta {\n  background-color: #3488ce;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-info:focus .file-cta, .file.is-info.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(62, 142, 208, 0.25);\n  color: #fff;\n}\n.file.is-info:active .file-cta, .file.is-info.is-active .file-cta {\n  background-color: #3082c5;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-success .file-cta {\n  background-color: hsl(153, 53%, 53%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-success:hover .file-cta, .file.is-success.is-hovered .file-cta {\n  background-color: #3ec487;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-success:focus .file-cta, .file.is-success.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(72, 199, 142, 0.25);\n  color: #fff;\n}\n.file.is-success:active .file-cta, .file.is-success.is-active .file-cta {\n  background-color: #3abb81;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-warning .file-cta {\n  background-color: hsl(44, 100%, 77%);\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-warning:hover .file-cta, .file.is-warning.is-hovered .file-cta {\n  background-color: #ffdc7d;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-warning:focus .file-cta, .file.is-warning.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(255, 224, 138, 0.25);\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-warning:active .file-cta, .file.is-warning.is-active .file-cta {\n  background-color: #ffd970;\n  border-color: transparent;\n  color: rgba(0, 0, 0, 0.7);\n}\n.file.is-danger .file-cta {\n  background-color: hsl(348, 86%, 61%);\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-danger:hover .file-cta, .file.is-danger.is-hovered .file-cta {\n  background-color: #f03a5f;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-danger:focus .file-cta, .file.is-danger.is-focused .file-cta {\n  border-color: transparent;\n  box-shadow: 0 0 0.5em rgba(241, 70, 104, 0.25);\n  color: #fff;\n}\n.file.is-danger:active .file-cta, .file.is-danger.is-active .file-cta {\n  background-color: #ef2e55;\n  border-color: transparent;\n  color: #fff;\n}\n.file.is-small {\n  font-size: 0.75rem;\n}\n.file.is-normal {\n  font-size: 1rem;\n}\n.file.is-medium {\n  font-size: 1.25rem;\n}\n.file.is-medium .file-icon .fa {\n  font-size: 21px;\n}\n.file.is-large {\n  font-size: 1.5rem;\n}\n.file.is-large .file-icon .fa {\n  font-size: 28px;\n}\n.file.has-name .file-cta {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.file.has-name .file-name {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.file.has-name.is-empty .file-cta {\n  border-radius: 4px;\n}\n.file.has-name.is-empty .file-name {\n  display: none;\n}\n.file.is-boxed .file-label {\n  flex-direction: column;\n}\n.file.is-boxed .file-cta {\n  flex-direction: column;\n  height: auto;\n  padding: 1em 3em;\n}\n.file.is-boxed .file-name {\n  border-width: 0 1px 1px;\n}\n.file.is-boxed .file-icon {\n  height: 1.5em;\n  width: 1.5em;\n}\n.file.is-boxed .file-icon .fa {\n  font-size: 21px;\n}\n.file.is-boxed.is-small .file-icon .fa {\n  font-size: 14px;\n}\n.file.is-boxed.is-medium .file-icon .fa {\n  font-size: 28px;\n}\n.file.is-boxed.is-large .file-icon .fa {\n  font-size: 35px;\n}\n.file.is-boxed.has-name .file-cta {\n  border-radius: 4px 4px 0 0;\n}\n.file.is-boxed.has-name .file-name {\n  border-radius: 0 0 4px 4px;\n  border-width: 0 1px 1px;\n}\n.file.is-centered {\n  justify-content: center;\n}\n.file.is-fullwidth .file-label {\n  width: 100%;\n}\n.file.is-fullwidth .file-name {\n  flex-grow: 1;\n  max-width: none;\n}\n.file.is-right {\n  justify-content: flex-end;\n}\n.file.is-right .file-cta {\n  border-radius: 0 4px 4px 0;\n}\n.file.is-right .file-name {\n  border-radius: 4px 0 0 4px;\n  border-width: 1px 0 1px 1px;\n  order: -1;\n}\n\n.file-label {\n  align-items: stretch;\n  display: flex;\n  cursor: pointer;\n  justify-content: flex-start;\n  overflow: hidden;\n  position: relative;\n}\n.file-label:hover .file-cta {\n  background-color: #eeeeee;\n  color: hsl(0, 0%, 21%);\n}\n.file-label:hover .file-name {\n  border-color: #d5d5d5;\n}\n.file-label:active .file-cta {\n  background-color: #e8e8e8;\n  color: hsl(0, 0%, 21%);\n}\n.file-label:active .file-name {\n  border-color: #cfcfcf;\n}\n\n.file-input {\n  height: 100%;\n  left: 0;\n  opacity: 0;\n  outline: none;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n\n.file-cta,\n.file-name {\n  border-color: hsl(0, 0%, 86%);\n  border-radius: 4px;\n  font-size: 1em;\n  padding-left: 1em;\n  padding-right: 1em;\n  white-space: nowrap;\n}\n\n.file-cta {\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 29%);\n}\n\n.file-name {\n  border-color: hsl(0, 0%, 86%);\n  border-style: solid;\n  border-width: 1px 1px 1px 0;\n  display: block;\n  max-width: 16em;\n  overflow: hidden;\n  text-align: inherit;\n  text-overflow: ellipsis;\n}\n\n.file-icon {\n  align-items: center;\n  display: flex;\n  height: 1em;\n  justify-content: center;\n  margin-right: 0.5em;\n  width: 1em;\n}\n.file-icon .fa {\n  font-size: 14px;\n}\n\n.label {\n  color: hsl(0, 0%, 21%);\n  display: block;\n  font-size: 1rem;\n  font-weight: 700;\n}\n.label:not(:last-child) {\n  margin-bottom: 0.5em;\n}\n.label.is-small {\n  font-size: 0.75rem;\n}\n.label.is-medium {\n  font-size: 1.25rem;\n}\n.label.is-large {\n  font-size: 1.5rem;\n}\n\n.help {\n  display: block;\n  font-size: 0.75rem;\n  margin-top: 0.25rem;\n}\n.help.is-white {\n  color: hsl(0, 0%, 100%);\n}\n.help.is-black {\n  color: hsl(0, 0%, 4%);\n}\n.help.is-light {\n  color: hsl(0, 0%, 96%);\n}\n.help.is-dark {\n  color: hsl(0, 0%, 21%);\n}\n.help.is-primary {\n  color: hsl(171, 100%, 41%);\n}\n.help.is-link {\n  color: hsl(229, 53%, 53%);\n}\n.help.is-info {\n  color: hsl(207, 61%, 53%);\n}\n.help.is-success {\n  color: hsl(153, 53%, 53%);\n}\n.help.is-warning {\n  color: hsl(44, 100%, 77%);\n}\n.help.is-danger {\n  color: hsl(348, 86%, 61%);\n}\n\n.field:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n.field.has-addons {\n  display: flex;\n  justify-content: flex-start;\n}\n.field.has-addons .control:not(:last-child) {\n  margin-right: -1px;\n}\n.field.has-addons .control:not(:first-child):not(:last-child) .button,\n.field.has-addons .control:not(:first-child):not(:last-child) .input,\n.field.has-addons .control:not(:first-child):not(:last-child) .select select {\n  border-radius: 0;\n}\n.field.has-addons .control:first-child:not(:only-child) .button,\n.field.has-addons .control:first-child:not(:only-child) .input,\n.field.has-addons .control:first-child:not(:only-child) .select select {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.field.has-addons .control:last-child:not(:only-child) .button,\n.field.has-addons .control:last-child:not(:only-child) .input,\n.field.has-addons .control:last-child:not(:only-child) .select select {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.field.has-addons .control .button:not([disabled]):hover, .field.has-addons .control .button:not([disabled]).is-hovered,\n.field.has-addons .control .input:not([disabled]):hover,\n.field.has-addons .control .input:not([disabled]).is-hovered,\n.field.has-addons .control .select select:not([disabled]):hover,\n.field.has-addons .control .select select:not([disabled]).is-hovered {\n  z-index: 2;\n}\n.field.has-addons .control .button:not([disabled]):focus, .field.has-addons .control .button:not([disabled]).is-focused, .field.has-addons .control .button:not([disabled]):active, .field.has-addons .control .button:not([disabled]).is-active,\n.field.has-addons .control .input:not([disabled]):focus,\n.field.has-addons .control .input:not([disabled]).is-focused,\n.field.has-addons .control .input:not([disabled]):active,\n.field.has-addons .control .input:not([disabled]).is-active,\n.field.has-addons .control .select select:not([disabled]):focus,\n.field.has-addons .control .select select:not([disabled]).is-focused,\n.field.has-addons .control .select select:not([disabled]):active,\n.field.has-addons .control .select select:not([disabled]).is-active {\n  z-index: 3;\n}\n.field.has-addons .control .button:not([disabled]):focus:hover, .field.has-addons .control .button:not([disabled]).is-focused:hover, .field.has-addons .control .button:not([disabled]):active:hover, .field.has-addons .control .button:not([disabled]).is-active:hover,\n.field.has-addons .control .input:not([disabled]):focus:hover,\n.field.has-addons .control .input:not([disabled]).is-focused:hover,\n.field.has-addons .control .input:not([disabled]):active:hover,\n.field.has-addons .control .input:not([disabled]).is-active:hover,\n.field.has-addons .control .select select:not([disabled]):focus:hover,\n.field.has-addons .control .select select:not([disabled]).is-focused:hover,\n.field.has-addons .control .select select:not([disabled]):active:hover,\n.field.has-addons .control .select select:not([disabled]).is-active:hover {\n  z-index: 4;\n}\n.field.has-addons .control.is-expanded {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.field.has-addons.has-addons-centered {\n  justify-content: center;\n}\n.field.has-addons.has-addons-right {\n  justify-content: flex-end;\n}\n.field.has-addons.has-addons-fullwidth .control {\n  flex-grow: 1;\n  flex-shrink: 0;\n}\n.field.is-grouped {\n  display: flex;\n  justify-content: flex-start;\n}\n.field.is-grouped > .control {\n  flex-shrink: 0;\n}\n.field.is-grouped > .control:not(:last-child) {\n  margin-bottom: 0;\n  margin-right: 0.75rem;\n}\n.field.is-grouped > .control.is-expanded {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.field.is-grouped.is-grouped-centered {\n  justify-content: center;\n}\n.field.is-grouped.is-grouped-right {\n  justify-content: flex-end;\n}\n.field.is-grouped.is-grouped-multiline {\n  flex-wrap: wrap;\n}\n.field.is-grouped.is-grouped-multiline > .control:last-child, .field.is-grouped.is-grouped-multiline > .control:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n.field.is-grouped.is-grouped-multiline:last-child {\n  margin-bottom: -0.75rem;\n}\n.field.is-grouped.is-grouped-multiline:not(:last-child) {\n  margin-bottom: 0;\n}\n@media screen and (min-width: 769px), print {\n  .field.is-horizontal {\n    display: flex;\n  }\n}\n\n.field-label .label {\n  font-size: inherit;\n}\n@media screen and (max-width: 768px) {\n  .field-label {\n    margin-bottom: 0.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .field-label {\n    flex-basis: 0;\n    flex-grow: 1;\n    flex-shrink: 0;\n    margin-right: 1.5rem;\n    text-align: right;\n  }\n  .field-label.is-small {\n    font-size: 0.75rem;\n    padding-top: 0.375em;\n  }\n  .field-label.is-normal {\n    padding-top: 0.375em;\n  }\n  .field-label.is-medium {\n    font-size: 1.25rem;\n    padding-top: 0.375em;\n  }\n  .field-label.is-large {\n    font-size: 1.5rem;\n    padding-top: 0.375em;\n  }\n}\n\n.field-body .field .field {\n  margin-bottom: 0;\n}\n@media screen and (min-width: 769px), print {\n  .field-body {\n    display: flex;\n    flex-basis: 0;\n    flex-grow: 5;\n    flex-shrink: 1;\n  }\n  .field-body .field {\n    margin-bottom: 0;\n  }\n  .field-body > .field {\n    flex-shrink: 1;\n  }\n  .field-body > .field:not(.is-narrow) {\n    flex-grow: 1;\n  }\n  .field-body > .field:not(:last-child) {\n    margin-right: 0.75rem;\n  }\n}\n\n.control {\n  box-sizing: border-box;\n  clear: both;\n  font-size: 1rem;\n  position: relative;\n  text-align: inherit;\n}\n.control.has-icons-left .input:focus ~ .icon,\n.control.has-icons-left .select:focus ~ .icon, .control.has-icons-right .input:focus ~ .icon,\n.control.has-icons-right .select:focus ~ .icon {\n  color: hsl(0, 0%, 29%);\n}\n.control.has-icons-left .input.is-small ~ .icon,\n.control.has-icons-left .select.is-small ~ .icon, .control.has-icons-right .input.is-small ~ .icon,\n.control.has-icons-right .select.is-small ~ .icon {\n  font-size: 0.75rem;\n}\n.control.has-icons-left .input.is-medium ~ .icon,\n.control.has-icons-left .select.is-medium ~ .icon, .control.has-icons-right .input.is-medium ~ .icon,\n.control.has-icons-right .select.is-medium ~ .icon {\n  font-size: 1.25rem;\n}\n.control.has-icons-left .input.is-large ~ .icon,\n.control.has-icons-left .select.is-large ~ .icon, .control.has-icons-right .input.is-large ~ .icon,\n.control.has-icons-right .select.is-large ~ .icon {\n  font-size: 1.5rem;\n}\n.control.has-icons-left .icon, .control.has-icons-right .icon {\n  color: hsl(0, 0%, 86%);\n  height: 2.5em;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  width: 2.5em;\n  z-index: 4;\n}\n.control.has-icons-left .input,\n.control.has-icons-left .select select {\n  padding-left: 2.5em;\n}\n.control.has-icons-left .icon.is-left {\n  left: 0;\n}\n.control.has-icons-right .input,\n.control.has-icons-right .select select {\n  padding-right: 2.5em;\n}\n.control.has-icons-right .icon.is-right {\n  right: 0;\n}\n.control.is-loading::after {\n  position: absolute !important;\n  right: 0.625em;\n  top: 0.625em;\n  z-index: 4;\n}\n.control.is-loading.is-small:after {\n  font-size: 0.75rem;\n}\n.control.is-loading.is-medium:after {\n  font-size: 1.25rem;\n}\n.control.is-loading.is-large:after {\n  font-size: 1.5rem;\n}\n\n/* Bulma Components */\n.breadcrumb {\n  font-size: 1rem;\n  white-space: nowrap;\n}\n.breadcrumb a {\n  align-items: center;\n  color: hsl(229, 53%, 53%);\n  display: flex;\n  justify-content: center;\n  padding: 0 0.75em;\n}\n.breadcrumb a:hover {\n  color: hsl(0, 0%, 21%);\n}\n.breadcrumb li {\n  align-items: center;\n  display: flex;\n}\n.breadcrumb li:first-child a {\n  padding-left: 0;\n}\n.breadcrumb li.is-active a {\n  color: hsl(0, 0%, 21%);\n  cursor: default;\n  pointer-events: none;\n}\n.breadcrumb li + li::before {\n  color: hsl(0, 0%, 71%);\n  content: \"/\";\n}\n.breadcrumb ul,\n.breadcrumb ol {\n  align-items: flex-start;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n}\n.breadcrumb .icon:first-child {\n  margin-right: 0.5em;\n}\n.breadcrumb .icon:last-child {\n  margin-left: 0.5em;\n}\n.breadcrumb.is-centered ol,\n.breadcrumb.is-centered ul {\n  justify-content: center;\n}\n.breadcrumb.is-right ol,\n.breadcrumb.is-right ul {\n  justify-content: flex-end;\n}\n.breadcrumb.is-small {\n  font-size: 0.75rem;\n}\n.breadcrumb.is-medium {\n  font-size: 1.25rem;\n}\n.breadcrumb.is-large {\n  font-size: 1.5rem;\n}\n.breadcrumb.has-arrow-separator li + li::before {\n  content: \"→\";\n}\n.breadcrumb.has-bullet-separator li + li::before {\n  content: \"•\";\n}\n.breadcrumb.has-dot-separator li + li::before {\n  content: \"·\";\n}\n.breadcrumb.has-succeeds-separator li + li::before {\n  content: \"≻\";\n}\n\n.card {\n  background-color: hsl(0, 0%, 100%);\n  border-radius: 0.25rem;\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\n  color: hsl(0, 0%, 29%);\n  max-width: 100%;\n  position: relative;\n}\n\n.card-footer:first-child, .card-content:first-child, .card-header:first-child {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n.card-footer:last-child, .card-content:last-child, .card-header:last-child {\n  border-bottom-left-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n}\n\n.card-header {\n  background-color: transparent;\n  align-items: stretch;\n  box-shadow: 0 0.125em 0.25em rgba(10, 10, 10, 0.1);\n  display: flex;\n}\n\n.card-header-title {\n  align-items: center;\n  color: hsl(0, 0%, 21%);\n  display: flex;\n  flex-grow: 1;\n  font-weight: 700;\n  padding: 0.75rem 1rem;\n}\n.card-header-title.is-centered {\n  justify-content: center;\n}\n\n.card-header-icon {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n  background: none;\n  border: none;\n  color: currentColor;\n  font-family: inherit;\n  font-size: 1em;\n  margin: 0;\n  padding: 0;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  padding: 0.75rem 1rem;\n}\n\n.card-image {\n  display: block;\n  position: relative;\n}\n.card-image:first-child img {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n.card-image:last-child img {\n  border-bottom-left-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n}\n\n.card-content {\n  background-color: transparent;\n  padding: 1.5rem;\n}\n\n.card-footer {\n  background-color: transparent;\n  border-top: 1px solid hsl(0, 0%, 93%);\n  align-items: stretch;\n  display: flex;\n}\n\n.card-footer-item {\n  align-items: center;\n  display: flex;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 0;\n  justify-content: center;\n  padding: 0.75rem;\n}\n.card-footer-item:not(:last-child) {\n  border-right: 1px solid hsl(0, 0%, 93%);\n}\n\n.card .media:not(:last-child) {\n  margin-bottom: 1.5rem;\n}\n\n.dropdown {\n  display: inline-flex;\n  position: relative;\n  vertical-align: top;\n}\n.dropdown.is-active .dropdown-menu, .dropdown.is-hoverable:hover .dropdown-menu {\n  display: block;\n}\n.dropdown.is-right .dropdown-menu {\n  left: auto;\n  right: 0;\n}\n.dropdown.is-up .dropdown-menu {\n  bottom: 100%;\n  padding-bottom: 4px;\n  padding-top: initial;\n  top: auto;\n}\n\n.dropdown-menu {\n  display: none;\n  left: 0;\n  min-width: 12rem;\n  padding-top: 4px;\n  position: absolute;\n  top: 100%;\n  z-index: 20;\n}\n\n.dropdown-content {\n  background-color: hsl(0, 0%, 100%);\n  border-radius: 4px;\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\n  padding-bottom: 0.5rem;\n  padding-top: 0.5rem;\n}\n\n.dropdown-item {\n  color: hsl(0, 0%, 29%);\n  display: block;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  padding: 0.375rem 1rem;\n  position: relative;\n}\n\na.dropdown-item,\nbutton.dropdown-item {\n  padding-right: 3rem;\n  text-align: inherit;\n  white-space: nowrap;\n  width: 100%;\n}\na.dropdown-item:hover,\nbutton.dropdown-item:hover {\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 4%);\n}\na.dropdown-item.is-active,\nbutton.dropdown-item.is-active {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n\n.dropdown-divider {\n  background-color: hsl(0, 0%, 93%);\n  border: none;\n  display: block;\n  height: 1px;\n  margin: 0.5rem 0;\n}\n\n.level {\n  align-items: center;\n  justify-content: space-between;\n}\n.level code {\n  border-radius: 4px;\n}\n.level img {\n  display: inline-block;\n  vertical-align: top;\n}\n.level.is-mobile {\n  display: flex;\n}\n.level.is-mobile .level-left,\n.level.is-mobile .level-right {\n  display: flex;\n}\n.level.is-mobile .level-left + .level-right {\n  margin-top: 0;\n}\n.level.is-mobile .level-item:not(:last-child) {\n  margin-bottom: 0;\n  margin-right: 0.75rem;\n}\n.level.is-mobile .level-item:not(.is-narrow) {\n  flex-grow: 1;\n}\n@media screen and (min-width: 769px), print {\n  .level {\n    display: flex;\n  }\n  .level > .level-item:not(.is-narrow) {\n    flex-grow: 1;\n  }\n}\n\n.level-item {\n  align-items: center;\n  display: flex;\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0;\n  justify-content: center;\n}\n.level-item .title,\n.level-item .subtitle {\n  margin-bottom: 0;\n}\n@media screen and (max-width: 768px) {\n  .level-item:not(:last-child) {\n    margin-bottom: 0.75rem;\n  }\n}\n\n.level-left,\n.level-right {\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n.level-left .level-item.is-flexible,\n.level-right .level-item.is-flexible {\n  flex-grow: 1;\n}\n@media screen and (min-width: 769px), print {\n  .level-left .level-item:not(:last-child),\n  .level-right .level-item:not(:last-child) {\n    margin-right: 0.75rem;\n  }\n}\n\n.level-left {\n  align-items: center;\n  justify-content: flex-start;\n}\n@media screen and (max-width: 768px) {\n  .level-left + .level-right {\n    margin-top: 1.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .level-left {\n    display: flex;\n  }\n}\n\n.level-right {\n  align-items: center;\n  justify-content: flex-end;\n}\n@media screen and (min-width: 769px), print {\n  .level-right {\n    display: flex;\n  }\n}\n\n.media {\n  align-items: flex-start;\n  display: flex;\n  text-align: inherit;\n}\n.media .content:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n.media .media {\n  border-top: 1px solid rgba(219, 219, 219, 0.5);\n  display: flex;\n  padding-top: 0.75rem;\n}\n.media .media .content:not(:last-child),\n.media .media .control:not(:last-child) {\n  margin-bottom: 0.5rem;\n}\n.media .media .media {\n  padding-top: 0.5rem;\n}\n.media .media .media + .media {\n  margin-top: 0.5rem;\n}\n.media + .media {\n  border-top: 1px solid rgba(219, 219, 219, 0.5);\n  margin-top: 1rem;\n  padding-top: 1rem;\n}\n.media.is-large + .media {\n  margin-top: 1.5rem;\n  padding-top: 1.5rem;\n}\n\n.media-left,\n.media-right {\n  flex-basis: auto;\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n\n.media-left {\n  margin-right: 1rem;\n}\n\n.media-right {\n  margin-left: 1rem;\n}\n\n.media-content {\n  flex-basis: auto;\n  flex-grow: 1;\n  flex-shrink: 1;\n  text-align: inherit;\n}\n\n@media screen and (max-width: 768px) {\n  .media-content {\n    overflow-x: auto;\n  }\n}\n.menu {\n  font-size: 1rem;\n}\n.menu.is-small {\n  font-size: 0.75rem;\n}\n.menu.is-medium {\n  font-size: 1.25rem;\n}\n.menu.is-large {\n  font-size: 1.5rem;\n}\n\n.menu-list {\n  line-height: 1.25;\n}\n.menu-list a {\n  border-radius: 2px;\n  color: hsl(0, 0%, 29%);\n  display: block;\n  padding: 0.5em 0.75em;\n}\n.menu-list a:hover {\n  background-color: hsl(0, 0%, 96%);\n  color: hsl(0, 0%, 21%);\n}\n.menu-list a.is-active {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.menu-list li ul {\n  border-left: 1px solid hsl(0, 0%, 86%);\n  margin: 0.75em;\n  padding-left: 0.75em;\n}\n\n.menu-label {\n  color: hsl(0, 0%, 48%);\n  font-size: 0.75em;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n}\n.menu-label:not(:first-child) {\n  margin-top: 1em;\n}\n.menu-label:not(:last-child) {\n  margin-bottom: 1em;\n}\n\n.message {\n  background-color: hsl(0, 0%, 96%);\n  border-radius: 4px;\n  font-size: 1rem;\n}\n.message strong {\n  color: currentColor;\n}\n.message a:not(.button):not(.tag):not(.dropdown-item) {\n  color: currentColor;\n  text-decoration: underline;\n}\n.message.is-small {\n  font-size: 0.75rem;\n}\n.message.is-medium {\n  font-size: 1.25rem;\n}\n.message.is-large {\n  font-size: 1.5rem;\n}\n.message.is-white {\n  background-color: white;\n}\n.message.is-white .message-header {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.message.is-white .message-body {\n  border-color: hsl(0, 0%, 100%);\n}\n.message.is-black {\n  background-color: #fafafa;\n}\n.message.is-black .message-header {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.message.is-black .message-body {\n  border-color: hsl(0, 0%, 4%);\n}\n.message.is-light {\n  background-color: #fafafa;\n}\n.message.is-light .message-header {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.message.is-light .message-body {\n  border-color: hsl(0, 0%, 96%);\n}\n.message.is-dark {\n  background-color: #fafafa;\n}\n.message.is-dark .message-header {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.message.is-dark .message-body {\n  border-color: hsl(0, 0%, 21%);\n}\n.message.is-primary {\n  background-color: #ebfffc;\n}\n.message.is-primary .message-header {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.message.is-primary .message-body {\n  border-color: hsl(171, 100%, 41%);\n  color: #00947e;\n}\n.message.is-link {\n  background-color: #eff1fa;\n}\n.message.is-link .message-header {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.message.is-link .message-body {\n  border-color: hsl(229, 53%, 53%);\n  color: #3850b7;\n}\n.message.is-info {\n  background-color: #eff5fb;\n}\n.message.is-info .message-header {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.message.is-info .message-body {\n  border-color: hsl(207, 61%, 53%);\n  color: #296fa8;\n}\n.message.is-success {\n  background-color: #effaf5;\n}\n.message.is-success .message-header {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.message.is-success .message-body {\n  border-color: hsl(153, 53%, 53%);\n  color: #257953;\n}\n.message.is-warning {\n  background-color: #fffaeb;\n}\n.message.is-warning .message-header {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.message.is-warning .message-body {\n  border-color: hsl(44, 100%, 77%);\n  color: #946c00;\n}\n.message.is-danger {\n  background-color: #feecf0;\n}\n.message.is-danger .message-header {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.message.is-danger .message-body {\n  border-color: hsl(348, 86%, 61%);\n  color: #cc0f35;\n}\n\n.message-header {\n  align-items: center;\n  background-color: hsl(0, 0%, 29%);\n  border-radius: 4px 4px 0 0;\n  color: #fff;\n  display: flex;\n  font-weight: 700;\n  justify-content: space-between;\n  line-height: 1.25;\n  padding: 0.75em 1em;\n  position: relative;\n}\n.message-header .delete {\n  flex-grow: 0;\n  flex-shrink: 0;\n  margin-left: 0.75em;\n}\n.message-header + .message-body {\n  border-width: 0;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.message-body {\n  border-color: hsl(0, 0%, 86%);\n  border-radius: 4px;\n  border-style: solid;\n  border-width: 0 0 0 4px;\n  color: hsl(0, 0%, 29%);\n  padding: 1.25em 1.5em;\n}\n.message-body code,\n.message-body pre {\n  background-color: hsl(0, 0%, 100%);\n}\n.message-body pre code {\n  background-color: transparent;\n}\n\n.modal {\n  align-items: center;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  overflow: hidden;\n  position: fixed;\n  z-index: 40;\n}\n.modal.is-active {\n  display: flex;\n}\n\n.modal-background {\n  background-color: rgba(10, 10, 10, 0.86);\n}\n\n.modal-content,\n.modal-card {\n  margin: 0 20px;\n  max-height: calc(100vh - 160px);\n  overflow: auto;\n  position: relative;\n  width: 100%;\n}\n@media screen and (min-width: 769px) {\n  .modal-content,\n  .modal-card {\n    margin: 0 auto;\n    max-height: calc(100vh - 40px);\n    width: 640px;\n  }\n}\n\n.modal-close {\n  background: none;\n  height: 40px;\n  position: fixed;\n  right: 20px;\n  top: 20px;\n  width: 40px;\n}\n\n.modal-card {\n  display: flex;\n  flex-direction: column;\n  max-height: calc(100vh - 40px);\n  overflow: hidden;\n  -ms-overflow-y: visible;\n}\n\n.modal-card-head,\n.modal-card-foot {\n  align-items: center;\n  background-color: hsl(0, 0%, 96%);\n  display: flex;\n  flex-shrink: 0;\n  justify-content: flex-start;\n  padding: 20px;\n  position: relative;\n}\n\n.modal-card-head {\n  border-bottom: 1px solid hsl(0, 0%, 86%);\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n}\n\n.modal-card-title {\n  color: hsl(0, 0%, 21%);\n  flex-grow: 1;\n  flex-shrink: 0;\n  font-size: 1.5rem;\n  line-height: 1;\n}\n\n.modal-card-foot {\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n  border-top: 1px solid hsl(0, 0%, 86%);\n}\n.modal-card-foot .button:not(:last-child) {\n  margin-right: 0.5em;\n}\n\n.modal-card-body {\n  -webkit-overflow-scrolling: touch;\n  background-color: hsl(0, 0%, 100%);\n  flex-grow: 1;\n  flex-shrink: 1;\n  overflow: auto;\n  padding: 20px;\n}\n\n.navbar {\n  background-color: hsl(0, 0%, 100%);\n  min-height: 3.25rem;\n  position: relative;\n  z-index: 30;\n}\n.navbar.is-white {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.navbar.is-white .navbar-brand > .navbar-item,\n.navbar.is-white .navbar-brand .navbar-link {\n  color: hsl(0, 0%, 4%);\n}\n.navbar.is-white .navbar-brand > a.navbar-item:focus, .navbar.is-white .navbar-brand > a.navbar-item:hover, .navbar.is-white .navbar-brand > a.navbar-item.is-active,\n.navbar.is-white .navbar-brand .navbar-link:focus,\n.navbar.is-white .navbar-brand .navbar-link:hover,\n.navbar.is-white .navbar-brand .navbar-link.is-active {\n  background-color: #f2f2f2;\n  color: hsl(0, 0%, 4%);\n}\n.navbar.is-white .navbar-brand .navbar-link::after {\n  border-color: hsl(0, 0%, 4%);\n}\n.navbar.is-white .navbar-burger {\n  color: hsl(0, 0%, 4%);\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-white .navbar-start > .navbar-item,\n  .navbar.is-white .navbar-start .navbar-link,\n  .navbar.is-white .navbar-end > .navbar-item,\n  .navbar.is-white .navbar-end .navbar-link {\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-white .navbar-start > a.navbar-item:focus, .navbar.is-white .navbar-start > a.navbar-item:hover, .navbar.is-white .navbar-start > a.navbar-item.is-active,\n  .navbar.is-white .navbar-start .navbar-link:focus,\n  .navbar.is-white .navbar-start .navbar-link:hover,\n  .navbar.is-white .navbar-start .navbar-link.is-active,\n  .navbar.is-white .navbar-end > a.navbar-item:focus,\n  .navbar.is-white .navbar-end > a.navbar-item:hover,\n  .navbar.is-white .navbar-end > a.navbar-item.is-active,\n  .navbar.is-white .navbar-end .navbar-link:focus,\n  .navbar.is-white .navbar-end .navbar-link:hover,\n  .navbar.is-white .navbar-end .navbar-link.is-active {\n    background-color: #f2f2f2;\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-white .navbar-start .navbar-link::after,\n  .navbar.is-white .navbar-end .navbar-link::after {\n    border-color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-white .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-white .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-white .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #f2f2f2;\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-white .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 100%);\n    color: hsl(0, 0%, 4%);\n  }\n}\n.navbar.is-black {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.navbar.is-black .navbar-brand > .navbar-item,\n.navbar.is-black .navbar-brand .navbar-link {\n  color: hsl(0, 0%, 100%);\n}\n.navbar.is-black .navbar-brand > a.navbar-item:focus, .navbar.is-black .navbar-brand > a.navbar-item:hover, .navbar.is-black .navbar-brand > a.navbar-item.is-active,\n.navbar.is-black .navbar-brand .navbar-link:focus,\n.navbar.is-black .navbar-brand .navbar-link:hover,\n.navbar.is-black .navbar-brand .navbar-link.is-active {\n  background-color: black;\n  color: hsl(0, 0%, 100%);\n}\n.navbar.is-black .navbar-brand .navbar-link::after {\n  border-color: hsl(0, 0%, 100%);\n}\n.navbar.is-black .navbar-burger {\n  color: hsl(0, 0%, 100%);\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-black .navbar-start > .navbar-item,\n  .navbar.is-black .navbar-start .navbar-link,\n  .navbar.is-black .navbar-end > .navbar-item,\n  .navbar.is-black .navbar-end .navbar-link {\n    color: hsl(0, 0%, 100%);\n  }\n  .navbar.is-black .navbar-start > a.navbar-item:focus, .navbar.is-black .navbar-start > a.navbar-item:hover, .navbar.is-black .navbar-start > a.navbar-item.is-active,\n  .navbar.is-black .navbar-start .navbar-link:focus,\n  .navbar.is-black .navbar-start .navbar-link:hover,\n  .navbar.is-black .navbar-start .navbar-link.is-active,\n  .navbar.is-black .navbar-end > a.navbar-item:focus,\n  .navbar.is-black .navbar-end > a.navbar-item:hover,\n  .navbar.is-black .navbar-end > a.navbar-item.is-active,\n  .navbar.is-black .navbar-end .navbar-link:focus,\n  .navbar.is-black .navbar-end .navbar-link:hover,\n  .navbar.is-black .navbar-end .navbar-link.is-active {\n    background-color: black;\n    color: hsl(0, 0%, 100%);\n  }\n  .navbar.is-black .navbar-start .navbar-link::after,\n  .navbar.is-black .navbar-end .navbar-link::after {\n    border-color: hsl(0, 0%, 100%);\n  }\n  .navbar.is-black .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-black .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-black .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: black;\n    color: hsl(0, 0%, 100%);\n  }\n  .navbar.is-black .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 4%);\n    color: hsl(0, 0%, 100%);\n  }\n}\n.navbar.is-light {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-light .navbar-brand > .navbar-item,\n.navbar.is-light .navbar-brand .navbar-link {\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-light .navbar-brand > a.navbar-item:focus, .navbar.is-light .navbar-brand > a.navbar-item:hover, .navbar.is-light .navbar-brand > a.navbar-item.is-active,\n.navbar.is-light .navbar-brand .navbar-link:focus,\n.navbar.is-light .navbar-brand .navbar-link:hover,\n.navbar.is-light .navbar-brand .navbar-link.is-active {\n  background-color: #e8e8e8;\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-light .navbar-brand .navbar-link::after {\n  border-color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-light .navbar-burger {\n  color: rgba(0, 0, 0, 0.7);\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-light .navbar-start > .navbar-item,\n  .navbar.is-light .navbar-start .navbar-link,\n  .navbar.is-light .navbar-end > .navbar-item,\n  .navbar.is-light .navbar-end .navbar-link {\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-light .navbar-start > a.navbar-item:focus, .navbar.is-light .navbar-start > a.navbar-item:hover, .navbar.is-light .navbar-start > a.navbar-item.is-active,\n  .navbar.is-light .navbar-start .navbar-link:focus,\n  .navbar.is-light .navbar-start .navbar-link:hover,\n  .navbar.is-light .navbar-start .navbar-link.is-active,\n  .navbar.is-light .navbar-end > a.navbar-item:focus,\n  .navbar.is-light .navbar-end > a.navbar-item:hover,\n  .navbar.is-light .navbar-end > a.navbar-item.is-active,\n  .navbar.is-light .navbar-end .navbar-link:focus,\n  .navbar.is-light .navbar-end .navbar-link:hover,\n  .navbar.is-light .navbar-end .navbar-link.is-active {\n    background-color: #e8e8e8;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-light .navbar-start .navbar-link::after,\n  .navbar.is-light .navbar-end .navbar-link::after {\n    border-color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-light .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-light .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-light .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #e8e8e8;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-light .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 96%);\n    color: rgba(0, 0, 0, 0.7);\n  }\n}\n.navbar.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.navbar.is-dark .navbar-brand > .navbar-item,\n.navbar.is-dark .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-dark .navbar-brand > a.navbar-item:focus, .navbar.is-dark .navbar-brand > a.navbar-item:hover, .navbar.is-dark .navbar-brand > a.navbar-item.is-active,\n.navbar.is-dark .navbar-brand .navbar-link:focus,\n.navbar.is-dark .navbar-brand .navbar-link:hover,\n.navbar.is-dark .navbar-brand .navbar-link.is-active {\n  background-color: #292929;\n  color: #fff;\n}\n.navbar.is-dark .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-dark .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-dark .navbar-start > .navbar-item,\n  .navbar.is-dark .navbar-start .navbar-link,\n  .navbar.is-dark .navbar-end > .navbar-item,\n  .navbar.is-dark .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-dark .navbar-start > a.navbar-item:focus, .navbar.is-dark .navbar-start > a.navbar-item:hover, .navbar.is-dark .navbar-start > a.navbar-item.is-active,\n  .navbar.is-dark .navbar-start .navbar-link:focus,\n  .navbar.is-dark .navbar-start .navbar-link:hover,\n  .navbar.is-dark .navbar-start .navbar-link.is-active,\n  .navbar.is-dark .navbar-end > a.navbar-item:focus,\n  .navbar.is-dark .navbar-end > a.navbar-item:hover,\n  .navbar.is-dark .navbar-end > a.navbar-item.is-active,\n  .navbar.is-dark .navbar-end .navbar-link:focus,\n  .navbar.is-dark .navbar-end .navbar-link:hover,\n  .navbar.is-dark .navbar-end .navbar-link.is-active {\n    background-color: #292929;\n    color: #fff;\n  }\n  .navbar.is-dark .navbar-start .navbar-link::after,\n  .navbar.is-dark .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-dark .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-dark .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-dark .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #292929;\n    color: #fff;\n  }\n  .navbar.is-dark .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 21%);\n    color: #fff;\n  }\n}\n.navbar.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.navbar.is-primary .navbar-brand > .navbar-item,\n.navbar.is-primary .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-primary .navbar-brand > a.navbar-item:focus, .navbar.is-primary .navbar-brand > a.navbar-item:hover, .navbar.is-primary .navbar-brand > a.navbar-item.is-active,\n.navbar.is-primary .navbar-brand .navbar-link:focus,\n.navbar.is-primary .navbar-brand .navbar-link:hover,\n.navbar.is-primary .navbar-brand .navbar-link.is-active {\n  background-color: #00b89c;\n  color: #fff;\n}\n.navbar.is-primary .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-primary .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-primary .navbar-start > .navbar-item,\n  .navbar.is-primary .navbar-start .navbar-link,\n  .navbar.is-primary .navbar-end > .navbar-item,\n  .navbar.is-primary .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-primary .navbar-start > a.navbar-item:focus, .navbar.is-primary .navbar-start > a.navbar-item:hover, .navbar.is-primary .navbar-start > a.navbar-item.is-active,\n  .navbar.is-primary .navbar-start .navbar-link:focus,\n  .navbar.is-primary .navbar-start .navbar-link:hover,\n  .navbar.is-primary .navbar-start .navbar-link.is-active,\n  .navbar.is-primary .navbar-end > a.navbar-item:focus,\n  .navbar.is-primary .navbar-end > a.navbar-item:hover,\n  .navbar.is-primary .navbar-end > a.navbar-item.is-active,\n  .navbar.is-primary .navbar-end .navbar-link:focus,\n  .navbar.is-primary .navbar-end .navbar-link:hover,\n  .navbar.is-primary .navbar-end .navbar-link.is-active {\n    background-color: #00b89c;\n    color: #fff;\n  }\n  .navbar.is-primary .navbar-start .navbar-link::after,\n  .navbar.is-primary .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-primary .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-primary .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-primary .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #00b89c;\n    color: #fff;\n  }\n  .navbar.is-primary .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(171, 100%, 41%);\n    color: #fff;\n  }\n}\n.navbar.is-link {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.navbar.is-link .navbar-brand > .navbar-item,\n.navbar.is-link .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-link .navbar-brand > a.navbar-item:focus, .navbar.is-link .navbar-brand > a.navbar-item:hover, .navbar.is-link .navbar-brand > a.navbar-item.is-active,\n.navbar.is-link .navbar-brand .navbar-link:focus,\n.navbar.is-link .navbar-brand .navbar-link:hover,\n.navbar.is-link .navbar-brand .navbar-link.is-active {\n  background-color: #3a51bb;\n  color: #fff;\n}\n.navbar.is-link .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-link .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-link .navbar-start > .navbar-item,\n  .navbar.is-link .navbar-start .navbar-link,\n  .navbar.is-link .navbar-end > .navbar-item,\n  .navbar.is-link .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-link .navbar-start > a.navbar-item:focus, .navbar.is-link .navbar-start > a.navbar-item:hover, .navbar.is-link .navbar-start > a.navbar-item.is-active,\n  .navbar.is-link .navbar-start .navbar-link:focus,\n  .navbar.is-link .navbar-start .navbar-link:hover,\n  .navbar.is-link .navbar-start .navbar-link.is-active,\n  .navbar.is-link .navbar-end > a.navbar-item:focus,\n  .navbar.is-link .navbar-end > a.navbar-item:hover,\n  .navbar.is-link .navbar-end > a.navbar-item.is-active,\n  .navbar.is-link .navbar-end .navbar-link:focus,\n  .navbar.is-link .navbar-end .navbar-link:hover,\n  .navbar.is-link .navbar-end .navbar-link.is-active {\n    background-color: #3a51bb;\n    color: #fff;\n  }\n  .navbar.is-link .navbar-start .navbar-link::after,\n  .navbar.is-link .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-link .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-link .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-link .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #3a51bb;\n    color: #fff;\n  }\n  .navbar.is-link .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(229, 53%, 53%);\n    color: #fff;\n  }\n}\n.navbar.is-info {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.navbar.is-info .navbar-brand > .navbar-item,\n.navbar.is-info .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-info .navbar-brand > a.navbar-item:focus, .navbar.is-info .navbar-brand > a.navbar-item:hover, .navbar.is-info .navbar-brand > a.navbar-item.is-active,\n.navbar.is-info .navbar-brand .navbar-link:focus,\n.navbar.is-info .navbar-brand .navbar-link:hover,\n.navbar.is-info .navbar-brand .navbar-link.is-active {\n  background-color: #3082c5;\n  color: #fff;\n}\n.navbar.is-info .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-info .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-info .navbar-start > .navbar-item,\n  .navbar.is-info .navbar-start .navbar-link,\n  .navbar.is-info .navbar-end > .navbar-item,\n  .navbar.is-info .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-info .navbar-start > a.navbar-item:focus, .navbar.is-info .navbar-start > a.navbar-item:hover, .navbar.is-info .navbar-start > a.navbar-item.is-active,\n  .navbar.is-info .navbar-start .navbar-link:focus,\n  .navbar.is-info .navbar-start .navbar-link:hover,\n  .navbar.is-info .navbar-start .navbar-link.is-active,\n  .navbar.is-info .navbar-end > a.navbar-item:focus,\n  .navbar.is-info .navbar-end > a.navbar-item:hover,\n  .navbar.is-info .navbar-end > a.navbar-item.is-active,\n  .navbar.is-info .navbar-end .navbar-link:focus,\n  .navbar.is-info .navbar-end .navbar-link:hover,\n  .navbar.is-info .navbar-end .navbar-link.is-active {\n    background-color: #3082c5;\n    color: #fff;\n  }\n  .navbar.is-info .navbar-start .navbar-link::after,\n  .navbar.is-info .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-info .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-info .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-info .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #3082c5;\n    color: #fff;\n  }\n  .navbar.is-info .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(207, 61%, 53%);\n    color: #fff;\n  }\n}\n.navbar.is-success {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.navbar.is-success .navbar-brand > .navbar-item,\n.navbar.is-success .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-success .navbar-brand > a.navbar-item:focus, .navbar.is-success .navbar-brand > a.navbar-item:hover, .navbar.is-success .navbar-brand > a.navbar-item.is-active,\n.navbar.is-success .navbar-brand .navbar-link:focus,\n.navbar.is-success .navbar-brand .navbar-link:hover,\n.navbar.is-success .navbar-brand .navbar-link.is-active {\n  background-color: #3abb81;\n  color: #fff;\n}\n.navbar.is-success .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-success .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-success .navbar-start > .navbar-item,\n  .navbar.is-success .navbar-start .navbar-link,\n  .navbar.is-success .navbar-end > .navbar-item,\n  .navbar.is-success .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-success .navbar-start > a.navbar-item:focus, .navbar.is-success .navbar-start > a.navbar-item:hover, .navbar.is-success .navbar-start > a.navbar-item.is-active,\n  .navbar.is-success .navbar-start .navbar-link:focus,\n  .navbar.is-success .navbar-start .navbar-link:hover,\n  .navbar.is-success .navbar-start .navbar-link.is-active,\n  .navbar.is-success .navbar-end > a.navbar-item:focus,\n  .navbar.is-success .navbar-end > a.navbar-item:hover,\n  .navbar.is-success .navbar-end > a.navbar-item.is-active,\n  .navbar.is-success .navbar-end .navbar-link:focus,\n  .navbar.is-success .navbar-end .navbar-link:hover,\n  .navbar.is-success .navbar-end .navbar-link.is-active {\n    background-color: #3abb81;\n    color: #fff;\n  }\n  .navbar.is-success .navbar-start .navbar-link::after,\n  .navbar.is-success .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-success .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-success .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-success .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #3abb81;\n    color: #fff;\n  }\n  .navbar.is-success .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(153, 53%, 53%);\n    color: #fff;\n  }\n}\n.navbar.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-warning .navbar-brand > .navbar-item,\n.navbar.is-warning .navbar-brand .navbar-link {\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-warning .navbar-brand > a.navbar-item:focus, .navbar.is-warning .navbar-brand > a.navbar-item:hover, .navbar.is-warning .navbar-brand > a.navbar-item.is-active,\n.navbar.is-warning .navbar-brand .navbar-link:focus,\n.navbar.is-warning .navbar-brand .navbar-link:hover,\n.navbar.is-warning .navbar-brand .navbar-link.is-active {\n  background-color: #ffd970;\n  color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-warning .navbar-brand .navbar-link::after {\n  border-color: rgba(0, 0, 0, 0.7);\n}\n.navbar.is-warning .navbar-burger {\n  color: rgba(0, 0, 0, 0.7);\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-warning .navbar-start > .navbar-item,\n  .navbar.is-warning .navbar-start .navbar-link,\n  .navbar.is-warning .navbar-end > .navbar-item,\n  .navbar.is-warning .navbar-end .navbar-link {\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-warning .navbar-start > a.navbar-item:focus, .navbar.is-warning .navbar-start > a.navbar-item:hover, .navbar.is-warning .navbar-start > a.navbar-item.is-active,\n  .navbar.is-warning .navbar-start .navbar-link:focus,\n  .navbar.is-warning .navbar-start .navbar-link:hover,\n  .navbar.is-warning .navbar-start .navbar-link.is-active,\n  .navbar.is-warning .navbar-end > a.navbar-item:focus,\n  .navbar.is-warning .navbar-end > a.navbar-item:hover,\n  .navbar.is-warning .navbar-end > a.navbar-item.is-active,\n  .navbar.is-warning .navbar-end .navbar-link:focus,\n  .navbar.is-warning .navbar-end .navbar-link:hover,\n  .navbar.is-warning .navbar-end .navbar-link.is-active {\n    background-color: #ffd970;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-warning .navbar-start .navbar-link::after,\n  .navbar.is-warning .navbar-end .navbar-link::after {\n    border-color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-warning .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-warning .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-warning .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #ffd970;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  .navbar.is-warning .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(44, 100%, 77%);\n    color: rgba(0, 0, 0, 0.7);\n  }\n}\n.navbar.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.navbar.is-danger .navbar-brand > .navbar-item,\n.navbar.is-danger .navbar-brand .navbar-link {\n  color: #fff;\n}\n.navbar.is-danger .navbar-brand > a.navbar-item:focus, .navbar.is-danger .navbar-brand > a.navbar-item:hover, .navbar.is-danger .navbar-brand > a.navbar-item.is-active,\n.navbar.is-danger .navbar-brand .navbar-link:focus,\n.navbar.is-danger .navbar-brand .navbar-link:hover,\n.navbar.is-danger .navbar-brand .navbar-link.is-active {\n  background-color: #ef2e55;\n  color: #fff;\n}\n.navbar.is-danger .navbar-brand .navbar-link::after {\n  border-color: #fff;\n}\n.navbar.is-danger .navbar-burger {\n  color: #fff;\n}\n@media screen and (min-width: 1024px) {\n  .navbar.is-danger .navbar-start > .navbar-item,\n  .navbar.is-danger .navbar-start .navbar-link,\n  .navbar.is-danger .navbar-end > .navbar-item,\n  .navbar.is-danger .navbar-end .navbar-link {\n    color: #fff;\n  }\n  .navbar.is-danger .navbar-start > a.navbar-item:focus, .navbar.is-danger .navbar-start > a.navbar-item:hover, .navbar.is-danger .navbar-start > a.navbar-item.is-active,\n  .navbar.is-danger .navbar-start .navbar-link:focus,\n  .navbar.is-danger .navbar-start .navbar-link:hover,\n  .navbar.is-danger .navbar-start .navbar-link.is-active,\n  .navbar.is-danger .navbar-end > a.navbar-item:focus,\n  .navbar.is-danger .navbar-end > a.navbar-item:hover,\n  .navbar.is-danger .navbar-end > a.navbar-item.is-active,\n  .navbar.is-danger .navbar-end .navbar-link:focus,\n  .navbar.is-danger .navbar-end .navbar-link:hover,\n  .navbar.is-danger .navbar-end .navbar-link.is-active {\n    background-color: #ef2e55;\n    color: #fff;\n  }\n  .navbar.is-danger .navbar-start .navbar-link::after,\n  .navbar.is-danger .navbar-end .navbar-link::after {\n    border-color: #fff;\n  }\n  .navbar.is-danger .navbar-item.has-dropdown:focus .navbar-link,\n  .navbar.is-danger .navbar-item.has-dropdown:hover .navbar-link,\n  .navbar.is-danger .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: #ef2e55;\n    color: #fff;\n  }\n  .navbar.is-danger .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(348, 86%, 61%);\n    color: #fff;\n  }\n}\n.navbar > .container {\n  align-items: stretch;\n  display: flex;\n  min-height: 3.25rem;\n  width: 100%;\n}\n.navbar.has-shadow {\n  box-shadow: 0 2px 0 0 hsl(0, 0%, 96%);\n}\n.navbar.is-fixed-bottom, .navbar.is-fixed-top {\n  left: 0;\n  position: fixed;\n  right: 0;\n  z-index: 30;\n}\n.navbar.is-fixed-bottom {\n  bottom: 0;\n}\n.navbar.is-fixed-bottom.has-shadow {\n  box-shadow: 0 -2px 0 0 hsl(0, 0%, 96%);\n}\n.navbar.is-fixed-top {\n  top: 0;\n}\n\nhtml.has-navbar-fixed-top,\nbody.has-navbar-fixed-top {\n  padding-top: 3.25rem;\n}\nhtml.has-navbar-fixed-bottom,\nbody.has-navbar-fixed-bottom {\n  padding-bottom: 3.25rem;\n}\n\n.navbar-brand,\n.navbar-tabs {\n  align-items: stretch;\n  display: flex;\n  flex-shrink: 0;\n  min-height: 3.25rem;\n}\n\n.navbar-brand a.navbar-item:focus, .navbar-brand a.navbar-item:hover {\n  background-color: transparent;\n}\n\n.navbar-tabs {\n  -webkit-overflow-scrolling: touch;\n  max-width: 100vw;\n  overflow-x: auto;\n  overflow-y: hidden;\n}\n\n.navbar-burger {\n  color: hsl(0, 0%, 29%);\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n  background: none;\n  border: none;\n  cursor: pointer;\n  display: block;\n  height: 3.25rem;\n  position: relative;\n  width: 3.25rem;\n  margin-left: auto;\n}\n.navbar-burger span {\n  background-color: currentColor;\n  display: block;\n  height: 1px;\n  left: calc(50% - 8px);\n  position: absolute;\n  transform-origin: center;\n  transition-duration: 86ms;\n  transition-property: background-color, opacity, transform;\n  transition-timing-function: ease-out;\n  width: 16px;\n}\n.navbar-burger span:nth-child(1) {\n  top: calc(50% - 6px);\n}\n.navbar-burger span:nth-child(2) {\n  top: calc(50% - 1px);\n}\n.navbar-burger span:nth-child(3) {\n  top: calc(50% + 4px);\n}\n.navbar-burger:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n.navbar-burger.is-active span:nth-child(1) {\n  transform: translateY(5px) rotate(45deg);\n}\n.navbar-burger.is-active span:nth-child(2) {\n  opacity: 0;\n}\n.navbar-burger.is-active span:nth-child(3) {\n  transform: translateY(-5px) rotate(-45deg);\n}\n\n.navbar-menu {\n  display: none;\n}\n\n.navbar-item,\n.navbar-link {\n  color: hsl(0, 0%, 29%);\n  display: block;\n  line-height: 1.5;\n  padding: 0.5rem 0.75rem;\n  position: relative;\n}\n.navbar-item .icon:only-child,\n.navbar-link .icon:only-child {\n  margin-left: -0.25rem;\n  margin-right: -0.25rem;\n}\n\na.navbar-item,\n.navbar-link {\n  cursor: pointer;\n}\na.navbar-item:focus, a.navbar-item:focus-within, a.navbar-item:hover, a.navbar-item.is-active,\n.navbar-link:focus,\n.navbar-link:focus-within,\n.navbar-link:hover,\n.navbar-link.is-active {\n  background-color: hsl(0, 0%, 98%);\n  color: hsl(229, 53%, 53%);\n}\n\n.navbar-item {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n.navbar-item img {\n  max-height: 1.75rem;\n}\n.navbar-item.has-dropdown {\n  padding: 0;\n}\n.navbar-item.is-expanded {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.navbar-item.is-tab {\n  border-bottom: 1px solid transparent;\n  min-height: 3.25rem;\n  padding-bottom: calc(0.5rem - 1px);\n}\n.navbar-item.is-tab:focus, .navbar-item.is-tab:hover {\n  background-color: transparent;\n  border-bottom-color: hsl(229, 53%, 53%);\n}\n.navbar-item.is-tab.is-active {\n  background-color: transparent;\n  border-bottom-color: hsl(229, 53%, 53%);\n  border-bottom-style: solid;\n  border-bottom-width: 3px;\n  color: hsl(229, 53%, 53%);\n  padding-bottom: calc(0.5rem - 3px);\n}\n\n.navbar-content {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n\n.navbar-link:not(.is-arrowless) {\n  padding-right: 2.5em;\n}\n.navbar-link:not(.is-arrowless)::after {\n  border-color: hsl(229, 53%, 53%);\n  margin-top: -0.375em;\n  right: 1.125em;\n}\n\n.navbar-dropdown {\n  font-size: 0.875rem;\n  padding-bottom: 0.5rem;\n  padding-top: 0.5rem;\n}\n.navbar-dropdown .navbar-item {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n\n.navbar-divider {\n  background-color: hsl(0, 0%, 96%);\n  border: none;\n  display: none;\n  height: 2px;\n  margin: 0.5rem 0;\n}\n\n@media screen and (max-width: 1023px) {\n  .navbar > .container {\n    display: block;\n  }\n  .navbar-brand .navbar-item,\n  .navbar-tabs .navbar-item {\n    align-items: center;\n    display: flex;\n  }\n  .navbar-link::after {\n    display: none;\n  }\n  .navbar-menu {\n    background-color: hsl(0, 0%, 100%);\n    box-shadow: 0 8px 16px rgba(10, 10, 10, 0.1);\n    padding: 0.5rem 0;\n  }\n  .navbar-menu.is-active {\n    display: block;\n  }\n  .navbar.is-fixed-bottom-touch, .navbar.is-fixed-top-touch {\n    left: 0;\n    position: fixed;\n    right: 0;\n    z-index: 30;\n  }\n  .navbar.is-fixed-bottom-touch {\n    bottom: 0;\n  }\n  .navbar.is-fixed-bottom-touch.has-shadow {\n    box-shadow: 0 -2px 3px rgba(10, 10, 10, 0.1);\n  }\n  .navbar.is-fixed-top-touch {\n    top: 0;\n  }\n  .navbar.is-fixed-top .navbar-menu, .navbar.is-fixed-top-touch .navbar-menu {\n    -webkit-overflow-scrolling: touch;\n    max-height: calc(100vh - 3.25rem);\n    overflow: auto;\n  }\n  html.has-navbar-fixed-top-touch,\n  body.has-navbar-fixed-top-touch {\n    padding-top: 3.25rem;\n  }\n  html.has-navbar-fixed-bottom-touch,\n  body.has-navbar-fixed-bottom-touch {\n    padding-bottom: 3.25rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .navbar,\n  .navbar-menu,\n  .navbar-start,\n  .navbar-end {\n    align-items: stretch;\n    display: flex;\n  }\n  .navbar {\n    min-height: 3.25rem;\n  }\n  .navbar.is-spaced {\n    padding: 1rem 2rem;\n  }\n  .navbar.is-spaced .navbar-start,\n  .navbar.is-spaced .navbar-end {\n    align-items: center;\n  }\n  .navbar.is-spaced a.navbar-item,\n  .navbar.is-spaced .navbar-link {\n    border-radius: 4px;\n  }\n  .navbar.is-transparent a.navbar-item:focus, .navbar.is-transparent a.navbar-item:hover, .navbar.is-transparent a.navbar-item.is-active,\n  .navbar.is-transparent .navbar-link:focus,\n  .navbar.is-transparent .navbar-link:hover,\n  .navbar.is-transparent .navbar-link.is-active {\n    background-color: transparent !important;\n  }\n  .navbar.is-transparent .navbar-item.has-dropdown.is-active .navbar-link, .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:focus .navbar-link, .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:focus-within .navbar-link, .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:hover .navbar-link {\n    background-color: transparent !important;\n  }\n  .navbar.is-transparent .navbar-dropdown a.navbar-item:focus, .navbar.is-transparent .navbar-dropdown a.navbar-item:hover {\n    background-color: hsl(0, 0%, 96%);\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar.is-transparent .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 96%);\n    color: hsl(229, 53%, 53%);\n  }\n  .navbar-burger {\n    display: none;\n  }\n  .navbar-item,\n  .navbar-link {\n    align-items: center;\n    display: flex;\n  }\n  .navbar-item.has-dropdown {\n    align-items: stretch;\n  }\n  .navbar-item.has-dropdown-up .navbar-link::after {\n    transform: rotate(135deg) translate(0.25em, -0.25em);\n  }\n  .navbar-item.has-dropdown-up .navbar-dropdown {\n    border-bottom: 2px solid hsl(0, 0%, 86%);\n    border-radius: 6px 6px 0 0;\n    border-top: none;\n    bottom: 100%;\n    box-shadow: 0 -8px 8px rgba(10, 10, 10, 0.1);\n    top: auto;\n  }\n  .navbar-item.is-active .navbar-dropdown, .navbar-item.is-hoverable:focus .navbar-dropdown, .navbar-item.is-hoverable:focus-within .navbar-dropdown, .navbar-item.is-hoverable:hover .navbar-dropdown {\n    display: block;\n  }\n  .navbar.is-spaced .navbar-item.is-active .navbar-dropdown, .navbar-item.is-active .navbar-dropdown.is-boxed, .navbar.is-spaced .navbar-item.is-hoverable:focus .navbar-dropdown, .navbar-item.is-hoverable:focus .navbar-dropdown.is-boxed, .navbar.is-spaced .navbar-item.is-hoverable:focus-within .navbar-dropdown, .navbar-item.is-hoverable:focus-within .navbar-dropdown.is-boxed, .navbar.is-spaced .navbar-item.is-hoverable:hover .navbar-dropdown, .navbar-item.is-hoverable:hover .navbar-dropdown.is-boxed {\n    opacity: 1;\n    pointer-events: auto;\n    transform: translateY(0);\n  }\n  .navbar-menu {\n    flex-grow: 1;\n    flex-shrink: 0;\n  }\n  .navbar-start {\n    justify-content: flex-start;\n    margin-right: auto;\n  }\n  .navbar-end {\n    justify-content: flex-end;\n    margin-left: auto;\n  }\n  .navbar-dropdown {\n    background-color: hsl(0, 0%, 100%);\n    border-bottom-left-radius: 6px;\n    border-bottom-right-radius: 6px;\n    border-top: 2px solid hsl(0, 0%, 86%);\n    box-shadow: 0 8px 8px rgba(10, 10, 10, 0.1);\n    display: none;\n    font-size: 0.875rem;\n    left: 0;\n    min-width: 100%;\n    position: absolute;\n    top: 100%;\n    z-index: 20;\n  }\n  .navbar-dropdown .navbar-item {\n    padding: 0.375rem 1rem;\n    white-space: nowrap;\n  }\n  .navbar-dropdown a.navbar-item {\n    padding-right: 3rem;\n  }\n  .navbar-dropdown a.navbar-item:focus, .navbar-dropdown a.navbar-item:hover {\n    background-color: hsl(0, 0%, 96%);\n    color: hsl(0, 0%, 4%);\n  }\n  .navbar-dropdown a.navbar-item.is-active {\n    background-color: hsl(0, 0%, 96%);\n    color: hsl(229, 53%, 53%);\n  }\n  .navbar.is-spaced .navbar-dropdown, .navbar-dropdown.is-boxed {\n    border-radius: 6px;\n    border-top: none;\n    box-shadow: 0 8px 8px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n    display: block;\n    opacity: 0;\n    pointer-events: none;\n    top: calc(100% + (-4px));\n    transform: translateY(-5px);\n    transition-duration: 86ms;\n    transition-property: opacity, transform;\n  }\n  .navbar-dropdown.is-right {\n    left: auto;\n    right: 0;\n  }\n  .navbar-divider {\n    display: block;\n  }\n  .navbar > .container .navbar-brand,\n  .container > .navbar .navbar-brand {\n    margin-left: -0.75rem;\n  }\n  .navbar > .container .navbar-menu,\n  .container > .navbar .navbar-menu {\n    margin-right: -0.75rem;\n  }\n  .navbar.is-fixed-bottom-desktop, .navbar.is-fixed-top-desktop {\n    left: 0;\n    position: fixed;\n    right: 0;\n    z-index: 30;\n  }\n  .navbar.is-fixed-bottom-desktop {\n    bottom: 0;\n  }\n  .navbar.is-fixed-bottom-desktop.has-shadow {\n    box-shadow: 0 -2px 3px rgba(10, 10, 10, 0.1);\n  }\n  .navbar.is-fixed-top-desktop {\n    top: 0;\n  }\n  html.has-navbar-fixed-top-desktop,\n  body.has-navbar-fixed-top-desktop {\n    padding-top: 3.25rem;\n  }\n  html.has-navbar-fixed-bottom-desktop,\n  body.has-navbar-fixed-bottom-desktop {\n    padding-bottom: 3.25rem;\n  }\n  html.has-spaced-navbar-fixed-top,\n  body.has-spaced-navbar-fixed-top {\n    padding-top: 5.25rem;\n  }\n  html.has-spaced-navbar-fixed-bottom,\n  body.has-spaced-navbar-fixed-bottom {\n    padding-bottom: 5.25rem;\n  }\n  a.navbar-item.is-active,\n  .navbar-link.is-active {\n    color: hsl(0, 0%, 4%);\n  }\n  a.navbar-item.is-active:not(:focus):not(:hover),\n  .navbar-link.is-active:not(:focus):not(:hover) {\n    background-color: transparent;\n  }\n  .navbar-item.has-dropdown:focus .navbar-link, .navbar-item.has-dropdown:hover .navbar-link, .navbar-item.has-dropdown.is-active .navbar-link {\n    background-color: hsl(0, 0%, 98%);\n  }\n}\n.hero.is-fullheight-with-navbar {\n  min-height: calc(100vh - 3.25rem);\n}\n\n.pagination {\n  font-size: 1rem;\n  margin: -0.25rem;\n}\n.pagination.is-small {\n  font-size: 0.75rem;\n}\n.pagination.is-medium {\n  font-size: 1.25rem;\n}\n.pagination.is-large {\n  font-size: 1.5rem;\n}\n.pagination.is-rounded .pagination-previous,\n.pagination.is-rounded .pagination-next {\n  padding-left: 1em;\n  padding-right: 1em;\n  border-radius: 9999px;\n}\n.pagination.is-rounded .pagination-link {\n  border-radius: 9999px;\n}\n\n.pagination,\n.pagination-list {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  text-align: center;\n}\n\n.pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis {\n  font-size: 1em;\n  justify-content: center;\n  margin: 0.25rem;\n  padding-left: 0.5em;\n  padding-right: 0.5em;\n  text-align: center;\n}\n\n.pagination-previous,\n.pagination-next,\n.pagination-link {\n  border-color: hsl(0, 0%, 86%);\n  color: hsl(0, 0%, 21%);\n  min-width: 2.5em;\n}\n.pagination-previous:hover,\n.pagination-next:hover,\n.pagination-link:hover {\n  border-color: hsl(0, 0%, 71%);\n  color: hsl(0, 0%, 21%);\n}\n.pagination-previous:focus,\n.pagination-next:focus,\n.pagination-link:focus {\n  border-color: hsl(229, 53%, 53%);\n}\n.pagination-previous:active,\n.pagination-next:active,\n.pagination-link:active {\n  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.2);\n}\n.pagination-previous[disabled], .pagination-previous.is-disabled,\n.pagination-next[disabled],\n.pagination-next.is-disabled,\n.pagination-link[disabled],\n.pagination-link.is-disabled {\n  background-color: hsl(0, 0%, 86%);\n  border-color: hsl(0, 0%, 86%);\n  box-shadow: none;\n  color: hsl(0, 0%, 48%);\n  opacity: 0.5;\n}\n\n.pagination-previous,\n.pagination-next {\n  padding-left: 0.75em;\n  padding-right: 0.75em;\n  white-space: nowrap;\n}\n\n.pagination-link.is-current {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n\n.pagination-ellipsis {\n  color: hsl(0, 0%, 71%);\n  pointer-events: none;\n}\n\n.pagination-list {\n  flex-wrap: wrap;\n}\n.pagination-list li {\n  list-style: none;\n}\n\n@media screen and (max-width: 768px) {\n  .pagination {\n    flex-wrap: wrap;\n  }\n  .pagination-previous,\n  .pagination-next {\n    flex-grow: 1;\n    flex-shrink: 1;\n  }\n  .pagination-list li {\n    flex-grow: 1;\n    flex-shrink: 1;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .pagination-list {\n    flex-grow: 1;\n    flex-shrink: 1;\n    justify-content: flex-start;\n    order: 1;\n  }\n  .pagination-previous,\n  .pagination-next,\n  .pagination-link,\n  .pagination-ellipsis {\n    margin-bottom: 0;\n    margin-top: 0;\n  }\n  .pagination-previous {\n    order: 2;\n  }\n  .pagination-next {\n    order: 3;\n  }\n  .pagination {\n    justify-content: space-between;\n    margin-bottom: 0;\n    margin-top: 0;\n  }\n  .pagination.is-centered .pagination-previous {\n    order: 1;\n  }\n  .pagination.is-centered .pagination-list {\n    justify-content: center;\n    order: 2;\n  }\n  .pagination.is-centered .pagination-next {\n    order: 3;\n  }\n  .pagination.is-right .pagination-previous {\n    order: 1;\n  }\n  .pagination.is-right .pagination-next {\n    order: 2;\n  }\n  .pagination.is-right .pagination-list {\n    justify-content: flex-end;\n    order: 3;\n  }\n}\n.panel {\n  border-radius: 6px;\n  box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);\n  font-size: 1rem;\n}\n.panel:not(:last-child) {\n  margin-bottom: 1.5rem;\n}\n.panel.is-white .panel-heading {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.panel.is-white .panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 100%);\n}\n.panel.is-white .panel-block.is-active .panel-icon {\n  color: hsl(0, 0%, 100%);\n}\n.panel.is-black .panel-heading {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.panel.is-black .panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 4%);\n}\n.panel.is-black .panel-block.is-active .panel-icon {\n  color: hsl(0, 0%, 4%);\n}\n.panel.is-light .panel-heading {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.panel.is-light .panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 96%);\n}\n.panel.is-light .panel-block.is-active .panel-icon {\n  color: hsl(0, 0%, 96%);\n}\n.panel.is-dark .panel-heading {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.panel.is-dark .panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 21%);\n}\n.panel.is-dark .panel-block.is-active .panel-icon {\n  color: hsl(0, 0%, 21%);\n}\n.panel.is-primary .panel-heading {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.panel.is-primary .panel-tabs a.is-active {\n  border-bottom-color: hsl(171, 100%, 41%);\n}\n.panel.is-primary .panel-block.is-active .panel-icon {\n  color: hsl(171, 100%, 41%);\n}\n.panel.is-link .panel-heading {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.panel.is-link .panel-tabs a.is-active {\n  border-bottom-color: hsl(229, 53%, 53%);\n}\n.panel.is-link .panel-block.is-active .panel-icon {\n  color: hsl(229, 53%, 53%);\n}\n.panel.is-info .panel-heading {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.panel.is-info .panel-tabs a.is-active {\n  border-bottom-color: hsl(207, 61%, 53%);\n}\n.panel.is-info .panel-block.is-active .panel-icon {\n  color: hsl(207, 61%, 53%);\n}\n.panel.is-success .panel-heading {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.panel.is-success .panel-tabs a.is-active {\n  border-bottom-color: hsl(153, 53%, 53%);\n}\n.panel.is-success .panel-block.is-active .panel-icon {\n  color: hsl(153, 53%, 53%);\n}\n.panel.is-warning .panel-heading {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.panel.is-warning .panel-tabs a.is-active {\n  border-bottom-color: hsl(44, 100%, 77%);\n}\n.panel.is-warning .panel-block.is-active .panel-icon {\n  color: hsl(44, 100%, 77%);\n}\n.panel.is-danger .panel-heading {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.panel.is-danger .panel-tabs a.is-active {\n  border-bottom-color: hsl(348, 86%, 61%);\n}\n.panel.is-danger .panel-block.is-active .panel-icon {\n  color: hsl(348, 86%, 61%);\n}\n\n.panel-tabs:not(:last-child),\n.panel-block:not(:last-child) {\n  border-bottom: 1px solid hsl(0, 0%, 93%);\n}\n\n.panel-heading {\n  background-color: hsl(0, 0%, 93%);\n  border-radius: 6px 6px 0 0;\n  color: hsl(0, 0%, 21%);\n  font-size: 1.25em;\n  font-weight: 700;\n  line-height: 1.25;\n  padding: 0.75em 1em;\n}\n\n.panel-tabs {\n  align-items: flex-end;\n  display: flex;\n  font-size: 0.875em;\n  justify-content: center;\n}\n.panel-tabs a {\n  border-bottom: 1px solid hsl(0, 0%, 86%);\n  margin-bottom: -1px;\n  padding: 0.5em;\n}\n.panel-tabs a.is-active {\n  border-bottom-color: hsl(0, 0%, 29%);\n  color: hsl(0, 0%, 21%);\n}\n\n.panel-list a {\n  color: hsl(0, 0%, 29%);\n}\n.panel-list a:hover {\n  color: hsl(229, 53%, 53%);\n}\n\n.panel-block {\n  align-items: center;\n  color: hsl(0, 0%, 21%);\n  display: flex;\n  justify-content: flex-start;\n  padding: 0.5em 0.75em;\n}\n.panel-block input[type=checkbox] {\n  margin-right: 0.75em;\n}\n.panel-block > .control {\n  flex-grow: 1;\n  flex-shrink: 1;\n  width: 100%;\n}\n.panel-block.is-wrapped {\n  flex-wrap: wrap;\n}\n.panel-block.is-active {\n  border-left-color: hsl(229, 53%, 53%);\n  color: hsl(0, 0%, 21%);\n}\n.panel-block.is-active .panel-icon {\n  color: hsl(229, 53%, 53%);\n}\n.panel-block:last-child {\n  border-bottom-left-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n\na.panel-block,\nlabel.panel-block {\n  cursor: pointer;\n}\na.panel-block:hover,\nlabel.panel-block:hover {\n  background-color: hsl(0, 0%, 96%);\n}\n\n.panel-icon {\n  display: inline-block;\n  font-size: 14px;\n  height: 1em;\n  line-height: 1em;\n  text-align: center;\n  vertical-align: top;\n  width: 1em;\n  color: hsl(0, 0%, 48%);\n  margin-right: 0.75em;\n}\n.panel-icon .fa {\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.tabs {\n  -webkit-overflow-scrolling: touch;\n  align-items: stretch;\n  display: flex;\n  font-size: 1rem;\n  justify-content: space-between;\n  overflow: hidden;\n  overflow-x: auto;\n  white-space: nowrap;\n}\n.tabs a {\n  align-items: center;\n  border-bottom-color: hsl(0, 0%, 86%);\n  border-bottom-style: solid;\n  border-bottom-width: 1px;\n  color: hsl(0, 0%, 29%);\n  display: flex;\n  justify-content: center;\n  margin-bottom: -1px;\n  padding: 0.5em 1em;\n  vertical-align: top;\n}\n.tabs a:hover {\n  border-bottom-color: hsl(0, 0%, 21%);\n  color: hsl(0, 0%, 21%);\n}\n.tabs li {\n  display: block;\n}\n.tabs li.is-active a {\n  border-bottom-color: hsl(229, 53%, 53%);\n  color: hsl(229, 53%, 53%);\n}\n.tabs ul {\n  align-items: center;\n  border-bottom-color: hsl(0, 0%, 86%);\n  border-bottom-style: solid;\n  border-bottom-width: 1px;\n  display: flex;\n  flex-grow: 1;\n  flex-shrink: 0;\n  justify-content: flex-start;\n}\n.tabs ul.is-left {\n  padding-right: 0.75em;\n}\n.tabs ul.is-center {\n  flex: none;\n  justify-content: center;\n  padding-left: 0.75em;\n  padding-right: 0.75em;\n}\n.tabs ul.is-right {\n  justify-content: flex-end;\n  padding-left: 0.75em;\n}\n.tabs .icon:first-child {\n  margin-right: 0.5em;\n}\n.tabs .icon:last-child {\n  margin-left: 0.5em;\n}\n.tabs.is-centered ul {\n  justify-content: center;\n}\n.tabs.is-right ul {\n  justify-content: flex-end;\n}\n.tabs.is-boxed a {\n  border: 1px solid transparent;\n  border-radius: 4px 4px 0 0;\n}\n.tabs.is-boxed a:hover {\n  background-color: hsl(0, 0%, 96%);\n  border-bottom-color: hsl(0, 0%, 86%);\n}\n.tabs.is-boxed li.is-active a {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 86%);\n  border-bottom-color: transparent !important;\n}\n.tabs.is-fullwidth li {\n  flex-grow: 1;\n  flex-shrink: 0;\n}\n.tabs.is-toggle a {\n  border-color: hsl(0, 0%, 86%);\n  border-style: solid;\n  border-width: 1px;\n  margin-bottom: 0;\n  position: relative;\n}\n.tabs.is-toggle a:hover {\n  background-color: hsl(0, 0%, 96%);\n  border-color: hsl(0, 0%, 71%);\n  z-index: 2;\n}\n.tabs.is-toggle li + li {\n  margin-left: -1px;\n}\n.tabs.is-toggle li:first-child a {\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.tabs.is-toggle li:last-child a {\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.tabs.is-toggle li.is-active a {\n  background-color: hsl(229, 53%, 53%);\n  border-color: hsl(229, 53%, 53%);\n  color: #fff;\n  z-index: 1;\n}\n.tabs.is-toggle ul {\n  border-bottom: none;\n}\n.tabs.is-toggle.is-toggle-rounded li:first-child a {\n  border-bottom-left-radius: 9999px;\n  border-top-left-radius: 9999px;\n  padding-left: 1.25em;\n}\n.tabs.is-toggle.is-toggle-rounded li:last-child a {\n  border-bottom-right-radius: 9999px;\n  border-top-right-radius: 9999px;\n  padding-right: 1.25em;\n}\n.tabs.is-small {\n  font-size: 0.75rem;\n}\n.tabs.is-medium {\n  font-size: 1.25rem;\n}\n.tabs.is-large {\n  font-size: 1.5rem;\n}\n\n/* Bulma Grid */\n.column {\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n  padding: 0.75rem;\n}\n.columns.is-mobile > .column.is-narrow {\n  flex: none;\n  width: unset;\n}\n.columns.is-mobile > .column.is-full {\n  flex: none;\n  width: 100%;\n}\n.columns.is-mobile > .column.is-three-quarters {\n  flex: none;\n  width: 75%;\n}\n.columns.is-mobile > .column.is-two-thirds {\n  flex: none;\n  width: 66.6666%;\n}\n.columns.is-mobile > .column.is-half {\n  flex: none;\n  width: 50%;\n}\n.columns.is-mobile > .column.is-one-third {\n  flex: none;\n  width: 33.3333%;\n}\n.columns.is-mobile > .column.is-one-quarter {\n  flex: none;\n  width: 25%;\n}\n.columns.is-mobile > .column.is-one-fifth {\n  flex: none;\n  width: 20%;\n}\n.columns.is-mobile > .column.is-two-fifths {\n  flex: none;\n  width: 40%;\n}\n.columns.is-mobile > .column.is-three-fifths {\n  flex: none;\n  width: 60%;\n}\n.columns.is-mobile > .column.is-four-fifths {\n  flex: none;\n  width: 80%;\n}\n.columns.is-mobile > .column.is-offset-three-quarters {\n  margin-left: 75%;\n}\n.columns.is-mobile > .column.is-offset-two-thirds {\n  margin-left: 66.6666%;\n}\n.columns.is-mobile > .column.is-offset-half {\n  margin-left: 50%;\n}\n.columns.is-mobile > .column.is-offset-one-third {\n  margin-left: 33.3333%;\n}\n.columns.is-mobile > .column.is-offset-one-quarter {\n  margin-left: 25%;\n}\n.columns.is-mobile > .column.is-offset-one-fifth {\n  margin-left: 20%;\n}\n.columns.is-mobile > .column.is-offset-two-fifths {\n  margin-left: 40%;\n}\n.columns.is-mobile > .column.is-offset-three-fifths {\n  margin-left: 60%;\n}\n.columns.is-mobile > .column.is-offset-four-fifths {\n  margin-left: 80%;\n}\n.columns.is-mobile > .column.is-0 {\n  flex: none;\n  width: 0%;\n}\n.columns.is-mobile > .column.is-offset-0 {\n  margin-left: 0%;\n}\n.columns.is-mobile > .column.is-1 {\n  flex: none;\n  width: 8.33333337%;\n}\n.columns.is-mobile > .column.is-offset-1 {\n  margin-left: 8.33333337%;\n}\n.columns.is-mobile > .column.is-2 {\n  flex: none;\n  width: 16.66666674%;\n}\n.columns.is-mobile > .column.is-offset-2 {\n  margin-left: 16.66666674%;\n}\n.columns.is-mobile > .column.is-3 {\n  flex: none;\n  width: 25%;\n}\n.columns.is-mobile > .column.is-offset-3 {\n  margin-left: 25%;\n}\n.columns.is-mobile > .column.is-4 {\n  flex: none;\n  width: 33.33333337%;\n}\n.columns.is-mobile > .column.is-offset-4 {\n  margin-left: 33.33333337%;\n}\n.columns.is-mobile > .column.is-5 {\n  flex: none;\n  width: 41.66666674%;\n}\n.columns.is-mobile > .column.is-offset-5 {\n  margin-left: 41.66666674%;\n}\n.columns.is-mobile > .column.is-6 {\n  flex: none;\n  width: 50%;\n}\n.columns.is-mobile > .column.is-offset-6 {\n  margin-left: 50%;\n}\n.columns.is-mobile > .column.is-7 {\n  flex: none;\n  width: 58.33333337%;\n}\n.columns.is-mobile > .column.is-offset-7 {\n  margin-left: 58.33333337%;\n}\n.columns.is-mobile > .column.is-8 {\n  flex: none;\n  width: 66.66666674%;\n}\n.columns.is-mobile > .column.is-offset-8 {\n  margin-left: 66.66666674%;\n}\n.columns.is-mobile > .column.is-9 {\n  flex: none;\n  width: 75%;\n}\n.columns.is-mobile > .column.is-offset-9 {\n  margin-left: 75%;\n}\n.columns.is-mobile > .column.is-10 {\n  flex: none;\n  width: 83.33333337%;\n}\n.columns.is-mobile > .column.is-offset-10 {\n  margin-left: 83.33333337%;\n}\n.columns.is-mobile > .column.is-11 {\n  flex: none;\n  width: 91.66666674%;\n}\n.columns.is-mobile > .column.is-offset-11 {\n  margin-left: 91.66666674%;\n}\n.columns.is-mobile > .column.is-12 {\n  flex: none;\n  width: 100%;\n}\n.columns.is-mobile > .column.is-offset-12 {\n  margin-left: 100%;\n}\n@media screen and (max-width: 768px) {\n  .column.is-narrow-mobile {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-mobile {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-mobile {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-mobile {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-mobile {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-mobile {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-mobile {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-mobile {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-mobile {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-mobile {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-mobile {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-mobile {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-mobile {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-mobile {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-mobile {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-mobile {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-mobile {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-mobile {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-mobile {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-mobile {\n    margin-left: 80%;\n  }\n  .column.is-0-mobile {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-mobile {\n    margin-left: 0%;\n  }\n  .column.is-1-mobile {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-mobile {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-mobile {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-mobile {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-mobile {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-mobile {\n    margin-left: 25%;\n  }\n  .column.is-4-mobile {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-mobile {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-mobile {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-mobile {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-mobile {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-mobile {\n    margin-left: 50%;\n  }\n  .column.is-7-mobile {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-mobile {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-mobile {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-mobile {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-mobile {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-mobile {\n    margin-left: 75%;\n  }\n  .column.is-10-mobile {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-mobile {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-mobile {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-mobile {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-mobile {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-mobile {\n    margin-left: 100%;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .column.is-narrow, .column.is-narrow-tablet {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full, .column.is-full-tablet {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters, .column.is-three-quarters-tablet {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds, .column.is-two-thirds-tablet {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half, .column.is-half-tablet {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third, .column.is-one-third-tablet {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter, .column.is-one-quarter-tablet {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth, .column.is-one-fifth-tablet {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths, .column.is-two-fifths-tablet {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths, .column.is-three-fifths-tablet {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths, .column.is-four-fifths-tablet {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters, .column.is-offset-three-quarters-tablet {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds, .column.is-offset-two-thirds-tablet {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half, .column.is-offset-half-tablet {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third, .column.is-offset-one-third-tablet {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter, .column.is-offset-one-quarter-tablet {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth, .column.is-offset-one-fifth-tablet {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths, .column.is-offset-two-fifths-tablet {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths, .column.is-offset-three-fifths-tablet {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths, .column.is-offset-four-fifths-tablet {\n    margin-left: 80%;\n  }\n  .column.is-0, .column.is-0-tablet {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0, .column.is-offset-0-tablet {\n    margin-left: 0%;\n  }\n  .column.is-1, .column.is-1-tablet {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1, .column.is-offset-1-tablet {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2, .column.is-2-tablet {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2, .column.is-offset-2-tablet {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3, .column.is-3-tablet {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3, .column.is-offset-3-tablet {\n    margin-left: 25%;\n  }\n  .column.is-4, .column.is-4-tablet {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4, .column.is-offset-4-tablet {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5, .column.is-5-tablet {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5, .column.is-offset-5-tablet {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6, .column.is-6-tablet {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6, .column.is-offset-6-tablet {\n    margin-left: 50%;\n  }\n  .column.is-7, .column.is-7-tablet {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7, .column.is-offset-7-tablet {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8, .column.is-8-tablet {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8, .column.is-offset-8-tablet {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9, .column.is-9-tablet {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9, .column.is-offset-9-tablet {\n    margin-left: 75%;\n  }\n  .column.is-10, .column.is-10-tablet {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10, .column.is-offset-10-tablet {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11, .column.is-11-tablet {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11, .column.is-offset-11-tablet {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12, .column.is-12-tablet {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12, .column.is-offset-12-tablet {\n    margin-left: 100%;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .column.is-narrow-touch {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-touch {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-touch {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-touch {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-touch {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-touch {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-touch {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-touch {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-touch {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-touch {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-touch {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-touch {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-touch {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-touch {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-touch {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-touch {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-touch {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-touch {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-touch {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-touch {\n    margin-left: 80%;\n  }\n  .column.is-0-touch {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-touch {\n    margin-left: 0%;\n  }\n  .column.is-1-touch {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-touch {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-touch {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-touch {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-touch {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-touch {\n    margin-left: 25%;\n  }\n  .column.is-4-touch {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-touch {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-touch {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-touch {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-touch {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-touch {\n    margin-left: 50%;\n  }\n  .column.is-7-touch {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-touch {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-touch {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-touch {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-touch {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-touch {\n    margin-left: 75%;\n  }\n  .column.is-10-touch {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-touch {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-touch {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-touch {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-touch {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-touch {\n    margin-left: 100%;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .column.is-narrow-desktop {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-desktop {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-desktop {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-desktop {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-desktop {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-desktop {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-desktop {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-desktop {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-desktop {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-desktop {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-desktop {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-desktop {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-desktop {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-desktop {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-desktop {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-desktop {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-desktop {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-desktop {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-desktop {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-desktop {\n    margin-left: 80%;\n  }\n  .column.is-0-desktop {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-desktop {\n    margin-left: 0%;\n  }\n  .column.is-1-desktop {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-desktop {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-desktop {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-desktop {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-desktop {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-desktop {\n    margin-left: 25%;\n  }\n  .column.is-4-desktop {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-desktop {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-desktop {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-desktop {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-desktop {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-desktop {\n    margin-left: 50%;\n  }\n  .column.is-7-desktop {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-desktop {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-desktop {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-desktop {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-desktop {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-desktop {\n    margin-left: 75%;\n  }\n  .column.is-10-desktop {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-desktop {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-desktop {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-desktop {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-desktop {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-desktop {\n    margin-left: 100%;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .column.is-narrow-widescreen {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-widescreen {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-widescreen {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-widescreen {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-widescreen {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-widescreen {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-widescreen {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-widescreen {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-widescreen {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-widescreen {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-widescreen {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-widescreen {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-widescreen {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-widescreen {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-widescreen {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-widescreen {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-widescreen {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-widescreen {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-widescreen {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-widescreen {\n    margin-left: 80%;\n  }\n  .column.is-0-widescreen {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-widescreen {\n    margin-left: 0%;\n  }\n  .column.is-1-widescreen {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-widescreen {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-widescreen {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-widescreen {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-widescreen {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-widescreen {\n    margin-left: 25%;\n  }\n  .column.is-4-widescreen {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-widescreen {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-widescreen {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-widescreen {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-widescreen {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-widescreen {\n    margin-left: 50%;\n  }\n  .column.is-7-widescreen {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-widescreen {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-widescreen {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-widescreen {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-widescreen {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-widescreen {\n    margin-left: 75%;\n  }\n  .column.is-10-widescreen {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-widescreen {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-widescreen {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-widescreen {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-widescreen {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-widescreen {\n    margin-left: 100%;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .column.is-narrow-fullhd {\n    flex: none;\n    width: unset;\n  }\n  .column.is-full-fullhd {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-three-quarters-fullhd {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-two-thirds-fullhd {\n    flex: none;\n    width: 66.6666%;\n  }\n  .column.is-half-fullhd {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-one-third-fullhd {\n    flex: none;\n    width: 33.3333%;\n  }\n  .column.is-one-quarter-fullhd {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-one-fifth-fullhd {\n    flex: none;\n    width: 20%;\n  }\n  .column.is-two-fifths-fullhd {\n    flex: none;\n    width: 40%;\n  }\n  .column.is-three-fifths-fullhd {\n    flex: none;\n    width: 60%;\n  }\n  .column.is-four-fifths-fullhd {\n    flex: none;\n    width: 80%;\n  }\n  .column.is-offset-three-quarters-fullhd {\n    margin-left: 75%;\n  }\n  .column.is-offset-two-thirds-fullhd {\n    margin-left: 66.6666%;\n  }\n  .column.is-offset-half-fullhd {\n    margin-left: 50%;\n  }\n  .column.is-offset-one-third-fullhd {\n    margin-left: 33.3333%;\n  }\n  .column.is-offset-one-quarter-fullhd {\n    margin-left: 25%;\n  }\n  .column.is-offset-one-fifth-fullhd {\n    margin-left: 20%;\n  }\n  .column.is-offset-two-fifths-fullhd {\n    margin-left: 40%;\n  }\n  .column.is-offset-three-fifths-fullhd {\n    margin-left: 60%;\n  }\n  .column.is-offset-four-fifths-fullhd {\n    margin-left: 80%;\n  }\n  .column.is-0-fullhd {\n    flex: none;\n    width: 0%;\n  }\n  .column.is-offset-0-fullhd {\n    margin-left: 0%;\n  }\n  .column.is-1-fullhd {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .column.is-offset-1-fullhd {\n    margin-left: 8.33333337%;\n  }\n  .column.is-2-fullhd {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .column.is-offset-2-fullhd {\n    margin-left: 16.66666674%;\n  }\n  .column.is-3-fullhd {\n    flex: none;\n    width: 25%;\n  }\n  .column.is-offset-3-fullhd {\n    margin-left: 25%;\n  }\n  .column.is-4-fullhd {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .column.is-offset-4-fullhd {\n    margin-left: 33.33333337%;\n  }\n  .column.is-5-fullhd {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .column.is-offset-5-fullhd {\n    margin-left: 41.66666674%;\n  }\n  .column.is-6-fullhd {\n    flex: none;\n    width: 50%;\n  }\n  .column.is-offset-6-fullhd {\n    margin-left: 50%;\n  }\n  .column.is-7-fullhd {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .column.is-offset-7-fullhd {\n    margin-left: 58.33333337%;\n  }\n  .column.is-8-fullhd {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .column.is-offset-8-fullhd {\n    margin-left: 66.66666674%;\n  }\n  .column.is-9-fullhd {\n    flex: none;\n    width: 75%;\n  }\n  .column.is-offset-9-fullhd {\n    margin-left: 75%;\n  }\n  .column.is-10-fullhd {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .column.is-offset-10-fullhd {\n    margin-left: 83.33333337%;\n  }\n  .column.is-11-fullhd {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .column.is-offset-11-fullhd {\n    margin-left: 91.66666674%;\n  }\n  .column.is-12-fullhd {\n    flex: none;\n    width: 100%;\n  }\n  .column.is-offset-12-fullhd {\n    margin-left: 100%;\n  }\n}\n\n.columns {\n  margin-left: -0.75rem;\n  margin-right: -0.75rem;\n  margin-top: -0.75rem;\n}\n.columns:last-child {\n  margin-bottom: -0.75rem;\n}\n.columns:not(:last-child) {\n  margin-bottom: calc(1.5rem - 0.75rem);\n}\n.columns.is-centered {\n  justify-content: center;\n}\n.columns.is-gapless {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n}\n.columns.is-gapless > .column {\n  margin: 0;\n  padding: 0 !important;\n}\n.columns.is-gapless:not(:last-child) {\n  margin-bottom: 1.5rem;\n}\n.columns.is-gapless:last-child {\n  margin-bottom: 0;\n}\n.columns.is-mobile {\n  display: flex;\n}\n.columns.is-multiline {\n  flex-wrap: wrap;\n}\n.columns.is-vcentered {\n  align-items: center;\n}\n@media screen and (min-width: 769px), print {\n  .columns:not(.is-desktop) {\n    display: flex;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-desktop {\n    display: flex;\n  }\n}\n\n.columns.is-variable {\n  --columnGap: 0.75rem;\n  margin-left: calc(-1 * var(--columnGap));\n  margin-right: calc(-1 * var(--columnGap));\n}\n.columns.is-variable > .column {\n  padding-left: var(--columnGap);\n  padding-right: var(--columnGap);\n}\n.columns.is-variable.is-0 {\n  --columnGap: 0rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-0-mobile {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-0-tablet {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-0-tablet-only {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-0-touch {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-0-desktop {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-0-desktop-only {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-0-widescreen {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-0-widescreen-only {\n    --columnGap: 0rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-0-fullhd {\n    --columnGap: 0rem;\n  }\n}\n.columns.is-variable.is-1 {\n  --columnGap: 0.25rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-1-mobile {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-1-tablet {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-1-tablet-only {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-1-touch {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-1-desktop {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-1-desktop-only {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-1-widescreen {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-1-widescreen-only {\n    --columnGap: 0.25rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-1-fullhd {\n    --columnGap: 0.25rem;\n  }\n}\n.columns.is-variable.is-2 {\n  --columnGap: 0.5rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-2-mobile {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-2-tablet {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-2-tablet-only {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-2-touch {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-2-desktop {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-2-desktop-only {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-2-widescreen {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-2-widescreen-only {\n    --columnGap: 0.5rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-2-fullhd {\n    --columnGap: 0.5rem;\n  }\n}\n.columns.is-variable.is-3 {\n  --columnGap: 0.75rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-3-mobile {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-3-tablet {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-3-tablet-only {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-3-touch {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-3-desktop {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-3-desktop-only {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-3-widescreen {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-3-widescreen-only {\n    --columnGap: 0.75rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-3-fullhd {\n    --columnGap: 0.75rem;\n  }\n}\n.columns.is-variable.is-4 {\n  --columnGap: 1rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-4-mobile {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-4-tablet {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-4-tablet-only {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-4-touch {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-4-desktop {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-4-desktop-only {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-4-widescreen {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-4-widescreen-only {\n    --columnGap: 1rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-4-fullhd {\n    --columnGap: 1rem;\n  }\n}\n.columns.is-variable.is-5 {\n  --columnGap: 1.25rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-5-mobile {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-5-tablet {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-5-tablet-only {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-5-touch {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-5-desktop {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-5-desktop-only {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-5-widescreen {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-5-widescreen-only {\n    --columnGap: 1.25rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-5-fullhd {\n    --columnGap: 1.25rem;\n  }\n}\n.columns.is-variable.is-6 {\n  --columnGap: 1.5rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-6-mobile {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-6-tablet {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-6-tablet-only {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-6-touch {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-6-desktop {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-6-desktop-only {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-6-widescreen {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-6-widescreen-only {\n    --columnGap: 1.5rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-6-fullhd {\n    --columnGap: 1.5rem;\n  }\n}\n.columns.is-variable.is-7 {\n  --columnGap: 1.75rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-7-mobile {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-7-tablet {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-7-tablet-only {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-7-touch {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-7-desktop {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-7-desktop-only {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-7-widescreen {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-7-widescreen-only {\n    --columnGap: 1.75rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-7-fullhd {\n    --columnGap: 1.75rem;\n  }\n}\n.columns.is-variable.is-8 {\n  --columnGap: 2rem;\n}\n@media screen and (max-width: 768px) {\n  .columns.is-variable.is-8-mobile {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .columns.is-variable.is-8-tablet {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .columns.is-variable.is-8-tablet-only {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .columns.is-variable.is-8-touch {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .columns.is-variable.is-8-desktop {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .columns.is-variable.is-8-desktop-only {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .columns.is-variable.is-8-widescreen {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .columns.is-variable.is-8-widescreen-only {\n    --columnGap: 2rem;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .columns.is-variable.is-8-fullhd {\n    --columnGap: 2rem;\n  }\n}\n\n.tile {\n  align-items: stretch;\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n  min-height: min-content;\n}\n.tile.is-ancestor {\n  margin-left: -0.75rem;\n  margin-right: -0.75rem;\n  margin-top: -0.75rem;\n}\n.tile.is-ancestor:last-child {\n  margin-bottom: -0.75rem;\n}\n.tile.is-ancestor:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n.tile.is-child {\n  margin: 0 !important;\n}\n.tile.is-parent {\n  padding: 0.75rem;\n}\n.tile.is-vertical {\n  flex-direction: column;\n}\n.tile.is-vertical > .tile.is-child:not(:last-child) {\n  margin-bottom: 1.5rem !important;\n}\n@media screen and (min-width: 769px), print {\n  .tile:not(.is-child) {\n    display: flex;\n  }\n  .tile.is-1 {\n    flex: none;\n    width: 8.33333337%;\n  }\n  .tile.is-2 {\n    flex: none;\n    width: 16.66666674%;\n  }\n  .tile.is-3 {\n    flex: none;\n    width: 25%;\n  }\n  .tile.is-4 {\n    flex: none;\n    width: 33.33333337%;\n  }\n  .tile.is-5 {\n    flex: none;\n    width: 41.66666674%;\n  }\n  .tile.is-6 {\n    flex: none;\n    width: 50%;\n  }\n  .tile.is-7 {\n    flex: none;\n    width: 58.33333337%;\n  }\n  .tile.is-8 {\n    flex: none;\n    width: 66.66666674%;\n  }\n  .tile.is-9 {\n    flex: none;\n    width: 75%;\n  }\n  .tile.is-10 {\n    flex: none;\n    width: 83.33333337%;\n  }\n  .tile.is-11 {\n    flex: none;\n    width: 91.66666674%;\n  }\n  .tile.is-12 {\n    flex: none;\n    width: 100%;\n  }\n}\n\n/* Bulma Helpers */\n.has-text-white {\n  color: hsl(0, 0%, 100%) !important;\n}\n\na.has-text-white:hover, a.has-text-white:focus {\n  color: #e6e6e6 !important;\n}\n\n.has-background-white {\n  background-color: hsl(0, 0%, 100%) !important;\n}\n\n.has-text-black {\n  color: hsl(0, 0%, 4%) !important;\n}\n\na.has-text-black:hover, a.has-text-black:focus {\n  color: black !important;\n}\n\n.has-background-black {\n  background-color: hsl(0, 0%, 4%) !important;\n}\n\n.has-text-light {\n  color: hsl(0, 0%, 96%) !important;\n}\n\na.has-text-light:hover, a.has-text-light:focus {\n  color: #dbdbdb !important;\n}\n\n.has-background-light {\n  background-color: hsl(0, 0%, 96%) !important;\n}\n\n.has-text-dark {\n  color: hsl(0, 0%, 21%) !important;\n}\n\na.has-text-dark:hover, a.has-text-dark:focus {\n  color: #1c1c1c !important;\n}\n\n.has-background-dark {\n  background-color: hsl(0, 0%, 21%) !important;\n}\n\n.has-text-primary {\n  color: hsl(171, 100%, 41%) !important;\n}\n\na.has-text-primary:hover, a.has-text-primary:focus {\n  color: #009e86 !important;\n}\n\n.has-background-primary {\n  background-color: hsl(171, 100%, 41%) !important;\n}\n\n.has-text-primary-light {\n  color: #ebfffc !important;\n}\n\na.has-text-primary-light:hover, a.has-text-primary-light:focus {\n  color: #b8fff4 !important;\n}\n\n.has-background-primary-light {\n  background-color: #ebfffc !important;\n}\n\n.has-text-primary-dark {\n  color: #00947e !important;\n}\n\na.has-text-primary-dark:hover, a.has-text-primary-dark:focus {\n  color: #00c7a9 !important;\n}\n\n.has-background-primary-dark {\n  background-color: #00947e !important;\n}\n\n.has-text-link {\n  color: hsl(229, 53%, 53%) !important;\n}\n\na.has-text-link:hover, a.has-text-link:focus {\n  color: #3449a8 !important;\n}\n\n.has-background-link {\n  background-color: hsl(229, 53%, 53%) !important;\n}\n\n.has-text-link-light {\n  color: #eff1fa !important;\n}\n\na.has-text-link-light:hover, a.has-text-link-light:focus {\n  color: #c8cfee !important;\n}\n\n.has-background-link-light {\n  background-color: #eff1fa !important;\n}\n\n.has-text-link-dark {\n  color: #3850b7 !important;\n}\n\na.has-text-link-dark:hover, a.has-text-link-dark:focus {\n  color: #576dcb !important;\n}\n\n.has-background-link-dark {\n  background-color: #3850b7 !important;\n}\n\n.has-text-info {\n  color: hsl(207, 61%, 53%) !important;\n}\n\na.has-text-info:hover, a.has-text-info:focus {\n  color: #2b74b1 !important;\n}\n\n.has-background-info {\n  background-color: hsl(207, 61%, 53%) !important;\n}\n\n.has-text-info-light {\n  color: #eff5fb !important;\n}\n\na.has-text-info-light:hover, a.has-text-info-light:focus {\n  color: #c6ddf1 !important;\n}\n\n.has-background-info-light {\n  background-color: #eff5fb !important;\n}\n\n.has-text-info-dark {\n  color: #296fa8 !important;\n}\n\na.has-text-info-dark:hover, a.has-text-info-dark:focus {\n  color: #368ace !important;\n}\n\n.has-background-info-dark {\n  background-color: #296fa8 !important;\n}\n\n.has-text-success {\n  color: hsl(153, 53%, 53%) !important;\n}\n\na.has-text-success:hover, a.has-text-success:focus {\n  color: #34a873 !important;\n}\n\n.has-background-success {\n  background-color: hsl(153, 53%, 53%) !important;\n}\n\n.has-text-success-light {\n  color: #effaf5 !important;\n}\n\na.has-text-success-light:hover, a.has-text-success-light:focus {\n  color: #c8eedd !important;\n}\n\n.has-background-success-light {\n  background-color: #effaf5 !important;\n}\n\n.has-text-success-dark {\n  color: #257953 !important;\n}\n\na.has-text-success-dark:hover, a.has-text-success-dark:focus {\n  color: #31a06e !important;\n}\n\n.has-background-success-dark {\n  background-color: #257953 !important;\n}\n\n.has-text-warning {\n  color: hsl(44, 100%, 77%) !important;\n}\n\na.has-text-warning:hover, a.has-text-warning:focus {\n  color: #ffd257 !important;\n}\n\n.has-background-warning {\n  background-color: hsl(44, 100%, 77%) !important;\n}\n\n.has-text-warning-light {\n  color: #fffaeb !important;\n}\n\na.has-text-warning-light:hover, a.has-text-warning-light:focus {\n  color: #ffecb8 !important;\n}\n\n.has-background-warning-light {\n  background-color: #fffaeb !important;\n}\n\n.has-text-warning-dark {\n  color: #946c00 !important;\n}\n\na.has-text-warning-dark:hover, a.has-text-warning-dark:focus {\n  color: #c79200 !important;\n}\n\n.has-background-warning-dark {\n  background-color: #946c00 !important;\n}\n\n.has-text-danger {\n  color: hsl(348, 86%, 61%) !important;\n}\n\na.has-text-danger:hover, a.has-text-danger:focus {\n  color: #ee1742 !important;\n}\n\n.has-background-danger {\n  background-color: hsl(348, 86%, 61%) !important;\n}\n\n.has-text-danger-light {\n  color: #feecf0 !important;\n}\n\na.has-text-danger-light:hover, a.has-text-danger-light:focus {\n  color: #fabdc9 !important;\n}\n\n.has-background-danger-light {\n  background-color: #feecf0 !important;\n}\n\n.has-text-danger-dark {\n  color: #cc0f35 !important;\n}\n\na.has-text-danger-dark:hover, a.has-text-danger-dark:focus {\n  color: #ee2049 !important;\n}\n\n.has-background-danger-dark {\n  background-color: #cc0f35 !important;\n}\n\n.has-text-black-bis {\n  color: hsl(0, 0%, 7%) !important;\n}\n\n.has-background-black-bis {\n  background-color: hsl(0, 0%, 7%) !important;\n}\n\n.has-text-black-ter {\n  color: hsl(0, 0%, 14%) !important;\n}\n\n.has-background-black-ter {\n  background-color: hsl(0, 0%, 14%) !important;\n}\n\n.has-text-grey-darker {\n  color: hsl(0, 0%, 21%) !important;\n}\n\n.has-background-grey-darker {\n  background-color: hsl(0, 0%, 21%) !important;\n}\n\n.has-text-grey-dark {\n  color: hsl(0, 0%, 29%) !important;\n}\n\n.has-background-grey-dark {\n  background-color: hsl(0, 0%, 29%) !important;\n}\n\n.has-text-grey {\n  color: hsl(0, 0%, 48%) !important;\n}\n\n.has-background-grey {\n  background-color: hsl(0, 0%, 48%) !important;\n}\n\n.has-text-grey-light {\n  color: hsl(0, 0%, 71%) !important;\n}\n\n.has-background-grey-light {\n  background-color: hsl(0, 0%, 71%) !important;\n}\n\n.has-text-grey-lighter {\n  color: hsl(0, 0%, 86%) !important;\n}\n\n.has-background-grey-lighter {\n  background-color: hsl(0, 0%, 86%) !important;\n}\n\n.has-text-white-ter {\n  color: hsl(0, 0%, 96%) !important;\n}\n\n.has-background-white-ter {\n  background-color: hsl(0, 0%, 96%) !important;\n}\n\n.has-text-white-bis {\n  color: hsl(0, 0%, 98%) !important;\n}\n\n.has-background-white-bis {\n  background-color: hsl(0, 0%, 98%) !important;\n}\n\n.is-flex-direction-row {\n  flex-direction: row !important;\n}\n\n.is-flex-direction-row-reverse {\n  flex-direction: row-reverse !important;\n}\n\n.is-flex-direction-column {\n  flex-direction: column !important;\n}\n\n.is-flex-direction-column-reverse {\n  flex-direction: column-reverse !important;\n}\n\n.is-flex-wrap-nowrap {\n  flex-wrap: nowrap !important;\n}\n\n.is-flex-wrap-wrap {\n  flex-wrap: wrap !important;\n}\n\n.is-flex-wrap-wrap-reverse {\n  flex-wrap: wrap-reverse !important;\n}\n\n.is-justify-content-flex-start {\n  justify-content: flex-start !important;\n}\n\n.is-justify-content-flex-end {\n  justify-content: flex-end !important;\n}\n\n.is-justify-content-center {\n  justify-content: center !important;\n}\n\n.is-justify-content-space-between {\n  justify-content: space-between !important;\n}\n\n.is-justify-content-space-around {\n  justify-content: space-around !important;\n}\n\n.is-justify-content-space-evenly {\n  justify-content: space-evenly !important;\n}\n\n.is-justify-content-start {\n  justify-content: start !important;\n}\n\n.is-justify-content-end {\n  justify-content: end !important;\n}\n\n.is-justify-content-left {\n  justify-content: left !important;\n}\n\n.is-justify-content-right {\n  justify-content: right !important;\n}\n\n.is-align-content-flex-start {\n  align-content: flex-start !important;\n}\n\n.is-align-content-flex-end {\n  align-content: flex-end !important;\n}\n\n.is-align-content-center {\n  align-content: center !important;\n}\n\n.is-align-content-space-between {\n  align-content: space-between !important;\n}\n\n.is-align-content-space-around {\n  align-content: space-around !important;\n}\n\n.is-align-content-space-evenly {\n  align-content: space-evenly !important;\n}\n\n.is-align-content-stretch {\n  align-content: stretch !important;\n}\n\n.is-align-content-start {\n  align-content: start !important;\n}\n\n.is-align-content-end {\n  align-content: end !important;\n}\n\n.is-align-content-baseline {\n  align-content: baseline !important;\n}\n\n.is-align-items-stretch {\n  align-items: stretch !important;\n}\n\n.is-align-items-flex-start {\n  align-items: flex-start !important;\n}\n\n.is-align-items-flex-end {\n  align-items: flex-end !important;\n}\n\n.is-align-items-center {\n  align-items: center !important;\n}\n\n.is-align-items-baseline {\n  align-items: baseline !important;\n}\n\n.is-align-items-start {\n  align-items: start !important;\n}\n\n.is-align-items-end {\n  align-items: end !important;\n}\n\n.is-align-items-self-start {\n  align-items: self-start !important;\n}\n\n.is-align-items-self-end {\n  align-items: self-end !important;\n}\n\n.is-align-self-auto {\n  align-self: auto !important;\n}\n\n.is-align-self-flex-start {\n  align-self: flex-start !important;\n}\n\n.is-align-self-flex-end {\n  align-self: flex-end !important;\n}\n\n.is-align-self-center {\n  align-self: center !important;\n}\n\n.is-align-self-baseline {\n  align-self: baseline !important;\n}\n\n.is-align-self-stretch {\n  align-self: stretch !important;\n}\n\n.is-flex-grow-0 {\n  flex-grow: 0 !important;\n}\n\n.is-flex-grow-1 {\n  flex-grow: 1 !important;\n}\n\n.is-flex-grow-2 {\n  flex-grow: 2 !important;\n}\n\n.is-flex-grow-3 {\n  flex-grow: 3 !important;\n}\n\n.is-flex-grow-4 {\n  flex-grow: 4 !important;\n}\n\n.is-flex-grow-5 {\n  flex-grow: 5 !important;\n}\n\n.is-flex-shrink-0 {\n  flex-shrink: 0 !important;\n}\n\n.is-flex-shrink-1 {\n  flex-shrink: 1 !important;\n}\n\n.is-flex-shrink-2 {\n  flex-shrink: 2 !important;\n}\n\n.is-flex-shrink-3 {\n  flex-shrink: 3 !important;\n}\n\n.is-flex-shrink-4 {\n  flex-shrink: 4 !important;\n}\n\n.is-flex-shrink-5 {\n  flex-shrink: 5 !important;\n}\n\n.is-clearfix::after {\n  clear: both;\n  content: \" \";\n  display: table;\n}\n\n.is-pulled-left {\n  float: left !important;\n}\n\n.is-pulled-right {\n  float: right !important;\n}\n\n.is-radiusless {\n  border-radius: 0 !important;\n}\n\n.is-shadowless {\n  box-shadow: none !important;\n}\n\n.is-clickable {\n  cursor: pointer !important;\n  pointer-events: all !important;\n}\n\n.is-clipped {\n  overflow: hidden !important;\n}\n\n.is-relative {\n  position: relative !important;\n}\n\n.is-marginless {\n  margin: 0 !important;\n}\n\n.is-paddingless {\n  padding: 0 !important;\n}\n\n.m-0 {\n  margin: 0 !important;\n}\n\n.mt-0 {\n  margin-top: 0 !important;\n}\n\n.mr-0 {\n  margin-right: 0 !important;\n}\n\n.mb-0 {\n  margin-bottom: 0 !important;\n}\n\n.ml-0 {\n  margin-left: 0 !important;\n}\n\n.mx-0 {\n  margin-left: 0 !important;\n  margin-right: 0 !important;\n}\n\n.my-0 {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n.m-1 {\n  margin: 0.25rem !important;\n}\n\n.mt-1 {\n  margin-top: 0.25rem !important;\n}\n\n.mr-1 {\n  margin-right: 0.25rem !important;\n}\n\n.mb-1 {\n  margin-bottom: 0.25rem !important;\n}\n\n.ml-1 {\n  margin-left: 0.25rem !important;\n}\n\n.mx-1 {\n  margin-left: 0.25rem !important;\n  margin-right: 0.25rem !important;\n}\n\n.my-1 {\n  margin-top: 0.25rem !important;\n  margin-bottom: 0.25rem !important;\n}\n\n.m-2 {\n  margin: 0.5rem !important;\n}\n\n.mt-2 {\n  margin-top: 0.5rem !important;\n}\n\n.mr-2 {\n  margin-right: 0.5rem !important;\n}\n\n.mb-2 {\n  margin-bottom: 0.5rem !important;\n}\n\n.ml-2 {\n  margin-left: 0.5rem !important;\n}\n\n.mx-2 {\n  margin-left: 0.5rem !important;\n  margin-right: 0.5rem !important;\n}\n\n.my-2 {\n  margin-top: 0.5rem !important;\n  margin-bottom: 0.5rem !important;\n}\n\n.m-3 {\n  margin: 0.75rem !important;\n}\n\n.mt-3 {\n  margin-top: 0.75rem !important;\n}\n\n.mr-3 {\n  margin-right: 0.75rem !important;\n}\n\n.mb-3 {\n  margin-bottom: 0.75rem !important;\n}\n\n.ml-3 {\n  margin-left: 0.75rem !important;\n}\n\n.mx-3 {\n  margin-left: 0.75rem !important;\n  margin-right: 0.75rem !important;\n}\n\n.my-3 {\n  margin-top: 0.75rem !important;\n  margin-bottom: 0.75rem !important;\n}\n\n.m-4 {\n  margin: 1rem !important;\n}\n\n.mt-4 {\n  margin-top: 1rem !important;\n}\n\n.mr-4 {\n  margin-right: 1rem !important;\n}\n\n.mb-4 {\n  margin-bottom: 1rem !important;\n}\n\n.ml-4 {\n  margin-left: 1rem !important;\n}\n\n.mx-4 {\n  margin-left: 1rem !important;\n  margin-right: 1rem !important;\n}\n\n.my-4 {\n  margin-top: 1rem !important;\n  margin-bottom: 1rem !important;\n}\n\n.m-5 {\n  margin: 1.5rem !important;\n}\n\n.mt-5 {\n  margin-top: 1.5rem !important;\n}\n\n.mr-5 {\n  margin-right: 1.5rem !important;\n}\n\n.mb-5 {\n  margin-bottom: 1.5rem !important;\n}\n\n.ml-5 {\n  margin-left: 1.5rem !important;\n}\n\n.mx-5 {\n  margin-left: 1.5rem !important;\n  margin-right: 1.5rem !important;\n}\n\n.my-5 {\n  margin-top: 1.5rem !important;\n  margin-bottom: 1.5rem !important;\n}\n\n.m-6 {\n  margin: 3rem !important;\n}\n\n.mt-6 {\n  margin-top: 3rem !important;\n}\n\n.mr-6 {\n  margin-right: 3rem !important;\n}\n\n.mb-6 {\n  margin-bottom: 3rem !important;\n}\n\n.ml-6 {\n  margin-left: 3rem !important;\n}\n\n.mx-6 {\n  margin-left: 3rem !important;\n  margin-right: 3rem !important;\n}\n\n.my-6 {\n  margin-top: 3rem !important;\n  margin-bottom: 3rem !important;\n}\n\n.m-auto {\n  margin: auto !important;\n}\n\n.mt-auto {\n  margin-top: auto !important;\n}\n\n.mr-auto {\n  margin-right: auto !important;\n}\n\n.mb-auto {\n  margin-bottom: auto !important;\n}\n\n.ml-auto {\n  margin-left: auto !important;\n}\n\n.mx-auto {\n  margin-left: auto !important;\n  margin-right: auto !important;\n}\n\n.my-auto {\n  margin-top: auto !important;\n  margin-bottom: auto !important;\n}\n\n.p-0 {\n  padding: 0 !important;\n}\n\n.pt-0 {\n  padding-top: 0 !important;\n}\n\n.pr-0 {\n  padding-right: 0 !important;\n}\n\n.pb-0 {\n  padding-bottom: 0 !important;\n}\n\n.pl-0 {\n  padding-left: 0 !important;\n}\n\n.px-0 {\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n}\n\n.py-0 {\n  padding-top: 0 !important;\n  padding-bottom: 0 !important;\n}\n\n.p-1 {\n  padding: 0.25rem !important;\n}\n\n.pt-1 {\n  padding-top: 0.25rem !important;\n}\n\n.pr-1 {\n  padding-right: 0.25rem !important;\n}\n\n.pb-1 {\n  padding-bottom: 0.25rem !important;\n}\n\n.pl-1 {\n  padding-left: 0.25rem !important;\n}\n\n.px-1 {\n  padding-left: 0.25rem !important;\n  padding-right: 0.25rem !important;\n}\n\n.py-1 {\n  padding-top: 0.25rem !important;\n  padding-bottom: 0.25rem !important;\n}\n\n.p-2 {\n  padding: 0.5rem !important;\n}\n\n.pt-2 {\n  padding-top: 0.5rem !important;\n}\n\n.pr-2 {\n  padding-right: 0.5rem !important;\n}\n\n.pb-2 {\n  padding-bottom: 0.5rem !important;\n}\n\n.pl-2 {\n  padding-left: 0.5rem !important;\n}\n\n.px-2 {\n  padding-left: 0.5rem !important;\n  padding-right: 0.5rem !important;\n}\n\n.py-2 {\n  padding-top: 0.5rem !important;\n  padding-bottom: 0.5rem !important;\n}\n\n.p-3 {\n  padding: 0.75rem !important;\n}\n\n.pt-3 {\n  padding-top: 0.75rem !important;\n}\n\n.pr-3 {\n  padding-right: 0.75rem !important;\n}\n\n.pb-3 {\n  padding-bottom: 0.75rem !important;\n}\n\n.pl-3 {\n  padding-left: 0.75rem !important;\n}\n\n.px-3 {\n  padding-left: 0.75rem !important;\n  padding-right: 0.75rem !important;\n}\n\n.py-3 {\n  padding-top: 0.75rem !important;\n  padding-bottom: 0.75rem !important;\n}\n\n.p-4 {\n  padding: 1rem !important;\n}\n\n.pt-4 {\n  padding-top: 1rem !important;\n}\n\n.pr-4 {\n  padding-right: 1rem !important;\n}\n\n.pb-4 {\n  padding-bottom: 1rem !important;\n}\n\n.pl-4 {\n  padding-left: 1rem !important;\n}\n\n.px-4 {\n  padding-left: 1rem !important;\n  padding-right: 1rem !important;\n}\n\n.py-4 {\n  padding-top: 1rem !important;\n  padding-bottom: 1rem !important;\n}\n\n.p-5 {\n  padding: 1.5rem !important;\n}\n\n.pt-5 {\n  padding-top: 1.5rem !important;\n}\n\n.pr-5 {\n  padding-right: 1.5rem !important;\n}\n\n.pb-5 {\n  padding-bottom: 1.5rem !important;\n}\n\n.pl-5 {\n  padding-left: 1.5rem !important;\n}\n\n.px-5 {\n  padding-left: 1.5rem !important;\n  padding-right: 1.5rem !important;\n}\n\n.py-5 {\n  padding-top: 1.5rem !important;\n  padding-bottom: 1.5rem !important;\n}\n\n.p-6 {\n  padding: 3rem !important;\n}\n\n.pt-6 {\n  padding-top: 3rem !important;\n}\n\n.pr-6 {\n  padding-right: 3rem !important;\n}\n\n.pb-6 {\n  padding-bottom: 3rem !important;\n}\n\n.pl-6 {\n  padding-left: 3rem !important;\n}\n\n.px-6 {\n  padding-left: 3rem !important;\n  padding-right: 3rem !important;\n}\n\n.py-6 {\n  padding-top: 3rem !important;\n  padding-bottom: 3rem !important;\n}\n\n.p-auto {\n  padding: auto !important;\n}\n\n.pt-auto {\n  padding-top: auto !important;\n}\n\n.pr-auto {\n  padding-right: auto !important;\n}\n\n.pb-auto {\n  padding-bottom: auto !important;\n}\n\n.pl-auto {\n  padding-left: auto !important;\n}\n\n.px-auto {\n  padding-left: auto !important;\n  padding-right: auto !important;\n}\n\n.py-auto {\n  padding-top: auto !important;\n  padding-bottom: auto !important;\n}\n\n.is-size-1 {\n  font-size: 3rem !important;\n}\n\n.is-size-2 {\n  font-size: 2.5rem !important;\n}\n\n.is-size-3 {\n  font-size: 2rem !important;\n}\n\n.is-size-4 {\n  font-size: 1.5rem !important;\n}\n\n.is-size-5 {\n  font-size: 1.25rem !important;\n}\n\n.is-size-6 {\n  font-size: 1rem !important;\n}\n\n.is-size-7 {\n  font-size: 0.75rem !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-size-1-mobile {\n    font-size: 3rem !important;\n  }\n  .is-size-2-mobile {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-mobile {\n    font-size: 2rem !important;\n  }\n  .is-size-4-mobile {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-mobile {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-mobile {\n    font-size: 1rem !important;\n  }\n  .is-size-7-mobile {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-size-1-tablet {\n    font-size: 3rem !important;\n  }\n  .is-size-2-tablet {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-tablet {\n    font-size: 2rem !important;\n  }\n  .is-size-4-tablet {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-tablet {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-tablet {\n    font-size: 1rem !important;\n  }\n  .is-size-7-tablet {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-size-1-touch {\n    font-size: 3rem !important;\n  }\n  .is-size-2-touch {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-touch {\n    font-size: 2rem !important;\n  }\n  .is-size-4-touch {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-touch {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-touch {\n    font-size: 1rem !important;\n  }\n  .is-size-7-touch {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-size-1-desktop {\n    font-size: 3rem !important;\n  }\n  .is-size-2-desktop {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-desktop {\n    font-size: 2rem !important;\n  }\n  .is-size-4-desktop {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-desktop {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-desktop {\n    font-size: 1rem !important;\n  }\n  .is-size-7-desktop {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-size-1-widescreen {\n    font-size: 3rem !important;\n  }\n  .is-size-2-widescreen {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-widescreen {\n    font-size: 2rem !important;\n  }\n  .is-size-4-widescreen {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-widescreen {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-widescreen {\n    font-size: 1rem !important;\n  }\n  .is-size-7-widescreen {\n    font-size: 0.75rem !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-size-1-fullhd {\n    font-size: 3rem !important;\n  }\n  .is-size-2-fullhd {\n    font-size: 2.5rem !important;\n  }\n  .is-size-3-fullhd {\n    font-size: 2rem !important;\n  }\n  .is-size-4-fullhd {\n    font-size: 1.5rem !important;\n  }\n  .is-size-5-fullhd {\n    font-size: 1.25rem !important;\n  }\n  .is-size-6-fullhd {\n    font-size: 1rem !important;\n  }\n  .is-size-7-fullhd {\n    font-size: 0.75rem !important;\n  }\n}\n.has-text-centered {\n  text-align: center !important;\n}\n\n.has-text-justified {\n  text-align: justify !important;\n}\n\n.has-text-left {\n  text-align: left !important;\n}\n\n.has-text-right {\n  text-align: right !important;\n}\n\n@media screen and (max-width: 768px) {\n  .has-text-centered-mobile {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .has-text-centered-tablet {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-centered-tablet-only {\n    text-align: center !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .has-text-centered-touch {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .has-text-centered-desktop {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-centered-desktop-only {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .has-text-centered-widescreen {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-centered-widescreen-only {\n    text-align: center !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .has-text-centered-fullhd {\n    text-align: center !important;\n  }\n}\n@media screen and (max-width: 768px) {\n  .has-text-justified-mobile {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .has-text-justified-tablet {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-justified-tablet-only {\n    text-align: justify !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .has-text-justified-touch {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .has-text-justified-desktop {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-justified-desktop-only {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .has-text-justified-widescreen {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-justified-widescreen-only {\n    text-align: justify !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .has-text-justified-fullhd {\n    text-align: justify !important;\n  }\n}\n@media screen and (max-width: 768px) {\n  .has-text-left-mobile {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .has-text-left-tablet {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-left-tablet-only {\n    text-align: left !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .has-text-left-touch {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .has-text-left-desktop {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-left-desktop-only {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .has-text-left-widescreen {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-left-widescreen-only {\n    text-align: left !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .has-text-left-fullhd {\n    text-align: left !important;\n  }\n}\n@media screen and (max-width: 768px) {\n  .has-text-right-mobile {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .has-text-right-tablet {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .has-text-right-tablet-only {\n    text-align: right !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .has-text-right-touch {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .has-text-right-desktop {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .has-text-right-desktop-only {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .has-text-right-widescreen {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .has-text-right-widescreen-only {\n    text-align: right !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .has-text-right-fullhd {\n    text-align: right !important;\n  }\n}\n.is-capitalized {\n  text-transform: capitalize !important;\n}\n\n.is-lowercase {\n  text-transform: lowercase !important;\n}\n\n.is-uppercase {\n  text-transform: uppercase !important;\n}\n\n.is-italic {\n  font-style: italic !important;\n}\n\n.is-underlined {\n  text-decoration: underline !important;\n}\n\n.has-text-weight-light {\n  font-weight: 300 !important;\n}\n\n.has-text-weight-normal {\n  font-weight: 400 !important;\n}\n\n.has-text-weight-medium {\n  font-weight: 500 !important;\n}\n\n.has-text-weight-semibold {\n  font-weight: 600 !important;\n}\n\n.has-text-weight-bold {\n  font-weight: 700 !important;\n}\n\n.is-family-primary {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !important;\n}\n\n.is-family-secondary {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !important;\n}\n\n.is-family-sans-serif {\n  font-family: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !important;\n}\n\n.is-family-monospace {\n  font-family: monospace !important;\n}\n\n.is-family-code {\n  font-family: monospace !important;\n}\n\n.is-block {\n  display: block !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-block-mobile {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-block-tablet {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-block-tablet-only {\n    display: block !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-block-touch {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-block-desktop {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-block-desktop-only {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-block-widescreen {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-block-widescreen-only {\n    display: block !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-block-fullhd {\n    display: block !important;\n  }\n}\n.is-flex {\n  display: flex !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-flex-mobile {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-flex-tablet {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-flex-tablet-only {\n    display: flex !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-flex-touch {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-flex-desktop {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-flex-desktop-only {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-flex-widescreen {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-flex-widescreen-only {\n    display: flex !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-flex-fullhd {\n    display: flex !important;\n  }\n}\n.is-inline {\n  display: inline !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-inline-mobile {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-inline-tablet {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-inline-tablet-only {\n    display: inline !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-inline-touch {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-inline-desktop {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-inline-desktop-only {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-inline-widescreen {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-inline-widescreen-only {\n    display: inline !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-inline-fullhd {\n    display: inline !important;\n  }\n}\n.is-inline-block {\n  display: inline-block !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-inline-block-mobile {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-inline-block-tablet {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-inline-block-tablet-only {\n    display: inline-block !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-inline-block-touch {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-inline-block-desktop {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-inline-block-desktop-only {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-inline-block-widescreen {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-inline-block-widescreen-only {\n    display: inline-block !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-inline-block-fullhd {\n    display: inline-block !important;\n  }\n}\n.is-inline-flex {\n  display: inline-flex !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-inline-flex-mobile {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-inline-flex-tablet {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-inline-flex-tablet-only {\n    display: inline-flex !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-inline-flex-touch {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-inline-flex-desktop {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-inline-flex-desktop-only {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-inline-flex-widescreen {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-inline-flex-widescreen-only {\n    display: inline-flex !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-inline-flex-fullhd {\n    display: inline-flex !important;\n  }\n}\n.is-hidden {\n  display: none !important;\n}\n\n.is-sr-only {\n  border: none !important;\n  clip: rect(0, 0, 0, 0) !important;\n  height: 0.01em !important;\n  overflow: hidden !important;\n  padding: 0 !important;\n  position: absolute !important;\n  white-space: nowrap !important;\n  width: 0.01em !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-hidden-mobile {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-hidden-tablet {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-hidden-tablet-only {\n    display: none !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-hidden-touch {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-hidden-desktop {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-hidden-desktop-only {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-hidden-widescreen {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-hidden-widescreen-only {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-hidden-fullhd {\n    display: none !important;\n  }\n}\n.is-invisible {\n  visibility: hidden !important;\n}\n\n@media screen and (max-width: 768px) {\n  .is-invisible-mobile {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .is-invisible-tablet {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 769px) and (max-width: 1023px) {\n  .is-invisible-tablet-only {\n    visibility: hidden !important;\n  }\n}\n@media screen and (max-width: 1023px) {\n  .is-invisible-touch {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1024px) {\n  .is-invisible-desktop {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1024px) and (max-width: 1215px) {\n  .is-invisible-desktop-only {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1216px) {\n  .is-invisible-widescreen {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1216px) and (max-width: 1407px) {\n  .is-invisible-widescreen-only {\n    visibility: hidden !important;\n  }\n}\n@media screen and (min-width: 1408px) {\n  .is-invisible-fullhd {\n    visibility: hidden !important;\n  }\n}\n/* Bulma Layout */\n.hero {\n  align-items: stretch;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n.hero .navbar {\n  background: none;\n}\n.hero .tabs ul {\n  border-bottom: none;\n}\n.hero.is-white {\n  background-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-white a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-white strong {\n  color: inherit;\n}\n.hero.is-white .title {\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-white .subtitle {\n  color: rgba(10, 10, 10, 0.9);\n}\n.hero.is-white .subtitle a:not(.button),\n.hero.is-white .subtitle strong {\n  color: hsl(0, 0%, 4%);\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-white .navbar-menu {\n    background-color: hsl(0, 0%, 100%);\n  }\n}\n.hero.is-white .navbar-item,\n.hero.is-white .navbar-link {\n  color: rgba(10, 10, 10, 0.7);\n}\n.hero.is-white a.navbar-item:hover, .hero.is-white a.navbar-item.is-active,\n.hero.is-white .navbar-link:hover,\n.hero.is-white .navbar-link.is-active {\n  background-color: #f2f2f2;\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-white .tabs a {\n  color: hsl(0, 0%, 4%);\n  opacity: 0.9;\n}\n.hero.is-white .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-white .tabs li.is-active a {\n  color: hsl(0, 0%, 100%) !important;\n  opacity: 1;\n}\n.hero.is-white .tabs.is-boxed a, .hero.is-white .tabs.is-toggle a {\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-white .tabs.is-boxed a:hover, .hero.is-white .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-white .tabs.is-boxed li.is-active a, .hero.is-white .tabs.is-boxed li.is-active a:hover, .hero.is-white .tabs.is-toggle li.is-active a, .hero.is-white .tabs.is-toggle li.is-active a:hover {\n  background-color: hsl(0, 0%, 4%);\n  border-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-white.is-bold {\n  background-image: linear-gradient(141deg, #e8e3e4 0%, hsl(0, 0%, 100%) 71%, white 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-white.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #e8e3e4 0%, hsl(0, 0%, 100%) 71%, white 100%);\n  }\n}\n.hero.is-black {\n  background-color: hsl(0, 0%, 4%);\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-black a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-black strong {\n  color: inherit;\n}\n.hero.is-black .title {\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-black .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-black .subtitle a:not(.button),\n.hero.is-black .subtitle strong {\n  color: hsl(0, 0%, 100%);\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-black .navbar-menu {\n    background-color: hsl(0, 0%, 4%);\n  }\n}\n.hero.is-black .navbar-item,\n.hero.is-black .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-black a.navbar-item:hover, .hero.is-black a.navbar-item.is-active,\n.hero.is-black .navbar-link:hover,\n.hero.is-black .navbar-link.is-active {\n  background-color: black;\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-black .tabs a {\n  color: hsl(0, 0%, 100%);\n  opacity: 0.9;\n}\n.hero.is-black .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-black .tabs li.is-active a {\n  color: hsl(0, 0%, 4%) !important;\n  opacity: 1;\n}\n.hero.is-black .tabs.is-boxed a, .hero.is-black .tabs.is-toggle a {\n  color: hsl(0, 0%, 100%);\n}\n.hero.is-black .tabs.is-boxed a:hover, .hero.is-black .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-black .tabs.is-boxed li.is-active a, .hero.is-black .tabs.is-boxed li.is-active a:hover, .hero.is-black .tabs.is-toggle li.is-active a, .hero.is-black .tabs.is-toggle li.is-active a:hover {\n  background-color: hsl(0, 0%, 100%);\n  border-color: hsl(0, 0%, 100%);\n  color: hsl(0, 0%, 4%);\n}\n.hero.is-black.is-bold {\n  background-image: linear-gradient(141deg, black 0%, hsl(0, 0%, 4%) 71%, #181616 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-black.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, black 0%, hsl(0, 0%, 4%) 71%, #181616 100%);\n  }\n}\n.hero.is-light {\n  background-color: hsl(0, 0%, 96%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-light strong {\n  color: inherit;\n}\n.hero.is-light .title {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light .subtitle {\n  color: rgba(0, 0, 0, 0.9);\n}\n.hero.is-light .subtitle a:not(.button),\n.hero.is-light .subtitle strong {\n  color: rgba(0, 0, 0, 0.7);\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-light .navbar-menu {\n    background-color: hsl(0, 0%, 96%);\n  }\n}\n.hero.is-light .navbar-item,\n.hero.is-light .navbar-link {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light a.navbar-item:hover, .hero.is-light a.navbar-item.is-active,\n.hero.is-light .navbar-link:hover,\n.hero.is-light .navbar-link.is-active {\n  background-color: #e8e8e8;\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light .tabs a {\n  color: rgba(0, 0, 0, 0.7);\n  opacity: 0.9;\n}\n.hero.is-light .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-light .tabs li.is-active a {\n  color: hsl(0, 0%, 96%) !important;\n  opacity: 1;\n}\n.hero.is-light .tabs.is-boxed a, .hero.is-light .tabs.is-toggle a {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-light .tabs.is-boxed a:hover, .hero.is-light .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-light .tabs.is-boxed li.is-active a, .hero.is-light .tabs.is-boxed li.is-active a:hover, .hero.is-light .tabs.is-toggle li.is-active a, .hero.is-light .tabs.is-toggle li.is-active a:hover {\n  background-color: rgba(0, 0, 0, 0.7);\n  border-color: rgba(0, 0, 0, 0.7);\n  color: hsl(0, 0%, 96%);\n}\n.hero.is-light.is-bold {\n  background-image: linear-gradient(141deg, #dfd8d9 0%, hsl(0, 0%, 96%) 71%, white 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-light.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #dfd8d9 0%, hsl(0, 0%, 96%) 71%, white 100%);\n  }\n}\n.hero.is-dark {\n  background-color: hsl(0, 0%, 21%);\n  color: #fff;\n}\n.hero.is-dark a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-dark strong {\n  color: inherit;\n}\n.hero.is-dark .title {\n  color: #fff;\n}\n.hero.is-dark .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-dark .subtitle a:not(.button),\n.hero.is-dark .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-dark .navbar-menu {\n    background-color: hsl(0, 0%, 21%);\n  }\n}\n.hero.is-dark .navbar-item,\n.hero.is-dark .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-dark a.navbar-item:hover, .hero.is-dark a.navbar-item.is-active,\n.hero.is-dark .navbar-link:hover,\n.hero.is-dark .navbar-link.is-active {\n  background-color: #292929;\n  color: #fff;\n}\n.hero.is-dark .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-dark .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-dark .tabs li.is-active a {\n  color: hsl(0, 0%, 21%) !important;\n  opacity: 1;\n}\n.hero.is-dark .tabs.is-boxed a, .hero.is-dark .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-dark .tabs.is-boxed a:hover, .hero.is-dark .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-dark .tabs.is-boxed li.is-active a, .hero.is-dark .tabs.is-boxed li.is-active a:hover, .hero.is-dark .tabs.is-toggle li.is-active a, .hero.is-dark .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(0, 0%, 21%);\n}\n.hero.is-dark.is-bold {\n  background-image: linear-gradient(141deg, #1f191a 0%, hsl(0, 0%, 21%) 71%, #46403f 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-dark.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #1f191a 0%, hsl(0, 0%, 21%) 71%, #46403f 100%);\n  }\n}\n.hero.is-primary {\n  background-color: hsl(171, 100%, 41%);\n  color: #fff;\n}\n.hero.is-primary a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-primary strong {\n  color: inherit;\n}\n.hero.is-primary .title {\n  color: #fff;\n}\n.hero.is-primary .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-primary .subtitle a:not(.button),\n.hero.is-primary .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-primary .navbar-menu {\n    background-color: hsl(171, 100%, 41%);\n  }\n}\n.hero.is-primary .navbar-item,\n.hero.is-primary .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-primary a.navbar-item:hover, .hero.is-primary a.navbar-item.is-active,\n.hero.is-primary .navbar-link:hover,\n.hero.is-primary .navbar-link.is-active {\n  background-color: #00b89c;\n  color: #fff;\n}\n.hero.is-primary .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-primary .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-primary .tabs li.is-active a {\n  color: hsl(171, 100%, 41%) !important;\n  opacity: 1;\n}\n.hero.is-primary .tabs.is-boxed a, .hero.is-primary .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-primary .tabs.is-boxed a:hover, .hero.is-primary .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-primary .tabs.is-boxed li.is-active a, .hero.is-primary .tabs.is-boxed li.is-active a:hover, .hero.is-primary .tabs.is-toggle li.is-active a, .hero.is-primary .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(171, 100%, 41%);\n}\n.hero.is-primary.is-bold {\n  background-image: linear-gradient(141deg, #009e6c 0%, hsl(171, 100%, 41%) 71%, #00e7eb 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-primary.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #009e6c 0%, hsl(171, 100%, 41%) 71%, #00e7eb 100%);\n  }\n}\n.hero.is-link {\n  background-color: hsl(229, 53%, 53%);\n  color: #fff;\n}\n.hero.is-link a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-link strong {\n  color: inherit;\n}\n.hero.is-link .title {\n  color: #fff;\n}\n.hero.is-link .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-link .subtitle a:not(.button),\n.hero.is-link .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-link .navbar-menu {\n    background-color: hsl(229, 53%, 53%);\n  }\n}\n.hero.is-link .navbar-item,\n.hero.is-link .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-link a.navbar-item:hover, .hero.is-link a.navbar-item.is-active,\n.hero.is-link .navbar-link:hover,\n.hero.is-link .navbar-link.is-active {\n  background-color: #3a51bb;\n  color: #fff;\n}\n.hero.is-link .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-link .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-link .tabs li.is-active a {\n  color: hsl(229, 53%, 53%) !important;\n  opacity: 1;\n}\n.hero.is-link .tabs.is-boxed a, .hero.is-link .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-link .tabs.is-boxed a:hover, .hero.is-link .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-link .tabs.is-boxed li.is-active a, .hero.is-link .tabs.is-boxed li.is-active a:hover, .hero.is-link .tabs.is-toggle li.is-active a, .hero.is-link .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(229, 53%, 53%);\n}\n.hero.is-link.is-bold {\n  background-image: linear-gradient(141deg, #2959b3 0%, hsl(229, 53%, 53%) 71%, #5658d2 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-link.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #2959b3 0%, hsl(229, 53%, 53%) 71%, #5658d2 100%);\n  }\n}\n.hero.is-info {\n  background-color: hsl(207, 61%, 53%);\n  color: #fff;\n}\n.hero.is-info a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-info strong {\n  color: inherit;\n}\n.hero.is-info .title {\n  color: #fff;\n}\n.hero.is-info .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-info .subtitle a:not(.button),\n.hero.is-info .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-info .navbar-menu {\n    background-color: hsl(207, 61%, 53%);\n  }\n}\n.hero.is-info .navbar-item,\n.hero.is-info .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-info a.navbar-item:hover, .hero.is-info a.navbar-item.is-active,\n.hero.is-info .navbar-link:hover,\n.hero.is-info .navbar-link.is-active {\n  background-color: #3082c5;\n  color: #fff;\n}\n.hero.is-info .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-info .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-info .tabs li.is-active a {\n  color: hsl(207, 61%, 53%) !important;\n  opacity: 1;\n}\n.hero.is-info .tabs.is-boxed a, .hero.is-info .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-info .tabs.is-boxed a:hover, .hero.is-info .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-info .tabs.is-boxed li.is-active a, .hero.is-info .tabs.is-boxed li.is-active a:hover, .hero.is-info .tabs.is-toggle li.is-active a, .hero.is-info .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(207, 61%, 53%);\n}\n.hero.is-info.is-bold {\n  background-image: linear-gradient(141deg, #208fbc 0%, hsl(207, 61%, 53%) 71%, #4d83db 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-info.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #208fbc 0%, hsl(207, 61%, 53%) 71%, #4d83db 100%);\n  }\n}\n.hero.is-success {\n  background-color: hsl(153, 53%, 53%);\n  color: #fff;\n}\n.hero.is-success a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-success strong {\n  color: inherit;\n}\n.hero.is-success .title {\n  color: #fff;\n}\n.hero.is-success .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-success .subtitle a:not(.button),\n.hero.is-success .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-success .navbar-menu {\n    background-color: hsl(153, 53%, 53%);\n  }\n}\n.hero.is-success .navbar-item,\n.hero.is-success .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-success a.navbar-item:hover, .hero.is-success a.navbar-item.is-active,\n.hero.is-success .navbar-link:hover,\n.hero.is-success .navbar-link.is-active {\n  background-color: #3abb81;\n  color: #fff;\n}\n.hero.is-success .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-success .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-success .tabs li.is-active a {\n  color: hsl(153, 53%, 53%) !important;\n  opacity: 1;\n}\n.hero.is-success .tabs.is-boxed a, .hero.is-success .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-success .tabs.is-boxed a:hover, .hero.is-success .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-success .tabs.is-boxed li.is-active a, .hero.is-success .tabs.is-boxed li.is-active a:hover, .hero.is-success .tabs.is-toggle li.is-active a, .hero.is-success .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(153, 53%, 53%);\n}\n.hero.is-success.is-bold {\n  background-image: linear-gradient(141deg, #29b35e 0%, hsl(153, 53%, 53%) 71%, #56d2af 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-success.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #29b35e 0%, hsl(153, 53%, 53%) 71%, #56d2af 100%);\n  }\n}\n.hero.is-warning {\n  background-color: hsl(44, 100%, 77%);\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-warning strong {\n  color: inherit;\n}\n.hero.is-warning .title {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning .subtitle {\n  color: rgba(0, 0, 0, 0.9);\n}\n.hero.is-warning .subtitle a:not(.button),\n.hero.is-warning .subtitle strong {\n  color: rgba(0, 0, 0, 0.7);\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-warning .navbar-menu {\n    background-color: hsl(44, 100%, 77%);\n  }\n}\n.hero.is-warning .navbar-item,\n.hero.is-warning .navbar-link {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning a.navbar-item:hover, .hero.is-warning a.navbar-item.is-active,\n.hero.is-warning .navbar-link:hover,\n.hero.is-warning .navbar-link.is-active {\n  background-color: #ffd970;\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning .tabs a {\n  color: rgba(0, 0, 0, 0.7);\n  opacity: 0.9;\n}\n.hero.is-warning .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-warning .tabs li.is-active a {\n  color: hsl(44, 100%, 77%) !important;\n  opacity: 1;\n}\n.hero.is-warning .tabs.is-boxed a, .hero.is-warning .tabs.is-toggle a {\n  color: rgba(0, 0, 0, 0.7);\n}\n.hero.is-warning .tabs.is-boxed a:hover, .hero.is-warning .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-warning .tabs.is-boxed li.is-active a, .hero.is-warning .tabs.is-boxed li.is-active a:hover, .hero.is-warning .tabs.is-toggle li.is-active a, .hero.is-warning .tabs.is-toggle li.is-active a:hover {\n  background-color: rgba(0, 0, 0, 0.7);\n  border-color: rgba(0, 0, 0, 0.7);\n  color: hsl(44, 100%, 77%);\n}\n.hero.is-warning.is-bold {\n  background-image: linear-gradient(141deg, #ffb657 0%, hsl(44, 100%, 77%) 71%, #fff6a3 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-warning.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #ffb657 0%, hsl(44, 100%, 77%) 71%, #fff6a3 100%);\n  }\n}\n.hero.is-danger {\n  background-color: hsl(348, 86%, 61%);\n  color: #fff;\n}\n.hero.is-danger a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n.hero.is-danger strong {\n  color: inherit;\n}\n.hero.is-danger .title {\n  color: #fff;\n}\n.hero.is-danger .subtitle {\n  color: rgba(255, 255, 255, 0.9);\n}\n.hero.is-danger .subtitle a:not(.button),\n.hero.is-danger .subtitle strong {\n  color: #fff;\n}\n@media screen and (max-width: 1023px) {\n  .hero.is-danger .navbar-menu {\n    background-color: hsl(348, 86%, 61%);\n  }\n}\n.hero.is-danger .navbar-item,\n.hero.is-danger .navbar-link {\n  color: rgba(255, 255, 255, 0.7);\n}\n.hero.is-danger a.navbar-item:hover, .hero.is-danger a.navbar-item.is-active,\n.hero.is-danger .navbar-link:hover,\n.hero.is-danger .navbar-link.is-active {\n  background-color: #ef2e55;\n  color: #fff;\n}\n.hero.is-danger .tabs a {\n  color: #fff;\n  opacity: 0.9;\n}\n.hero.is-danger .tabs a:hover {\n  opacity: 1;\n}\n.hero.is-danger .tabs li.is-active a {\n  color: hsl(348, 86%, 61%) !important;\n  opacity: 1;\n}\n.hero.is-danger .tabs.is-boxed a, .hero.is-danger .tabs.is-toggle a {\n  color: #fff;\n}\n.hero.is-danger .tabs.is-boxed a:hover, .hero.is-danger .tabs.is-toggle a:hover {\n  background-color: rgba(10, 10, 10, 0.1);\n}\n.hero.is-danger .tabs.is-boxed li.is-active a, .hero.is-danger .tabs.is-boxed li.is-active a:hover, .hero.is-danger .tabs.is-toggle li.is-active a, .hero.is-danger .tabs.is-toggle li.is-active a:hover {\n  background-color: #fff;\n  border-color: #fff;\n  color: hsl(348, 86%, 61%);\n}\n.hero.is-danger.is-bold {\n  background-image: linear-gradient(141deg, #fa0a62 0%, hsl(348, 86%, 61%) 71%, #f7595f 100%);\n}\n@media screen and (max-width: 768px) {\n  .hero.is-danger.is-bold .navbar-menu {\n    background-image: linear-gradient(141deg, #fa0a62 0%, hsl(348, 86%, 61%) 71%, #f7595f 100%);\n  }\n}\n.hero.is-small .hero-body {\n  padding: 1.5rem;\n}\n@media screen and (min-width: 769px), print {\n  .hero.is-medium .hero-body {\n    padding: 9rem 4.5rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .hero.is-large .hero-body {\n    padding: 18rem 6rem;\n  }\n}\n.hero.is-halfheight .hero-body, .hero.is-fullheight .hero-body, .hero.is-fullheight-with-navbar .hero-body {\n  align-items: center;\n  display: flex;\n}\n.hero.is-halfheight .hero-body > .container, .hero.is-fullheight .hero-body > .container, .hero.is-fullheight-with-navbar .hero-body > .container {\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n.hero.is-halfheight {\n  min-height: 50vh;\n}\n.hero.is-fullheight {\n  min-height: 100vh;\n}\n\n.hero-video {\n  overflow: hidden;\n}\n.hero-video video {\n  left: 50%;\n  min-height: 100%;\n  min-width: 100%;\n  position: absolute;\n  top: 50%;\n  transform: translate3d(-50%, -50%, 0);\n}\n.hero-video.is-transparent {\n  opacity: 0.3;\n}\n@media screen and (max-width: 768px) {\n  .hero-video {\n    display: none;\n  }\n}\n\n.hero-buttons {\n  margin-top: 1.5rem;\n}\n@media screen and (max-width: 768px) {\n  .hero-buttons .button {\n    display: flex;\n  }\n  .hero-buttons .button:not(:last-child) {\n    margin-bottom: 0.75rem;\n  }\n}\n@media screen and (min-width: 769px), print {\n  .hero-buttons {\n    display: flex;\n    justify-content: center;\n  }\n  .hero-buttons .button:not(:last-child) {\n    margin-right: 1.5rem;\n  }\n}\n\n.hero-head,\n.hero-foot {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n\n.hero-body {\n  flex-grow: 1;\n  flex-shrink: 0;\n  padding: 3rem 1.5rem;\n}\n@media screen and (min-width: 769px), print {\n  .hero-body {\n    padding: 3rem 3rem;\n  }\n}\n\n.section {\n  padding: 3rem 1.5rem;\n}\n@media screen and (min-width: 1024px) {\n  .section {\n    padding: 3rem 3rem;\n  }\n  .section.is-medium {\n    padding: 9rem 4.5rem;\n  }\n  .section.is-large {\n    padding: 18rem 6rem;\n  }\n}\n\n.footer {\n  background-color: hsl(0, 0%, 98%);\n  padding: 3rem 1.5rem 6rem;\n}", "",{"version":3,"sources":["webpack://./node_modules/bulma/bulma.sass","webpack://./node_modules/bulma/sass/utilities/_all.sass","webpack://./node_modules/bulma/sass/utilities/extends.sass","webpack://./node_modules/bulma/sass/utilities/controls.sass","webpack://./node_modules/bulma/sass/utilities/initial-variables.sass","webpack://./node_modules/bulma/sass/utilities/mixins.sass","webpack://./node_modules/bulma/sass/base/_all.sass","webpack://./node_modules/bulma/sass/base/minireset.sass","webpack://./node_modules/bulma/sass/base/generic.sass","webpack://./node_modules/bulma/sass/utilities/derived-variables.sass","webpack://./node_modules/bulma/sass/base/animations.sass","webpack://./node_modules/bulma/sass/elements/_all.sass","webpack://./node_modules/bulma/sass/elements/box.sass","webpack://./node_modules/bulma/sass/elements/button.sass","webpack://./node_modules/bulma/sass/elements/container.sass","webpack://./node_modules/bulma/sass/elements/content.sass","webpack://./node_modules/bulma/sass/elements/icon.sass","webpack://./node_modules/bulma/sass/elements/image.sass","webpack://./node_modules/bulma/sass/elements/notification.sass","webpack://./node_modules/bulma/sass/elements/progress.sass","webpack://./node_modules/bulma/sass/elements/table.sass","webpack://./node_modules/bulma/sass/elements/tag.sass","webpack://./node_modules/bulma/sass/elements/title.sass","webpack://./node_modules/bulma/sass/elements/other.sass","webpack://./node_modules/bulma/sass/form/_all.sass","webpack://./node_modules/bulma/sass/form/shared.sass","webpack://./node_modules/bulma/sass/form/input-textarea.sass","webpack://./node_modules/bulma/sass/form/checkbox-radio.sass","webpack://./node_modules/bulma/sass/form/select.sass","webpack://./node_modules/bulma/sass/form/file.sass","webpack://./node_modules/bulma/sass/form/tools.sass","webpack://./node_modules/bulma/sass/components/_all.sass","webpack://./node_modules/bulma/sass/components/breadcrumb.sass","webpack://./node_modules/bulma/sass/components/card.sass","webpack://./node_modules/bulma/sass/components/dropdown.sass","webpack://./node_modules/bulma/sass/components/level.sass","webpack://./node_modules/bulma/sass/components/media.sass","webpack://./node_modules/bulma/sass/components/menu.sass","webpack://./node_modules/bulma/sass/components/message.sass","webpack://./node_modules/bulma/sass/components/modal.sass","webpack://./node_modules/bulma/sass/components/navbar.sass","webpack://./node_modules/bulma/sass/components/pagination.sass","webpack://./node_modules/bulma/sass/components/panel.sass","webpack://./node_modules/bulma/sass/components/tabs.sass","webpack://./node_modules/bulma/sass/grid/_all.sass","webpack://./node_modules/bulma/sass/grid/columns.sass","webpack://./node_modules/bulma/sass/grid/tiles.sass","webpack://./node_modules/bulma/sass/helpers/_all.sass","webpack://./node_modules/bulma/sass/helpers/color.sass","webpack://./node_modules/bulma/sass/helpers/flexbox.sass","webpack://./node_modules/bulma/sass/helpers/float.sass","webpack://./node_modules/bulma/sass/helpers/other.sass","webpack://./node_modules/bulma/sass/helpers/overflow.sass","webpack://./node_modules/bulma/sass/helpers/position.sass","webpack://./node_modules/bulma/sass/helpers/spacing.sass","webpack://./node_modules/bulma/sass/helpers/typography.sass","webpack://./node_modules/bulma/sass/helpers/visibility.sass","webpack://./node_modules/bulma/sass/layout/_all.sass","webpack://./node_modules/bulma/sass/layout/hero.sass","webpack://./node_modules/bulma/sass/layout/section.sass","webpack://./node_modules/bulma/sass/layout/footer.sass"],"names":[],"mappings":"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,cCnBK;EDoBL,kBArEU;EAsEV,mBAvEY;EAwEZ,4BAzEa;ARwVf;;AQ7QA;EACE,iCJ/Ea;EIgFb,YAAA;EACA,cAAA;EACA,WAxEU;EAyEV,gBAxEU;ARwVZ;;AQ9QA;EACE,YAAA;EACA,eAAA;ARiRF;;AQ/QA;;EAEE,wBAAA;ARkRF;;AQhRA;EACE,kBAvFgB;AR0WlB;;AQjRA;EACE,mBAAA;EACA,oBAAA;ARoRF;;AQlRA;EACE,sBJ5Ga;EI6Gb,gBJvEY;AJ4Vd;;AQjRA;EACE,YAAA;ARoRF;;AQlRA;EHvDE,iCAAA;EGyDA,iCJ/Ga;EIgHb,sBJtHa;EIuHb,kBAjGc;EAkGd,gBAAA;EACA,uBAlGY;EAmGZ,gBAAA;EACA,iBAAA;ARqRF;AQpRE;EACE,6BAAA;EACA,mBAAA;EACA,cAvGiB;EAwGjB,UAAA;ARsRJ;;AQnRE;;EAEE,mBAAA;ARsRJ;AQrRI;;EACE,mBAAA;ARwRN;AQvRE;EACE,sBJ1IW;AJmaf;;AUzaA;EACE;IACE,uBAAA;EV4aF;EU3aA;IACE,yBAAA;EV6aF;AACF;AWlbA,mBAAA;ACWA;EAEE,kCREa;EQDb,kBRyDa;EQxDb,0FHwFO;EGvFP,sBRTa;EQUb,cAAA;EACA,gBAZY;AZqbd;;AYtaE;EAEE,oFAfoB;AZubxB;AYvaE;EACE,+EAhBqB;AZybzB;;AatYA;EAGE,kCThDa;ESiDb,6BTtDa;ESuDb,iBV5DqB;EU6DrB,sBT5Da;ES6Db,eAAA;EAGA,uBAAA;EACA,iCA7DwB;EA8DxB,iBA7D0B;EA8D1B,kBA9D0B;EA+D1B,8BAhEwB;EAiExB,kBAAA;EACA,mBAAA;AbqYF;AapYE;EACE,cAAA;AbsYJ;AapYI;EAIE,aAAA;EACA,YAAA;AbmYN;AalYI;ER8FA,+BQ7F0B;ER6F1B,oBQ5F0B;AboY9B;AanYI;ER2FA,mBQ1F0B;ER0F1B,gCQzF0B;AbqY9B;AapYI;EACE,+BAAA;EACA,gCAAA;AbsYN;AapYE;EAEE,6BTzFW;ES0FX,sBT7FW;AJkef;AapYE;EAEE,gCThFW;ESiFX,sBTjGW;AJsef;AapYI;EACE,iDAAA;AbsYN;AarYE;EAEE,6BTr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AJi8CT;Aar7CE;EACE,kBTkBW;AJq6Cf;Aa1rCI;EAxPF,kBTpBO;AJy8CT;Aa1rCI;EAzPF,iBTvBO;AJ68CT;AazrCM;EACE,4BAAA;EACA,yBAAA;Ab2rCR;Aa1rCM;EACE,6BAAA;EACA,0BAAA;ERxIJ,kBQyI4B;Ab4rChC;Aa3rCM;ER1IF,eQ2I4B;Ab6rChC;Aa5rCM;EAEE,UAAA;Ab6rCR;Aa5rCM;EAKE,UAAA;Ab0rCR;AazrCQ;EACE,UAAA;Ab2rCV;Aa1rCM;EACE,YAAA;EACA,cAAA;Ab4rCR;Aa3rCE;EACE,uBAAA;Ab6rCJ;Aa3rCM;EACE,oBAAA;EACA,qBAAA;Ab6rCR;Aa5rCE;EACE,yBAAA;Ab8rCJ;Aa5rCM;EACE,oBAAA;EACA,qBAAA;Ab8rCR;;AKz7CE;EQiQM;IACE,oBAlTgB;Eb8+CxB;Ea1rCM;;IAEE,qBAtTgB;Ebk/CxB;EajsCM;IACE,kBAlTgB;Ebq/CxB;EapsCM;IACE,eAlTgB;Ebw/CxB;AACF;AKr8CE;EQ6PM;IACE,qBAlTgB;Eb6/CxB;EazsCM;;IAEE,kBAtTgB;EbigDxB;EahtCM;IACE,eAlTgB;EbogDxB;EantCM;IACE,kBAlTgB;EbugDxB;AACF;AcjjDA;EACE,YAAA;EACA,cAAA;EACA,kBAAA;EACA,WAAA;AdmjDF;AcljDE;EACE,0BAAA;EACA,kBVyCE;EUxCF,mBVwCE;EUvCF,WAAA;AdojDJ;AK58CE;ESjHF;IAWI,gBAAA;EdsjDF;AACF;AKv8CI;ES9GA;IACE,iBAAA;EdwjDJ;AACF;AK77CI;ES1HA;IACE,iBAAA;Ed0jDJ;AACF;AK58CI;ES7GA;IACE,iBAAA;Ed4jDJ;AACF;AKl8CI;ESzHA;IACE,iBAAA;Ed8jDJ;AACF;;AehkDE;EACE,kBAAA;AfmkDJ;Ae1jDI;;;;;;;EACE,kBAhCwB;AfkmD9B;AejkDE;;;;;;EAME,sBXvCW;EWwCX,gBXHc;EWId,kBA3C0B;Af8mD9B;AelkDE;EACE,cAAA;EACA,oBAAA;AfokDJ;AenkDI;EACE,eAAA;AfqkDN;AepkDE;EACE,iBAAA;EACA,uBAAA;AfskDJ;AerkDI;EACE,oBA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oBxtEI;;EAEE,qBAxEyB;EAyEzB,sBhBhFS;AJ0yEf;AoBztEE;EACE,6BAvE0B;ApBkyE9B;AoBxtEQ;;EAEE,sBAAA;ApB0tEV;AoBvtEI;;EAEE,iBAAA;ApBytEN;AoBttEQ;;EAEE,wBAAA;ApBwtEV;AoBvtEE;EACE,WAAA;ApBytEJ;AoBrtEQ;EACE,iChBhGK;AJuzEf;AoBntEU;EACE,iChBrGG;AJ0zEf;AoBptEY;EACE,iChBxGC;AJ8zEf;AoBptEI;;EAEE,qBAAA;ApBstEN;AoBltEQ;EACE,iChBhHK;AJo0Ef;;AoBltEA;Ef7DE,iCAAA;EegEA,cAAA;EACA,kBAAA;EACA,eAAA;ApBotEF;;AqBh1EA;EACE,mBAAA;EACA,aAAA;EACA,eAAA;EACA,2BAAA;ArBm1EF;AqBl1EE;EACE,qBAAA;ArBo1EJ;AqBn1EI;EhBoKA,oBgBnK0B;ArBq1E9B;AqBp1EE;EACE,sBAAA;ArBs1EJ;AqBr1EE;EACE,mBAAA;ArBu1EJ;AqBp1EI;EACE,ejBYG;AJ00ET;AqBp1EI;EACE,kBjBQG;AJ80ET;AqBr1EE;EACE,uBAAA;ArBu1EJ;AqBt1EI;EACE,qBAAA;EACA,oBAAA;ArBw1EN;AqBv1EE;EACE,yBAAA;ArBy1EJ;AqBv1EM;EACE,mBAAA;ArBy1ER;AqBx1EM;EACE,eAAA;ArB01ER;AqBx1EI;EhB0IA,egBzI0B;ArB01E9B;AqBz1EM;EhBwIF,cgBvI4B;EAEtB,yBAAA;EACA,4BAAA;ArB01EV;AqBt1EM;EAEI,0BAAA;EACA,6BAAA;ArBu1EV;;AqBl1EA;EACE,mBAAA;EACA,iCjBjDa;EiBkDb,kBjBOO;EiBNP,sBjBzDa;EiB0Db,oBAAA;EACA,kBjB5BO;EiB6BP,WAAA;EACA,uBAAA;EACA,gBAAA;EACA,oBAAA;EACA,qBAAA;EACA,mBAAA;ArBq1EF;AqBp1EE;EhB2GE,oBgB1GwB;EhB0GxB,uBgBzGwB;ArBs1E5B;AqBj1EI;EACE,kCAHM;EAIN,qBAHa;ArBs1EnB;AqBr1EI;EACE,gCAHM;EAIN,uBAHa;ArB01EnB;AqBz1EI;EACE,iCAHM;EAIN,yBAHa;ArB81EnB;AqB71EI;EACE,iCAHM;EAIN,WAHa;ArBk2EnB;AqBj2EI;EACE,qCAHM;EAIN,WAHa;ArBs2EnB;AqB91EQ;EACE,yBAHY;EAIZ,cAHW;ArBm2ErB;AqBz2EI;EACE,oCAHM;EAIN,WAHa;ArB82EnB;AqBt2EQ;EACE,yBAHY;EAIZ,cAHW;ArB22ErB;AqBj3EI;EACE,oCAHM;EAIN,WAHa;ArBs3EnB;AqB92EQ;EACE,yBAHY;EAIZ,cAHW;ArBm3ErB;AqBz3EI;EACE,oCAHM;EAIN,WAHa;ArB83EnB;AqBt3EQ;EACE,yBAHY;EAIZ,cAHW;ArB23ErB;AqBj4EI;EACE,oCAHM;EAIN,yBAHa;ArBs4EnB;AqB93EQ;EACE,yBAHY;EAIZ,cAHW;ArBm4ErB;AqBz4EI;EACE,oCAHM;EAIN,WAHa;ArB84EnB;AqBt4EQ;EACE,yBAHY;EAIZ,cAHW;ArB24ErB;AqBt4EE;EACE,kBjBtDK;AJ87ET;AqBv4EE;EACE,ejBzDK;AJk8ET;AqBx4EE;EACE,kBjB5DK;AJs8ET;AqBx4EI;EhBkFA,qBgBjF0B;EhBiF1B,sBgBhF0B;ArB04E9B;AqBz4EI;EhB+EA,qBgB9E0B;EhB8E1B,sBgB7E0B;ArB24E9B;AqB14EI;EhB4EA,qBgB3E0B;EhB2E1B,sBgB1E0B;ArB44E9B;AqB14EE;EhBwEE,gBgB/KgB;EAyGhB,UAAA;EACA,kBAAA;EACA,UAAA;ArB44EJ;AqB34EI;EAEE,8BAAA;EACA,WAAA;EACA,cAAA;EACA,SAAA;EACA,kBAAA;EACA,QAAA;EACA,0DAAA;EACA,+BAAA;ArB44EN;AqB34EI;EACE,WAAA;EACA,UAAA;ArB64EN;AqB54EI;EACE,WAAA;EACA,UAAA;ArB84EN;AqB74EI;EAEE,yBAAA;ArB84EN;AqB74EI;EACE,yBAAA;ArB+4EN;AqB94EE;EACE,qBjB/Da;AJ+8EjB;;AqB74EE;EACE,0BAAA;ArBg5EJ;;AsBtgFA;;EAGE,sBAAA;AtBwgFF;AsBvgFE;;;;EAEE,oBAAA;AtB2gFJ;AsB1gFE;;EACE,iBApBa;AtBiiFjB;AsB5gFE;;EACE,iBArBa;AtBoiFjB;AsB9gFE;;EACE,sBAAA;AtBihFJ;;AsB/gFA;EACE,sBlB9Ba;EkBiCb,elBLO;EkBMP,gBlBGgB;EkBFhB,kBAnCkB;AtBmjFpB;AsB/gFE;EACE,cApCiB;EAqCjB,oBApCkB;AtBqjFtB;AsBhhFE;EACE,oBA3BuB;AtB6iF3B;AsB9gFI;EACE,eb8DE;ATk9ER;AsBjhFI;EACE,iBb8DE;ATq9ER;AsBphFI;EACE,eb8DE;ATw9ER;AsBvhFI;EACE,iBb8DE;AT29ER;AsB1hFI;EACE,kBb8DE;AT89ER;AsB7hFI;EACE,eb8DE;ATi+ER;AsBhiFI;EACE,kBb8DE;ATo+ER;;AsBhiFA;EACE,sBlB/Ca;EkBkDb,kBlBrBO;EkBsBP,gBlBjBc;EkBkBd,iBA3CqB;AtB4kFvB;AsBhiFE;EACE,sBlBvDW;EkBwDX,gBlBnBc;AJqjFlB;AsBjiFE;EACE,oBA7CuB;AtBglF3B;AsB/hFI;EACE,eb4CE;ATq/ER;AsBliFI;EACE,iBb4CE;ATw/ER;AsBriFI;EACE,eb4CE;AT2/ER;AsBxiFI;EACE,iBb4CE;AT8/ER;AsB3iFI;EACE,kBb4CE;ATigFR;AsB9iFI;EACE,eb4CE;ATogFR;AsBjjFI;EACE,kBb4CE;ATugFR;;AuBhnFA;EACE,cAAA;EACA,eAAA;EACA,mBAAA;EACA,kBAAA;EACA,yBAAA;AvBmnFF;;AuB9mFA;EACE,mBAAA;EACA,iCnBPa;EmBQb,qBnBmDe;EmBlDf,oBAAA;EACA,kBnBaO;EmBZP,WAAA;EACA,uBAAA;EACA,oBAAA;EACA,gBAAA;EACA,uBAAA;EACA,kBAAA;EACA,mBAAA;AvBinFF;;AwB/oFA,eAAA;AC0DA;EAxBE,kCrBnBa;EqBoBb,6BrBzBa;EqB0Bb,kBrBkCO;EqBjCP,sBrB/Ba;AJipFf;AK/kFI;EoBjCA,4BA7BsB;AzBgpF1B;AKllFI;EoBjCA,4BA7BsB;AzBmpF1B;AKrlFI;EoBjCA,4BA7BsB;AzBspF1B;AKxlFI;EoBjCA,4BA7BsB;AzBypF1B;AyB3nFE;EAEE,6BrBjCW;AJ6pFf;AyB3nFE;EAIE,gCrBzBW;EqB0BX,iDAAA;AzB0nFJ;AyBznFE;EAEE,iCrBtCW;EqBuCX,6BrBvCW;EqBwCX,gBAAA;EACA,sBrB9CW;AJwqFf;AKxmFI;EoBhBE,+BAjC6B;AzB4pFnC;AK3mFI;EoBhBE,+BAjC6B;AzB+pFnC;AK9mFI;EoBhBE,+BAjC6B;AzBkqFnC;AKjnFI;EoBhBE,+BAjC6B;AzBqqFnC;;A0BtrFA;EAEE,2DDCa;ECAb,eAAA;EACA,WAAA;A1BwrFF;A0BvrFE;EACE,gBAAA;A1ByrFJ;A0BrrFI;EACE,8BAFM;A1ByrFZ;A0BtrFM;EAIE,mDAAA;A1BqrFR;A0B3rFI;EACE,4BAFM;A1B+rFZ;A0B5rFM;EAIE,gDAAA;A1B2rFR;A0BjsFI;EACE,6BAFM;A1BqsFZ;A0BlsFM;EAIE,mDAAA;A1BisFR;A0BvsFI;EACE,6BAFM;A1B2sFZ;A0BxsFM;EAIE,gDAAA;A1BusFR;A0B7sFI;EACE,iCAFM;A1BitFZ;A0B9sFM;EAIE,iDAAA;A1B6sFR;A0BntFI;EACE,gCAFM;A1ButFZ;A0BptFM;EAIE,iDAAA;A1BmtFR;A0BztFI;EACE,gCAFM;A1B6tFZ;A0B1tFM;EAIE,kDAAA;A1BytFR;A0B/tFI;EACE,gCAFM;A1BmuFZ;A0BhuFM;EAIE,kDAAA;A1B+tFR;A0BruFI;EACE,gCAFM;A1ByuFZ;A0BtuFM;EAIE,mDAAA;A1BquFR;A0B3uFI;EACE,gCAFM;A1B+uFZ;A0B5uFM;EAIE,kDAAA;A1B2uFR;A0BzuFE;EvBmBA,kBC0Ba;EDzBb,kBCNO;AJ+tFT;A0B3uFE;EvBoBA,kBCVO;AJouFT;A0B5uFE;EvBoBA,iBCbO;AJwuFT;A0B5uFE;EACE,cAAA;EACA,WAAA;A1B8uFJ;A0B7uFE;EACE,eAAA;EACA,WAAA;A1B+uFJ;;A0B3uFE;EACE,qBtB+Ba;EsB9Bb,gDAAA;EACA,iDAAA;A1B8uFJ;A0B7uFE;EACE,6BAAA;EACA,yBAAA;EACA,gBAAA;EACA,eAAA;EACA,gBAAA;A1B+uFJ;;A0B7uFA;EAEE,cAAA;EACA,eAAA;EACA,eAAA;EACA,2BvB7C2B;EuB8C3B,gBAAA;A1B+uFF;A0B9uFE;EACE,gBA1DkB;EA2DlB,eA1DkB;A1B0yFtB;A0B/uFE;EACE,eAAA;A1BivFJ;A0B/uFE;EACE,YAAA;A1BivFJ;;A2BlzFA;EACE,eAAA;EACA,qBAAA;EACA,iBAAA;EACA,kBAAA;A3BqzFF;A2BpzFE;EACE,eAAA;A3BszFJ;A2BrzFE;EACE,sBvBFW;AJyzFf;A2BtzFE;;;EAGE,sBvBJW;EuBKX,mBAAA;A3BwzFJ;;A2BjzFE;EtBgKE,kBsB/JwB;A3BozF5B;;A4Bv0FA;EACE,qBAAA;EACA,eAAA;EACA,kBAAA;EACA,mBAAA;A5B00FF;A4Bz0FE;EACE,azBDa;AH40FjB;A4Bz0FI;EAEE,gCxBUS;ECsKX,cuB/KgB;EACd,UAAA;A5B00FN;A4Bx0FI;EACE,qBxBuDW;EC4Gb,iBuBlK2B;A5B00F/B;A4Bz0FE;EAEE,eAAA;EACA,cAAA;EACA,cAAA;EACA,eAAA;EACA,aAAA;A5B00FJ;A4Bz0FI;EACE,aAAA;A5B20FN;A4B10FI;EAEE,6BxBjBS;AJ41Ff;A4B10FI;EvBqJA,oBuBpJ2B;A5B40F/B;A4B30FI;EACE,YAAA;EACA,UAAA;A5B60FN;A4B50FM;EACE,kBAAA;A5B80FR;A4B30FI;EACE,6BxBnCS;AJg3Ff;A4Bx0FM;EACE,8BAHI;A5B60FZ;A4Bz0FM;EACE,8BALI;A5Bg1FZ;A4B10FQ;EAEE,qBAAA;A5B20FV;A4B10FQ;EAIE,mDAAA;A5By0FV;A4Bp1FM;EACE,4BAHI;A5By1FZ;A4Br1FM;EACE,4BALI;A5B41FZ;A4Bt1FQ;EAEE,mBAAA;A5Bu1FV;A4Bt1FQ;EAIE,gDAAA;A5Bq1FV;A4Bh2FM;EACE,6BAHI;A5Bq2FZ;A4Bj2FM;EACE,6BALI;A5Bw2FZ;A4Bl2FQ;EAEE,qBAAA;A5Bm2FV;A4Bl2FQ;EAIE,mDAAA;A5Bi2FV;A4B52FM;EACE,6BAHI;A5Bi3FZ;A4B72FM;EACE,6BALI;A5Bo3FZ;A4B92FQ;EAEE,qBAAA;A5B+2FV;A4B92FQ;EAIE,gDAAA;A5B62FV;A4Bx3FM;EACE,iCAHI;A5B63FZ;A4Bz3FM;EACE,iCALI;A5Bg4FZ;A4B13FQ;EAEE,qBAAA;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GE;EACE,gBAAA;A9Bq7GJ;AK99GE;EyBuCF;IAII,aAAA;IACA,aAAA;IACA,YAAA;IACA,cAAA;E9Bu7GF;E8Bt7GE;IACE,gBAAA;E9Bw7GJ;E8Bv7GE;IACE,cAAA;E9By7GJ;E8Bx7GI;IACE,YAAA;E9B07GN;E8Bz7GI;IzBqBF,qByBpB4B;E9B27G9B;AACF;;A8B17GA;EACE,sBAAA;EACA,WAAA;EACA,e1BhIO;E0BiIP,kBAAA;EACA,mBAAA;A9B67GF;A8Bt7GQ;;;EACE,sB1BxKK;AJkmHf;A8Bz7GM;;;EACE,kB1B3IC;AJwkHT;A8B57GM;;;EACE,kB1B/IC;AJ+kHT;A8B/7GM;;;EACE,iB1BlJC;AJqlHT;A8Bl8GI;EACE,sB1B7KS;E0B8KT,a3BjLW;E2BkLX,oBAAA;EACA,kBAAA;EACA,MAAA;EACA,Y3BrLW;E2BsLX,UAAA;A9Bo8GN;A8Bl8GI;;EAEE,mB3B1LW;AH8nHjB;A8Bn8GI;EACE,OAAA;A9Bq8GN;A8Bn8GI;;EAEE,oB3BhMW;AHqoHjB;A8Bp8GI;EACE,QAAA;A9Bs8GN;A8Bp8GI;EAEE,6BAAA;EzBjBF,cyBkBgB;EACd,YAAA;EACA,UAAA;A9Bq8GN;A8Bp8GI;EACE,kB1B5KG;AJknHT;A8Br8GI;EACE,kB1BhLG;AJunHT;A8Bt8GI;EACE,iB1BnLG;AJ2nHT;;A+B9pHA,qBAAA;ACWA;EAGE,e5BuBO;E4BtBP,mBAAA;AhCqpHF;AgCppHE;EACE,mBAAA;EACA,yB5BIW;E4BHX,aAAA;EACA,uBAAA;EACA,iBAAA;AhCspHJ;AgCrpHI;EACE,sB5BjBS;AJwqHf;AgCtpHE;EACE,mBAAA;EACA,aAAA;AhCwpHJ;AgCvpHI;E3ByJA,e2BxJ2B;AhCypH/B;AgCvpHM;EACE,sB5BzBO;E4B0BP,eAAA;EACA,oBAAA;AhCypHR;AgCxpHI;EACE,sB5B1BS;E4B2BT,YAAA;AhC0pHN;AgCzpHE;;EAEE,uBAAA;EACA,aAAA;EACA,eAAA;EACA,2BAAA;AhC2pHJ;AgCzpHI;E3BwIA,mB2BvI0B;AhC2pH9B;AgC1pHI;E3BsIA,kB2BrI0B;AhC4pH9B;AgCzpH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HE;E8B9CI;;I9BwHF,qB8BlLiB;EnCs9HnB;AACF;;AmC15HA;EACE,mBAAA;EACA,2BAAA;AnC65HF;AKx3HE;E8BlCE;IACE,kBAAA;EnC65HJ;AACF;AKz3HE;E8B3CF;IAQI,aAAA;EnCg6HF;AACF;;AmC/5HA;EACE,mBAAA;EACA,yBAAA;AnCk6HF;AKn4HE;E8BjCF;IAKI,aAAA;EnCm6HF;AACF;;AoCv+HA;EACE,uBAAA;EACA,aAAA;EACA,mBAAA;ApC0+HF;AoCz+HE;EACE,sBAVoB;ApCq/HxB;AoC1+HE;EACE,8CAAA;EACA,aAAA;EACA,oBAboB;ApCy/HxB;AoC3+HI;;EAEE,qBAf0B;ApC4/HhC;AoC5+HI;EACE,mBAhBkB;ApC8/HxB;AoC7+HM;EACE,kBAlBgB;ApCigIxB;AoC9+HE;EACE,8CAAA;EACA,gBA1BY;EA2BZ,iBA3BY;ApC2gIhB;AoC7+HI;EACE,kBA9BgB;EA+BhB,mBA/BgB;ApC8gItB;;AoC7+HA;;EAEE,gBAAA;EACA,YAAA;EACA,cAAA;ApCg/HF;;AoC9+HA;E/BwII,kB+BhLY;ApC0hIhB;;AoC/+HA;E/BqII,iB+BhLY;ApC8hIhB;;AoCh/HA;EACE,gBAAA;EACA,YAAA;EACA,cAAA;EACA,mBAAA;ApCm/HF;;AKn8HE;E+B7CA;IACE,gBAAA;EpCo/HF;AACF;AqC3hIA;EACE,ejCgBO;AJ6gIT;AqC3hIE;EACE,kBjCcK;AJ+gIT;AqC5hIE;EACE,kBjCUK;AJohIT;AqC7hIE;EACE,iBjCOK;AJwhIT;;AqC7hIA;EACE,iBArBsB;ArCqjIxB;AqC/hIE;EACE,kBjCoCW;EiCnCX,sBjC3BW;EiC4BX,cAAA;EACA,qBAzBqB;ArC0jIzB;AqChiII;EACE,iCjCzBS;EiC0BT,sBjCjCS;AJmkIf;AqChiII;EACE,oCjCpBS;EiCqBT,W5BiCQ;ATigId;AqChiII;EhCuIA,sCgC3KoB;EAsClB,cAnCoB;EhCwKtB,oBgCvK4B;ArCqkIhC;;AqChiIA;EACE,sBjC3Ca;EiC4Cb,iBApCqB;EAqCrB,qBApC0B;EAqC1B,yBAAA;ArCmiIF;AqCliIE;E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BAAA;IACA,2BAAA;IACA,yBpChUE;IoCiUF,uCAAA;ExCg4JJ;EwC/3JE;IACE,UAAA;IACA,QAAA;ExCi4JJ;EwCh4JA;IACE,cAAA;ExCk4JF;EwC/3JE;;InC9NA,qBmC+N0B;ExCk4J5B;EwCj4JE;;InChOA,sBmCiO0B;ExCo4J5B;EwCj4JE;IAnWF,OAAA;IACA,eAAA;IACA,QAAA;IACA,WA/Ce;ExCsxKf;EwCp4JE;IACE,SAAA;ExCs4JJ;EwCr4JI;IACE,4CAAA;ExCu4JN;EwCt4JE;IACE,MAAA;ExCw4JJ;EwCr4JE;;IACE,oBA/ZU;ExCuyKd;EwCv4JE;;IACE,uBAjaU;ExC2yKd;EwCz4JE;;IACE,oBAAA;ExC44JJ;EwC34JE;;IACE,uBAAA;ExC84JJ;EwC14JE;;IACE,qBpC7aS;EJ0zKb;EwC54JE;;IACE,6BAlagC;ExCizKpC;EwC14JI;IACE,iCpCzaO;EJqzKb;AACF;AwCx4JE;EACE,iCAAA;AxC04JJ;;AyClyKA;EAEE,erCFO;EqCGP,gBAnCkB;AzCu0KpB;AyClyKE;EACE,kBrCLK;AJyyKT;AyCnyKE;EACE,kBrCTK;AJ8yKT;AyCpyKE;EACE,iBrCZK;AJkzKT;AyCpyKI;;EAEE,iBAAA;EACA,kBAAA;EACA,qBrCmBW;AJmxKjB;AyCryKI;EACE,qBrCiBW;AJsxKjB;;AyCryKA;;EAEE,mBAAA;EACA,aAAA;EACA,uBAAA;EACA,kBAAA;AzCwyKF;;AyCtyKA;;;;EAME,cA9D0B;EA+D1B,uBAAA;EACA,eA/DuB;EAgEvB,mBA/D6B;EAgE7B,oBA/D8B;EAgE9B,kBAAA;AzCuyKF;;AyCryKA;;;EAGE,6BrCtEa;EqCuEb,sBrC3Ea;EqC4Eb,gBtC3Ee;AHm3KjB;AyCvyKE;;;EACE,6BrC3EW;EqC4EX,sBrC/EW;AJ03Kf;AyC1yKE;;;EACE,gCrCjEW;AJ+2Kf;AyC7yKE;;;EACE,iDAtDsB;AzCu2K1B;AyChzKE;;;;;EAEE,iCrClFW;EqCmFX,6BrCnFW;EqCoFX,gBAAA;EACA,sBrCvFW;EqCwFX,YAAA;AzCqzKJ;;AyCnzKA;;EAEE,oBAvF4B;EAwF5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kHP,UAAA;A3C2pLR;A2CzpLM;EtCuDF,iBsCtD4B;A3C2pLhC;A2C1pLM;EAEI,2BvC3DD;EuC4DC,8BvC5DD;AJutLT;A2CvpLM;EAEI,4BvClED;EuCmEC,+BvCnED;AJ2tLT;A2CnpLQ;EACE,oCvCzHK;EuC0HL,gCvC1HK;EuC2HL,WlCrEI;EkCsEJ,UAAA;A3CqpLV;A2CppLI;EACE,mBAAA;A3CspLN;A2CnpLQ;EAEI,iCvCjFK;EuCkFL,8BvClFK;EuCmFL,oBAAA;A3CopLZ;A2C/oLQ;EAEI,kCvC1FK;EuC2FL,+BvC3FK;EuC4FL,qBAAA;A3CgpLZ;A2C1oLE;EACE,kBvCrIK;AJixLT;A2C3oLE;EACE,kBvCzIK;AJsxLT;A2C5oLE;EACE,iBvC5IK;AJ0xLT;;A4C7zLA,eAAA;ACIA;EACE,cAAA;EACA,aAAA;EACA,YAAA;EACA,cAAA;EACA,gBAPW;A7Co0Lb;A6C5zLE;EACE,UAAA;EACA,YAAA;A7C8zLJ;A6C7zLE;EACE,UAAA;EACA,WAAA;A7C+zLJ;A6C9zLE;EACE,UAAA;EACA,UAAA;A7Cg0LJ;A6C/zLE;EACE,UAAA;EACA,eAAA;A7Ci0LJ;A6Ch0LE;EACE,UAAA;EACA,UAAA;A7Ck0LJ;A6Cj0LE;EACE,UAAA;EACA,eAAA;A7Cm0LJ;A6Cl0LE;EACE,UAAA;EACA,UAAA;A7Co0LJ;A6Cn0LE;EACE,UAAA;EACA,UAAA;A7Cq0LJ;A6Cp0LE;EACE,UAAA;EACA,UAAA;A7Cs0LJ;A6Cr0LE;EACE,UAAA;EACA,UAAA;A7Cu0LJ;A6Ct0LE;EACE,UAAA;EACA,UAAA;A7Cw0LJ;A6Cv0LE;ExCyIE,gBwCxIwB;A7Cy0L5B;A6Cx0LE;ExCuIE,qBwCtIwB;A7C00L5B;A6Cz0LE;ExCqIE,gBwCpIwB;A7C20L5B;A6C10LE;ExCmIE,qBwClIwB;A7C40L5B;A6C30LE;ExCiIE,gBwChIwB;A7C60L5B;A6C50LE;ExC+HE,gBwC9HwB;A7C80L5B;A6C70LE;ExC6HE,gBwC5HwB;A7C+0L5B;A6C90LE;ExC2HE,gBwC1HwB;A7Cg1L5B;A6C/0LE;ExCyHE,gBwCxHwB;A7Ci1L5B;A6C/0LI;EACE,UAAA;EACA,SAAA;A7Ci1LN;A6Ch1LI;ExCmHA,ewClH0B;A7Ck1L9B;A6Ct1LI;EACE,UAAA;EACA,kBAAA;A7Cw1LN;A6Cv1LI;ExCmHA,wBwClH0B;A7Cy1L9B;A6C71LI;EACE,UAAA;EACA,mBAAA;A7C+1LN;A6C91LI;ExCmHA,yBwClH0B;A7Cg2L9B;A6Cp2LI;EACE,UAAA;EACA,UAAA;A7Cs2LN;A6Cr2LI;ExCmHA,gBwClH0B;A7Cu2L9B;A6C32LI;EACE,UAAA;EACA,mBAAA;A7C62LN;A6C52LI;ExCmHA,yBwClH0B;A7C82L9B;A6Cl3LI;EACE,UAAA;EACA,mBAAA;A7Co3LN;A6Cn3LI;ExCmHA,yBwClH0B;A7Cq3L9B;A6Cz3LI;EACE,UAAA;EACA,UAAA;A7C23LN;A6C13LI;ExCmHA,gBwClH0B;A7C43L9B;A6Ch4LI;EACE,UAAA;EACA,mBAAA;A7Ck4LN;A6Cj4LI;ExCmHA,yBwClH0B;A7Cm4L9B;A6Cv4LI;EACE,UAAA;EACA,mBAAA;A7Cy4LN;A6Cx4LI;ExCmHA,yBwClH0B;A7C04L9B;A6C94LI;EACE,UAAA;EACA,UAAA;A7Cg5LN;A6C/4LI;ExCmHA,gBwClH0B;A7Ci5L9B;A6Cr5LI;EACE,UAAA;EACA,mBAAA;A7Cu5LN;A6Ct5LI;ExCmHA,yBwClH0B;A7Cw5L9B;A6C55LI;EACE,UAAA;EACA,mBAAA;A7C85LN;A6C75LI;ExCmHA,yBwClH0B;A7C+5L9B;A6Cn6LI;EACE,UAAA;EACA,WAAA;A7Cq6LN;A6Cp6LI;ExCmHA,iBwClH0B;A7Cs6L9B;AKl4LE;EwClCE;IACE,UAAA;IACA,YAAA;E7Cu6LJ;E6Ct6LE;IACE,UAAA;IACA,WAAA;E7Cw6LJ;E6Cv6LE;IACE,UAAA;IACA,UAAA;E7Cy6LJ;E6Cx6LE;IACE,UAAA;IACA,eAAA;E7C06LJ;E6Cz6LE;IACE,UAAA;IACA,UAAA;E7C26LJ;E6C16LE;IACE,UAAA;IACA,eAAA;E7C46LJ;E6C36LE;IACE,UAAA;IACA,UAAA;E7C66LJ;E6C56LE;IACE,UAAA;IACA,UAAA;E7C86LJ;E6C76LE;IACE,UAAA;IACA,UAAA;E7C+6LJ;E6C96LE;IACE,UAAA;IACA,UAAA;E7Cg7LJ;E6C/6LE;IACE,UAAA;IACA,UAAA;E7Ci7LJ;E6Ch7LE;IxC+EA,gBwC9E0B;E7Ck7L5B;E6Cj7LE;IxC6EA,qBwC5E0B;E7Cm7L5B;E6Cl7LE;IxC2EA,gBwC1E0B;E7Co7L5B;E6Cn7LE;IxCyEA,qBwCxE0B;E7Cq7L5B;E6Cp7LE;IxCuEA,gBwCtE0B;E7Cs7L5B;E6Cr7LE;IxCqEA,gBwCpE0B;E7Cu7L5B;E6Ct7LE;IxCmEA,gBwClE0B;E7Cw7L5B;E6Cv7LE;IxCiEA,gBwChE0B;E7Cy7L5B;E6Cx7LE;IxC+DA,gBwC9D0B;E7C07L5B;E6Cx7LI;IACE,UAAA;IACA,SAAA;E7C07LN;E6Cz7LI;IxCyDF,ewCxD4B;E7C27L9B;E6C/7LI;IACE,UAAA;IACA,kBAAA;E7Ci8LN;E6Ch8LI;IxCyDF,wBwCxD4B;E7Ck8L9B;E6Ct8LI;IACE,UAAA;IACA,mBAAA;E7Cw8LN;E6Cv8LI;IxCyDF,yBwCxD4B;E7Cy8L9B;E6C78LI;IACE,UAAA;IACA,UAAA;E7C+8LN;E6C98LI;IxCyDF,gBwCxD4B;E7Cg9L9B;E6Cp9LI;IACE,UAAA;IACA,mBAAA;E7Cs9LN;E6Cr9LI;IxCyDF,yBwCxD4B;E7Cu9L9B;E6C39LI;IACE,UAAA;IACA,mBAAA;E7C69LN;E6C59LI;IxCyDF,yBwCxD4B;E7C89L9B;E6Cl+LI;IACE,UAAA;IACA,UAAA;E7Co+LN;E6Cn+LI;IxCyDF,gBwCxD4B;E7Cq+L9B;E6Cz+LI;IACE,UAAA;IACA,mBAAA;E7C2+LN;E6C1+LI;IxCyDF,yBwCxD4B;E7C4+L9B;E6Ch/LI;IACE,UAAA;IACA,mBAAA;E7Ck/LN;E6Cj/LI;IxCyDF,yBwCxD4B;E7Cm/L9B;E6Cv/LI;IACE,UAAA;IACA,UAAA;E7Cy/LN;E6Cx/LI;IxCyDF,gBwCxD4B;E7C0/L9B;E6C9/LI;IACE,UAAA;IACA,mBAAA;E7CggMN;E6C//LI;IxCyDF,yBwCxD4B;E7CigM9B;E6CrgMI;IACE,UAAA;IACA,mBAAA;E7CugMN;E6CtgMI;IxCyDF,yBwCxD4B;E7CwgM9B;E6C5gMI;IACE,UAAA;IACA,WAAA;E7C8gMN;E6C7gMI;IxCyDF,iBwCxD4B;E7C+gM9B;AACF;AKliME;EwCoBE;IAEE,UAAA;IACA,YAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,WAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,eAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,eAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IAEE,UAAA;IACA,UAAA;E7CghMJ;E6C/gME;IxCUA,gBwCR0B;E7CghM5B;E6C/gME;IxCOA,qBwCL0B;E7CghM5B;E6C/gME;IxCIA,gBwCF0B;E7CghM5B;E6C/gME;IxCCA,qBwCC0B;E7CghM5B;E6C/gME;IxCFA,gBwCI0B;E7CghM5B;E6C/gME;IxCLA,gBwCO0B;E7CghM5B;E6C/gME;IxCRA,gBwCU0B;E7CghM5B;E6C/gME;IxCXA,gBwCa0B;E7CghM5B;E6C/gME;IxCdA,gBwCgB0B;E7CghM5B;E6C9gMI;IAEE,UAAA;IACA,SAAA;E7C+gMN;E6C9gMI;IxCtBF,ewCwB4B;E7C+gM9B;E6CrhMI;IAEE,UAAA;IACA,kBAAA;E7CshMN;E6CrhMI;IxCtBF,wBwCwB4B;E7CshM9B;E6C5hMI;IAEE,UAAA;IACA,mBAAA;E7C6hMN;E6C5hMI;IxCtBF,yBwCwB4B;E7C6hM9B;E6CniMI;IAEE,UAAA;IACA,UAAA;E7CoiMN;E6CniMI;IxCtBF,gBwCwB4B;E7CoiM9B;E6C1iMI;IAEE,UAAA;IACA,mBAAA;E7C2iMN;E6C1iMI;IxCtBF,yBwCwB4B;E7C2iM9B;E6CjjMI;IAEE,UAAA;IACA,mBAAA;E7CkjMN;E6CjjMI;IxCtBF,yBwCwB4B;E7CkjM9B;E6CxjMI;IAEE,UAAA;IACA,UAAA;E7CyjMN;E6CxjMI;IxCtBF,gBwCwB4B;E7CyjM9B;E6C/jMI;IAEE,UAAA;IACA,mBAAA;E7CgkMN;E6C/jMI;IxCtBF,yBwCwB4B;E7CgkM9B;E6CtkMI;IAEE,UAAA;IACA,mBAAA;E7CukMN;E6CtkMI;IxCtBF,yBwCwB4B;E7CukM9B;E6C7kMI;IAEE,UAAA;IACA,UAAA;E7C8kMN;E6C7kMI;IxCtBF,gBwCwB4B;E7C8kM9B;E6CplMI;IAEE,UAAA;IACA,mBAAA;E7CqlMN;E6CplMI;IxCtBF,yBwCwB4B;E7CqlM9B;E6C3lMI;IAEE,UAAA;IACA,mBAAA;E7C4lMN;E6C3lMI;IxCtBF,yBwCwB4B;E7C4lM9B;E6ClmMI;IAEE,UAAA;IACA,WAAA;E7CmmMN;E6ClmMI;IxCtBF,iBwCwB4B;E7CmmM9B;AACF;AK9rME;EwC4FE;IACE,UAAA;IACA,YAAA;E7CqmMJ;E6CpmME;IACE,UAAA;IACA,WAAA;E7CsmMJ;E6CrmME;IACE,UAAA;IACA,UAAA;E7CumMJ;E6CtmME;IACE,UAAA;IACA,eAAA;E7CwmMJ;E6CvmME;IACE,UAAA;IACA,UAAA;E7CymMJ;E6CxmME;IACE,UAAA;IACA,eAAA;E7C0mMJ;E6CzmME;IACE,UAAA;IACA,UAAA;E7C2mMJ;E6C1mME;IACE,UAAA;IACA,UAAA;E7C4mMJ;E6C3mME;IACE,UAAA;IACA,UAAA;E7C6mMJ;E6C5mME;IACE,UAAA;IACA,UAAA;E7C8mMJ;E6C7mME;IACE,UAAA;IACA,UAAA;E7C+mMJ;E6C9mME;IxC3DA,gBwC4D0B;E7CgnM5B;E6C/mME;IxC7DA,qBwC8D0B;E7CinM5B;E6ChnME;IxC/DA,gBwCgE0B;E7CknM5B;E6CjnME;IxCjEA,qBwCkE0B;E7CmnM5B;E6ClnME;IxCnEA,gBwCoE0B;E7ConM5B;E6CnnME;IxCrEA,gBwCsE0B;E7CqnM5B;E6CpnME;IxCvEA,gBwCwE0B;E7CsnM5B;E6CrnME;IxCzEA,gBwC0E0B;E7CunM5B;E6CtnME;IxC3EA,gBwC4E0B;E7CwnM5B;E6CtnMI;IACE,UAAA;IACA,SAAA;E7CwnMN;E6CvnMI;IxCjFF,ewCkF4B;E7CynM9B;E6C7nMI;IACE,UAAA;IACA,kBAAA;E7C+nMN;E6C9nMI;IxCjFF,wBwCkF4B;E7CgoM9B;E6CpoMI;IACE,UAAA;IACA,mBAAA;E7CsoMN;E6CroMI;IxCjFF,yBwCkF4B;E7CuoM9B;E6C3oMI;IACE,UAAA;IACA,UAAA;E7C6oMN;E6C5oMI;IxCjFF,gBwCkF4B;E7C8oM9B;E6ClpMI;IACE,UAAA;IACA,mBAAA;E7CopMN;E6CnpMI;IxCjFF,yBwCkF4B;E7CqpM9B;E6CzpMI;IACE,UAAA;IACA,mBAAA;E7C2pMN;E6C1pMI;IxCjFF,yBwCkF4B;E7C4pM9B;E6ChqMI;IACE,UAAA;IACA,UAAA;E7CkqMN;E6CjqMI;IxCjFF,gBwCkF4B;E7CmqM9B;E6CvqMI;IACE,UAAA;IACA,mBAAA;E7CyqMN;E6CxqMI;IxCjFF,yBwCkF4B;E7C0qM9B;E6C9qMI;IACE,UAAA;IACA,mBAAA;E7CgrMN;E6C/qMI;IxCjFF,yBwCkF4B;E7CirM9B;E6CrrMI;IACE,UAAA;IACA,UAAA;E7CurMN;E6CtrMI;IxCjFF,gBwCkF4B;E7CwrM9B;E6C5rMI;IACE,UAAA;IACA,mBAAA;E7C8rMN;E6C7rMI;IxCjFF,yBwCkF4B;E7C+rM9B;E6CnsMI;IACE,UAAA;IACA,mBAAA;E7CqsMN;E6CpsMI;IxCjFF,yBwCkF4B;E7CssM9B;E6C1sMI;IACE,UAAA;IACA,WAAA;E7C4sMN;E6C3sMI;IxCjFF,iBwCkF4B;E7C6sM9B;AACF;AK91ME;EwCkJE;IACE,UAAA;IACA,YAAA;E7C+sMJ;E6C9sME;IACE,UAAA;IACA,WAAA;E7CgtMJ;E6C/sME;IACE,UAAA;IACA,UAAA;E7CitMJ;E6ChtME;IACE,UAAA;IACA,eAAA;E7CktMJ;E6CjtME;IACE,UAAA;IACA,UAAA;E7CmtMJ;E6CltME;IACE,UAAA;IACA,eAAA;E7CotMJ;E6CntME;IACE,UAAA;IACA,UAAA;E7CqtMJ;E6CptME;IACE,UAAA;IACA,UAAA;E7CstMJ;E6CrtME;IACE,UAAA;IACA,UAAA;E7CutMJ;E6CttME;IACE,UAAA;IACA,UAAA;E7CwtMJ;E6CvtME;IACE,UAAA;IACA,UAAA;E7CytMJ;E6CxtME;IxCrHA,gBwCsH0B;E7C0tM5B;E6CztME;IxCvHA,qBwCwH0B;E7C2tM5B;E6C1tME;IxCzHA,gBwC0H0B;E7C4tM5B;E6C3tME;IxC3HA,qBwC4H0B;E7C6tM5B;E6C5tME;IxC7HA,gBwC8H0B;E7C8tM5B;E6C7tME;IxC/HA,gBwCgI0B;E7C+tM5B;E6C9tME;IxCjIA,gBwCkI0B;E7CguM5B;E6C/tME;IxCnIA,gBwCoI0B;E7CiuM5B;E6ChuME;IxCrIA,gBwCsI0B;E7CkuM5B;E6ChuMI;IACE,UAAA;IACA,SAAA;E7CkuMN;E6CjuMI;IxC3IF,ewC4I4B;E7CmuM9B;E6CvuMI;IACE,UAAA;IACA,kBAAA;E7CyuMN;E6CxuMI;IxC3IF,wBwC4I4B;E7C0uM9B;E6C9uMI;IACE,UAAA;IACA,mBAAA;E7CgvMN;E6C/uMI;IxC3IF,yBwC4I4B;E7CivM9B;E6CrvMI;IACE,UAAA;IACA,UAAA;E7CuvMN;E6CtvMI;IxC3IF,gBwC4I4B;E7CwvM9B;E6C5vMI;IACE,UAAA;IACA,mBAAA;E7C8vMN;E6C7vMI;IxC3IF,yBwC4I4B;E7C+vM9B;E6CnwMI;IACE,UAAA;IACA,mBAAA;E7CqwMN;E6CpwMI;IxC3IF,yBwC4I4B;E7CswM9B;E6C1wMI;IACE,UAAA;IACA,UAAA;E7C4wMN;E6C3wMI;IxC3IF,gBwC4I4B;E7C6wM9B;E6CjxMI;IACE,UAAA;IACA,mBAAA;E7CmxMN;E6ClxMI;IxC3IF,yBwC4I4B;E7CoxM9B;E6CxxMI;IACE,UAAA;IACA,mBAAA;E7C0xMN;E6CzxMI;IxC3IF,yBwC4I4B;E7C2xM9B;E6C/xMI;IACE,UAAA;IACA,UAAA;E7CiyMN;E6ChyMI;IxC3IF,gBwC4I4B;E7CkyM9B;E6CtyMI;IACE,UAAA;IACA,mBAAA;E7CwyMN;E6CvyMI;IxC3IF,yBwC4I4B;E7CyyM9B;E6C7yMI;IACE,UAAA;IACA,mBAAA;E7C+yMN;E6C9yMI;IxC3IF,yBwC4I4B;E7CgzM9B;E6CpzMI;IACE,UAAA;IACA,WAAA;E7CszMN;E6CrzMI;IxC3IF,iBwC4I4B;E7CuzM9B;AACF;AKn/MI;EwC6LA;IACE,UAAA;IACA,YAAA;E7CyzMJ;E6CxzME;IACE,UAAA;IACA,WAAA;E7C0zMJ;E6CzzME;IACE,UAAA;IACA,UAAA;E7C2zMJ;E6C1zME;IACE,UAAA;IACA,eAAA;E7C4zMJ;E6C3zME;IACE,UAAA;IACA,UAAA;E7C6zMJ;E6C5zME;IACE,UAAA;IACA,eAAA;E7C8zMJ;E6C7zME;IACE,UAAA;IACA,UAAA;E7C+zMJ;E6C9zME;IACE,UAAA;IACA,UAAA;E7Cg0MJ;E6C/zME;IACE,UAAA;IACA,UAAA;E7Ci0MJ;E6Ch0ME;IACE,UAAA;IACA,UAAA;E7Ck0MJ;E6Cj0ME;IACE,UAAA;IACA,UAAA;E7Cm0MJ;E6Cl0ME;IxC/KA,gBwCgL0B;E7Co0M5B;E6Cn0ME;IxCjLA,qBwCkL0B;E7Cq0M5B;E6Cp0ME;IxCnLA,gBwCoL0B;E7Cs0M5B;E6Cr0ME;IxCrLA,qBwCsL0B;E7Cu0M5B;E6Ct0ME;IxCvLA,gBwCwL0B;E7Cw0M5B;E6Cv0ME;IxCzLA,gBwC0L0B;E7Cy0M5B;E6Cx0ME;IxC3LA,gBwC4L0B;E7C00M5B;E6Cz0ME;IxC7LA,gBwC8L0B;E7C20M5B;E6C10ME;IxC/LA,gBwCgM0B;E7C40M5B;E6C10MI;IACE,UAAA;IACA,SAAA;E7C40MN;E6C30MI;IxCrMF,ewCsM4B;E7C60M9B;E6Cj1MI;IACE,UAAA;IACA,kBAAA;E7Cm1MN;E6Cl1MI;IxCrMF,wBwCsM4B;E7Co1M9B;E6Cx1MI;IACE,UAAA;IACA,mBAAA;E7C01MN;E6Cz1MI;IxCrMF,yBwCsM4B;E7C21M9B;E6C/1MI;IACE,UAAA;IACA,UAAA;E7Ci2MN;E6Ch2MI;IxCrMF,gBwCsM4B;E7Ck2M9B;E6Ct2MI;IACE,UAAA;IACA,mBAAA;E7Cw2MN;E6Cv2MI;IxCrMF,yBwCsM4B;E7Cy2M9B;E6C72MI;IACE,UAAA;IACA,mBAAA;E7C+2MN;E6C92MI;IxCrMF,yBwCsM4B;E7Cg3M9B;E6Cp3MI;IACE,UAAA;IACA,UAAA;E7Cs3MN;E6Cr3MI;IxCrMF,gBwCsM4B;E7Cu3M9B;E6C33MI;IACE,UAAA;IACA,mBAAA;E7C63MN;E6C53MI;IxCrMF,yBwCsM4B;E7C83M9B;E6Cl4MI;IACE,UAAA;IACA,mBAAA;E7Co4MN;E6Cn4MI;IxCrMF,yBwCsM4B;E7Cq4M9B;E6Cz4MI;IACE,UAAA;IACA,UAAA;E7C24MN;E6C14MI;IxCrMF,gBwCsM4B;E7C44M9B;E6Ch5MI;IACE,UAAA;IACA,mBAAA;E7Ck5MN;E6Cj5MI;IxCrMF,yBwCsM4B;E7Cm5M9B;E6Cv5MI;IACE,UAAA;IACA,mBAAA;E7Cy5MN;E6Cx5MI;IxCrMF,yBwCsM4B;E7C05M9B;E6C95MI;IACE,UAAA;IACA,WAAA;E7Cg6MN;E6C/5MI;IxCrMF,iBwCsM4B;E7Ci6M9B;AACF;AKxoNI;EwCwOA;IACE,UAAA;IACA,YAAA;E7Cm6MJ;E6Cl6ME;IACE,UAAA;IACA,WAAA;E7Co6MJ;E6Cn6ME;IACE,UAAA;IACA,UAAA;E7Cq6MJ;E6Cp6ME;IACE,UAAA;IACA,eAAA;E7Cs6MJ;E6Cr6ME;IACE,UAAA;IACA,UAAA;E7Cu6MJ;E6Ct6ME;IACE,UAAA;IACA,eAAA;E7Cw6MJ;E6Cv6ME;IACE,UAAA;IACA,UAAA;E7Cy6MJ;E6Cx6ME;IACE,UAAA;IACA,UAAA;E7C06MJ;E6Cz6ME;IACE,UAAA;IACA,UAAA;E7C26MJ;E6C16ME;IACE,UAAA;IACA,UAAA;E7C46MJ;E6C36ME;IACE,UAAA;IACA,UAAA;E7C66MJ;E6C56ME;IxCzOA,gBwC0O0B;E7C86M5B;E6C76ME;IxC3OA,qBwC4O0B;E7C+6M5B;E6C96ME;IxC7OA,gBwC8O0B;E7Cg7M5B;E6C/6ME;IxC/OA,qBwCgP0B;E7Ci7M5B;E6Ch7ME;IxCjPA,gBwCkP0B;E7Ck7M5B;E6Cj7ME;IxCnPA,gBwCoP0B;E7Cm7M5B;E6Cl7ME;IxCrPA,gBwCsP0B;E7Co7M5B;E6Cn7ME;IxCvPA,gBwCwP0B;E7Cq7M5B;E6Cp7ME;IxCzPA,gBwC0P0B;E7Cs7M5B;E6Cp7MI;IACE,UAAA;IACA,SAAA;E7Cs7MN;E6Cr7MI;IxC/PF,ewCgQ4B;E7Cu7M9B;E6C37MI;IACE,UAAA;IACA,kBAAA;E7C67MN;E6C57MI;IxC/PF,wBwCgQ4B;E7C87M9B;E6Cl8MI;IACE,UAAA;IACA,mBAAA;E7Co8MN;E6Cn8MI;IxC/PF,yBwCgQ4B;E7Cq8M9B;E6Cz8MI;IACE,UAAA;IACA,UAAA;E7C28MN;E6C18MI;IxC/PF,gBwCgQ4B;E7C48M9B;E6Ch9MI;IACE,UAAA;IACA,mBAAA;E7Ck9MN;E6Cj9MI;IxC/PF,yBwCgQ4B;E7Cm9M9B;E6Cv9MI;IACE,UAAA;IACA,mBAAA;E7Cy9MN;E6Cx9MI;IxC/PF,yBwCgQ4B;E7C09M9B;E6C99MI;IACE,UAAA;IACA,UAAA;E7Cg+MN;E6C/9MI;IxC/PF,gBwCgQ4B;E7Ci+M9B;E6Cr+MI;IACE,UAAA;IACA,mBAAA;E7Cu+MN;E6Ct+MI;IxC/PF,yBwCgQ4B;E7Cw+M9B;E6C5+MI;IACE,UAAA;IACA,mBAAA;E7C8+MN;E6C7+MI;IxC/PF,yBwCgQ4B;E7C++M9B;E6Cn/MI;IACE,UAAA;IACA,UAAA;E7Cq/MN;E6Cp/MI;IxC/PF,gBwCgQ4B;E7Cs/M9B;E6C1/MI;IACE,UAAA;IACA,mBAAA;E7C4/MN;E6C3/MI;IxC/PF,yBwCgQ4B;E7C6/M9B;E6CjgNI;IACE,UAAA;IACA,mBAAA;E7CmgNN;E6ClgNI;IxC/PF,yBwCgQ4B;E7CogN9B;E6CxgNI;IACE,UAAA;IACA,WAAA;E7C0gNN;E6CzgNI;IxC/PF,iBwCgQ4B;E7C2gN9B;AACF;;A6C1gNA;ExClQI,qBwCmQsB;ExCnQtB,sBwCoQsB;EACxB,oBAAA;A7C6gNF;A6C5gNE;EACE,uBAAA;A7C8gNJ;A6C7gNE;EACE,qCAAA;A7C+gNJ;A6C7gNE;EACE,uBAAA;A7C+gNJ;A6C9gNE;ExC7QE,cwC8QwB;ExC9QxB,ewC+QwB;EACxB,aAAA;A7CghNJ;A6C/gNI;EACE,SAAA;EACA,qBAAA;A7CihNN;A6ChhNI;EACE,qBAAA;A7CkhNN;A6CjhNI;EACE,gBAAA;A7CmhNN;A6ClhNE;EACE,aAAA;A7CohNJ;A6CnhNE;EACE,eAAA;A7CqhNJ;A6CphNE;EACE,mBAAA;A7CshNJ;AK73NE;EwC0WE;IACE,aAAA;E7CshNJ;AACF;AKt3NE;EwCkWE;IACE,aAAA;E7CuhNJ;AACF;;A6CrhNE;EACE,oBAAA;ExCzSA,wCwC0SwB;ExC1SxB,yCwC2SwB;A7CwhN5B;A6CvhNI;EACE,8BAAA;EACA,+BAAA;A7CyhNN;A6CvhNM;EACE,iBAAA;A7CyhNR;AKx5NE;EwCiYM;IACE,iBAAA;E7C0hNR;AACF;AKz5NE;EwCgYM;IACE,iBAAA;E7C4hNR;AACF;AK15NE;EwC+XM;IACE,iBAAA;E7C8hNR;AACF;AK35NE;EwC8XM;IACE,iBAAA;E7CgiNR;AACF;AK55NE;EwC6XM;IACE,iBAAA;E7CkiNR;AACF;AK55NI;EwC2XI;IACE,iBAAA;E7CoiNR;AACF;AKv5NI;EwCoXI;IACE,iBAAA;E7CsiNR;AACF;AKv5NI;EwCkXI;IACE,iBAAA;E7CwiNR;AACF;AKl5NI;EwC2WI;IACE,iBAAA;E7C0iNR;AACF;A6CvkNM;EACE,oBAAA;A7CykNR;AKx8NE;EwCiYM;IACE,oBAAA;E7C0kNR;AACF;AKz8NE;EwCgYM;IACE,oBAAA;E7C4kNR;AACF;AK18NE;EwC+XM;IACE,oBAAA;E7C8kNR;AACF;AK38NE;EwC8XM;IACE,oBAAA;E7CglNR;AACF;AK58NE;EwC6XM;IACE,oBAAA;E7CklNR;AACF;AK58NI;EwC2XI;IACE,oBAAA;E7ColNR;AACF;AKv8NI;EwCoXI;IACE,oBAAA;E7CslNR;AACF;AKv8NI;EwCkXI;IACE,oBAAA;E7CwlNR;AACF;AKl8NI;EwC2WI;IACE,oBAAA;E7C0lNR;AACF;A6CvnNM;EACE,mBAAA;A7CynNR;AKx/NE;EwCiYM;IACE,mBAAA;E7C0nNR;AACF;AKz/NE;EwCgYM;IACE,mBAAA;E7C4nNR;AACF;AK1/NE;EwC+XM;IACE,mBAAA;E7C8nNR;AACF;AK3/NE;EwC8XM;IACE,mBAAA;E7CgoNR;AACF;AK5/NE;EwC6XM;IACE,mBAAA;E7CkoNR;AACF;AK5/NI;EwC2XI;IACE,mBAAA;E7CooNR;AACF;AKv/NI;EwCoXI;IACE,mBAAA;E7CsoNR;AACF;AKv/NI;EwCkXI;IACE,mBAAA;E7CwoNR;AACF;AKl/NI;EwC2WI;IACE,mBAAA;E7C0oNR;AACF;A6CvqNM;EACE,oBAAA;A7CyqNR;AKxiOE;EwCiYM;IACE,oBAAA;E7C0qNR;AACF;AKziOE;EwCgYM;IACE,oBAAA;E7C4qNR;AACF;AK1iOE;EwC+XM;IACE,oBAAA;E7C8qNR;AACF;AK3iOE;EwC8XM;IACE,oBAAA;E7CgrNR;AACF;AK5iOE;EwC6XM;IACE,oBAAA;E7CkrNR;AACF;AK5iOI;EwC2XI;IACE,oBAAA;E7CorNR;AACF;AKviOI;EwCoXI;IACE,oBAAA;E7CsrNR;AACF;AKviOI;EwCkXI;IACE,oBAAA;E7CwrNR;AACF;AKliOI;EwC2WI;IACE,oBAAA;E7C0rNR;AACF;A6CvtNM;EACE,iBAAA;A7CytNR;AKxlOE;EwCiYM;IACE,iBAAA;E7C0tNR;AACF;AKzlOE;EwCgYM;IACE,iBAAA;E7C4tNR;AACF;AK1lOE;EwC+XM;IACE,iBAAA;E7C8tNR;AACF;AK3lOE;EwC8XM;IACE,iBAAA;E7CguNR;AACF;AK5lOE;EwC6XM;IACE,iBAAA;E7CkuNR;AACF;AK5lOI;EwC2XI;IACE,iBAAA;E7CouNR;AACF;AKvlOI;EwCoXI;IACE,iBAAA;E7CsuNR;AACF;AKvlOI;EwCkXI;IACE,iBAAA;E7CwuNR;AACF;AKllOI;EwC2WI;IACE,iBAAA;E7C0uNR;AACF;A6CvwNM;EACE,oBAAA;A7CywNR;AKxoOE;EwCiYM;IACE,oBAAA;E7C0wNR;AACF;AKzoOE;EwCgYM;IACE,oBAAA;E7C4wNR;AACF;AK1oOE;EwC+XM;IACE,oBAAA;E7C8wNR;AACF;AK3oOE;EwC8XM;IACE,oBAAA;E7CgxNR;AACF;AK5oOE;EwC6XM;IACE,oBAAA;E7CkxNR;AACF;AK5oOI;EwC2XI;IACE,oBAAA;E7CoxNR;AACF;AKvoOI;EwCoXI;IACE,oBAAA;E7CsxNR;AACF;AKvoOI;EwCkXI;IACE,oBAAA;E7CwxNR;AACF;AKloOI;EwC2WI;IACE,oBAAA;E7C0xNR;AACF;A6CvzNM;EACE,mBAAA;A7CyzNR;AKxrOE;EwCiYM;IACE,mBAAA;E7C0zNR;AACF;AKzrOE;EwCgYM;IACE,mBAAA;E7C4zNR;AACF;AK1rOE;EwC+XM;IACE,mBAAA;E7C8zNR;AACF;AK3rOE;EwC8XM;IACE,mBAAA;E7Cg0NR;AACF;AK5rOE;EwC6XM;IACE,mBAAA;E7Ck0NR;AACF;AK5rOI;EwC2XI;IACE,mBAAA;E7Co0NR;AACF;AKvrOI;EwCoXI;IACE,mBAAA;E7Cs0NR;AACF;AKvrOI;EwCkXI;IACE,mBAAA;E7Cw0NR;AACF;AKlrOI;EwC2WI;IACE,mBAAA;E7C00NR;AACF;A6Cv2NM;EACE,oBAAA;A7Cy2NR;AKxuOE;EwCiYM;IACE,oBAAA;E7C02NR;AACF;AKzuOE;EwCgYM;IACE,oBAAA;E7C42NR;AACF;AK1uOE;EwC+XM;IACE,oBAAA;E7C82NR;AACF;AK3uOE;EwC8XM;IACE,oBAAA;E7Cg3NR;AACF;AK5uOE;EwC6XM;IACE,oBAAA;E7Ck3NR;AACF;AK5uOI;EwC2XI;IACE,oBAAA;E7Co3NR;AACF;AKvuOI;EwCoXI;IACE,oBAAA;E7Cs3NR;AACF;AKvuOI;EwCkXI;IACE,oBAAA;E7Cw3NR;AACF;AKluOI;EwC2WI;IACE,oBAAA;E7C03NR;AACF;A6Cv5NM;EACE,iBAAA;A7Cy5NR;AKxxOE;EwCiYM;IACE,iBAAA;E7C05NR;AACF;AKzxOE;EwCgYM;IACE,iBAAA;E7C45NR;AACF;AK1xOE;EwC+XM;IACE,iBAAA;E7C85NR;AACF;AK3xOE;EwC8XM;IACE,iBAAA;E7Cg6NR;AACF;AK5xOE;EwC6XM;IACE,iBAAA;E7Ck6NR;AACF;AK5xOI;EwC2XI;IACE,iBAAA;E7Co6NR;AACF;AKvxOI;EwCoXI;IACE,iBAAA;E7Cs6NR;AACF;AKvxOI;EwCkXI;IACE,iBAAA;E7Cw6NR;AACF;AKlxOI;EwC2WI;IACE,iBAAA;E7C06NR;AACF;;A8Cv6OA;EACE,oBAAA;EACA,cAAA;EACA,aAAA;EACA,YAAA;EACA,cAAA;EACA,uBAAA;A9C06OF;A8Cx6OE;EACE,qBAAA;EACA,sBAAA;EACA,oBAAA;A9C06OJ;A8Cz6OI;EACE,uBAAA;A9C26ON;A8C16OI;EACE,sBAjBS;A9C67Of;A8C36OE;EACE,oBAAA;A9C66OJ;A8C56OE;EACE,gBArBW;A9Cm8Of;A8C76OE;EACE,sBAAA;A9C+6OJ;A8C96OI;EACE,gCAAA;A9Cg7ON;AKj2OE;EyC5EE;IACE,aAAA;E9Cg7OJ;E8C96OI;IACE,UAAA;IACA,kBAAA;E9Cg7ON;E8Cl7OI;IACE,UAAA;IACA,mBAAA;E9Co7ON;E8Ct7OI;IACE,UAAA;IACA,UAAA;E9Cw7ON;E8C17OI;IACE,UAAA;IACA,mBAAA;E9C47ON;E8C97OI;IACE,UAAA;IACA,mBAAA;E9Cg8ON;E8Cl8OI;IACE,UAAA;IACA,UAAA;E9Co8ON;E8Ct8OI;IACE,UAAA;IACA,mBAAA;E9Cw8ON;E8C18OI;IACE,UAAA;IACA,mBAAA;E9C48ON;E8C98OI;IACE,UAAA;IACA,UAAA;E9Cg9ON;E8Cl9OI;IACE,UAAA;IACA,mBAAA;E9Co9ON;E8Ct9OI;IACE,UAAA;IACA,mBAAA;E9Cw9ON;E8C19OI;IACE,UAAA;IACA,WAAA;E9C49ON;AACF;;A+ChgPA,kBAAA;ACIE;EACE,kCAAA;AhDggPJ;;AgD9/OI;EAEE,yBAAA;AhDggPN;;AgD//OE;EACE,6CAAA;AhDkgPJ;;AgDzgPE;EACE,gCAAA;AhD4gPJ;;AgD1gPI;EAEE,uBAAA;AhD4gPN;;AgD3gPE;EACE,2CAAA;AhD8gPJ;;AgDrhPE;EACE,iCAAA;AhDwhPJ;;AgDthPI;EAEE,yBAAA;AhDwhPN;;AgDvhPE;EACE,4CAAA;AhD0hPJ;;AgDjiPE;EACE,iCAAA;AhDoiPJ;;AgDliPI;EAEE,yBAAA;AhDoiPN;;AgDniPE;EACE,4CAAA;AhDsiPJ;;AgD7iPE;EACE,qCAAA;AhDgjPJ;;AgD9iPI;EAEE,yBAAA;AhDgjPN;;AgD/iPE;EACE,gDAAA;AhDkjPJ;;AgD7iPI;EACE,yBAAA;AhDgjPN;;AgD9iPM;EAEE,yBAAA;AhDgjPR;;AgD/iPI;EACE,oCAAA;AhDkjPN;;AgDhjPI;EACE,yBAAA;AhDmjPN;;AgDjjPM;EAEE,yBAAA;AhDmjPR;;AgDljPI;EACE,oCAAA;AhDqjPN;;AgDjlPE;EACE,oCAAA;AhDolPJ;;AgDllPI;EAEE,yBAAA;AhDolPN;;AgDnlPE;EACE,+CAAA;AhDslPJ;;AgDjlPI;EACE,yBAAA;AhDolPN;;AgDllPM;EAEE,yBAAA;AhDolPR;;AgDnlPI;EACE,oCAAA;AhDslPN;;AgDplPI;EACE,yBAAA;AhDulPN;;AgDrlPM;EAEE,yBAAA;AhDulPR;;AgDtlPI;EACE,oCAAA;AhDylPN;;AgDrnPE;EACE,oCAAA;AhDwnPJ;;AgDtnPI;EAEE,yBAAA;AhDwnPN;;AgDvnPE;EACE,+CAAA;AhD0nPJ;;AgDrnPI;EACE,yBAAA;AhDwnPN;;AgDtnPM;EAEE,yBAAA;AhDwnPR;;AgDvnPI;EACE,oCAAA;AhD0nPN;;AgDxnPI;EACE,yBAAA;AhD2nPN;;AgDznPM;EAEE,yBAAA;AhD2nPR;;AgD1nPI;EACE,oCAAA;AhD6nPN;;AgDzpPE;EACE,oCAAA;AhD4pPJ;;AgD1pPI;EAEE,yBAAA;AhD4pPN;;AgD3pPE;EACE,+CAAA;AhD8pPJ;;AgDzpPI;EACE,yBAAA;AhD4pPN;;AgD1pPM;EAEE,yBAAA;AhD4pPR;;AgD3pPI;EACE,oCAAA;AhD8pPN;;AgD5pPI;EACE,yBAAA;AhD+pPN;;AgD7pPM;EAEE,yBAAA;AhD+pPR;;AgD9pPI;EACE,oCAAA;AhDiqPN;;AgD7rPE;EACE,oCAAA;AhDgsPJ;;AgD9rPI;EAEE,yBAAA;AhDgsPN;;AgD/rPE;EACE,+CAAA;AhDksPJ;;AgD7rPI;EACE,yBAAA;AhDgsPN;;AgD9rPM;EAEE,yBAAA;AhDgsPR;;AgD/rPI;EACE,oCAAA;AhDksPN;;AgDhsPI;EACE,yBAAA;AhDmsPN;;AgDjsPM;EAEE,yBAAA;AhDmsPR;;AgDlsPI;EACE,oCAAA;AhDqsPN;;AgDjuPE;EACE,oCAAA;AhDouPJ;;AgDluPI;EAEE,yBAAA;AhDouPN;;AgDnuPE;EACE,+CAAA;AhDsuPJ;;AgDjuPI;EACE,yBAAA;AhDouPN;;AgDluPM;EAEE,yBAAA;AhDouPR;;AgDnuPI;EACE,oCAAA;AhDsuPN;;AgDpuPI;EACE,yBAAA;AhDuuPN;;AgDruPM;EAEE,yBAAA;AhDuuPR;;AgDtuPI;EACE,oCAAA;AhDyuPN;;AgDtuPE;EACE,gCAAA;AhDyuPJ;;AgDxuPE;EACE,2CAAA;AhD2uPJ;;AgD9uPE;EACE,iCAAA;AhDivPJ;;AgDhvPE;EACE,4CAAA;AhDmvPJ;;AgDtvPE;EACE,iCAAA;AhDyvPJ;;AgDxvPE;EACE,4CAAA;AhD2vPJ;;AgD9vPE;EACE,iCAAA;AhDiwPJ;;AgDhwPE;EACE,4CAAA;AhDmwPJ;;AgDtwPE;EACE,iCAAA;AhDywPJ;;AgDxwPE;EACE,4CAAA;AhD2wPJ;;AgD9wPE;EACE,iCAAA;AhDixPJ;;AgDhxPE;EACE,4CAAA;AhDmxPJ;;AgDtxPE;EACE,iCAAA;AhDyxPJ;;AgDxxPE;EACE,4CAAA;AhD2xPJ;;AgD9xPE;EACE,iCAAA;AhDiyPJ;;AgDhyPE;EACE,4CAAA;AhDmyPJ;;AgDtyPE;EACE,iCAAA;AhDyyPJ;;AgDxyPE;EACE,4CAAA;AhD2yPJ;;AiD/0PE;EACE,8BAAA;AjDk1PJ;;AiDn1PE;EACE,sCAAA;AjDs1PJ;;AiDv1PE;EACE,iCAAA;AjD01PJ;;AiD31PE;EACE,yCAAA;AjD81PJ;;AiD11PE;EACE,4BAAA;AjD61PJ;;AiD91PE;EACE,0BAAA;AjDi2PJ;;AiDl2PE;EACE,kCAAA;AjDq2PJ;;AiDj2PE;EACE,sCAAA;AjDo2PJ;;AiDr2PE;EACE,oCAAA;AjDw2PJ;;AiDz2PE;EACE,kCAAA;AjD42PJ;;AiD72PE;EACE,yCAAA;AjDg3PJ;;AiDj3PE;EACE,wCAAA;AjDo3PJ;;AiDr3PE;EACE,wCAAA;AjDw3PJ;;AiDz3PE;EACE,iCAAA;AjD43PJ;;AiD73PE;EACE,+BAAA;AjDg4PJ;;AiDj4PE;EACE,gCAAA;AjDo4PJ;;AiDr4PE;EACE,iCA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hRR;;AsDnhRM;EACE,4BAAA;EACA,+BAAA;AtDshRR;;AuD/iRI;EACE,0BAAA;AvDkjRN;;AuDnjRI;EACE,4BAAA;AvDsjRN;;AuDvjRI;EACE,0BAAA;AvD0jRN;;AuD3jRI;EACE,4BAAA;AvD8jRN;;AuD/jRI;EACE,6BAAA;AvDkkRN;;AuDnkRI;EACE,0BAAA;AvDskRN;;AuDvkRI;EACE,6BAAA;AvD0kRN;;AK1+QE;EkDjGE;IACE,0BAAA;EvD+kRJ;EuDhlRE;IACE,4BAAA;EvDklRJ;EuDnlRE;IACE,0BAAA;EvDqlRJ;EuDtlRE;IACE,4BAAA;EvDwlRJ;EuDzlRE;IACE,6BAAA;EvD2lRJ;EuD5lRE;IACE,0BAAA;EvD8lRJ;EuD/lRE;IACE,6BAAA;EvDimRJ;AACF;AK9/QE;EkDrGE;IACE,0BAAA;EvDsmRJ;EuDvmRE;IACE,4BAAA;EvDymRJ;EuD1mRE;IACE,0BAAA;EvD4mRJ;EuD7mRE;IACE,4BAAA;EvD+mRJ;EuDhnRE;IACE,6BAAA;EvDknRJ;EuDnnRE;IACE,0BAAA;EvDqnRJ;EuDtnRE;IACE,6BAAA;EvDwnRJ;AACF;AK7gRE;EkD7GE;IACE,0BAAA;EvD6nRJ;EuD9nRE;IACE,4BAAA;EvDgoRJ;EuDjoRE;IACE,0BAAA;EvDmoRJ;EuDpoRE;IACE,4BAAA;EvDsoRJ;EuDvoRE;IACE,6BAAA;EvDyoRJ;EuD1oRE;IACE,0BAAA;EvD4oRJ;EuD7oRE;IACE,6BAAA;EvD+oRJ;AACF;AKhiRE;EkDjHE;IACE,0BAAA;EvDopRJ;EuDrpRE;IACE,4BAAA;EvDupRJ;EuDxpRE;IACE,0BAAA;EvD0pRJ;EuD3pRE;IACE,4BAAA;EvD6pRJ;EuD9pRE;IACE,6BAAA;EvDgqRJ;EuDjqRE;IACE,0BAAA;EvDmqRJ;EuDpqRE;IACE,6BAAA;EvDsqRJ;AACF;AKxiRI;EkDhIA;IACE,0BAAA;EvD2qRJ;EuD5qRE;IACE,4BAAA;EvD8qRJ;EuD/qRE;IACE,0BAAA;EvDirRJ;EuDlrRE;IACE,4BAAA;EvDorRJ;EuDrrRE;IACE,6BAAA;EvDurRJ;EuDxrRE;IACE,0BAAA;EvD0rRJ;EuD3rRE;IACE,6BAAA;EvD6rRJ;AACF;AKhjRI;EkD/IA;IACE,0BAAA;EvDksRJ;EuDnsRE;IACE,4BAAA;EvDqsRJ;EuDtsRE;IACE,0BAAA;EvDwsRJ;EuDzsRE;IACE,4BAAA;EvD2sRJ;EuD5sRE;IACE,6BAAA;EvD8sRJ;EuD/sRE;IACE,0BAAA;EvDitRJ;EuDltRE;IACE,6BAAA;EvDotRJ;AACF;AuD5rRE;EACE,6BAAA;AvD8rRJ;;AuD/rRE;EACE,8BAAA;AvDksRJ;;AuDnsRE;EACE,2BAAA;AvDssRJ;;AuDvsRE;EACE,4BAAA;AvD0sRJ;;AKpoRE;EkDlEE;IACE,6BAAA;EvD0sRJ;AACF;AKtoRE;EkDnEE;IACE,6BAAA;EvD4sRJ;AACF;AKvoRE;EkDpEE;IACE,6BAAA;EvD8sRJ;AACF;AKxoRE;EkDrEE;IACE,6BAAA;EvDgtRJ;AACF;AKzoRE;EkDtEE;IACE,6BAAA;EvDktRJ;AACF;AKzoRI;EkDxEA;IACE,6BAAA;EvDotRJ;AACF;AKpoRI;EkD/EA;IACE,6BAAA;EvDstRJ;AACF;AKpoRI;EkDjFA;IACE,6BAAA;EvDwtRJ;AACF;AK/nRI;EkDxFA;IACE,6BAAA;EvD0tRJ;AACF;AKlrRE;EkDlEE;IACE,8BAAA;EvDuvRJ;AACF;AKnrRE;EkDnEE;IACE,8BAAA;EvDyvRJ;AACF;AKprRE;EkDpEE;IACE,8BAAA;EvD2vRJ;AACF;AKrrRE;EkDrEE;IACE,8BAAA;EvD6vRJ;AACF;AKtrRE;EkDtEE;IACE,8BAAA;EvD+vRJ;AACF;AKtrRI;EkDxEA;IACE,8BAAA;EvDiwRJ;AACF;AKjrRI;EkD/EA;IACE,8BAAA;EvDmwRJ;AACF;AKjrRI;EkDjFA;IACE,8BAAA;EvDqwRJ;AACF;AK5qRI;EkDxFA;IACE,8BAAA;EvDuwRJ;AACF;AK/tRE;EkDlEE;IACE,2BAAA;EvDoyRJ;AACF;AKhuRE;EkDnEE;IACE,2BAAA;EvDsyRJ;AACF;AKjuRE;EkDpEE;IACE,2BAAA;EvDwyRJ;AACF;AKluRE;EkDrEE;IACE,2BAAA;EvD0yRJ;AACF;AKnuRE;EkDtEE;IACE,2BAAA;EvD4yRJ;AACF;AKnuRI;EkDxEA;IACE,2BAAA;EvD8yRJ;AACF;AK9tRI;EkD/EA;IACE,2BAAA;EvDgzRJ;AACF;AK9tRI;EkDjFA;IACE,2BAAA;EvDkzRJ;AACF;AKztRI;EkDxFA;IACE,2BAAA;EvDozRJ;AACF;AK5wRE;EkDlEE;IACE,4BAAA;EvDi1RJ;AACF;AK7wRE;EkDnEE;IACE,4BAAA;EvDm1RJ;AACF;AK9wRE;EkDpEE;IACE,4BAAA;EvDq1RJ;AACF;AK/wRE;EkDrEE;IACE,4BAAA;EvDu1RJ;AACF;AKhxRE;EkDtEE;IACE,4BAAA;EvDy1RJ;AACF;AKhxRI;EkDxEA;IACE,4BAAA;EvD21RJ;AACF;AK3wRI;EkD/EA;IACE,4BAAA;EvD61RJ;AACF;AK3wRI;EkDjFA;IACE,4BAAA;EvD+1RJ;AACF;AKtwRI;EkDxFA;IACE,4BAAA;EvDi2RJ;AACF;AuDh2RA;EACE,qCAAA;AvDk2RF;;AuDh2RA;EACE,oCAAA;AvDm2RF;;AuDj2RA;EACE,oCAAA;AvDo2RF;;AuDl2RA;EACE,6BAAA;AvDq2RF;;AuDn2RA;EACE,qCAAA;AvDs2RF;;AuDp2RA;EACE,2BAAA;AvDu2RF;;AuDt2RA;EACE,2BAAA;AvDy2RF;;AuDx2RA;EACE,2BAAA;AvD22RF;;AuD12RA;EACE,2BAAA;AvD62RF;;AuD52RA;EACE,2BAAA;AvD+2RF;;AuD72RA;EACE,+LAAA;AvDg3RF;;AuD92RA;EACE,+LAAA;AvDi3RF;;AuD/2RA;EACE,+LAAA;AvDk3RF;;AuDh3RA;EACE,iCAAA;AvDm3RF;;AuDj3RA;EACE,iCAAA;AvDo3RF;;AwDr9RE;EACE,yBAAA;AxDw9RJ;;AKx3RE;EmD9FE;IACE,yBAAA;ExD09RJ;AACF;AK13RE;EmD/FE;IACE,yBAAA;ExD49RJ;AACF;AK33RE;EmDhGE;IACE,yBAAA;ExD89RJ;AACF;AK53RE;EmDjGE;IACE,yBAAA;ExDg+RJ;AACF;AK73RE;EmDlGE;IACE,yBAAA;ExDk+RJ;AACF;AK73RI;EmDpGA;IACE,yBAAA;ExDo+RJ;AACF;AKx3RI;EmD3GA;IACE,yBAAA;ExDs+RJ;AACF;AKx3RI;EmD7GA;IACE,yBAAA;ExDw+RJ;AACF;AKn3RI;EmDpHA;IACE,yBAAA;ExD0+RJ;AACF;AwDvgSE;EACE,wBAAA;AxDygSJ;;AKz6RE;EmD9FE;IACE,wBAAA;ExD2gSJ;AACF;AK36RE;EmD/FE;IACE,wBAAA;ExD6gSJ;AACF;AK56RE;EmDhGE;IACE,wBAAA;ExD+gSJ;AACF;AK76RE;EmDjGE;IACE,wBAAA;ExDihSJ;AACF;AK96RE;EmDlGE;IACE,wBAAA;ExDmhSJ;AACF;AK96RI;EmDpGA;IACE,wBAAA;ExDqhSJ;AACF;AKz6RI;EmD3GA;IACE,wBAAA;ExDuhSJ;AACF;AKz6RI;EmD7GA;IACE,wBAAA;ExDyhSJ;AACF;AKp6RI;EmDpHA;IACE,wBAAA;ExD2hSJ;AACF;AwDxjSE;EACE,0BAAA;AxD0jSJ;;AK19RE;EmD9FE;IACE,0BAAA;ExD4jSJ;AACF;AK59RE;EmD/FE;IACE,0BAAA;ExD8jSJ;AACF;AK79RE;EmDhGE;IACE,0BAAA;ExDgkSJ;AACF;AK99RE;EmDjGE;IACE,0BAAA;ExDkkSJ;AACF;AK/9RE;EmDlGE;IACE,0BAAA;ExDokSJ;AACF;AK/9RI;EmDpGA;IACE,0BAAA;ExDskSJ;AACF;AK19RI;EmD3GA;IACE,0BAAA;ExDwkSJ;AACF;AK19RI;EmD7GA;IACE,0BAAA;ExD0kSJ;AACF;AKr9RI;EmDpHA;IACE,0BAAA;ExD4kSJ;AACF;AwDzmSE;EACE,gCAAA;AxD2mSJ;;AK3gSE;EmD9FE;IACE,gCAAA;ExD6mSJ;AACF;AK7gSE;EmD/FE;IACE,gCAAA;ExD+mSJ;AACF;AK9gSE;EmDhGE;IACE,gCAAA;ExDinSJ;AACF;AK/gSE;EmDjGE;IACE,gCAAA;ExDmnSJ;AACF;AKhhSE;EmDlGE;IACE,gCAAA;ExDqnSJ;AACF;AKhhSI;EmDpGA;IACE,gCAAA;ExDunSJ;AACF;AK3gSI;EmD3GA;IACE,gCAAA;ExDynSJ;AACF;AK3gSI;EmD7GA;IACE,gCAAA;ExD2nSJ;AACF;AKtgSI;EmDpHA;IACE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","sourcesContent":["@charset \"utf-8\"\n/*! bulma.io v0.9.4 | MIT License | github.com/jgthms/bulma */\n@import \"sass/utilities/_all\"\n@import \"sass/base/_all\"\n@import \"sass/elements/_all\"\n@import \"sass/form/_all\"\n@import \"sass/components/_all\"\n@import \"sass/grid/_all\"\n@import \"sass/helpers/_all\"\n@import \"sass/layout/_all\"\n","/* Bulma Utilities */\n@charset \"utf-8\"\n\n@import \"initial-variables\"\n@import \"functions\"\n@import \"derived-variables\"\n@import \"mixins\"\n@import \"controls\"\n@import \"extends\"\n","@import \"mixins\"\n\n%control\n  +control\n\n%unselectable\n  +unselectable\n\n%arrow\n  +arrow\n\n%block\n  +block\n\n%delete\n  +delete\n\n%loader\n  +loader\n\n%overlay\n  +overlay\n\n%reset\n  +reset\n","@import \"derived-variables\"\n\n$control-radius: $radius !default\n$control-radius-small: $radius-small !default\n\n$control-border-width: 1px !default\n\n$control-height: 2.5em !default\n$control-line-height: 1.5 !default\n\n$control-padding-vertical: calc(0.5em - #{$control-border-width}) !default\n$control-padding-horizontal: calc(0.75em - #{$control-border-width}) !default\n\n=control\n  -moz-appearance: none\n  -webkit-appearance: none\n  align-items: center\n  border: $control-border-width solid transparent\n  border-radius: $control-radius\n  box-shadow: none\n  display: inline-flex\n  font-size: $size-normal\n  height: $control-height\n  justify-content: flex-start\n  line-height: $control-line-height\n  padding-bottom: $control-padding-vertical\n  padding-left: $control-padding-horizontal\n  padding-right: $control-padding-horizontal\n  padding-top: $control-padding-vertical\n  position: relative\n  vertical-align: top\n  // States\n  &:focus,\n  &.is-focused,\n  &:active,\n  &.is-active\n    outline: none\n  &[disabled],\n  fieldset[disabled] &\n    cursor: not-allowed\n\n// The controls sizes use mixins so they can be used at different breakpoints\n=control-small\n  border-radius: $control-radius-small\n  font-size: $size-small\n=control-medium\n  font-size: $size-medium\n=control-large\n  font-size: $size-large\n","// Colors\n\n$black:        hsl(0, 0%, 4%) !default\n$black-bis:    hsl(0, 0%, 7%) !default\n$black-ter:    hsl(0, 0%, 14%) !default\n\n$grey-darker:  hsl(0, 0%, 21%) !default\n$grey-dark:    hsl(0, 0%, 29%) !default\n$grey:         hsl(0, 0%, 48%) !default\n$grey-light:   hsl(0, 0%, 71%) !default\n$grey-lighter: hsl(0, 0%, 86%) !default\n$grey-lightest: hsl(0, 0%, 93%) !default\n\n$white-ter:    hsl(0, 0%, 96%) !default\n$white-bis:    hsl(0, 0%, 98%) !default\n$white:        hsl(0, 0%, 100%) !default\n\n$orange:       hsl(14,  100%, 53%) !default\n$yellow:       hsl(44,  100%, 77%) !default\n$green:        hsl(153, 53%,  53%) !default\n$turquoise:    hsl(171, 100%, 41%) !default\n$cyan:         hsl(207, 61%,  53%) !default\n$blue:         hsl(229, 53%,  53%) !default\n$purple:       hsl(271, 100%, 71%) !default\n$red:          hsl(348, 86%, 61%) !default\n\n// Typography\n\n$family-sans-serif: BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif !default\n$family-monospace: monospace !default\n$render-mode: optimizeLegibility !default\n\n$size-1: 3rem !default\n$size-2: 2.5rem !default\n$size-3: 2rem !default\n$size-4: 1.5rem !default\n$size-5: 1.25rem !default\n$size-6: 1rem !default\n$size-7: 0.75rem !default\n\n$weight-light: 300 !default\n$weight-normal: 400 !default\n$weight-medium: 500 !default\n$weight-semibold: 600 !default\n$weight-bold: 700 !default\n\n// Spacing\n\n$block-spacing: 1.5rem !default\n\n// Responsiveness\n\n// The container horizontal gap, which acts as the offset for breakpoints\n$gap: 32px !default\n// 960, 1152, and 1344 have been chosen because they are divisible by both 12 and 16\n$tablet: 769px !default\n// 960px container + 4rem\n$desktop: 960px + (2 * $gap) !default\n// 1152px container + 4rem\n$widescreen: 1152px + (2 * $gap) !default\n$widescreen-enabled: true !default\n// 1344px container + 4rem\n$fullhd: 1344px + (2 * $gap) !default\n$fullhd-enabled: true !default\n$breakpoints: (\"mobile\": (\"until\": $tablet), \"tablet\": (\"from\": $tablet), \"tablet-only\": (\"from\": $tablet, \"until\": $desktop), \"touch\": (\"from\": $desktop), \"desktop\": (\"from\": $desktop), \"desktop-only\": (\"from\": $desktop, \"until\": $widescreen), \"until-widescreen\": (\"until\": $widescreen), \"widescreen\": (\"from\": $widescreen), \"widescreen-only\": (\"from\": $widescreen, \"until\": $fullhd), \"until-fullhd\": (\"until\": $fullhd), \"fullhd\": (\"from\": $fullhd)) !default\n\n// Miscellaneous\n\n$easing: ease-out !default\n$radius-small: 2px !default\n$radius: 4px !default\n$radius-large: 6px !default\n$radius-rounded: 9999px !default\n$speed: 86ms !default\n\n// Flags\n\n$variable-columns: true !default\n$rtl: false !default\n","@import \"derived-variables\"\n\n=clearfix\n  &::after\n    clear: both\n    content: \" \"\n    display: table\n\n=center($width, $height: 0)\n  position: absolute\n  @if $height != 0\n    left: calc(50% - (#{$width} * 0.5))\n    top: calc(50% - (#{$height} * 0.5))\n  @else\n    left: calc(50% - (#{$width} * 0.5))\n    top: calc(50% - (#{$width} * 0.5))\n\n=fa($size, $dimensions)\n  display: inline-block\n  font-size: $size\n  height: $dimensions\n  line-height: $dimensions\n  text-align: center\n  vertical-align: top\n  width: $dimensions\n\n=hamburger($dimensions)\n  -moz-appearance: none\n  -webkit-appearance: none\n  appearance: none\n  background: none\n  border: none\n  cursor: pointer\n  display: block\n  height: $dimensions\n  position: relative\n  width: $dimensions\n  span\n    background-color: currentColor\n    display: block\n    height: 1px\n    left: calc(50% - 8px)\n    position: absolute\n    transform-origin: center\n    transition-duration: $speed\n    transition-property: background-color, opacity, transform\n    transition-timing-function: $easing\n    width: 16px\n    &:nth-child(1)\n      top: calc(50% - 6px)\n    &:nth-child(2)\n      top: calc(50% - 1px)\n    &:nth-child(3)\n      top: calc(50% + 4px)\n  &:hover\n    background-color: bulmaRgba(black, 0.05)\n  // Modifers\n  &.is-active\n    span\n      &:nth-child(1)\n        transform: translateY(5px) rotate(45deg)\n      &:nth-child(2)\n        opacity: 0\n      &:nth-child(3)\n        transform: translateY(-5px) rotate(-45deg)\n\n=overflow-touch\n  -webkit-overflow-scrolling: touch\n\n=placeholder\n  $placeholders: ':-moz' ':-webkit-input' '-moz' '-ms-input'\n  @each $placeholder in $placeholders\n    &:#{$placeholder}-placeholder\n      @content\n\n=reset\n  -moz-appearance: none\n  -webkit-appearance: none\n  appearance: none\n  background: none\n  border: none\n  color: currentColor\n  font-family: inherit\n  font-size: 1em\n  margin: 0\n  padding: 0\n\n// Responsiveness\n\n=from($device)\n  @media screen and (min-width: $device)\n    @content\n\n=until($device)\n  @media screen and (max-width: $device - 1px)\n    @content\n\n=between($from, $until)\n  @media screen and (min-width: $from) and (max-width: $until - 1px)\n    @content\n\n=mobile\n  @media screen and (max-width: $tablet - 1px)\n    @content\n\n=tablet\n  @media screen and (min-width: $tablet), print\n    @content\n\n=tablet-only\n  @media screen and (min-width: $tablet) and (max-width: $desktop - 1px)\n    @content\n\n=touch\n  @media screen and (max-width: $desktop - 1px)\n    @content\n\n=desktop\n  @media screen and (min-width: $desktop)\n    @content\n\n=desktop-only\n  @if $widescreen-enabled\n    @media screen and (min-width: $desktop) and (max-width: $widescreen - 1px)\n      @content\n\n=until-widescreen\n  @if $widescreen-enabled\n    @media screen and (max-width: $widescreen - 1px)\n      @content\n\n=widescreen\n  @if $widescreen-enabled\n    @media screen and (min-width: $widescreen)\n      @content\n\n=widescreen-only\n  @if $widescreen-enabled and $fullhd-enabled\n    @media screen and (min-width: $widescreen) and (max-width: $fullhd - 1px)\n      @content\n\n=until-fullhd\n  @if $fullhd-enabled\n    @media screen and (max-width: $fullhd - 1px)\n      @content\n\n=fullhd\n  @if $fullhd-enabled\n    @media screen and (min-width: $fullhd)\n      @content\n\n=breakpoint($name)\n  $breakpoint: map-get($breakpoints, $name)\n  @if $breakpoint\n    $from: map-get($breakpoint, \"from\")\n    $until: map-get($breakpoint, \"until\")\n    @if $from and $until\n      +between($from, $until)\n        @content\n    @else if $from\n      +from($from)\n        @content\n    @else if $until\n      +until($until)\n        @content\n\n=ltr\n  @if not $rtl\n    @content\n\n=rtl\n  @if $rtl\n    @content\n\n=ltr-property($property, $spacing, $right: true)\n  $normal: if($right, \"right\", \"left\")\n  $opposite: if($right, \"left\", \"right\")\n  @if $rtl\n    #{$property}-#{$opposite}: $spacing\n  @else\n    #{$property}-#{$normal}: $spacing\n\n=ltr-position($spacing, $right: true)\n  $normal: if($right, \"right\", \"left\")\n  $opposite: if($right, \"left\", \"right\")\n  @if $rtl\n    #{$opposite}: $spacing\n  @else\n    #{$normal}: $spacing\n\n// Placeholders\n\n=unselectable\n  -webkit-touch-callout: none\n  -webkit-user-select: none\n  -moz-user-select: none\n  -ms-user-select: none\n  user-select: none\n\n=arrow($color: transparent)\n  border: 3px solid $color\n  border-radius: 2px\n  border-right: 0\n  border-top: 0\n  content: \" \"\n  display: block\n  height: 0.625em\n  margin-top: -0.4375em\n  pointer-events: none\n  position: absolute\n  top: 50%\n  transform: rotate(-45deg)\n  transform-origin: center\n  width: 0.625em\n\n=block($spacing: $block-spacing)\n  &:not(:last-child)\n    margin-bottom: $spacing\n\n=delete\n  +unselectable\n  -moz-appearance: none\n  -webkit-appearance: none\n  background-color: bulmaRgba($scheme-invert, 0.2)\n  border: none\n  border-radius: $radius-rounded\n  cursor: pointer\n  pointer-events: auto\n  display: inline-block\n  flex-grow: 0\n  flex-shrink: 0\n  font-size: 0\n  height: 20px\n  max-height: 20px\n  max-width: 20px\n  min-height: 20px\n  min-width: 20px\n  outline: none\n  position: relative\n  vertical-align: top\n  width: 20px\n  &::before,\n  &::after\n    background-color: $scheme-main\n    content: \"\"\n    display: block\n    left: 50%\n    position: absolute\n    top: 50%\n    transform: translateX(-50%) translateY(-50%) rotate(45deg)\n    transform-origin: center center\n  &::before\n    height: 2px\n    width: 50%\n  &::after\n    height: 50%\n    width: 2px\n  &:hover,\n  &:focus\n    background-color: bulmaRgba($scheme-invert, 0.3)\n  &:active\n    background-color: bulmaRgba($scheme-invert, 0.4)\n  // Sizes\n  &.is-small\n    height: 16px\n    max-height: 16px\n    max-width: 16px\n    min-height: 16px\n    min-width: 16px\n    width: 16px\n  &.is-medium\n    height: 24px\n    max-height: 24px\n    max-width: 24px\n    min-height: 24px\n    min-width: 24px\n    width: 24px\n  &.is-large\n    height: 32px\n    max-height: 32px\n    max-width: 32px\n    min-height: 32px\n    min-width: 32px\n    width: 32px\n\n=loader\n  animation: spinAround 500ms infinite linear\n  border: 2px solid $grey-lighter\n  border-radius: $radius-rounded\n  border-right-color: transparent\n  border-top-color: transparent\n  content: \"\"\n  display: block\n  height: 1em\n  position: relative\n  width: 1em\n\n=overlay($offset: 0)\n  bottom: $offset\n  left: $offset\n  position: absolute\n  right: $offset\n  top: $offset\n","/* Bulma Base */\n@charset \"utf-8\"\n\n@import \"minireset\"\n@import \"generic\"\n@import \"animations\"\n","/*! minireset.css v0.0.6 | MIT License | github.com/jgthms/minireset.css */\n// Blocks\nhtml,\nbody,\np,\nol,\nul,\nli,\ndl,\ndt,\ndd,\nblockquote,\nfigure,\nfieldset,\nlegend,\ntextarea,\npre,\niframe,\nhr,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6\n  margin: 0\n  padding: 0\n\n// Headings\nh1,\nh2,\nh3,\nh4,\nh5,\nh6\n  font-size: 100%\n  font-weight: normal\n\n// List\nul\n  list-style: none\n\n// Form\nbutton,\ninput,\nselect,\ntextarea\n  margin: 0\n\n// Box sizing\nhtml\n  box-sizing: border-box\n\n*\n  &,\n  &::before,\n  &::after\n    box-sizing: inherit\n\n// Media\nimg,\nvideo\n  height: auto\n  max-width: 100%\n\n// Iframe\niframe\n  border: 0\n\n// Table\ntable\n  border-collapse: collapse\n  border-spacing: 0\n\ntd,\nth\n  padding: 0\n  &:not([align])\n    text-align: inherit\n","@import \"../utilities/mixins\"\n\n$body-background-color: $scheme-main !default\n$body-size: 16px !default\n$body-min-width: 300px !default\n$body-rendering: optimizeLegibility !default\n$body-family: $family-primary !default\n$body-overflow-x: hidden !default\n$body-overflow-y: scroll !default\n\n$body-color: $text !default\n$body-font-size: 1em !default\n$body-weight: $weight-normal !default\n$body-line-height: 1.5 !default\n\n$code-family: $family-code !default\n$code-padding: 0.25em 0.5em 0.25em !default\n$code-weight: normal !default\n$code-size: 0.875em !default\n\n$small-font-size: 0.875em !default\n\n$hr-background-color: $background !default\n$hr-height: 2px !default\n$hr-margin: 1.5rem 0 !default\n\n$strong-color: $text-strong !default\n$strong-weight: $weight-bold !default\n\n$pre-font-size: 0.875em !default\n$pre-padding: 1.25rem 1.5rem !default\n$pre-code-font-size: 1em !default\n\nhtml\n  background-color: $body-background-color\n  font-size: $body-size\n  -moz-osx-font-smoothing: grayscale\n  -webkit-font-smoothing: antialiased\n  min-width: $body-min-width\n  overflow-x: $body-overflow-x\n  overflow-y: $body-overflow-y\n  text-rendering: $body-rendering\n  text-size-adjust: 100%\n\narticle,\naside,\nfigure,\nfooter,\nheader,\nhgroup,\nsection\n  display: block\n\nbody,\nbutton,\ninput,\noptgroup,\nselect,\ntextarea\n  font-family: $body-family\n\ncode,\npre\n  -moz-osx-font-smoothing: auto\n  -webkit-font-smoothing: auto\n  font-family: $code-family\n\nbody\n  color: $body-color\n  font-size: $body-font-size\n  font-weight: $body-weight\n  line-height: $body-line-height\n\n// Inline\n\na\n  color: $link\n  cursor: pointer\n  text-decoration: none\n  strong\n    color: currentColor\n  &:hover\n    color: $link-hover\n\ncode\n  background-color: $code-background\n  color: $code\n  font-size: $code-size\n  font-weight: $code-weight\n  padding: $code-padding\n\nhr\n  background-color: $hr-background-color\n  border: none\n  display: block\n  height: $hr-height\n  margin: $hr-margin\n\nimg\n  height: auto\n  max-width: 100%\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"]\n  vertical-align: baseline\n\nsmall\n  font-size: $small-font-size\n\nspan\n  font-style: inherit\n  font-weight: inherit\n\nstrong\n  color: $strong-color\n  font-weight: $strong-weight\n\n// Block\n\nfieldset\n  border: none\n\npre\n  +overflow-touch\n  background-color: $pre-background\n  color: $pre\n  font-size: $pre-font-size\n  overflow-x: auto\n  padding: $pre-padding\n  white-space: pre\n  word-wrap: normal\n  code\n    background-color: transparent\n    color: currentColor\n    font-size: $pre-code-font-size\n    padding: 0\n\ntable\n  td,\n  th\n    vertical-align: top\n    &:not([align])\n      text-align: inherit\n  th\n    color: $text-strong\n","@import \"initial-variables\"\n@import \"functions\"\n\n$primary: $turquoise !default\n\n$info: $cyan !default\n$success: $green !default\n$warning: $yellow !default\n$danger: $red !default\n\n$light: $white-ter !default\n$dark: $grey-darker !default\n\n// Invert colors\n\n$orange-invert: findColorInvert($orange) !default\n$yellow-invert: findColorInvert($yellow) !default\n$green-invert: findColorInvert($green) !default\n$turquoise-invert: findColorInvert($turquoise) !default\n$cyan-invert: findColorInvert($cyan) !default\n$blue-invert: findColorInvert($blue) !default\n$purple-invert: findColorInvert($purple) !default\n$red-invert: findColorInvert($red) !default\n\n$primary-invert: findColorInvert($primary) !default\n$primary-light: findLightColor($primary) !default\n$primary-dark: findDarkColor($primary) !default\n$info-invert: findColorInvert($info) !default\n$info-light: findLightColor($info) !default\n$info-dark: findDarkColor($info) !default\n$success-invert: findColorInvert($success) !default\n$success-light: findLightColor($success) !default\n$success-dark: findDarkColor($success) !default\n$warning-invert: findColorInvert($warning) !default\n$warning-light: findLightColor($warning) !default\n$warning-dark: findDarkColor($warning) !default\n$danger-invert: findColorInvert($danger) !default\n$danger-light: findLightColor($danger) !default\n$danger-dark: findDarkColor($danger) !default\n$light-invert: findColorInvert($light) !default\n$dark-invert: findColorInvert($dark) !default\n\n// General colors\n\n$scheme-main: $white !default\n$scheme-main-bis: $white-bis !default\n$scheme-main-ter: $white-ter !default\n$scheme-invert: $black !default\n$scheme-invert-bis: $black-bis !default\n$scheme-invert-ter: $black-ter !default\n\n$background: $white-ter !default\n\n$border: $grey-lighter !default\n$border-hover: $grey-light !default\n$border-light: $grey-lightest !default\n$border-light-hover: $grey-light !default\n\n// Text colors\n\n$text: $grey-dark !default\n$text-invert: findColorInvert($text) !default\n$text-light: $grey !default\n$text-strong: $grey-darker !default\n\n// Code colors\n\n$code: darken($red, 15%) !default\n$code-background: $background !default\n\n$pre: $text !default\n$pre-background: $background !default\n\n// Link colors\n\n$link: $blue !default\n$link-invert: findColorInvert($link) !default\n$link-light: findLightColor($link) !default\n$link-dark: findDarkColor($link) !default\n$link-visited: $purple !default\n\n$link-hover: $grey-darker !default\n$link-hover-border: $grey-light !default\n\n$link-focus: $grey-darker !default\n$link-focus-border: $blue !default\n\n$link-active: $grey-darker !default\n$link-active-border: $grey-dark !default\n\n// Typography\n\n$family-primary: $family-sans-serif !default\n$family-secondary: $family-sans-serif !default\n$family-code: $family-monospace !default\n\n$size-small: $size-7 !default\n$size-normal: $size-6 !default\n$size-medium: $size-5 !default\n$size-large: $size-4 !default\n\n// Effects\n\n$shadow: 0 0.5em 1em -0.125em rgba($scheme-invert, 0.1), 0 0px 0 1px rgba($scheme-invert, 0.02) !default\n\n// Lists and maps\n$custom-colors: null !default\n$custom-shades: null !default\n\n$colors: mergeColorMaps((\"white\": ($white, $black), \"black\": ($black, $white), \"light\": ($light, $light-invert), \"dark\": ($dark, $dark-invert), \"primary\": ($primary, $primary-invert, $primary-light, $primary-dark), \"link\": ($link, $link-invert, $link-light, $link-dark), \"info\": ($info, $info-invert, $info-light, $info-dark), \"success\": ($success, $success-invert, $success-light, $success-dark), \"warning\": ($warning, $warning-invert, $warning-light, $warning-dark), \"danger\": ($danger, $danger-invert, $danger-light, $danger-dark)), $custom-colors) !default\n\n$shades: mergeColorMaps((\"black-bis\": $black-bis, \"black-ter\": $black-ter, \"grey-darker\": $grey-darker, \"grey-dark\": $grey-dark, \"grey\": $grey, \"grey-light\": $grey-light, \"grey-lighter\": $grey-lighter, \"white-ter\": $white-ter, \"white-bis\": $white-bis), $custom-shades) !default\n\n$sizes: $size-1 $size-2 $size-3 $size-4 $size-5 $size-6 $size-7 !default\n","@keyframes spinAround\n  from\n    transform: rotate(0deg)\n  to\n    transform: rotate(359deg)\n","/* Bulma Elements */\n@charset \"utf-8\"\n\n@import \"box\"\n@import \"button\"\n@import \"container\"\n@import \"content\"\n@import \"icon\"\n@import \"image\"\n@import \"notification\"\n@import \"progress\"\n@import \"table\"\n@import \"tag\"\n@import \"title\"\n\n@import \"other\"\n","@import \"../utilities/mixins\"\n\n$box-color: $text !default\n$box-background-color: $scheme-main !default\n$box-radius: $radius-large !default\n$box-shadow: $shadow !default\n$box-padding: 1.25rem !default\n\n$box-link-hover-shadow: 0 0.5em 1em -0.125em rgba($scheme-invert, 0.1), 0 0 0 1px $link !default\n$box-link-active-shadow: inset 0 1px 2px rgba($scheme-invert, 0.2), 0 0 0 1px $link !default\n\n.box\n  @extend %block\n  background-color: $box-background-color\n  border-radius: $box-radius\n  box-shadow: $box-shadow\n  color: $box-color\n  display: block\n  padding: $box-padding\n\na.box\n  &:hover,\n  &:focus\n    box-shadow: $box-link-hover-shadow\n  &:active\n    box-shadow: $box-link-active-shadow\n","@import \"../utilities/controls\"\n@import \"../utilities/mixins\"\n\n$button-color: $text-strong !default\n$button-background-color: $scheme-main !default\n$button-family: false !default\n\n$button-border-color: $border !default\n$button-border-width: $control-border-width !default\n\n$button-padding-vertical: calc(0.5em - #{$button-border-width}) !default\n$button-padding-horizontal: 1em !default\n\n$button-hover-color: $link-hover !default\n$button-hover-border-color: $link-hover-border !default\n\n$button-focus-color: $link-focus !default\n$button-focus-border-color: $link-focus-border !default\n$button-focus-box-shadow-size: 0 0 0 0.125em !default\n$button-focus-box-shadow-color: bulmaRgba($link, 0.25) !default\n\n$button-active-color: $link-active !default\n$button-active-border-color: $link-active-border !default\n\n$button-text-color: $text !default\n$button-text-decoration: underline !default\n$button-text-hover-background-color: $background !default\n$button-text-hover-color: $text-strong !default\n\n$button-ghost-background: none !default\n$button-ghost-border-color: transparent !default\n$button-ghost-color: $link !default\n$button-ghost-decoration: none !default\n$button-ghost-hover-color: $link !default\n$button-ghost-hover-decoration: underline !default\n\n$button-disabled-background-color: $scheme-main !default\n$button-disabled-border-color: $border !default\n$button-disabled-shadow: none !default\n$button-disabled-opacity: 0.5 !default\n\n$button-static-color: $text-light !default\n$button-static-background-color: $scheme-main-ter !default\n$button-static-border-color: $border !default\n\n$button-colors: $colors !default\n$button-responsive-sizes: (\"mobile\": (\"small\": ($size-small * 0.75), \"normal\": ($size-small * 0.875), \"medium\": $size-small, \"large\": $size-normal), \"tablet-only\": (\"small\": ($size-small * 0.875), \"normal\": ($size-small), \"medium\": $size-normal, \"large\": $size-medium)) !default\n\n// The button sizes use mixins so they can be used at different breakpoints\n=button-small\n  &:not(.is-rounded)\n    border-radius: $radius-small\n  font-size: $size-small\n=button-normal\n  font-size: $size-normal\n=button-medium\n  font-size: $size-medium\n=button-large\n  font-size: $size-large\n\n.button\n  @extend %control\n  @extend %unselectable\n  background-color: $button-background-color\n  border-color: $button-border-color\n  border-width: $button-border-width\n  color: $button-color\n  cursor: pointer\n  @if $button-family\n    font-family: $button-family\n  justify-content: center\n  padding-bottom: $button-padding-vertical\n  padding-left: $button-padding-horizontal\n  padding-right: $button-padding-horizontal\n  padding-top: $button-padding-vertical\n  text-align: center\n  white-space: nowrap\n  strong\n    color: inherit\n  .icon\n    &,\n    &.is-small,\n    &.is-medium,\n    &.is-large\n      height: 1.5em\n      width: 1.5em\n    &:first-child:not(:last-child)\n      +ltr-property(\"margin\", calc(#{-0.5 * $button-padding-horizontal} - #{$button-border-width}), false)\n      +ltr-property(\"margin\", $button-padding-horizontal * 0.25)\n    &:last-child:not(:first-child)\n      +ltr-property(\"margin\", $button-padding-horizontal * 0.25, false)\n      +ltr-property(\"margin\", calc(#{-0.5 * $button-padding-horizontal} - #{$button-border-width}))\n    &:first-child:last-child\n      margin-left: calc(#{-0.5 * $button-padding-horizontal} - #{$button-border-width})\n      margin-right: calc(#{-0.5 * $button-padding-horizontal} - #{$button-border-width})\n  // States\n  &:hover,\n  &.is-hovered\n    border-color: $button-hover-border-color\n    color: $button-hover-color\n  &:focus,\n  &.is-focused\n    border-color: $button-focus-border-color\n    color: $button-focus-color\n    &:not(:active)\n      box-shadow: $button-focus-box-shadow-size $button-focus-box-shadow-color\n  &:active,\n  &.is-active\n    border-color: $button-active-border-color\n    color: $button-active-color\n  // Colors\n  &.is-text\n    background-color: transparent\n    border-color: transparent\n    color: $button-text-color\n    text-decoration: $button-text-decoration\n    &:hover,\n    &.is-hovered,\n    &:focus,\n    &.is-focused\n      background-color: $button-text-hover-background-color\n      color: $button-text-hover-color\n    &:active,\n    &.is-active\n      background-color: bulmaDarken($button-text-hover-background-color, 5%)\n      color: $button-text-hover-color\n    &[disabled],\n    fieldset[disabled] &\n      background-color: transparent\n      border-color: transparent\n      box-shadow: none\n  &.is-ghost\n    background: $button-ghost-background\n    border-color: $button-ghost-border-color\n    color: $button-ghost-color\n    text-decoration: $button-ghost-decoration\n    &:hover,\n    &.is-hovered\n      color: $button-ghost-hover-color\n      text-decoration: $button-ghost-hover-decoration\n  @each $name, $pair in $button-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      border-color: transparent\n      color: $color-invert\n      &:hover,\n      &.is-hovered\n        background-color: bulmaDarken($color, 2.5%)\n        border-color: transparent\n        color: $color-invert\n      &:focus,\n      &.is-focused\n        border-color: transparent\n        color: $color-invert\n        &:not(:active)\n          box-shadow: $button-focus-box-shadow-size bulmaRgba($color, 0.25)\n      &:active,\n      &.is-active\n        background-color: bulmaDarken($color, 5%)\n        border-color: transparent\n        color: $color-invert\n      &[disabled],\n      fieldset[disabled] &\n        background-color: $color\n        border-color: $color\n        box-shadow: none\n      &.is-inverted\n        background-color: $color-invert\n        color: $color\n        &:hover,\n        &.is-hovered\n          background-color: bulmaDarken($color-invert, 5%)\n        &[disabled],\n        fieldset[disabled] &\n          background-color: $color-invert\n          border-color: transparent\n          box-shadow: none\n          color: $color\n      &.is-loading\n        &::after\n          border-color: transparent transparent $color-invert $color-invert !important\n      &.is-outlined\n        background-color: transparent\n        border-color: $color\n        color: $color\n        &:hover,\n        &.is-hovered,\n        &:focus,\n        &.is-focused\n          background-color: $color\n          border-color: $color\n          color: $color-invert\n        &.is-loading\n          &::after\n            border-color: transparent transparent $color $color !important\n          &:hover,\n          &.is-hovered,\n          &:focus,\n          &.is-focused\n            &::after\n              border-color: transparent transparent $color-invert $color-invert !important\n        &[disabled],\n        fieldset[disabled] &\n          background-color: transparent\n          border-color: $color\n          box-shadow: none\n          color: $color\n      &.is-inverted.is-outlined\n        background-color: transparent\n        border-color: $color-invert\n        color: $color-invert\n        &:hover,\n        &.is-hovered,\n        &:focus,\n        &.is-focused\n          background-color: $color-invert\n          color: $color\n        &.is-loading\n          &:hover,\n          &.is-hovered,\n          &:focus,\n          &.is-focused\n            &::after\n              border-color: transparent transparent $color $color !important\n        &[disabled],\n        fieldset[disabled] &\n          background-color: transparent\n          border-color: $color-invert\n          box-shadow: none\n          color: $color-invert\n      // If light and dark colors are provided\n      @if length($pair) >= 4\n        $color-light: nth($pair, 3)\n        $color-dark: nth($pair, 4)\n        &.is-light\n          background-color: $color-light\n          color: $color-dark\n          &:hover,\n          &.is-hovered\n            background-color: bulmaDarken($color-light, 2.5%)\n            border-color: transparent\n            color: $color-dark\n          &:active,\n          &.is-active\n            background-color: bulmaDarken($color-light, 5%)\n            border-color: transparent\n            color: $color-dark\n  // Sizes\n  &.is-small\n    +button-small\n  &.is-normal\n    +button-normal\n  &.is-medium\n    +button-medium\n  &.is-large\n    +button-large\n  // Modifiers\n  &[disabled],\n  fieldset[disabled] &\n    background-color: $button-disabled-background-color\n    border-color: $button-disabled-border-color\n    box-shadow: $button-disabled-shadow\n    opacity: $button-disabled-opacity\n  &.is-fullwidth\n    display: flex\n    width: 100%\n  &.is-loading\n    color: transparent !important\n    pointer-events: none\n    &::after\n      @extend %loader\n      +center(1em)\n      position: absolute !important\n  &.is-static\n    background-color: $button-static-background-color\n    border-color: $button-static-border-color\n    color: $button-static-color\n    box-shadow: none\n    pointer-events: none\n  &.is-rounded\n    border-radius: $radius-rounded\n    padding-left: calc(#{$button-padding-horizontal} + 0.25em)\n    padding-right: calc(#{$button-padding-horizontal} + 0.25em)\n\n.buttons\n  align-items: center\n  display: flex\n  flex-wrap: wrap\n  justify-content: flex-start\n  .button\n    margin-bottom: 0.5rem\n    &:not(:last-child):not(.is-fullwidth)\n      +ltr-property(\"margin\", 0.5rem)\n  &:last-child\n    margin-bottom: -0.5rem\n  &:not(:last-child)\n    margin-bottom: 1rem\n  // Sizes\n  &.are-small\n    .button:not(.is-normal):not(.is-medium):not(.is-large)\n      +button-small\n  &.are-medium\n    .button:not(.is-small):not(.is-normal):not(.is-large)\n      +button-medium\n  &.are-large\n    .button:not(.is-small):not(.is-normal):not(.is-medium)\n      +button-large\n  &.has-addons\n    .button\n      &:not(:first-child)\n        border-bottom-left-radius: 0\n        border-top-left-radius: 0\n      &:not(:last-child)\n        border-bottom-right-radius: 0\n        border-top-right-radius: 0\n        +ltr-property(\"margin\", -1px)\n      &:last-child\n        +ltr-property(\"margin\", 0)\n      &:hover,\n      &.is-hovered\n        z-index: 2\n      &:focus,\n      &.is-focused,\n      &:active,\n      &.is-active,\n      &.is-selected\n        z-index: 3\n        &:hover\n          z-index: 4\n      &.is-expanded\n        flex-grow: 1\n        flex-shrink: 1\n  &.is-centered\n    justify-content: center\n    &:not(.has-addons)\n      .button:not(.is-fullwidth)\n        margin-left: 0.25rem\n        margin-right: 0.25rem\n  &.is-right\n    justify-content: flex-end\n    &:not(.has-addons)\n      .button:not(.is-fullwidth)\n        margin-left: 0.25rem\n        margin-right: 0.25rem\n\n@each $bp-name, $bp-sizes in $button-responsive-sizes\n  +breakpoint($bp-name)\n    @each $size, $value in $bp-sizes\n      @if $size != \"normal\"\n        .button.is-responsive.is-#{$size}\n          font-size: $value\n      @else\n        .button.is-responsive,\n        .button.is-responsive.is-normal\n          font-size: $value\n","@import \"../utilities/mixins\"\n\n$container-offset: (2 * $gap) !default\n$container-max-width: $fullhd !default\n\n.container\n  flex-grow: 1\n  margin: 0 auto\n  position: relative\n  width: auto\n  &.is-fluid\n    max-width: none !important\n    padding-left: $gap\n    padding-right: $gap\n    width: 100%\n  +desktop\n    max-width: $desktop - $container-offset\n  +until-widescreen\n    &.is-widescreen:not(.is-max-desktop)\n      max-width: min($widescreen, $container-max-width) - $container-offset\n  +until-fullhd\n    &.is-fullhd:not(.is-max-desktop):not(.is-max-widescreen)\n      max-width: min($fullhd, $container-max-width) - $container-offset\n  +widescreen\n    &:not(.is-max-desktop)\n      max-width: min($widescreen, $container-max-width) - $container-offset\n  +fullhd\n    &:not(.is-max-desktop):not(.is-max-widescreen)\n      max-width: min($fullhd, $container-max-width) - $container-offset\n","@import \"../utilities/mixins\"\n\n$content-heading-color: $text-strong !default\n$content-heading-weight: $weight-semibold !default\n$content-heading-line-height: 1.125 !default\n\n$content-block-margin-bottom: 1em !default\n\n$content-blockquote-background-color: $background !default\n$content-blockquote-border-left: 5px solid $border !default\n$content-blockquote-padding: 1.25em 1.5em !default\n\n$content-pre-padding: 1.25em 1.5em !default\n\n$content-table-cell-border: 1px solid $border !default\n$content-table-cell-border-width: 0 0 1px !default\n$content-table-cell-padding: 0.5em 0.75em !default\n$content-table-cell-heading-color: $text-strong !default\n$content-table-head-cell-border-width: 0 0 2px !default\n$content-table-head-cell-color: $text-strong !default\n$content-table-body-last-row-cell-border-bottom-width: 0 !default\n$content-table-foot-cell-border-width: 2px 0 0 !default\n$content-table-foot-cell-color: $text-strong !default\n\n.content\n  @extend %block\n  // Inline\n  li + li\n    margin-top: 0.25em\n  // Block\n  p,\n  dl,\n  ol,\n  ul,\n  blockquote,\n  pre,\n  table\n    &:not(:last-child)\n      margin-bottom: $content-block-margin-bottom\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6\n    color: $content-heading-color\n    font-weight: $content-heading-weight\n    line-height: $content-heading-line-height\n  h1\n    font-size: 2em\n    margin-bottom: 0.5em\n    &:not(:first-child)\n      margin-top: 1em\n  h2\n    font-size: 1.75em\n    margin-bottom: 0.5714em\n    &:not(:first-child)\n      margin-top: 1.1428em\n  h3\n    font-size: 1.5em\n    margin-bottom: 0.6666em\n    &:not(:first-child)\n      margin-top: 1.3333em\n  h4\n    font-size: 1.25em\n    margin-bottom: 0.8em\n  h5\n    font-size: 1.125em\n    margin-bottom: 0.8888em\n  h6\n    font-size: 1em\n    margin-bottom: 1em\n  blockquote\n    background-color: $content-blockquote-background-color\n    +ltr-property(\"border\", $content-blockquote-border-left, false)\n    padding: $content-blockquote-padding\n  ol\n    list-style-position: outside\n    +ltr-property(\"margin\", 2em, false)\n    margin-top: 1em\n    &:not([type])\n      list-style-type: decimal\n      &.is-lower-alpha\n        list-style-type: lower-alpha\n      &.is-lower-roman\n        list-style-type: lower-roman\n      &.is-upper-alpha\n        list-style-type: upper-alpha\n      &.is-upper-roman\n        list-style-type: upper-roman\n  ul\n    list-style: disc outside\n    +ltr-property(\"margin\", 2em, false)\n    margin-top: 1em\n    ul\n      list-style-type: circle\n      margin-top: 0.5em\n      ul\n        list-style-type: square\n  dd\n    +ltr-property(\"margin\", 2em, false)\n  figure\n    margin-left: 2em\n    margin-right: 2em\n    text-align: center\n    &:not(:first-child)\n      margin-top: 2em\n    &:not(:last-child)\n      margin-bottom: 2em\n    img\n      display: inline-block\n    figcaption\n      font-style: italic\n  pre\n    +overflow-touch\n    overflow-x: auto\n    padding: $content-pre-padding\n    white-space: pre\n    word-wrap: normal\n  sup,\n  sub\n    font-size: 75%\n  table\n    width: 100%\n    td,\n    th\n      border: $content-table-cell-border\n      border-width: $content-table-cell-border-width\n      padding: $content-table-cell-padding\n      vertical-align: top\n    th\n      color: $content-table-cell-heading-color\n      &:not([align])\n        text-align: inherit\n    thead\n      td,\n      th\n        border-width: $content-table-head-cell-border-width\n        color: $content-table-head-cell-color\n    tfoot\n      td,\n      th\n        border-width: $content-table-foot-cell-border-width\n        color: $content-table-foot-cell-color\n    tbody\n      tr\n        &:last-child\n          td,\n          th\n            border-bottom-width: $content-table-body-last-row-cell-border-bottom-width\n  .tabs\n    li + li\n      margin-top: 0\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-normal\n    font-size: $size-normal\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n","$icon-dimensions: 1.5rem !default\n$icon-dimensions-small: 1rem !default\n$icon-dimensions-medium: 2rem !default\n$icon-dimensions-large: 3rem !default\n$icon-text-spacing: 0.25em !default\n\n.icon\n  align-items: center\n  display: inline-flex\n  justify-content: center\n  height: $icon-dimensions\n  width: $icon-dimensions\n  // Sizes\n  &.is-small\n    height: $icon-dimensions-small\n    width: $icon-dimensions-small\n  &.is-medium\n    height: $icon-dimensions-medium\n    width: $icon-dimensions-medium\n  &.is-large\n    height: $icon-dimensions-large\n    width: $icon-dimensions-large\n\n.icon-text\n  align-items: flex-start\n  color: inherit\n  display: inline-flex\n  flex-wrap: wrap\n  line-height: $icon-dimensions\n  vertical-align: top\n  .icon\n    flex-grow: 0\n    flex-shrink: 0\n    &:not(:last-child)\n      +ltr\n        margin-right: $icon-text-spacing\n      +rtl\n        margin-left: $icon-text-spacing\n    &:not(:first-child)\n      +ltr\n        margin-left: $icon-text-spacing\n      +rtl\n        margin-right: $icon-text-spacing\n\ndiv.icon-text\n  display: flex\n","@import \"../utilities/mixins\"\n\n$dimensions: 16 24 32 48 64 96 128 !default\n\n.image\n  display: block\n  position: relative\n  img\n    display: block\n    height: auto\n    width: 100%\n    &.is-rounded\n      border-radius: $radius-rounded\n  &.is-fullwidth\n    width: 100%\n  // Ratio\n  &.is-square,\n  &.is-1by1,\n  &.is-5by4,\n  &.is-4by3,\n  &.is-3by2,\n  &.is-5by3,\n  &.is-16by9,\n  &.is-2by1,\n  &.is-3by1,\n  &.is-4by5,\n  &.is-3by4,\n  &.is-2by3,\n  &.is-3by5,\n  &.is-9by16,\n  &.is-1by2,\n  &.is-1by3\n    img,\n    .has-ratio\n      @extend %overlay\n      height: 100%\n      width: 100%\n  &.is-square,\n  &.is-1by1\n    padding-top: 100%\n  &.is-5by4\n    padding-top: 80%\n  &.is-4by3\n    padding-top: 75%\n  &.is-3by2\n    padding-top: 66.6666%\n  &.is-5by3\n    padding-top: 60%\n  &.is-16by9\n    padding-top: 56.25%\n  &.is-2by1\n    padding-top: 50%\n  &.is-3by1\n    padding-top: 33.3333%\n  &.is-4by5\n    padding-top: 125%\n  &.is-3by4\n    padding-top: 133.3333%\n  &.is-2by3\n    padding-top: 150%\n  &.is-3by5\n    padding-top: 166.6666%\n  &.is-9by16\n    padding-top: 177.7777%\n  &.is-1by2\n    padding-top: 200%\n  &.is-1by3\n    padding-top: 300%\n  // Sizes\n  @each $dimension in $dimensions\n    &.is-#{$dimension}x#{$dimension}\n      height: $dimension * 1px\n      width: $dimension * 1px\n","@import \"../utilities/mixins\"\n\n$notification-background-color: $background !default\n$notification-code-background-color: $scheme-main !default\n$notification-radius: $radius !default\n$notification-padding: 1.25rem 2.5rem 1.25rem 1.5rem !default\n$notification-padding-ltr: 1.25rem 2.5rem 1.25rem 1.5rem !default\n$notification-padding-rtl: 1.25rem 1.5rem 1.25rem 2.5rem !default\n\n$notification-colors: $colors !default\n\n.notification\n  @extend %block\n  background-color: $notification-background-color\n  border-radius: $notification-radius\n  position: relative\n  +ltr\n    padding: $notification-padding-ltr\n  +rtl\n    padding: $notification-padding-rtl\n  a:not(.button):not(.dropdown-item)\n    color: currentColor\n    text-decoration: underline\n  strong\n    color: currentColor\n  code,\n  pre\n    background: $notification-code-background-color\n  pre code\n    background: transparent\n  & > .delete\n    +ltr-position(0.5rem)\n    position: absolute\n    top: 0.5rem\n  .title,\n  .subtitle,\n  .content\n    color: currentColor\n  // Colors\n  @each $name, $pair in $notification-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      color: $color-invert\n      // If light and dark colors are provided\n      @if length($pair) >= 4\n        $color-light: nth($pair, 3)\n        $color-dark: nth($pair, 4)\n        &.is-light\n          background-color: $color-light\n          color: $color-dark\n","@import \"../utilities/mixins\"\n\n$progress-bar-background-color: $border-light !default\n$progress-value-background-color: $text !default\n$progress-border-radius: $radius-rounded !default\n\n$progress-indeterminate-duration: 1.5s !default\n\n$progress-colors: $colors !default\n\n.progress\n  @extend %block\n  -moz-appearance: none\n  -webkit-appearance: none\n  border: none\n  border-radius: $progress-border-radius\n  display: block\n  height: $size-normal\n  overflow: hidden\n  padding: 0\n  width: 100%\n  &::-webkit-progress-bar\n    background-color: $progress-bar-background-color\n  &::-webkit-progress-value\n    background-color: $progress-value-background-color\n  &::-moz-progress-bar\n    background-color: $progress-value-background-color\n  &::-ms-fill\n    background-color: $progress-value-background-color\n    border: none\n  // Colors\n  @each $name, $pair in $progress-colors\n    $color: nth($pair, 1)\n    &.is-#{$name}\n      &::-webkit-progress-value\n        background-color: $color\n      &::-moz-progress-bar\n        background-color: $color\n      &::-ms-fill\n        background-color: $color\n      &:indeterminate\n        background-image: linear-gradient(to right, $color 30%, $progress-bar-background-color 30%)\n\n  &:indeterminate\n    animation-duration: $progress-indeterminate-duration\n    animation-iteration-count: infinite\n    animation-name: moveIndeterminate\n    animation-timing-function: linear\n    background-color: $progress-bar-background-color\n    background-image: linear-gradient(to right, $text 30%, $progress-bar-background-color 30%)\n    background-position: top left\n    background-repeat: no-repeat\n    background-size: 150% 150%\n    &::-webkit-progress-bar\n      background-color: transparent\n    &::-moz-progress-bar\n      background-color: transparent\n    &::-ms-fill\n      animation-name: none\n\n  // Sizes\n  &.is-small\n    height: $size-small\n  &.is-medium\n    height: $size-medium\n  &.is-large\n    height: $size-large\n\n@keyframes moveIndeterminate\n  from\n    background-position: 200% 0\n  to\n    background-position: -200% 0\n","@import \"../utilities/mixins\"\n\n$table-color: $text-strong !default\n$table-background-color: $scheme-main !default\n\n$table-cell-border: 1px solid $border !default\n$table-cell-border-width: 0 0 1px !default\n$table-cell-padding: 0.5em 0.75em !default\n$table-cell-heading-color: $text-strong !default\n$table-cell-text-align: left !default\n\n$table-head-cell-border-width: 0 0 2px !default\n$table-head-cell-color: $text-strong !default\n$table-foot-cell-border-width: 2px 0 0 !default\n$table-foot-cell-color: $text-strong !default\n\n$table-head-background-color: transparent !default\n$table-body-background-color: transparent !default\n$table-foot-background-color: transparent !default\n\n$table-row-hover-background-color: $scheme-main-bis !default\n\n$table-row-active-background-color: $primary !default\n$table-row-active-color: $primary-invert !default\n\n$table-striped-row-even-background-color: $scheme-main-bis !default\n$table-striped-row-even-hover-background-color: $scheme-main-ter !default\n\n$table-colors: $colors !default\n\n.table\n  @extend %block\n  background-color: $table-background-color\n  color: $table-color\n  td,\n  th\n    border: $table-cell-border\n    border-width: $table-cell-border-width\n    padding: $table-cell-padding\n    vertical-align: top\n    // Colors\n    @each $name, $pair in $table-colors\n      $color: nth($pair, 1)\n      $color-invert: nth($pair, 2)\n      &.is-#{$name}\n        background-color: $color\n        border-color: $color\n        color: $color-invert\n    // Modifiers\n    &.is-narrow\n      white-space: nowrap\n      width: 1%\n    &.is-selected\n      background-color: $table-row-active-background-color\n      color: $table-row-active-color\n      a,\n      strong\n        color: currentColor\n    &.is-vcentered\n      vertical-align: middle\n  th\n    color: $table-cell-heading-color\n    &:not([align])\n      text-align: $table-cell-text-align\n  tr\n    &.is-selected\n      background-color: $table-row-active-background-color\n      color: $table-row-active-color\n      a,\n      strong\n        color: currentColor\n      td,\n      th\n        border-color: $table-row-active-color\n        color: currentColor\n  thead\n    background-color: $table-head-background-color\n    td,\n    th\n      border-width: $table-head-cell-border-width\n      color: $table-head-cell-color\n  tfoot\n    background-color: $table-foot-background-color\n    td,\n    th\n      border-width: $table-foot-cell-border-width\n      color: $table-foot-cell-color\n  tbody\n    background-color: $table-body-background-color\n    tr\n      &:last-child\n        td,\n        th\n          border-bottom-width: 0\n  // Modifiers\n  &.is-bordered\n    td,\n    th\n      border-width: 1px\n    tr\n      &:last-child\n        td,\n        th\n          border-bottom-width: 1px\n  &.is-fullwidth\n    width: 100%\n  &.is-hoverable\n    tbody\n      tr:not(.is-selected)\n        &:hover\n          background-color: $table-row-hover-background-color\n    &.is-striped\n      tbody\n        tr:not(.is-selected)\n          &:hover\n            background-color: $table-row-hover-background-color\n            &:nth-child(even)\n              background-color: $table-striped-row-even-hover-background-color\n  &.is-narrow\n    td,\n    th\n      padding: 0.25em 0.5em\n  &.is-striped\n    tbody\n      tr:not(.is-selected)\n        &:nth-child(even)\n          background-color: $table-striped-row-even-background-color\n\n.table-container\n  @extend %block\n  +overflow-touch\n  overflow: auto\n  overflow-y: hidden\n  max-width: 100%\n","@import \"../utilities/mixins\"\n\n$tag-background-color: $background !default\n$tag-color: $text !default\n$tag-radius: $radius !default\n$tag-delete-margin: 1px !default\n\n$tag-colors: $colors !default\n\n.tags\n  align-items: center\n  display: flex\n  flex-wrap: wrap\n  justify-content: flex-start\n  .tag\n    margin-bottom: 0.5rem\n    &:not(:last-child)\n      +ltr-property(\"margin\", 0.5rem)\n  &:last-child\n    margin-bottom: -0.5rem\n  &:not(:last-child)\n    margin-bottom: 1rem\n  // Sizes\n  &.are-medium\n    .tag:not(.is-normal):not(.is-large)\n      font-size: $size-normal\n  &.are-large\n    .tag:not(.is-normal):not(.is-medium)\n      font-size: $size-medium\n  &.is-centered\n    justify-content: center\n    .tag\n      margin-right: 0.25rem\n      margin-left: 0.25rem\n  &.is-right\n    justify-content: flex-end\n    .tag\n      &:not(:first-child)\n        margin-left: 0.5rem\n      &:not(:last-child)\n        margin-right: 0\n  &.has-addons\n    .tag\n      +ltr-property(\"margin\", 0)\n      &:not(:first-child)\n        +ltr-property(\"margin\", 0, false)\n        +ltr\n          border-top-left-radius: 0\n          border-bottom-left-radius: 0\n        +rtl\n          border-top-right-radius: 0\n          border-bottom-right-radius: 0\n      &:not(:last-child)\n        +ltr\n          border-top-right-radius: 0\n          border-bottom-right-radius: 0\n        +rtl\n          border-top-left-radius: 0\n          border-bottom-left-radius: 0\n\n.tag:not(body)\n  align-items: center\n  background-color: $tag-background-color\n  border-radius: $tag-radius\n  color: $tag-color\n  display: inline-flex\n  font-size: $size-small\n  height: 2em\n  justify-content: center\n  line-height: 1.5\n  padding-left: 0.75em\n  padding-right: 0.75em\n  white-space: nowrap\n  .delete\n    +ltr-property(\"margin\", 0.25rem, false)\n    +ltr-property(\"margin\", -0.375rem)\n  // Colors\n  @each $name, $pair in $tag-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      color: $color-invert\n      // If a light and dark colors are provided\n      @if length($pair) > 3\n        $color-light: nth($pair, 3)\n        $color-dark: nth($pair, 4)\n        &.is-light\n          background-color: $color-light\n          color: $color-dark\n  // Sizes\n  &.is-normal\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-normal\n  &.is-large\n    font-size: $size-medium\n  .icon\n    &:first-child:not(:last-child)\n      +ltr-property(\"margin\", -0.375em, false)\n      +ltr-property(\"margin\", 0.1875em)\n    &:last-child:not(:first-child)\n      +ltr-property(\"margin\", 0.1875em, false)\n      +ltr-property(\"margin\", -0.375em)\n    &:first-child:last-child\n      +ltr-property(\"margin\", -0.375em, false)\n      +ltr-property(\"margin\", -0.375em)\n  // Modifiers\n  &.is-delete\n    +ltr-property(\"margin\", $tag-delete-margin, false)\n    padding: 0\n    position: relative\n    width: 2em\n    &::before,\n    &::after\n      background-color: currentColor\n      content: \"\"\n      display: block\n      left: 50%\n      position: absolute\n      top: 50%\n      transform: translateX(-50%) translateY(-50%) rotate(45deg)\n      transform-origin: center center\n    &::before\n      height: 1px\n      width: 50%\n    &::after\n      height: 50%\n      width: 1px\n    &:hover,\n    &:focus\n      background-color: darken($tag-background-color, 5%)\n    &:active\n      background-color: darken($tag-background-color, 10%)\n  &.is-rounded\n    border-radius: $radius-rounded\n\na.tag\n  &:hover\n    text-decoration: underline\n","@import \"../utilities/mixins\"\n\n$title-color: $text-strong !default\n$title-family: false !default\n$title-size: $size-3 !default\n$title-weight: $weight-semibold !default\n$title-line-height: 1.125 !default\n$title-strong-color: inherit !default\n$title-strong-weight: inherit !default\n$title-sub-size: 0.75em !default\n$title-sup-size: 0.75em !default\n\n$subtitle-color: $text !default\n$subtitle-family: false !default\n$subtitle-size: $size-5 !default\n$subtitle-weight: $weight-normal !default\n$subtitle-line-height: 1.25 !default\n$subtitle-strong-color: $text-strong !default\n$subtitle-strong-weight: $weight-semibold !default\n$subtitle-negative-margin: -1.25rem !default\n\n.title,\n.subtitle\n  @extend %block\n  word-break: break-word\n  em,\n  span\n    font-weight: inherit\n  sub\n    font-size: $title-sub-size\n  sup\n    font-size: $title-sup-size\n  .tag\n    vertical-align: middle\n\n.title\n  color: $title-color\n  @if $title-family\n    font-family: $title-family\n  font-size: $title-size\n  font-weight: $title-weight\n  line-height: $title-line-height\n  strong\n    color: $title-strong-color\n    font-weight: $title-strong-weight\n  &:not(.is-spaced) + .subtitle\n    margin-top: $subtitle-negative-margin\n  // Sizes\n  @each $size in $sizes\n    $i: index($sizes, $size)\n    &.is-#{$i}\n      font-size: $size\n\n.subtitle\n  color: $subtitle-color\n  @if $subtitle-family\n    font-family: $subtitle-family\n  font-size: $subtitle-size\n  font-weight: $subtitle-weight\n  line-height: $subtitle-line-height\n  strong\n    color: $subtitle-strong-color\n    font-weight: $subtitle-strong-weight\n  &:not(.is-spaced) + .title\n    margin-top: $subtitle-negative-margin\n  // Sizes\n  @each $size in $sizes\n    $i: index($sizes, $size)\n    &.is-#{$i}\n      font-size: $size\n","@import \"../utilities/mixins\"\n\n.block\n  @extend %block\n\n.delete\n  @extend %delete\n\n.heading\n  display: block\n  font-size: 11px\n  letter-spacing: 1px\n  margin-bottom: 5px\n  text-transform: uppercase\n\n.loader\n  @extend %loader\n\n.number\n  align-items: center\n  background-color: $background\n  border-radius: $radius-rounded\n  display: inline-flex\n  font-size: $size-medium\n  height: 2em\n  justify-content: center\n  margin-right: 1.5rem\n  min-width: 2.5em\n  padding: 0.25rem 0.5rem\n  text-align: center\n  vertical-align: top\n","/* Bulma Form */\n@charset \"utf-8\"\n\n@import \"shared\"\n@import \"input-textarea\"\n@import \"checkbox-radio\"\n@import \"select\"\n@import \"file\"\n@import \"tools\"\n","@import \"../utilities/controls\"\n@import \"../utilities/mixins\"\n\n$form-colors: $colors !default\n\n$input-color: $text-strong !default\n$input-background-color: $scheme-main !default\n$input-border-color: $border !default\n$input-height: $control-height !default\n$input-shadow: inset 0 0.0625em 0.125em rgba($scheme-invert, 0.05) !default\n$input-placeholder-color: bulmaRgba($input-color, 0.3) !default\n\n$input-hover-color: $text-strong !default\n$input-hover-border-color: $border-hover !default\n\n$input-focus-color: $text-strong !default\n$input-focus-border-color: $link !default\n$input-focus-box-shadow-size: 0 0 0 0.125em !default\n$input-focus-box-shadow-color: bulmaRgba($link, 0.25) !default\n\n$input-disabled-color: $text-light !default\n$input-disabled-background-color: $background !default\n$input-disabled-border-color: $background !default\n$input-disabled-placeholder-color: bulmaRgba($input-disabled-color, 0.3) !default\n\n$input-arrow: $link !default\n\n$input-icon-color: $border !default\n$input-icon-active-color: $text !default\n\n$input-radius: $radius !default\n\n=input\n  @extend %control\n  background-color: $input-background-color\n  border-color: $input-border-color\n  border-radius: $input-radius\n  color: $input-color\n  +placeholder\n    color: $input-placeholder-color\n  &:hover,\n  &.is-hovered\n    border-color: $input-hover-border-color\n  &:focus,\n  &.is-focused,\n  &:active,\n  &.is-active\n    border-color: $input-focus-border-color\n    box-shadow: $input-focus-box-shadow-size $input-focus-box-shadow-color\n  &[disabled],\n  fieldset[disabled] &\n    background-color: $input-disabled-background-color\n    border-color: $input-disabled-border-color\n    box-shadow: none\n    color: $input-disabled-color\n    +placeholder\n      color: $input-disabled-placeholder-color\n\n%input\n  +input\n","$textarea-padding: $control-padding-horizontal !default\n$textarea-max-height: 40em !default\n$textarea-min-height: 8em !default\n\n$textarea-colors: $form-colors !default\n\n%input-textarea\n  @extend %input\n  box-shadow: $input-shadow\n  max-width: 100%\n  width: 100%\n  &[readonly]\n    box-shadow: none\n  // Colors\n  @each $name, $pair in $textarea-colors\n    $color: nth($pair, 1)\n    &.is-#{$name}\n      border-color: $color\n      &:focus,\n      &.is-focused,\n      &:active,\n      &.is-active\n        box-shadow: $input-focus-box-shadow-size bulmaRgba($color, 0.25)\n  // Sizes\n  &.is-small\n    +control-small\n  &.is-medium\n    +control-medium\n  &.is-large\n    +control-large\n  // Modifiers\n  &.is-fullwidth\n    display: block\n    width: 100%\n  &.is-inline\n    display: inline\n    width: auto\n\n.input\n  @extend %input-textarea\n  &.is-rounded\n    border-radius: $radius-rounded\n    padding-left: calc(#{$control-padding-horizontal} + 0.375em)\n    padding-right: calc(#{$control-padding-horizontal} + 0.375em)\n  &.is-static\n    background-color: transparent\n    border-color: transparent\n    box-shadow: none\n    padding-left: 0\n    padding-right: 0\n\n.textarea\n  @extend %input-textarea\n  display: block\n  max-width: 100%\n  min-width: 100%\n  padding: $textarea-padding\n  resize: vertical\n  &:not([rows])\n    max-height: $textarea-max-height\n    min-height: $textarea-min-height\n  &[rows]\n    height: initial\n  // Modifiers\n  &.has-fixed-size\n    resize: none\n","%checkbox-radio\n  cursor: pointer\n  display: inline-block\n  line-height: 1.25\n  position: relative\n  input\n    cursor: pointer\n  &:hover\n    color: $input-hover-color\n  &[disabled],\n  fieldset[disabled] &,\n  input[disabled]\n    color: $input-disabled-color\n    cursor: not-allowed\n\n.checkbox\n  @extend %checkbox-radio\n\n.radio\n  @extend %checkbox-radio\n  & + .radio\n    +ltr-property(\"margin\", 0.5em, false)\n","$select-colors: $form-colors !default\n\n.select\n  display: inline-block\n  max-width: 100%\n  position: relative\n  vertical-align: top\n  &:not(.is-multiple)\n    height: $input-height\n  &:not(.is-multiple):not(.is-loading)\n    &::after\n      @extend %arrow\n      border-color: $input-arrow\n      +ltr-position(1.125em)\n      z-index: 4\n  &.is-rounded\n    select\n      border-radius: $radius-rounded\n      +ltr-property(\"padding\", 1em, false)\n  select\n    @extend %input\n    cursor: pointer\n    display: block\n    font-size: 1em\n    max-width: 100%\n    outline: none\n    &::-ms-expand\n      display: none\n    &[disabled]:hover,\n    fieldset[disabled] &:hover\n      border-color: $input-disabled-border-color\n    &:not([multiple])\n      +ltr-property(\"padding\", 2.5em)\n    &[multiple]\n      height: auto\n      padding: 0\n      option\n        padding: 0.5em 1em\n  // States\n  &:not(.is-multiple):not(.is-loading):hover\n    &::after\n      border-color: $input-hover-color\n  // Colors\n  @each $name, $pair in $select-colors\n    $color: nth($pair, 1)\n    &.is-#{$name}\n      &:not(:hover)::after\n        border-color: $color\n      select\n        border-color: $color\n        &:hover,\n        &.is-hovered\n          border-color: bulmaDarken($color, 5%)\n        &:focus,\n        &.is-focused,\n        &:active,\n        &.is-active\n          box-shadow: $input-focus-box-shadow-size bulmaRgba($color, 0.25)\n  // Sizes\n  &.is-small\n    +control-small\n  &.is-medium\n    +control-medium\n  &.is-large\n    +control-large\n  // Modifiers\n  &.is-disabled\n    &::after\n      border-color: $input-disabled-color !important\n      opacity: 0.5\n  &.is-fullwidth\n    width: 100%\n    select\n      width: 100%\n  &.is-loading\n    &::after\n      @extend %loader\n      margin-top: 0\n      position: absolute\n      +ltr-position(0.625em)\n      top: 0.625em\n      transform: none\n    &.is-small:after\n      font-size: $size-small\n    &.is-medium:after\n      font-size: $size-medium\n    &.is-large:after\n      font-size: $size-large\n","$file-border-color: $border !default\n$file-radius: $radius !default\n\n$file-cta-background-color: $scheme-main-ter !default\n$file-cta-color: $text !default\n$file-cta-hover-color: $text-strong !default\n$file-cta-active-color: $text-strong !default\n\n$file-name-border-color: $border !default\n$file-name-border-style: solid !default\n$file-name-border-width: 1px 1px 1px 0 !default\n$file-name-max-width: 16em !default\n\n$file-colors: $form-colors !default\n\n.file\n  @extend %unselectable\n  align-items: stretch\n  display: flex\n  justify-content: flex-start\n  position: relative\n  // Colors\n  @each $name, $pair in $file-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      .file-cta\n        background-color: $color\n        border-color: transparent\n        color: $color-invert\n      &:hover,\n      &.is-hovered\n        .file-cta\n          background-color: bulmaDarken($color, 2.5%)\n          border-color: transparent\n          color: $color-invert\n      &:focus,\n      &.is-focused\n        .file-cta\n          border-color: transparent\n          box-shadow: 0 0 0.5em bulmaRgba($color, 0.25)\n          color: $color-invert\n      &:active,\n      &.is-active\n        .file-cta\n          background-color: bulmaDarken($color, 5%)\n          border-color: transparent\n          color: $color-invert\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-normal\n    font-size: $size-normal\n  &.is-medium\n    font-size: $size-medium\n    .file-icon\n      .fa\n        font-size: 21px\n  &.is-large\n    font-size: $size-large\n    .file-icon\n      .fa\n        font-size: 28px\n  // Modifiers\n  &.has-name\n    .file-cta\n      border-bottom-right-radius: 0\n      border-top-right-radius: 0\n    .file-name\n      border-bottom-left-radius: 0\n      border-top-left-radius: 0\n    &.is-empty\n      .file-cta\n        border-radius: $file-radius\n      .file-name\n        display: none\n  &.is-boxed\n    .file-label\n      flex-direction: column\n    .file-cta\n      flex-direction: column\n      height: auto\n      padding: 1em 3em\n    .file-name\n      border-width: 0 1px 1px\n    .file-icon\n      height: 1.5em\n      width: 1.5em\n      .fa\n        font-size: 21px\n    &.is-small\n      .file-icon .fa\n        font-size: 14px\n    &.is-medium\n      .file-icon .fa\n        font-size: 28px\n    &.is-large\n      .file-icon .fa\n        font-size: 35px\n    &.has-name\n      .file-cta\n        border-radius: $file-radius $file-radius 0 0\n      .file-name\n        border-radius: 0 0 $file-radius $file-radius\n        border-width: 0 1px 1px\n  &.is-centered\n    justify-content: center\n  &.is-fullwidth\n    .file-label\n      width: 100%\n    .file-name\n      flex-grow: 1\n      max-width: none\n  &.is-right\n    justify-content: flex-end\n    .file-cta\n      border-radius: 0 $file-radius $file-radius 0\n    .file-name\n      border-radius: $file-radius 0 0 $file-radius\n      border-width: 1px 0 1px 1px\n      order: -1\n\n.file-label\n  align-items: stretch\n  display: flex\n  cursor: pointer\n  justify-content: flex-start\n  overflow: hidden\n  position: relative\n  &:hover\n    .file-cta\n      background-color: bulmaDarken($file-cta-background-color, 2.5%)\n      color: $file-cta-hover-color\n    .file-name\n      border-color: bulmaDarken($file-name-border-color, 2.5%)\n  &:active\n    .file-cta\n      background-color: bulmaDarken($file-cta-background-color, 5%)\n      color: $file-cta-active-color\n    .file-name\n      border-color: bulmaDarken($file-name-border-color, 5%)\n\n.file-input\n  height: 100%\n  left: 0\n  opacity: 0\n  outline: none\n  position: absolute\n  top: 0\n  width: 100%\n\n.file-cta,\n.file-name\n  @extend %control\n  border-color: $file-border-color\n  border-radius: $file-radius\n  font-size: 1em\n  padding-left: 1em\n  padding-right: 1em\n  white-space: nowrap\n\n.file-cta\n  background-color: $file-cta-background-color\n  color: $file-cta-color\n\n.file-name\n  border-color: $file-name-border-color\n  border-style: $file-name-border-style\n  border-width: $file-name-border-width\n  display: block\n  max-width: $file-name-max-width\n  overflow: hidden\n  text-align: inherit\n  text-overflow: ellipsis\n\n.file-icon\n  align-items: center\n  display: flex\n  height: 1em\n  justify-content: center\n  +ltr-property(\"margin\", 0.5em)\n  width: 1em\n  .fa\n    font-size: 14px\n","$label-color: $text-strong !default\n$label-weight: $weight-bold !default\n\n$help-size: $size-small !default\n\n$label-colors: $form-colors !default\n\n.label\n  color: $label-color\n  display: block\n  font-size: $size-normal\n  font-weight: $label-weight\n  &:not(:last-child)\n    margin-bottom: 0.5em\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n\n.help\n  display: block\n  font-size: $help-size\n  margin-top: 0.25rem\n  @each $name, $pair in $label-colors\n    $color: nth($pair, 1)\n    &.is-#{$name}\n      color: $color\n\n// Containers\n\n.field\n  &:not(:last-child)\n    margin-bottom: 0.75rem\n  // Modifiers\n  &.has-addons\n    display: flex\n    justify-content: flex-start\n    .control\n      &:not(:last-child)\n        +ltr-property(\"margin\", -1px)\n      &:not(:first-child):not(:last-child)\n        .button,\n        .input,\n        .select select\n          border-radius: 0\n      &:first-child:not(:only-child)\n        .button,\n        .input,\n        .select select\n          +ltr\n            border-bottom-right-radius: 0\n            border-top-right-radius: 0\n          +rtl\n            border-bottom-left-radius: 0\n            border-top-left-radius: 0\n      &:last-child:not(:only-child)\n        .button,\n        .input,\n        .select select\n          +ltr\n            border-bottom-left-radius: 0\n            border-top-left-radius: 0\n          +rtl\n            border-bottom-right-radius: 0\n            border-top-right-radius: 0\n      .button,\n      .input,\n      .select select\n        &:not([disabled])\n          &:hover,\n          &.is-hovered\n            z-index: 2\n          &:focus,\n          &.is-focused,\n          &:active,\n          &.is-active\n            z-index: 3\n            &:hover\n              z-index: 4\n      &.is-expanded\n        flex-grow: 1\n        flex-shrink: 1\n    &.has-addons-centered\n      justify-content: center\n    &.has-addons-right\n      justify-content: flex-end\n    &.has-addons-fullwidth\n      .control\n        flex-grow: 1\n        flex-shrink: 0\n  &.is-grouped\n    display: flex\n    justify-content: flex-start\n    & > .control\n      flex-shrink: 0\n      &:not(:last-child)\n        margin-bottom: 0\n        +ltr-property(\"margin\", 0.75rem)\n      &.is-expanded\n        flex-grow: 1\n        flex-shrink: 1\n    &.is-grouped-centered\n      justify-content: center\n    &.is-grouped-right\n      justify-content: flex-end\n    &.is-grouped-multiline\n      flex-wrap: wrap\n      & > .control\n        &:last-child,\n        &:not(:last-child)\n          margin-bottom: 0.75rem\n      &:last-child\n        margin-bottom: -0.75rem\n      &:not(:last-child)\n        margin-bottom: 0\n  &.is-horizontal\n    +tablet\n      display: flex\n\n.field-label\n  .label\n    font-size: inherit\n  +mobile\n    margin-bottom: 0.5rem\n  +tablet\n    flex-basis: 0\n    flex-grow: 1\n    flex-shrink: 0\n    +ltr-property(\"margin\", 1.5rem)\n    text-align: right\n    &.is-small\n      font-size: $size-small\n      padding-top: 0.375em\n    &.is-normal\n      padding-top: 0.375em\n    &.is-medium\n      font-size: $size-medium\n      padding-top: 0.375em\n    &.is-large\n      font-size: $size-large\n      padding-top: 0.375em\n\n.field-body\n  .field .field\n    margin-bottom: 0\n  +tablet\n    display: flex\n    flex-basis: 0\n    flex-grow: 5\n    flex-shrink: 1\n    .field\n      margin-bottom: 0\n    & > .field\n      flex-shrink: 1\n      &:not(.is-narrow)\n        flex-grow: 1\n      &:not(:last-child)\n        +ltr-property(\"margin\", 0.75rem)\n\n.control\n  box-sizing: border-box\n  clear: both\n  font-size: $size-normal\n  position: relative\n  text-align: inherit\n  // Modifiers\n  &.has-icons-left,\n  &.has-icons-right\n    .input,\n    .select\n      &:focus\n        & ~ .icon\n          color: $input-icon-active-color\n      &.is-small ~ .icon\n        font-size: $size-small\n      &.is-medium ~ .icon\n        font-size: $size-medium\n      &.is-large ~ .icon\n        font-size: $size-large\n    .icon\n      color: $input-icon-color\n      height: $input-height\n      pointer-events: none\n      position: absolute\n      top: 0\n      width: $input-height\n      z-index: 4\n  &.has-icons-left\n    .input,\n    .select select\n      padding-left: $input-height\n    .icon.is-left\n      left: 0\n  &.has-icons-right\n    .input,\n    .select select\n      padding-right: $input-height\n    .icon.is-right\n      right: 0\n  &.is-loading\n    &::after\n      @extend %loader\n      position: absolute !important\n      +ltr-position(0.625em)\n      top: 0.625em\n      z-index: 4\n    &.is-small:after\n      font-size: $size-small\n    &.is-medium:after\n      font-size: $size-medium\n    &.is-large:after\n      font-size: $size-large\n","/* Bulma Components */\n@charset \"utf-8\"\n\n@import \"breadcrumb\"\n@import \"card\"\n@import \"dropdown\"\n@import \"level\"\n@import \"media\"\n@import \"menu\"\n@import \"message\"\n@import \"modal\"\n@import \"navbar\"\n@import \"pagination\"\n@import \"panel\"\n@import \"tabs\"\n","@import \"../utilities/mixins\"\n\n$breadcrumb-item-color: $link !default\n$breadcrumb-item-hover-color: $link-hover !default\n$breadcrumb-item-active-color: $text-strong !default\n\n$breadcrumb-item-padding-vertical: 0 !default\n$breadcrumb-item-padding-horizontal: 0.75em !default\n\n$breadcrumb-item-separator-color: $border-hover !default\n\n.breadcrumb\n  @extend %block\n  @extend %unselectable\n  font-size: $size-normal\n  white-space: nowrap\n  a\n    align-items: center\n    color: $breadcrumb-item-color\n    display: flex\n    justify-content: center\n    padding: $breadcrumb-item-padding-vertical $breadcrumb-item-padding-horizontal\n    &:hover\n      color: $breadcrumb-item-hover-color\n  li\n    align-items: center\n    display: flex\n    &:first-child a\n      +ltr-property(\"padding\", 0, false)\n    &.is-active\n      a\n        color: $breadcrumb-item-active-color\n        cursor: default\n        pointer-events: none\n    & + li::before\n      color: $breadcrumb-item-separator-color\n      content: \"\\0002f\"\n  ul,\n  ol\n    align-items: flex-start\n    display: flex\n    flex-wrap: wrap\n    justify-content: flex-start\n  .icon\n    &:first-child\n      +ltr-property(\"margin\", 0.5em)\n    &:last-child\n      +ltr-property(\"margin\", 0.5em, false)\n  // Alignment\n  &.is-centered\n    ol,\n    ul\n      justify-content: center\n  &.is-right\n    ol,\n    ul\n      justify-content: flex-end\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n  // Styles\n  &.has-arrow-separator\n    li + li::before\n      content: \"\\02192\"\n  &.has-bullet-separator\n    li + li::before\n      content: \"\\02022\"\n  &.has-dot-separator\n    li + li::before\n      content: \"\\000b7\"\n  &.has-succeeds-separator\n    li + li::before\n      content: \"\\0227B\"\n","@import \"../utilities/mixins\"\n\n$card-color: $text !default\n$card-background-color: $scheme-main !default\n$card-shadow: $shadow !default\n$card-radius: 0.25rem !default\n\n$card-header-background-color: transparent !default\n$card-header-color: $text-strong !default\n$card-header-padding: 0.75rem 1rem !default\n$card-header-shadow: 0 0.125em 0.25em rgba($scheme-invert, 0.1) !default\n$card-header-weight: $weight-bold !default\n\n$card-content-background-color: transparent !default\n$card-content-padding: 1.5rem !default\n\n$card-footer-background-color: transparent !default\n$card-footer-border-top: 1px solid $border-light !default\n$card-footer-padding: 0.75rem !default\n\n$card-media-margin: $block-spacing !default\n\n.card\n  background-color: $card-background-color\n  border-radius: $card-radius\n  box-shadow: $card-shadow\n  color: $card-color\n  max-width: 100%\n  position: relative\n\n%card-item\n  &:first-child\n    border-top-left-radius: $card-radius\n    border-top-right-radius: $card-radius\n  &:last-child\n    border-bottom-left-radius: $card-radius\n    border-bottom-right-radius: $card-radius\n\n.card-header\n  @extend %card-item\n  background-color: $card-header-background-color\n  align-items: stretch\n  box-shadow: $card-header-shadow\n  display: flex\n\n.card-header-title\n  align-items: center\n  color: $card-header-color\n  display: flex\n  flex-grow: 1\n  font-weight: $card-header-weight\n  padding: $card-header-padding\n  &.is-centered\n    justify-content: center\n\n.card-header-icon\n  +reset\n  align-items: center\n  cursor: pointer\n  display: flex\n  justify-content: center\n  padding: $card-header-padding\n\n.card-image\n  display: block\n  position: relative\n  &:first-child\n    img\n      border-top-left-radius: $card-radius\n      border-top-right-radius: $card-radius\n  &:last-child\n    img\n      border-bottom-left-radius: $card-radius\n      border-bottom-right-radius: $card-radius\n\n.card-content\n  @extend %card-item\n  background-color: $card-content-background-color\n  padding: $card-content-padding\n\n.card-footer\n  @extend %card-item\n  background-color: $card-footer-background-color\n  border-top: $card-footer-border-top\n  align-items: stretch\n  display: flex\n\n.card-footer-item\n  align-items: center\n  display: flex\n  flex-basis: 0\n  flex-grow: 1\n  flex-shrink: 0\n  justify-content: center\n  padding: $card-footer-padding\n  &:not(:last-child)\n    +ltr-property(\"border\", $card-footer-border-top)\n\n// Combinations\n\n.card\n  .media:not(:last-child)\n    margin-bottom: $card-media-margin\n","@import \"../utilities/mixins\"\n\n$dropdown-menu-min-width: 12rem !default\n\n$dropdown-content-background-color: $scheme-main !default\n$dropdown-content-arrow: $link !default\n$dropdown-content-offset: 4px !default\n$dropdown-content-padding-bottom: 0.5rem !default\n$dropdown-content-padding-top: 0.5rem !default\n$dropdown-content-radius: $radius !default\n$dropdown-content-shadow: $shadow !default\n$dropdown-content-z: 20 !default\n\n$dropdown-item-color: $text !default\n$dropdown-item-hover-color: $scheme-invert !default\n$dropdown-item-hover-background-color: $background !default\n$dropdown-item-active-color: $link-invert !default\n$dropdown-item-active-background-color: $link !default\n\n$dropdown-divider-background-color: $border-light !default\n\n.dropdown\n  display: inline-flex\n  position: relative\n  vertical-align: top\n  &.is-active,\n  &.is-hoverable:hover\n    .dropdown-menu\n      display: block\n  &.is-right\n    .dropdown-menu\n      left: auto\n      right: 0\n  &.is-up\n    .dropdown-menu\n      bottom: 100%\n      padding-bottom: $dropdown-content-offset\n      padding-top: initial\n      top: auto\n\n.dropdown-menu\n  display: none\n  +ltr-position(0, false)\n  min-width: $dropdown-menu-min-width\n  padding-top: $dropdown-content-offset\n  position: absolute\n  top: 100%\n  z-index: $dropdown-content-z\n\n.dropdown-content\n  background-color: $dropdown-content-background-color\n  border-radius: $dropdown-content-radius\n  box-shadow: $dropdown-content-shadow\n  padding-bottom: $dropdown-content-padding-bottom\n  padding-top: $dropdown-content-padding-top\n\n.dropdown-item\n  color: $dropdown-item-color\n  display: block\n  font-size: 0.875rem\n  line-height: 1.5\n  padding: 0.375rem 1rem\n  position: relative\n\na.dropdown-item,\nbutton.dropdown-item\n  +ltr-property(\"padding\", 3rem)\n  text-align: inherit\n  white-space: nowrap\n  width: 100%\n  &:hover\n    background-color: $dropdown-item-hover-background-color\n    color: $dropdown-item-hover-color\n  &.is-active\n    background-color: $dropdown-item-active-background-color\n    color: $dropdown-item-active-color\n\n.dropdown-divider\n  background-color: $dropdown-divider-background-color\n  border: none\n  display: block\n  height: 1px\n  margin: 0.5rem 0\n","@import \"../utilities/mixins\"\n\n$level-item-spacing: ($block-spacing * 0.5) !default\n\n.level\n  @extend %block\n  align-items: center\n  justify-content: space-between\n  code\n    border-radius: $radius\n  img\n    display: inline-block\n    vertical-align: top\n  // Modifiers\n  &.is-mobile\n    display: flex\n    .level-left,\n    .level-right\n      display: flex\n    .level-left + .level-right\n      margin-top: 0\n    .level-item\n      &:not(:last-child)\n        margin-bottom: 0\n        +ltr-property(\"margin\", $level-item-spacing)\n      &:not(.is-narrow)\n        flex-grow: 1\n  // Responsiveness\n  +tablet\n    display: flex\n    & > .level-item\n      &:not(.is-narrow)\n        flex-grow: 1\n\n.level-item\n  align-items: center\n  display: flex\n  flex-basis: auto\n  flex-grow: 0\n  flex-shrink: 0\n  justify-content: center\n  .title,\n  .subtitle\n    margin-bottom: 0\n  // Responsiveness\n  +mobile\n    &:not(:last-child)\n      margin-bottom: $level-item-spacing\n\n.level-left,\n.level-right\n  flex-basis: auto\n  flex-grow: 0\n  flex-shrink: 0\n  .level-item\n    // Modifiers\n    &.is-flexible\n      flex-grow: 1\n    // Responsiveness\n    +tablet\n      &:not(:last-child)\n        +ltr-property(\"margin\", $level-item-spacing)\n\n.level-left\n  align-items: center\n  justify-content: flex-start\n  // Responsiveness\n  +mobile\n    & + .level-right\n      margin-top: 1.5rem\n  +tablet\n    display: flex\n\n.level-right\n  align-items: center\n  justify-content: flex-end\n  // Responsiveness\n  +tablet\n    display: flex\n","@import \"../utilities/mixins\"\n\n$media-border-color: bulmaRgba($border, 0.5) !default\n$media-border-size: 1px !default\n$media-spacing: 1rem !default\n$media-spacing-large: 1.5rem !default\n$media-content-spacing: 0.75rem !default\n$media-level-1-spacing: 0.75rem !default\n$media-level-1-content-spacing: 0.5rem !default\n$media-level-2-spacing: 0.5rem !default\n\n.media\n  align-items: flex-start\n  display: flex\n  text-align: inherit\n  .content:not(:last-child)\n    margin-bottom: $media-content-spacing\n  .media\n    border-top: $media-border-size solid $media-border-color\n    display: flex\n    padding-top: $media-level-1-spacing\n    .content:not(:last-child),\n    .control:not(:last-child)\n      margin-bottom: $media-level-1-content-spacing\n    .media\n      padding-top: $media-level-2-spacing\n      & + .media\n        margin-top: $media-level-2-spacing\n  & + .media\n    border-top: $media-border-size solid $media-border-color\n    margin-top: $media-spacing\n    padding-top: $media-spacing\n  // Sizes\n  &.is-large\n    & + .media\n      margin-top: $media-spacing-large\n      padding-top: $media-spacing-large\n\n.media-left,\n.media-right\n  flex-basis: auto\n  flex-grow: 0\n  flex-shrink: 0\n\n.media-left\n  +ltr-property(\"margin\", $media-spacing)\n\n.media-right\n  +ltr-property(\"margin\", $media-spacing, false)\n\n.media-content\n  flex-basis: auto\n  flex-grow: 1\n  flex-shrink: 1\n  text-align: inherit\n\n+mobile\n  .media-content\n    overflow-x: auto\n","@import \"../utilities/mixins\"\n\n$menu-item-color: $text !default\n$menu-item-radius: $radius-small !default\n$menu-item-hover-color: $text-strong !default\n$menu-item-hover-background-color: $background !default\n$menu-item-active-color: $link-invert !default\n$menu-item-active-background-color: $link !default\n\n$menu-list-border-left: 1px solid $border !default\n$menu-list-line-height: 1.25 !default\n$menu-list-link-padding: 0.5em 0.75em !default\n$menu-nested-list-margin: 0.75em !default\n$menu-nested-list-padding-left: 0.75em !default\n\n$menu-label-color: $text-light !default\n$menu-label-font-size: 0.75em !default\n$menu-label-letter-spacing: 0.1em !default\n$menu-label-spacing: 1em !default\n\n.menu\n  font-size: $size-normal\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n\n.menu-list\n  line-height: $menu-list-line-height\n  a\n    border-radius: $menu-item-radius\n    color: $menu-item-color\n    display: block\n    padding: $menu-list-link-padding\n    &:hover\n      background-color: $menu-item-hover-background-color\n      color: $menu-item-hover-color\n    // Modifiers\n    &.is-active\n      background-color: $menu-item-active-background-color\n      color: $menu-item-active-color\n  li\n    ul\n      +ltr-property(\"border\", $menu-list-border-left, false)\n      margin: $menu-nested-list-margin\n      +ltr-property(\"padding\", $menu-nested-list-padding-left, false)\n\n.menu-label\n  color: $menu-label-color\n  font-size: $menu-label-font-size\n  letter-spacing: $menu-label-letter-spacing\n  text-transform: uppercase\n  &:not(:first-child)\n    margin-top: $menu-label-spacing\n  &:not(:last-child)\n    margin-bottom: $menu-label-spacing\n","@import \"../utilities/mixins\"\n\n$message-background-color: $background !default\n$message-radius: $radius !default\n\n$message-header-background-color: $text !default\n$message-header-color: $text-invert !default\n$message-header-weight: $weight-bold !default\n$message-header-padding: 0.75em 1em !default\n$message-header-radius: $radius !default\n\n$message-body-border-color: $border !default\n$message-body-border-width: 0 0 0 4px !default\n$message-body-color: $text !default\n$message-body-padding: 1.25em 1.5em !default\n$message-body-radius: $radius !default\n\n$message-body-pre-background-color: $scheme-main !default\n$message-body-pre-code-background-color: transparent !default\n\n$message-header-body-border-width: 0 !default\n$message-colors: $colors !default\n\n.message\n  @extend %block\n  background-color: $message-background-color\n  border-radius: $message-radius\n  font-size: $size-normal\n  strong\n    color: currentColor\n  a:not(.button):not(.tag):not(.dropdown-item)\n    color: currentColor\n    text-decoration: underline\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n  // Colors\n  @each $name, $components in $message-colors\n    $color: nth($components, 1)\n    $color-invert: nth($components, 2)\n    $color-light: null\n    $color-dark: null\n\n    @if length($components) >= 3\n      $color-light: nth($components, 3)\n      @if length($components) >= 4\n        $color-dark: nth($components, 4)\n      @else\n        $color-luminance: colorLuminance($color)\n        $darken-percentage: $color-luminance * 70%\n        $desaturate-percentage: $color-luminance * 30%\n        $color-dark: desaturate(darken($color, $darken-percentage), $desaturate-percentage)\n    @else\n      $color-lightning: max((100% - lightness($color)) - 2%, 0%)\n      $color-light: lighten($color, $color-lightning)\n\n    &.is-#{$name}\n      background-color: $color-light\n      .message-header\n        background-color: $color\n        color: $color-invert\n      .message-body\n        border-color: $color\n        color: $color-dark\n\n.message-header\n  align-items: center\n  background-color: $message-header-background-color\n  border-radius: $message-header-radius $message-header-radius 0 0\n  color: $message-header-color\n  display: flex\n  font-weight: $message-header-weight\n  justify-content: space-between\n  line-height: 1.25\n  padding: $message-header-padding\n  position: relative\n  .delete\n    flex-grow: 0\n    flex-shrink: 0\n    +ltr-property(\"margin\", 0.75em, false)\n  & + .message-body\n    border-width: $message-header-body-border-width\n    border-top-left-radius: 0\n    border-top-right-radius: 0\n\n.message-body\n  border-color: $message-body-border-color\n  border-radius: $message-body-radius\n  border-style: solid\n  border-width: $message-body-border-width\n  color: $message-body-color\n  padding: $message-body-padding\n  code,\n  pre\n    background-color: $message-body-pre-background-color\n  pre code\n    background-color: $message-body-pre-code-background-color\n","@import \"../utilities/mixins\"\n\n$modal-z: 40 !default\n\n$modal-background-background-color: bulmaRgba($scheme-invert, 0.86) !default\n\n$modal-content-width: 640px !default\n$modal-content-margin-mobile: 20px !default\n$modal-content-spacing-mobile: 160px !default\n$modal-content-spacing-tablet: 40px !default\n\n$modal-close-dimensions: 40px !default\n$modal-close-right: 20px !default\n$modal-close-top: 20px !default\n\n$modal-card-spacing: 40px !default\n\n$modal-card-head-background-color: $background !default\n$modal-card-head-border-bottom: 1px solid $border !default\n$modal-card-head-padding: 20px !default\n$modal-card-head-radius: $radius-large !default\n\n$modal-card-title-color: $text-strong !default\n$modal-card-title-line-height: 1 !default\n$modal-card-title-size: $size-4 !default\n\n$modal-card-foot-radius: $radius-large !default\n$modal-card-foot-border-top: 1px solid $border !default\n\n$modal-card-body-background-color: $scheme-main !default\n$modal-card-body-padding: 20px !default\n\n$modal-breakpoint: $tablet !default\n\n.modal\n  @extend %overlay\n  align-items: center\n  display: none\n  flex-direction: column\n  justify-content: center\n  overflow: hidden\n  position: fixed\n  z-index: $modal-z\n  // Modifiers\n  &.is-active\n    display: flex\n\n.modal-background\n  @extend %overlay\n  background-color: $modal-background-background-color\n\n.modal-content,\n.modal-card\n  margin: 0 $modal-content-margin-mobile\n  max-height: calc(100vh - #{$modal-content-spacing-mobile})\n  overflow: auto\n  position: relative\n  width: 100%\n  // Responsiveness\n  +from($modal-breakpoint)\n    margin: 0 auto\n    max-height: calc(100vh - #{$modal-content-spacing-tablet})\n    width: $modal-content-width\n\n.modal-close\n  @extend %delete\n  background: none\n  height: $modal-close-dimensions\n  position: fixed\n  +ltr-position($modal-close-right)\n  top: $modal-close-top\n  width: $modal-close-dimensions\n\n.modal-card\n  display: flex\n  flex-direction: column\n  max-height: calc(100vh - #{$modal-card-spacing})\n  overflow: hidden\n  -ms-overflow-y: visible\n\n.modal-card-head,\n.modal-card-foot\n  align-items: center\n  background-color: $modal-card-head-background-color\n  display: flex\n  flex-shrink: 0\n  justify-content: flex-start\n  padding: $modal-card-head-padding\n  position: relative\n\n.modal-card-head\n  border-bottom: $modal-card-head-border-bottom\n  border-top-left-radius: $modal-card-head-radius\n  border-top-right-radius: $modal-card-head-radius\n\n.modal-card-title\n  color: $modal-card-title-color\n  flex-grow: 1\n  flex-shrink: 0\n  font-size: $modal-card-title-size\n  line-height: $modal-card-title-line-height\n\n.modal-card-foot\n  border-bottom-left-radius: $modal-card-foot-radius\n  border-bottom-right-radius: $modal-card-foot-radius\n  border-top: $modal-card-foot-border-top\n  .button\n    &:not(:last-child)\n      +ltr-property(\"margin\", 0.5em)\n\n.modal-card-body\n  +overflow-touch\n  background-color: $modal-card-body-background-color\n  flex-grow: 1\n  flex-shrink: 1\n  overflow: auto\n  padding: $modal-card-body-padding\n","@import \"../utilities/mixins\"\n\n$navbar-background-color: $scheme-main !default\n$navbar-box-shadow-size: 0 2px 0 0 !default\n$navbar-box-shadow-color: $background !default\n$navbar-height: 3.25rem !default\n$navbar-padding-vertical: 1rem !default\n$navbar-padding-horizontal: 2rem !default\n$navbar-z: 30 !default\n$navbar-fixed-z: 30 !default\n\n$navbar-item-color: $text !default\n$navbar-item-hover-color: $link !default\n$navbar-item-hover-background-color: $scheme-main-bis !default\n$navbar-item-active-color: $scheme-invert !default\n$navbar-item-active-background-color: transparent !default\n$navbar-item-img-max-height: 1.75rem !default\n\n$navbar-burger-color: $navbar-item-color !default\n\n$navbar-tab-hover-background-color: transparent !default\n$navbar-tab-hover-border-bottom-color: $link !default\n$navbar-tab-active-color: $link !default\n$navbar-tab-active-background-color: transparent !default\n$navbar-tab-active-border-bottom-color: $link !default\n$navbar-tab-active-border-bottom-style: solid !default\n$navbar-tab-active-border-bottom-width: 3px !default\n\n$navbar-dropdown-background-color: $scheme-main !default\n$navbar-dropdown-border-top: 2px solid $border !default\n$navbar-dropdown-offset: -4px !default\n$navbar-dropdown-arrow: $link !default\n$navbar-dropdown-radius: $radius-large !default\n$navbar-dropdown-z: 20 !default\n\n$navbar-dropdown-boxed-radius: $radius-large !default\n$navbar-dropdown-boxed-shadow: 0 8px 8px bulmaRgba($scheme-invert, 0.1), 0 0 0 1px bulmaRgba($scheme-invert, 0.1) !default\n\n$navbar-dropdown-item-hover-color: $scheme-invert !default\n$navbar-dropdown-item-hover-background-color: $background !default\n$navbar-dropdown-item-active-color: $link !default\n$navbar-dropdown-item-active-background-color: $background !default\n\n$navbar-divider-background-color: $background !default\n$navbar-divider-height: 2px !default\n\n$navbar-bottom-box-shadow-size: 0 -2px 0 0 !default\n\n$navbar-breakpoint: $desktop !default\n\n$navbar-colors: $colors !default\n\n=navbar-fixed\n  left: 0\n  position: fixed\n  right: 0\n  z-index: $navbar-fixed-z\n\n.navbar\n  background-color: $navbar-background-color\n  min-height: $navbar-height\n  position: relative\n  z-index: $navbar-z\n  @each $name, $pair in $navbar-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      color: $color-invert\n      .navbar-brand\n        & > .navbar-item,\n        .navbar-link\n          color: $color-invert\n        & > a.navbar-item,\n        .navbar-link\n          &:focus,\n          &:hover,\n          &.is-active\n            background-color: bulmaDarken($color, 5%)\n            color: $color-invert\n        .navbar-link\n          &::after\n            border-color: $color-invert\n      .navbar-burger\n        color: $color-invert\n      +from($navbar-breakpoint)\n        .navbar-start,\n        .navbar-end\n          & > .navbar-item,\n          .navbar-link\n            color: $color-invert\n          & > a.navbar-item,\n          .navbar-link\n            &:focus,\n            &:hover,\n            &.is-active\n              background-color: bulmaDarken($color, 5%)\n              color: $color-invert\n          .navbar-link\n            &::after\n              border-color: $color-invert\n        .navbar-item.has-dropdown:focus .navbar-link,\n        .navbar-item.has-dropdown:hover .navbar-link,\n        .navbar-item.has-dropdown.is-active .navbar-link\n          background-color: bulmaDarken($color, 5%)\n          color: $color-invert\n        .navbar-dropdown\n          a.navbar-item\n            &.is-active\n              background-color: $color\n              color: $color-invert\n  & > .container\n    align-items: stretch\n    display: flex\n    min-height: $navbar-height\n    width: 100%\n  &.has-shadow\n    box-shadow: $navbar-box-shadow-size $navbar-box-shadow-color\n  &.is-fixed-bottom,\n  &.is-fixed-top\n    +navbar-fixed\n  &.is-fixed-bottom\n    bottom: 0\n    &.has-shadow\n      box-shadow: $navbar-bottom-box-shadow-size $navbar-box-shadow-color\n  &.is-fixed-top\n    top: 0\n\nhtml,\nbody\n  &.has-navbar-fixed-top\n    padding-top: $navbar-height\n  &.has-navbar-fixed-bottom\n    padding-bottom: $navbar-height\n\n.navbar-brand,\n.navbar-tabs\n  align-items: stretch\n  display: flex\n  flex-shrink: 0\n  min-height: $navbar-height\n\n.navbar-brand\n  a.navbar-item\n    &:focus,\n    &:hover\n      background-color: transparent\n\n.navbar-tabs\n  +overflow-touch\n  max-width: 100vw\n  overflow-x: auto\n  overflow-y: hidden\n\n.navbar-burger\n  @extend %reset\n  color: $navbar-burger-color\n  +hamburger($navbar-height)\n  +ltr-property(\"margin\", auto, false)\n\n.navbar-menu\n  display: none\n\n.navbar-item,\n.navbar-link\n  color: $navbar-item-color\n  display: block\n  line-height: 1.5\n  padding: 0.5rem 0.75rem\n  position: relative\n  .icon\n    &:only-child\n      margin-left: -0.25rem\n      margin-right: -0.25rem\n\na.navbar-item,\n.navbar-link\n  cursor: pointer\n  &:focus,\n  &:focus-within,\n  &:hover,\n  &.is-active\n    background-color: $navbar-item-hover-background-color\n    color: $navbar-item-hover-color\n\n.navbar-item\n  flex-grow: 0\n  flex-shrink: 0\n  img\n    max-height: $navbar-item-img-max-height\n  &.has-dropdown\n    padding: 0\n  &.is-expanded\n    flex-grow: 1\n    flex-shrink: 1\n  &.is-tab\n    border-bottom: 1px solid transparent\n    min-height: $navbar-height\n    padding-bottom: calc(0.5rem - 1px)\n    &:focus,\n    &:hover\n      background-color: $navbar-tab-hover-background-color\n      border-bottom-color: $navbar-tab-hover-border-bottom-color\n    &.is-active\n      background-color: $navbar-tab-active-background-color\n      border-bottom-color: $navbar-tab-active-border-bottom-color\n      border-bottom-style: $navbar-tab-active-border-bottom-style\n      border-bottom-width: $navbar-tab-active-border-bottom-width\n      color: $navbar-tab-active-color\n      padding-bottom: calc(0.5rem - #{$navbar-tab-active-border-bottom-width})\n\n.navbar-content\n  flex-grow: 1\n  flex-shrink: 1\n\n.navbar-link:not(.is-arrowless)\n  +ltr-property(\"padding\", 2.5em)\n  &::after\n    @extend %arrow\n    border-color: $navbar-dropdown-arrow\n    margin-top: -0.375em\n    +ltr-position(1.125em)\n\n.navbar-dropdown\n  font-size: 0.875rem\n  padding-bottom: 0.5rem\n  padding-top: 0.5rem\n  .navbar-item\n    padding-left: 1.5rem\n    padding-right: 1.5rem\n\n.navbar-divider\n  background-color: $navbar-divider-background-color\n  border: none\n  display: none\n  height: $navbar-divider-height\n  margin: 0.5rem 0\n\n+until($navbar-breakpoint)\n  .navbar > .container\n    display: block\n  .navbar-brand,\n  .navbar-tabs\n    .navbar-item\n      align-items: center\n      display: flex\n  .navbar-link\n    &::after\n      display: none\n  .navbar-menu\n    background-color: $navbar-background-color\n    box-shadow: 0 8px 16px bulmaRgba($scheme-invert, 0.1)\n    padding: 0.5rem 0\n    &.is-active\n      display: block\n  // Fixed navbar\n  .navbar\n    &.is-fixed-bottom-touch,\n    &.is-fixed-top-touch\n      +navbar-fixed\n    &.is-fixed-bottom-touch\n      bottom: 0\n      &.has-shadow\n        box-shadow: 0 -2px 3px bulmaRgba($scheme-invert, 0.1)\n    &.is-fixed-top-touch\n      top: 0\n    &.is-fixed-top,\n    &.is-fixed-top-touch\n      .navbar-menu\n        +overflow-touch\n        max-height: calc(100vh - #{$navbar-height})\n        overflow: auto\n  html,\n  body\n    &.has-navbar-fixed-top-touch\n      padding-top: $navbar-height\n    &.has-navbar-fixed-bottom-touch\n      padding-bottom: $navbar-height\n\n+from($navbar-breakpoint)\n  .navbar,\n  .navbar-menu,\n  .navbar-start,\n  .navbar-end\n    align-items: stretch\n    display: flex\n  .navbar\n    min-height: $navbar-height\n    &.is-spaced\n      padding: $navbar-padding-vertical $navbar-padding-horizontal\n      .navbar-start,\n      .navbar-end\n        align-items: center\n      a.navbar-item,\n      .navbar-link\n        border-radius: $radius\n    &.is-transparent\n      a.navbar-item,\n      .navbar-link\n        &:focus,\n        &:hover,\n        &.is-active\n          background-color: transparent !important\n      .navbar-item.has-dropdown\n        &.is-active,\n        &.is-hoverable:focus,\n        &.is-hoverable:focus-within,\n        &.is-hoverable:hover\n          .navbar-link\n            background-color: transparent !important\n      .navbar-dropdown\n        a.navbar-item\n          &:focus,\n          &:hover\n            background-color: $navbar-dropdown-item-hover-background-color\n            color: $navbar-dropdown-item-hover-color\n          &.is-active\n            background-color: $navbar-dropdown-item-active-background-color\n            color: $navbar-dropdown-item-active-color\n  .navbar-burger\n    display: none\n  .navbar-item,\n  .navbar-link\n    align-items: center\n    display: flex\n  .navbar-item\n    &.has-dropdown\n      align-items: stretch\n    &.has-dropdown-up\n      .navbar-link::after\n        transform: rotate(135deg) translate(0.25em, -0.25em)\n      .navbar-dropdown\n        border-bottom: $navbar-dropdown-border-top\n        border-radius: $navbar-dropdown-radius $navbar-dropdown-radius 0 0\n        border-top: none\n        bottom: 100%\n        box-shadow: 0 -8px 8px bulmaRgba($scheme-invert, 0.1)\n        top: auto\n    &.is-active,\n    &.is-hoverable:focus,\n    &.is-hoverable:focus-within,\n    &.is-hoverable:hover\n      .navbar-dropdown\n        display: block\n        .navbar.is-spaced &,\n        &.is-boxed\n          opacity: 1\n          pointer-events: auto\n          transform: translateY(0)\n  .navbar-menu\n    flex-grow: 1\n    flex-shrink: 0\n  .navbar-start\n    justify-content: flex-start\n    +ltr-property(\"margin\", auto)\n  .navbar-end\n    justify-content: flex-end\n    +ltr-property(\"margin\", auto, false)\n  .navbar-dropdown\n    background-color: $navbar-dropdown-background-color\n    border-bottom-left-radius: $navbar-dropdown-radius\n    border-bottom-right-radius: $navbar-dropdown-radius\n    border-top: $navbar-dropdown-border-top\n    box-shadow: 0 8px 8px bulmaRgba($scheme-invert, 0.1)\n    display: none\n    font-size: 0.875rem\n    +ltr-position(0, false)\n    min-width: 100%\n    position: absolute\n    top: 100%\n    z-index: $navbar-dropdown-z\n    .navbar-item\n      padding: 0.375rem 1rem\n      white-space: nowrap\n    a.navbar-item\n      +ltr-property(\"padding\", 3rem)\n      &:focus,\n      &:hover\n        background-color: $navbar-dropdown-item-hover-background-color\n        color: $navbar-dropdown-item-hover-color\n      &.is-active\n        background-color: $navbar-dropdown-item-active-background-color\n        color: $navbar-dropdown-item-active-color\n    .navbar.is-spaced &,\n    &.is-boxed\n      border-radius: $navbar-dropdown-boxed-radius\n      border-top: none\n      box-shadow: $navbar-dropdown-boxed-shadow\n      display: block\n      opacity: 0\n      pointer-events: none\n      top: calc(100% + (#{$navbar-dropdown-offset}))\n      transform: translateY(-5px)\n      transition-duration: $speed\n      transition-property: opacity, transform\n    &.is-right\n      left: auto\n      right: 0\n  .navbar-divider\n    display: block\n  .navbar > .container,\n  .container > .navbar\n    .navbar-brand\n      +ltr-property(\"margin\", -.75rem, false)\n    .navbar-menu\n      +ltr-property(\"margin\", -.75rem)\n  // Fixed navbar\n  .navbar\n    &.is-fixed-bottom-desktop,\n    &.is-fixed-top-desktop\n      +navbar-fixed\n    &.is-fixed-bottom-desktop\n      bottom: 0\n      &.has-shadow\n        box-shadow: 0 -2px 3px bulmaRgba($scheme-invert, 0.1)\n    &.is-fixed-top-desktop\n      top: 0\n  html,\n  body\n    &.has-navbar-fixed-top-desktop\n      padding-top: $navbar-height\n    &.has-navbar-fixed-bottom-desktop\n      padding-bottom: $navbar-height\n    &.has-spaced-navbar-fixed-top\n      padding-top: $navbar-height + ($navbar-padding-vertical * 2)\n    &.has-spaced-navbar-fixed-bottom\n      padding-bottom: $navbar-height + ($navbar-padding-vertical * 2)\n  // Hover/Active states\n  a.navbar-item,\n  .navbar-link\n    &.is-active\n      color: $navbar-item-active-color\n    &.is-active:not(:focus):not(:hover)\n      background-color: $navbar-item-active-background-color\n  .navbar-item.has-dropdown\n    &:focus,\n    &:hover,\n    &.is-active\n      .navbar-link\n        background-color: $navbar-item-hover-background-color\n\n// Combination\n\n.hero\n  &.is-fullheight-with-navbar\n    min-height: calc(100vh - #{$navbar-height})\n","@import \"../utilities/controls\"\n@import \"../utilities/mixins\"\n\n$pagination-color: $text-strong !default\n$pagination-border-color: $border !default\n$pagination-margin: -0.25rem !default\n$pagination-min-width: $control-height !default\n\n$pagination-item-font-size: 1em !default\n$pagination-item-margin: 0.25rem !default\n$pagination-item-padding-left: 0.5em !default\n$pagination-item-padding-right: 0.5em !default\n\n$pagination-nav-padding-left: 0.75em !default\n$pagination-nav-padding-right: 0.75em !default\n\n$pagination-hover-color: $link-hover !default\n$pagination-hover-border-color: $link-hover-border !default\n\n$pagination-focus-color: $link-focus !default\n$pagination-focus-border-color: $link-focus-border !default\n\n$pagination-active-color: $link-active !default\n$pagination-active-border-color: $link-active-border !default\n\n$pagination-disabled-color: $text-light !default\n$pagination-disabled-background-color: $border !default\n$pagination-disabled-border-color: $border !default\n\n$pagination-current-color: $link-invert !default\n$pagination-current-background-color: $link !default\n$pagination-current-border-color: $link !default\n\n$pagination-ellipsis-color: $grey-light !default\n\n$pagination-shadow-inset: inset 0 1px 2px rgba($scheme-invert, 0.2) !default\n\n.pagination\n  @extend %block\n  font-size: $size-normal\n  margin: $pagination-margin\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n  &.is-rounded\n    .pagination-previous,\n    .pagination-next\n      padding-left: 1em\n      padding-right: 1em\n      border-radius: $radius-rounded\n    .pagination-link\n      border-radius: $radius-rounded\n\n.pagination,\n.pagination-list\n  align-items: center\n  display: flex\n  justify-content: center\n  text-align: center\n\n.pagination-previous,\n.pagination-next,\n.pagination-link,\n.pagination-ellipsis\n  @extend %control\n  @extend %unselectable\n  font-size: $pagination-item-font-size\n  justify-content: center\n  margin: $pagination-item-margin\n  padding-left: $pagination-item-padding-left\n  padding-right: $pagination-item-padding-right\n  text-align: center\n\n.pagination-previous,\n.pagination-next,\n.pagination-link\n  border-color: $pagination-border-color\n  color: $pagination-color\n  min-width: $pagination-min-width\n  &:hover\n    border-color: $pagination-hover-border-color\n    color: $pagination-hover-color\n  &:focus\n    border-color: $pagination-focus-border-color\n  &:active\n    box-shadow: $pagination-shadow-inset\n  &[disabled],\n  &.is-disabled\n    background-color: $pagination-disabled-background-color\n    border-color: $pagination-disabled-border-color\n    box-shadow: none\n    color: $pagination-disabled-color\n    opacity: 0.5\n\n.pagination-previous,\n.pagination-next\n  padding-left: $pagination-nav-padding-left\n  padding-right: $pagination-nav-padding-right\n  white-space: nowrap\n\n.pagination-link\n  &.is-current\n    background-color: $pagination-current-background-color\n    border-color: $pagination-current-border-color\n    color: $pagination-current-color\n\n.pagination-ellipsis\n  color: $pagination-ellipsis-color\n  pointer-events: none\n\n.pagination-list\n  flex-wrap: wrap\n  li\n    list-style: none\n\n+mobile\n  .pagination\n    flex-wrap: wrap\n  .pagination-previous,\n  .pagination-next\n    flex-grow: 1\n    flex-shrink: 1\n  .pagination-list\n    li\n      flex-grow: 1\n      flex-shrink: 1\n\n+tablet\n  .pagination-list\n    flex-grow: 1\n    flex-shrink: 1\n    justify-content: flex-start\n    order: 1\n  .pagination-previous,\n  .pagination-next,\n  .pagination-link,\n  .pagination-ellipsis\n    margin-bottom: 0\n    margin-top: 0\n  .pagination-previous\n    order: 2\n  .pagination-next\n    order: 3\n  .pagination\n    justify-content: space-between\n    margin-bottom: 0\n    margin-top: 0\n    &.is-centered\n      .pagination-previous\n        order: 1\n      .pagination-list\n        justify-content: center\n        order: 2\n      .pagination-next\n        order: 3\n    &.is-right\n      .pagination-previous\n        order: 1\n      .pagination-next\n        order: 2\n      .pagination-list\n        justify-content: flex-end\n        order: 3\n","@import \"../utilities/mixins\"\n\n$panel-margin: $block-spacing !default\n$panel-item-border: 1px solid $border-light !default\n$panel-radius: $radius-large !default\n$panel-shadow: $shadow !default\n\n$panel-heading-background-color: $border-light !default\n$panel-heading-color: $text-strong !default\n$panel-heading-line-height: 1.25 !default\n$panel-heading-padding: 0.75em 1em !default\n$panel-heading-radius: $radius !default\n$panel-heading-size: 1.25em !default\n$panel-heading-weight: $weight-bold !default\n\n$panel-tabs-font-size: 0.875em !default\n$panel-tab-border-bottom: 1px solid $border !default\n$panel-tab-active-border-bottom-color: $link-active-border !default\n$panel-tab-active-color: $link-active !default\n\n$panel-list-item-color: $text !default\n$panel-list-item-hover-color: $link !default\n\n$panel-block-color: $text-strong !default\n$panel-block-hover-background-color: $background !default\n$panel-block-active-border-left-color: $link !default\n$panel-block-active-color: $link-active !default\n$panel-block-active-icon-color: $link !default\n\n$panel-icon-color: $text-light !default\n$panel-colors: $colors !default\n\n.panel\n  border-radius: $panel-radius\n  box-shadow: $panel-shadow\n  font-size: $size-normal\n  &:not(:last-child)\n    margin-bottom: $panel-margin\n  // Colors\n  @each $name, $components in $panel-colors\n    $color: nth($components, 1)\n    $color-invert: nth($components, 2)\n    &.is-#{$name}\n      .panel-heading\n        background-color: $color\n        color: $color-invert\n      .panel-tabs a.is-active\n        border-bottom-color: $color\n      .panel-block.is-active .panel-icon\n        color: $color\n\n.panel-tabs,\n.panel-block\n  &:not(:last-child)\n    border-bottom: $panel-item-border\n\n.panel-heading\n  background-color: $panel-heading-background-color\n  border-radius: $panel-radius $panel-radius 0 0\n  color: $panel-heading-color\n  font-size: $panel-heading-size\n  font-weight: $panel-heading-weight\n  line-height: $panel-heading-line-height\n  padding: $panel-heading-padding\n\n.panel-tabs\n  align-items: flex-end\n  display: flex\n  font-size: $panel-tabs-font-size\n  justify-content: center\n  a\n    border-bottom: $panel-tab-border-bottom\n    margin-bottom: -1px\n    padding: 0.5em\n    // Modifiers\n    &.is-active\n      border-bottom-color: $panel-tab-active-border-bottom-color\n      color: $panel-tab-active-color\n\n.panel-list\n  a\n    color: $panel-list-item-color\n    &:hover\n      color: $panel-list-item-hover-color\n\n.panel-block\n  align-items: center\n  color: $panel-block-color\n  display: flex\n  justify-content: flex-start\n  padding: 0.5em 0.75em\n  input[type=\"checkbox\"]\n    +ltr-property(\"margin\", 0.75em)\n  & > .control\n    flex-grow: 1\n    flex-shrink: 1\n    width: 100%\n  &.is-wrapped\n    flex-wrap: wrap\n  &.is-active\n    border-left-color: $panel-block-active-border-left-color\n    color: $panel-block-active-color\n    .panel-icon\n      color: $panel-block-active-icon-color\n  &:last-child\n    border-bottom-left-radius: $panel-radius\n    border-bottom-right-radius: $panel-radius\n\na.panel-block,\nlabel.panel-block\n  cursor: pointer\n  &:hover\n    background-color: $panel-block-hover-background-color\n\n.panel-icon\n  +fa(14px, 1em)\n  color: $panel-icon-color\n  +ltr-property(\"margin\", 0.75em)\n  .fa\n    font-size: inherit\n    line-height: inherit\n","@import \"../utilities/mixins\"\n\n$tabs-border-bottom-color: $border !default\n$tabs-border-bottom-style: solid !default\n$tabs-border-bottom-width: 1px !default\n$tabs-link-color: $text !default\n$tabs-link-hover-border-bottom-color: $text-strong !default\n$tabs-link-hover-color: $text-strong !default\n$tabs-link-active-border-bottom-color: $link !default\n$tabs-link-active-color: $link !default\n$tabs-link-padding: 0.5em 1em !default\n\n$tabs-boxed-link-radius: $radius !default\n$tabs-boxed-link-hover-background-color: $background !default\n$tabs-boxed-link-hover-border-bottom-color: $border !default\n\n$tabs-boxed-link-active-background-color: $scheme-main !default\n$tabs-boxed-link-active-border-color: $border !default\n$tabs-boxed-link-active-border-bottom-color: transparent !default\n\n$tabs-toggle-link-border-color: $border !default\n$tabs-toggle-link-border-style: solid !default\n$tabs-toggle-link-border-width: 1px !default\n$tabs-toggle-link-hover-background-color: $background !default\n$tabs-toggle-link-hover-border-color: $border-hover !default\n$tabs-toggle-link-radius: $radius !default\n$tabs-toggle-link-active-background-color: $link !default\n$tabs-toggle-link-active-border-color: $link !default\n$tabs-toggle-link-active-color: $link-invert !default\n\n.tabs\n  @extend %block\n  +overflow-touch\n  @extend %unselectable\n  align-items: stretch\n  display: flex\n  font-size: $size-normal\n  justify-content: space-between\n  overflow: hidden\n  overflow-x: auto\n  white-space: nowrap\n  a\n    align-items: center\n    border-bottom-color: $tabs-border-bottom-color\n    border-bottom-style: $tabs-border-bottom-style\n    border-bottom-width: $tabs-border-bottom-width\n    color: $tabs-link-color\n    display: flex\n    justify-content: center\n    margin-bottom: -#{$tabs-border-bottom-width}\n    padding: $tabs-link-padding\n    vertical-align: top\n    &:hover\n      border-bottom-color: $tabs-link-hover-border-bottom-color\n      color: $tabs-link-hover-color\n  li\n    display: block\n    &.is-active\n      a\n        border-bottom-color: $tabs-link-active-border-bottom-color\n        color: $tabs-link-active-color\n  ul\n    align-items: center\n    border-bottom-color: $tabs-border-bottom-color\n    border-bottom-style: $tabs-border-bottom-style\n    border-bottom-width: $tabs-border-bottom-width\n    display: flex\n    flex-grow: 1\n    flex-shrink: 0\n    justify-content: flex-start\n    &.is-left\n      padding-right: 0.75em\n    &.is-center\n      flex: none\n      justify-content: center\n      padding-left: 0.75em\n      padding-right: 0.75em\n    &.is-right\n      justify-content: flex-end\n      padding-left: 0.75em\n  .icon\n    &:first-child\n      +ltr-property(\"margin\", 0.5em)\n    &:last-child\n      +ltr-property(\"margin\", 0.5em, false)\n  // Alignment\n  &.is-centered\n    ul\n      justify-content: center\n  &.is-right\n    ul\n      justify-content: flex-end\n  // Styles\n  &.is-boxed\n    a\n      border: 1px solid transparent\n      +ltr\n        border-radius: $tabs-boxed-link-radius $tabs-boxed-link-radius 0 0\n      +rtl\n        border-radius: 0 0 $tabs-boxed-link-radius $tabs-boxed-link-radius\n      &:hover\n        background-color: $tabs-boxed-link-hover-background-color\n        border-bottom-color: $tabs-boxed-link-hover-border-bottom-color\n    li\n      &.is-active\n        a\n          background-color: $tabs-boxed-link-active-background-color\n          border-color: $tabs-boxed-link-active-border-color\n          border-bottom-color: $tabs-boxed-link-active-border-bottom-color !important\n  &.is-fullwidth\n    li\n      flex-grow: 1\n      flex-shrink: 0\n  &.is-toggle\n    a\n      border-color: $tabs-toggle-link-border-color\n      border-style: $tabs-toggle-link-border-style\n      border-width: $tabs-toggle-link-border-width\n      margin-bottom: 0\n      position: relative\n      &:hover\n        background-color: $tabs-toggle-link-hover-background-color\n        border-color: $tabs-toggle-link-hover-border-color\n        z-index: 2\n    li\n      & + li\n        +ltr-property(\"margin\", -#{$tabs-toggle-link-border-width}, false)\n      &:first-child a\n        +ltr\n          border-top-left-radius: $tabs-toggle-link-radius\n          border-bottom-left-radius: $tabs-toggle-link-radius\n        +rtl\n          border-top-right-radius: $tabs-toggle-link-radius\n          border-bottom-right-radius: $tabs-toggle-link-radius\n      &:last-child a\n        +ltr\n          border-top-right-radius: $tabs-toggle-link-radius\n          border-bottom-right-radius: $tabs-toggle-link-radius\n        +rtl\n          border-top-left-radius: $tabs-toggle-link-radius\n          border-bottom-left-radius: $tabs-toggle-link-radius\n      &.is-active\n        a\n          background-color: $tabs-toggle-link-active-background-color\n          border-color: $tabs-toggle-link-active-border-color\n          color: $tabs-toggle-link-active-color\n          z-index: 1\n    ul\n      border-bottom: none\n    &.is-toggle-rounded\n      li\n        &:first-child a\n          +ltr\n            border-bottom-left-radius: $radius-rounded\n            border-top-left-radius: $radius-rounded\n            padding-left: 1.25em\n          +rtl\n            border-bottom-right-radius: $radius-rounded\n            border-top-right-radius: $radius-rounded\n            padding-right: 1.25em\n        &:last-child a\n          +ltr\n            border-bottom-right-radius: $radius-rounded\n            border-top-right-radius: $radius-rounded\n            padding-right: 1.25em\n          +rtl\n            border-bottom-left-radius: $radius-rounded\n            border-top-left-radius: $radius-rounded\n            padding-left: 1.25em\n  // Sizes\n  &.is-small\n    font-size: $size-small\n  &.is-medium\n    font-size: $size-medium\n  &.is-large\n    font-size: $size-large\n","/* Bulma Grid */\n@charset \"utf-8\"\n\n@import \"columns\"\n@import \"tiles\"\n","@import \"../utilities/mixins\"\n\n$column-gap: 0.75rem !default\n\n.column\n  display: block\n  flex-basis: 0\n  flex-grow: 1\n  flex-shrink: 1\n  padding: $column-gap\n  .columns.is-mobile > &.is-narrow\n    flex: none\n    width: unset\n  .columns.is-mobile > &.is-full\n    flex: none\n    width: 100%\n  .columns.is-mobile > &.is-three-quarters\n    flex: none\n    width: 75%\n  .columns.is-mobile > &.is-two-thirds\n    flex: none\n    width: 66.6666%\n  .columns.is-mobile > &.is-half\n    flex: none\n    width: 50%\n  .columns.is-mobile > &.is-one-third\n    flex: none\n    width: 33.3333%\n  .columns.is-mobile > &.is-one-quarter\n    flex: none\n    width: 25%\n  .columns.is-mobile > &.is-one-fifth\n    flex: none\n    width: 20%\n  .columns.is-mobile > &.is-two-fifths\n    flex: none\n    width: 40%\n  .columns.is-mobile > &.is-three-fifths\n    flex: none\n    width: 60%\n  .columns.is-mobile > &.is-four-fifths\n    flex: none\n    width: 80%\n  .columns.is-mobile > &.is-offset-three-quarters\n    +ltr-property(\"margin\", 75%, false)\n  .columns.is-mobile > &.is-offset-two-thirds\n    +ltr-property(\"margin\", 66.6666%, false)\n  .columns.is-mobile > &.is-offset-half\n    +ltr-property(\"margin\", 50%, false)\n  .columns.is-mobile > &.is-offset-one-third\n    +ltr-property(\"margin\", 33.3333%, false)\n  .columns.is-mobile > &.is-offset-one-quarter\n    +ltr-property(\"margin\", 25%, false)\n  .columns.is-mobile > &.is-offset-one-fifth\n    +ltr-property(\"margin\", 20%, false)\n  .columns.is-mobile > &.is-offset-two-fifths\n    +ltr-property(\"margin\", 40%, false)\n  .columns.is-mobile > &.is-offset-three-fifths\n    +ltr-property(\"margin\", 60%, false)\n  .columns.is-mobile > &.is-offset-four-fifths\n    +ltr-property(\"margin\", 80%, false)\n  @for $i from 0 through 12\n    .columns.is-mobile > &.is-#{$i}\n      flex: none\n      width: percentage(divide($i, 12))\n    .columns.is-mobile > &.is-offset-#{$i}\n      +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +mobile\n    &.is-narrow-mobile\n      flex: none\n      width: unset\n    &.is-full-mobile\n      flex: none\n      width: 100%\n    &.is-three-quarters-mobile\n      flex: none\n      width: 75%\n    &.is-two-thirds-mobile\n      flex: none\n      width: 66.6666%\n    &.is-half-mobile\n      flex: none\n      width: 50%\n    &.is-one-third-mobile\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-mobile\n      flex: none\n      width: 25%\n    &.is-one-fifth-mobile\n      flex: none\n      width: 20%\n    &.is-two-fifths-mobile\n      flex: none\n      width: 40%\n    &.is-three-fifths-mobile\n      flex: none\n      width: 60%\n    &.is-four-fifths-mobile\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-mobile\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-mobile\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-mobile\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-mobile\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-mobile\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-mobile\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-mobile\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-mobile\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-mobile\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-mobile\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-mobile\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +tablet\n    &.is-narrow,\n    &.is-narrow-tablet\n      flex: none\n      width: unset\n    &.is-full,\n    &.is-full-tablet\n      flex: none\n      width: 100%\n    &.is-three-quarters,\n    &.is-three-quarters-tablet\n      flex: none\n      width: 75%\n    &.is-two-thirds,\n    &.is-two-thirds-tablet\n      flex: none\n      width: 66.6666%\n    &.is-half,\n    &.is-half-tablet\n      flex: none\n      width: 50%\n    &.is-one-third,\n    &.is-one-third-tablet\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter,\n    &.is-one-quarter-tablet\n      flex: none\n      width: 25%\n    &.is-one-fifth,\n    &.is-one-fifth-tablet\n      flex: none\n      width: 20%\n    &.is-two-fifths,\n    &.is-two-fifths-tablet\n      flex: none\n      width: 40%\n    &.is-three-fifths,\n    &.is-three-fifths-tablet\n      flex: none\n      width: 60%\n    &.is-four-fifths,\n    &.is-four-fifths-tablet\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters,\n    &.is-offset-three-quarters-tablet\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds,\n    &.is-offset-two-thirds-tablet\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half,\n    &.is-offset-half-tablet\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third,\n    &.is-offset-one-third-tablet\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter,\n    &.is-offset-one-quarter-tablet\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth,\n    &.is-offset-one-fifth-tablet\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths,\n    &.is-offset-two-fifths-tablet\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths,\n    &.is-offset-three-fifths-tablet\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths,\n    &.is-offset-four-fifths-tablet\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i},\n      &.is-#{$i}-tablet\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i},\n      &.is-offset-#{$i}-tablet\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +touch\n    &.is-narrow-touch\n      flex: none\n      width: unset\n    &.is-full-touch\n      flex: none\n      width: 100%\n    &.is-three-quarters-touch\n      flex: none\n      width: 75%\n    &.is-two-thirds-touch\n      flex: none\n      width: 66.6666%\n    &.is-half-touch\n      flex: none\n      width: 50%\n    &.is-one-third-touch\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-touch\n      flex: none\n      width: 25%\n    &.is-one-fifth-touch\n      flex: none\n      width: 20%\n    &.is-two-fifths-touch\n      flex: none\n      width: 40%\n    &.is-three-fifths-touch\n      flex: none\n      width: 60%\n    &.is-four-fifths-touch\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-touch\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-touch\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-touch\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-touch\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-touch\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-touch\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-touch\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-touch\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-touch\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-touch\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-touch\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +desktop\n    &.is-narrow-desktop\n      flex: none\n      width: unset\n    &.is-full-desktop\n      flex: none\n      width: 100%\n    &.is-three-quarters-desktop\n      flex: none\n      width: 75%\n    &.is-two-thirds-desktop\n      flex: none\n      width: 66.6666%\n    &.is-half-desktop\n      flex: none\n      width: 50%\n    &.is-one-third-desktop\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-desktop\n      flex: none\n      width: 25%\n    &.is-one-fifth-desktop\n      flex: none\n      width: 20%\n    &.is-two-fifths-desktop\n      flex: none\n      width: 40%\n    &.is-three-fifths-desktop\n      flex: none\n      width: 60%\n    &.is-four-fifths-desktop\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-desktop\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-desktop\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-desktop\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-desktop\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-desktop\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-desktop\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-desktop\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-desktop\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-desktop\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-desktop\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-desktop\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +widescreen\n    &.is-narrow-widescreen\n      flex: none\n      width: unset\n    &.is-full-widescreen\n      flex: none\n      width: 100%\n    &.is-three-quarters-widescreen\n      flex: none\n      width: 75%\n    &.is-two-thirds-widescreen\n      flex: none\n      width: 66.6666%\n    &.is-half-widescreen\n      flex: none\n      width: 50%\n    &.is-one-third-widescreen\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-widescreen\n      flex: none\n      width: 25%\n    &.is-one-fifth-widescreen\n      flex: none\n      width: 20%\n    &.is-two-fifths-widescreen\n      flex: none\n      width: 40%\n    &.is-three-fifths-widescreen\n      flex: none\n      width: 60%\n    &.is-four-fifths-widescreen\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-widescreen\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-widescreen\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-widescreen\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-widescreen\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-widescreen\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-widescreen\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-widescreen\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-widescreen\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-widescreen\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-widescreen\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-widescreen\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n  +fullhd\n    &.is-narrow-fullhd\n      flex: none\n      width: unset\n    &.is-full-fullhd\n      flex: none\n      width: 100%\n    &.is-three-quarters-fullhd\n      flex: none\n      width: 75%\n    &.is-two-thirds-fullhd\n      flex: none\n      width: 66.6666%\n    &.is-half-fullhd\n      flex: none\n      width: 50%\n    &.is-one-third-fullhd\n      flex: none\n      width: 33.3333%\n    &.is-one-quarter-fullhd\n      flex: none\n      width: 25%\n    &.is-one-fifth-fullhd\n      flex: none\n      width: 20%\n    &.is-two-fifths-fullhd\n      flex: none\n      width: 40%\n    &.is-three-fifths-fullhd\n      flex: none\n      width: 60%\n    &.is-four-fifths-fullhd\n      flex: none\n      width: 80%\n    &.is-offset-three-quarters-fullhd\n      +ltr-property(\"margin\", 75%, false)\n    &.is-offset-two-thirds-fullhd\n      +ltr-property(\"margin\", 66.6666%, false)\n    &.is-offset-half-fullhd\n      +ltr-property(\"margin\", 50%, false)\n    &.is-offset-one-third-fullhd\n      +ltr-property(\"margin\", 33.3333%, false)\n    &.is-offset-one-quarter-fullhd\n      +ltr-property(\"margin\", 25%, false)\n    &.is-offset-one-fifth-fullhd\n      +ltr-property(\"margin\", 20%, false)\n    &.is-offset-two-fifths-fullhd\n      +ltr-property(\"margin\", 40%, false)\n    &.is-offset-three-fifths-fullhd\n      +ltr-property(\"margin\", 60%, false)\n    &.is-offset-four-fifths-fullhd\n      +ltr-property(\"margin\", 80%, false)\n    @for $i from 0 through 12\n      &.is-#{$i}-fullhd\n        flex: none\n        width: percentage(divide($i, 12))\n      &.is-offset-#{$i}-fullhd\n        +ltr-property(\"margin\", percentage(divide($i, 12)), false)\n\n.columns\n  +ltr-property(\"margin\", (-$column-gap), false)\n  +ltr-property(\"margin\", (-$column-gap))\n  margin-top: (-$column-gap)\n  &:last-child\n    margin-bottom: (-$column-gap)\n  &:not(:last-child)\n    margin-bottom: calc(1.5rem - #{$column-gap})\n  // Modifiers\n  &.is-centered\n    justify-content: center\n  &.is-gapless\n    +ltr-property(\"margin\", 0, false)\n    +ltr-property(\"margin\", 0)\n    margin-top: 0\n    & > .column\n      margin: 0\n      padding: 0 !important\n    &:not(:last-child)\n      margin-bottom: 1.5rem\n    &:last-child\n      margin-bottom: 0\n  &.is-mobile\n    display: flex\n  &.is-multiline\n    flex-wrap: wrap\n  &.is-vcentered\n    align-items: center\n  // Responsiveness\n  +tablet\n    &:not(.is-desktop)\n      display: flex\n  +desktop\n    // Modifiers\n    &.is-desktop\n      display: flex\n\n@if $variable-columns\n  .columns.is-variable\n    --columnGap: 0.75rem\n    +ltr-property(\"margin\", calc(-1 * var(--columnGap)), false)\n    +ltr-property(\"margin\", calc(-1 * var(--columnGap)))\n    > .column\n      padding-left: var(--columnGap)\n      padding-right: var(--columnGap)\n    @for $i from 0 through 8\n      &.is-#{$i}\n        --columnGap: #{$i * 0.25rem}\n      +mobile\n        &.is-#{$i}-mobile\n          --columnGap: #{$i * 0.25rem}\n      +tablet\n        &.is-#{$i}-tablet\n          --columnGap: #{$i * 0.25rem}\n      +tablet-only\n        &.is-#{$i}-tablet-only\n          --columnGap: #{$i * 0.25rem}\n      +touch\n        &.is-#{$i}-touch\n          --columnGap: #{$i * 0.25rem}\n      +desktop\n        &.is-#{$i}-desktop\n          --columnGap: #{$i * 0.25rem}\n      +desktop-only\n        &.is-#{$i}-desktop-only\n          --columnGap: #{$i * 0.25rem}\n      +widescreen\n        &.is-#{$i}-widescreen\n          --columnGap: #{$i * 0.25rem}\n      +widescreen-only\n        &.is-#{$i}-widescreen-only\n          --columnGap: #{$i * 0.25rem}\n      +fullhd\n        &.is-#{$i}-fullhd\n          --columnGap: #{$i * 0.25rem}\n","@import \"../utilities/mixins\"\n\n$tile-spacing: 0.75rem !default\n\n.tile\n  align-items: stretch\n  display: block\n  flex-basis: 0\n  flex-grow: 1\n  flex-shrink: 1\n  min-height: min-content\n  // Modifiers\n  &.is-ancestor\n    margin-left: $tile-spacing * -1\n    margin-right: $tile-spacing * -1\n    margin-top: $tile-spacing * -1\n    &:last-child\n      margin-bottom: $tile-spacing * -1\n    &:not(:last-child)\n      margin-bottom: $tile-spacing\n  &.is-child\n    margin: 0 !important\n  &.is-parent\n    padding: $tile-spacing\n  &.is-vertical\n    flex-direction: column\n    & > .tile.is-child:not(:last-child)\n      margin-bottom: 1.5rem !important\n  // Responsiveness\n  +tablet\n    &:not(.is-child)\n      display: flex\n    @for $i from 1 through 12\n      &.is-#{$i}\n        flex: none\n        width: (divide($i, 12)) * 100%\n","/* Bulma Helpers */\n@charset \"utf-8\"\n\n@import \"color\"\n@import \"flexbox\"\n@import \"float\"\n@import \"other\"\n@import \"overflow\"\n@import \"position\"\n@import \"spacing\"\n@import \"typography\"\n@import \"visibility\"\n","@import \"../utilities/derived-variables\"\n\n@each $name, $pair in $colors\n  $color: nth($pair, 1)\n  .has-text-#{$name}\n    color: $color !important\n  a.has-text-#{$name}\n    &:hover,\n    &:focus\n      color: bulmaDarken($color, 10%) !important\n  .has-background-#{$name}\n    background-color: $color !important\n  @if length($pair) >= 4\n    $color-light: nth($pair, 3)\n    $color-dark: nth($pair, 4)\n    // Light\n    .has-text-#{$name}-light\n      color: $color-light !important\n    a.has-text-#{$name}-light\n      &:hover,\n      &:focus\n        color: bulmaDarken($color-light, 10%) !important\n    .has-background-#{$name}-light\n      background-color: $color-light !important\n    // Dark\n    .has-text-#{$name}-dark\n      color: $color-dark !important\n    a.has-text-#{$name}-dark\n      &:hover,\n      &:focus\n        color: bulmaLighten($color-dark, 10%) !important\n    .has-background-#{$name}-dark\n      background-color: $color-dark !important\n\n@each $name, $shade in $shades\n  .has-text-#{$name}\n    color: $shade !important\n  .has-background-#{$name}\n    background-color: $shade !important\n","$flex-direction-values: row, row-reverse, column, column-reverse\n@each $value in $flex-direction-values\n  .is-flex-direction-#{$value}\n    flex-direction: $value !important\n\n$flex-wrap-values: nowrap, wrap, wrap-reverse\n@each $value in $flex-wrap-values\n  .is-flex-wrap-#{$value}\n    flex-wrap: $value !important\n\n$justify-content-values: flex-start, flex-end, center, space-between, space-around, space-evenly, start, end, left, right\n@each $value in $justify-content-values\n  .is-justify-content-#{$value}\n    justify-content: $value !important\n\n$align-content-values: flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, start, end, baseline\n@each $value in $align-content-values\n  .is-align-content-#{$value}\n    align-content: $value !important\n\n$align-items-values: stretch, flex-start, flex-end, center, baseline, start, end, self-start, self-end\n@each $value in $align-items-values\n  .is-align-items-#{$value}\n    align-items: $value !important\n\n$align-self-values: auto, flex-start, flex-end, center, baseline, stretch\n@each $value in $align-self-values\n  .is-align-self-#{$value}\n    align-self: $value !important\n\n$flex-operators: grow, shrink\n@each $operator in $flex-operators\n  @for $i from 0 through 5\n    .is-flex-#{$operator}-#{$i}\n      flex-#{$operator}: $i !important\n","@import \"../utilities/mixins\"\n\n.is-clearfix\n  +clearfix\n\n.is-pulled-left\n  float: left !important\n\n.is-pulled-right\n  float: right !important\n","@import \"../utilities/mixins\"\n\n.is-radiusless\n  border-radius: 0 !important\n\n.is-shadowless\n  box-shadow: none !important\n\n.is-clickable\n  cursor: pointer !important\n  pointer-events: all !important\n\n.is-unselectable\n  @extend %unselectable\n",".is-clipped\n  overflow: hidden !important\n","@import \"../utilities/mixins\"\n\n.is-overlay\n  @extend %overlay\n\n.is-relative\n  position: relative !important\n",".is-marginless\n  margin: 0 !important\n\n.is-paddingless\n  padding: 0 !important\n\n$spacing-shortcuts: (\"margin\": \"m\", \"padding\": \"p\") !default\n$spacing-directions: (\"top\": \"t\", \"right\": \"r\", \"bottom\": \"b\", \"left\": \"l\") !default\n$spacing-horizontal: \"x\" !default\n$spacing-vertical: \"y\" !default\n$spacing-values: (\"0\": 0, \"1\": 0.25rem, \"2\": 0.5rem, \"3\": 0.75rem, \"4\": 1rem, \"5\": 1.5rem, \"6\": 3rem, \"auto\": auto) !default\n\n@each $property, $shortcut in $spacing-shortcuts\n  @each $name, $value in $spacing-values\n    // All directions\n    .#{$shortcut}-#{$name}\n      #{$property}: $value !important\n    // Cardinal directions\n    @each $direction, $suffix in $spacing-directions\n      .#{$shortcut}#{$suffix}-#{$name}\n        #{$property}-#{$direction}: $value !important\n    // Horizontal axis\n    @if $spacing-horizontal != null\n      .#{$shortcut}#{$spacing-horizontal}-#{$name}\n        #{$property}-left: $value !important\n        #{$property}-right: $value !important\n    // Vertical axis\n    @if $spacing-vertical != null\n      .#{$shortcut}#{$spacing-vertical}-#{$name}\n        #{$property}-top: $value !important\n        #{$property}-bottom: $value !important\n","@import \"../utilities/mixins\"\n\n=typography-size($target:'')\n  @each $size in $sizes\n    $i: index($sizes, $size)\n    .is-size-#{$i}#{if($target == '', '', '-' + $target)}\n      font-size: $size !important\n\n+typography-size()\n\n+mobile\n  +typography-size('mobile')\n\n+tablet\n  +typography-size('tablet')\n\n+touch\n  +typography-size('touch')\n\n+desktop\n  +typography-size('desktop')\n\n+widescreen\n  +typography-size('widescreen')\n\n+fullhd\n  +typography-size('fullhd')\n\n$alignments: ('centered': 'center', 'justified': 'justify', 'left': 'left', 'right': 'right')\n\n@each $alignment, $text-align in $alignments\n  .has-text-#{$alignment}\n    text-align: #{$text-align} !important\n\n@each $alignment, $text-align in $alignments\n  +mobile\n    .has-text-#{$alignment}-mobile\n      text-align: #{$text-align} !important\n  +tablet\n    .has-text-#{$alignment}-tablet\n      text-align: #{$text-align} !important\n  +tablet-only\n    .has-text-#{$alignment}-tablet-only\n      text-align: #{$text-align} !important\n  +touch\n    .has-text-#{$alignment}-touch\n      text-align: #{$text-align} !important\n  +desktop\n    .has-text-#{$alignment}-desktop\n      text-align: #{$text-align} !important\n  +desktop-only\n    .has-text-#{$alignment}-desktop-only\n      text-align: #{$text-align} !important\n  +widescreen\n    .has-text-#{$alignment}-widescreen\n      text-align: #{$text-align} !important\n  +widescreen-only\n    .has-text-#{$alignment}-widescreen-only\n      text-align: #{$text-align} !important\n  +fullhd\n    .has-text-#{$alignment}-fullhd\n      text-align: #{$text-align} !important\n\n.is-capitalized\n  text-transform: capitalize !important\n\n.is-lowercase\n  text-transform: lowercase !important\n\n.is-uppercase\n  text-transform: uppercase !important\n\n.is-italic\n  font-style: italic !important\n  \n.is-underlined\n  text-decoration: underline !important\n\n.has-text-weight-light\n  font-weight: $weight-light !important\n.has-text-weight-normal\n  font-weight: $weight-normal !important\n.has-text-weight-medium\n  font-weight: $weight-medium !important\n.has-text-weight-semibold\n  font-weight: $weight-semibold !important\n.has-text-weight-bold\n  font-weight: $weight-bold !important\n\n.is-family-primary\n  font-family: $family-primary !important\n\n.is-family-secondary\n  font-family: $family-secondary !important\n\n.is-family-sans-serif\n  font-family: $family-sans-serif !important\n\n.is-family-monospace\n  font-family: $family-monospace !important\n\n.is-family-code\n  font-family: $family-code !important\n","@import \"../utilities/mixins\"\n\n$displays: 'block' 'flex' 'inline' 'inline-block' 'inline-flex'\n\n@each $display in $displays\n  .is-#{$display}\n    display: #{$display} !important\n  +mobile\n    .is-#{$display}-mobile\n      display: #{$display} !important\n  +tablet\n    .is-#{$display}-tablet\n      display: #{$display} !important\n  +tablet-only\n    .is-#{$display}-tablet-only\n      display: #{$display} !important\n  +touch\n    .is-#{$display}-touch\n      display: #{$display} !important\n  +desktop\n    .is-#{$display}-desktop\n      display: #{$display} !important\n  +desktop-only\n    .is-#{$display}-desktop-only\n      display: #{$display} !important\n  +widescreen\n    .is-#{$display}-widescreen\n      display: #{$display} !important\n  +widescreen-only\n    .is-#{$display}-widescreen-only\n      display: #{$display} !important\n  +fullhd\n    .is-#{$display}-fullhd\n      display: #{$display} !important\n\n.is-hidden\n  display: none !important\n\n.is-sr-only\n  border: none !important\n  clip: rect(0, 0, 0, 0) !important\n  height: 0.01em !important\n  overflow: hidden !important\n  padding: 0 !important\n  position: absolute !important\n  white-space: nowrap !important\n  width: 0.01em !important\n\n+mobile\n  .is-hidden-mobile\n    display: none !important\n\n+tablet\n  .is-hidden-tablet\n    display: none !important\n\n+tablet-only\n  .is-hidden-tablet-only\n    display: none !important\n\n+touch\n  .is-hidden-touch\n    display: none !important\n\n+desktop\n  .is-hidden-desktop\n    display: none !important\n\n+desktop-only\n  .is-hidden-desktop-only\n    display: none !important\n\n+widescreen\n  .is-hidden-widescreen\n    display: none !important\n\n+widescreen-only\n  .is-hidden-widescreen-only\n    display: none !important\n\n+fullhd\n  .is-hidden-fullhd\n    display: none !important\n\n.is-invisible\n  visibility: hidden !important\n\n+mobile\n  .is-invisible-mobile\n    visibility: hidden !important\n\n+tablet\n  .is-invisible-tablet\n    visibility: hidden !important\n\n+tablet-only\n  .is-invisible-tablet-only\n    visibility: hidden !important\n\n+touch\n  .is-invisible-touch\n    visibility: hidden !important\n\n+desktop\n  .is-invisible-desktop\n    visibility: hidden !important\n\n+desktop-only\n  .is-invisible-desktop-only\n    visibility: hidden !important\n\n+widescreen\n  .is-invisible-widescreen\n    visibility: hidden !important\n\n+widescreen-only\n  .is-invisible-widescreen-only\n    visibility: hidden !important\n\n+fullhd\n  .is-invisible-fullhd\n    visibility: hidden !important\n","/* Bulma Layout */\n@charset \"utf-8\"\n\n@import \"hero\"\n@import \"section\"\n@import \"footer\"\n","@import \"../utilities/mixins\"\n\n$hero-body-padding: 3rem 1.5rem !default\n$hero-body-padding-tablet: 3rem 3rem !default\n$hero-body-padding-small: 1.5rem !default\n$hero-body-padding-medium: 9rem 4.5rem !default\n$hero-body-padding-large: 18rem 6rem !default\n\n$hero-colors: $colors !default\n\n// Main container\n.hero\n  align-items: stretch\n  display: flex\n  flex-direction: column\n  justify-content: space-between\n  .navbar\n    background: none\n  .tabs\n    ul\n      border-bottom: none\n  // Colors\n  @each $name, $pair in $hero-colors\n    $color: nth($pair, 1)\n    $color-invert: nth($pair, 2)\n    &.is-#{$name}\n      background-color: $color\n      color: $color-invert\n      a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),\n      strong\n        color: inherit\n      .title\n        color: $color-invert\n      .subtitle\n        color: bulmaRgba($color-invert, 0.9)\n        a:not(.button),\n        strong\n          color: $color-invert\n      .navbar-menu\n        +touch\n          background-color: $color\n      .navbar-item,\n      .navbar-link\n        color: bulmaRgba($color-invert, 0.7)\n      a.navbar-item,\n      .navbar-link\n        &:hover,\n        &.is-active\n          background-color: bulmaDarken($color, 5%)\n          color: $color-invert\n      .tabs\n        a\n          color: $color-invert\n          opacity: 0.9\n          &:hover\n            opacity: 1\n        li\n          &.is-active a\n            color: $color !important\n            opacity: 1\n        &.is-boxed,\n        &.is-toggle\n          a\n            color: $color-invert\n            &:hover\n              background-color: bulmaRgba($scheme-invert, 0.1)\n          li.is-active a\n            &,\n            &:hover\n              background-color: $color-invert\n              border-color: $color-invert\n              color: $color\n      // Modifiers\n      @if type-of($color) == 'color'\n        &.is-bold\n          $gradient-top-left: darken(saturate(adjust-hue($color, -10deg), 10%), 10%)\n          $gradient-bottom-right: lighten(saturate(adjust-hue($color, 10deg), 5%), 5%)\n          background-image: linear-gradient(141deg, $gradient-top-left 0%, $color 71%, $gradient-bottom-right 100%)\n          +mobile\n            .navbar-menu\n              background-image: linear-gradient(141deg, $gradient-top-left 0%, $color 71%, $gradient-bottom-right 100%)\n  // Sizes\n  &.is-small\n    .hero-body\n      padding: $hero-body-padding-small\n  &.is-medium\n    +tablet\n      .hero-body\n        padding: $hero-body-padding-medium\n  &.is-large\n    +tablet\n      .hero-body\n        padding: $hero-body-padding-large\n  &.is-halfheight,\n  &.is-fullheight,\n  &.is-fullheight-with-navbar\n    .hero-body\n      align-items: center\n      display: flex\n      & > .container\n        flex-grow: 1\n        flex-shrink: 1\n  &.is-halfheight\n    min-height: 50vh\n  &.is-fullheight\n    min-height: 100vh\n\n// Components\n\n.hero-video\n  @extend %overlay\n  overflow: hidden\n  video\n    left: 50%\n    min-height: 100%\n    min-width: 100%\n    position: absolute\n    top: 50%\n    transform: translate3d(-50%, -50%, 0)\n  // Modifiers\n  &.is-transparent\n    opacity: 0.3\n  // Responsiveness\n  +mobile\n    display: none\n\n.hero-buttons\n  margin-top: 1.5rem\n  // Responsiveness\n  +mobile\n    .button\n      display: flex\n      &:not(:last-child)\n        margin-bottom: 0.75rem\n  +tablet\n    display: flex\n    justify-content: center\n    .button:not(:last-child)\n      +ltr-property(\"margin\", 1.5rem)\n\n// Containers\n\n.hero-head,\n.hero-foot\n  flex-grow: 0\n  flex-shrink: 0\n\n.hero-body\n  flex-grow: 1\n  flex-shrink: 0\n  padding: $hero-body-padding\n  +tablet\n    padding: $hero-body-padding-tablet\n","@import \"../utilities/mixins\"\n\n$section-padding: 3rem 1.5rem !default\n$section-padding-desktop: 3rem 3rem !default\n$section-padding-medium: 9rem 4.5rem !default\n$section-padding-large: 18rem 6rem !default\n\n.section\n  padding: $section-padding\n  // Responsiveness\n  +desktop\n    padding: $section-padding-desktop\n    // Sizes\n    &.is-medium\n      padding: $section-padding-medium\n    &.is-large\n      padding: $section-padding-large\n","@import \"../utilities/derived-variables\"\n\n$footer-background-color: $scheme-main-bis !default\n$footer-color: false !default\n$footer-padding: 3rem 1.5rem 6rem !default\n\n.footer\n  background-color: $footer-background-color\n  padding: $footer-padding\n  @if $footer-color\n    color: $footer-color\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./src/style.scss":
/*!************************!*\
  !*** ./src/style.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/bulma/bulma.sass":
/*!***************************************!*\
  !*** ./node_modules/bulma/bulma.sass ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../css-loader/dist/cjs.js!../sass-loader/dist/cjs.js!./bulma.sass */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/bulma/bulma.sass");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_sass_loader_dist_cjs_js_bulma_sass__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ "./src/style.scss");
/* harmony import */ var bulma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bulma */ "./node_modules/bulma/bulma.sass");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./module */ "./src/module.js");
/* harmony import */ var _data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data/fish//allfish.js */ "./src/data/fish/allfish.js");
/* harmony import */ var _c4rn_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./c4rn.js */ "./src/c4rn.js");






function trackDataIdClicks(dataIdValue) {
  gtag('event', 'clic', {
    'event_category': 'bouton',
    'event_action': 'clic',
    'event_label': dataIdValue
  });
}
function getQueryParamValue(key) {
  const urlParams = new URLSearchParams(window.location.search);
  const param = urlParams.get(key);
  return param;
}
function getCookieValue(name) {
  const cookies = document.cookie.split(';');
  for (let i = 0; i < cookies.length; i++) {
    const cookie = cookies[i].trim();
    if (cookie.startsWith(name + '=')) {
      return cookie.substring(name.length + 1);
    }
  }
  return '';
}
window.lang = getCookieValue("language") ? getCookieValue("language") : "en";
function findMatchingId(originalId, tolerance) {
  const originalFish = lodash__WEBPACK_IMPORTED_MODULE_2___default().find(_data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes, {
    id: originalId
  });
  if (!originalFish) {
    return []; // Aucune correspondance trouvée
  }

  const originalPositions = originalFish.positions;
  const matchingFish = lodash__WEBPACK_IMPORTED_MODULE_2___default().filter(_data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes, f => {
    if (f.id === originalId) {
      return false; // Ignorer l'ID d'origine
    }

    const isMatchingPosition = lodash__WEBPACK_IMPORTED_MODULE_2___default().some(f.positions, pos => {
      return lodash__WEBPACK_IMPORTED_MODULE_2___default().some(originalPositions, (originalPos, index) => {
        const isMatching = pos.x > originalPos.x - tolerance && pos.x < originalPos.x + tolerance && pos.y > originalPos.y - tolerance && pos.y < originalPos.y + tolerance;
        if (isMatching) {
          f.originalPosition = index; // Ajouter originalPosition à l'objet correspondant
        }

        return isMatching;
      });
    });
    return isMatchingPosition && f.map === originalFish.map;
  });
  return lodash__WEBPACK_IMPORTED_MODULE_2___default().map(matchingFish, fish => {
    const matchingPositions = lodash__WEBPACK_IMPORTED_MODULE_2___default().filter(fish.positions, pos => {
      return pos.x > originalPositions[0].x - tolerance && pos.x < originalPositions[0].x + tolerance && pos.y > originalPositions[0].y - tolerance && pos.y < originalPositions[0].y + tolerance;
    });
    const neighborPositions = lodash__WEBPACK_IMPORTED_MODULE_2___default().map(matchingPositions, pos => {
      return {
        x: pos.x,
        y: pos.y
      };
    });
    return {
      id: fish.id,
      neighborPositions: neighborPositions,
      name: fish.name,
      originalPosition: fish.originalPosition
    };
  });
}
document.addEventListener('DOMContentLoaded', () => {
  let currentId = "01";
  let currentFish = lodash__WEBPACK_IMPORTED_MODULE_2___default().find(_data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes, {
    id: currentId
  });
  let currentMinPoints = currentFish.type == "common" ? 300 : currentFish.type == "rare" ? 400 : currentFish.type == "epic" ? 500 : 5000;
  let unit = "kgs";
  document.querySelector(".weight-toggle-container input").addEventListener("change", e => {
    unit = e.target.checked ? "kgs" : "lbs";
    Array.from(document.querySelectorAll("[data-unit")).forEach(element => {
      element.setAttribute("data-unit", unit);
    });
    loadFish(currentId, window.lang);
  });

  // Functions to open and close a modal
  function openModal($el) {
    $el.classList.add('is-active');
  }
  function closeModal($el) {
    $el.classList.remove('is-active');
  }
  function closeAllModals() {
    (document.querySelectorAll('.modal') || []).forEach($modal => {
      closeModal($modal);
    });
  }

  // Add a click event on buttons to open a specific modal
  (document.querySelectorAll('.js-modal-trigger') || []).forEach($trigger => {
    const modal = $trigger.dataset.target;
    const $target = document.getElementById(modal);
    $trigger.addEventListener('click', () => {
      openModal($target);
    });
  });

  // Add a click event on various child elements to close the parent modal
  (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button') || []).forEach($close => {
    const $target = $close.closest('.modal');
    $close.addEventListener('click', () => {
      closeModal($target);
    });
  });

  // Add a keyboard event to close all modals
  document.addEventListener('keydown', event => {
    const e = event || window.event;
    if (e.keyCode === 27) {
      // Escape key
      closeAllModals();
    }
  });
  function toggleSideMenu() {
    document.querySelector(".csidebar").classList.toggle("visible");
    document.querySelector(".menu-toggle").classList.toggle("toggle-is-visible");
  }
  document.querySelector(".menu-toggle").addEventListener("click", () => {
    toggleSideMenu();
  });

  /**SWIPE */

  document.addEventListener('touchstart', handleTouchStart, false);
  document.addEventListener('touchmove', handleTouchMove, false);
  var xDown = null;
  var yDown = null;
  function handleTouchStart(evt) {
    const firstTouch = evt.touches[0];
    xDown = firstTouch.clientX;
    yDown = firstTouch.clientY;
  }
  ;
  function handleTouchMove(evt) {
    if (!xDown || !yDown) {
      return;
    }
    var xUp = evt.touches[0].clientX;
    var yUp = evt.touches[0].clientY;
    var xDiff = xDown - xUp;
    var yDiff = yDown - yUp;
    if (Math.abs(xDiff) > Math.abs(yDiff)) {
      if (xDiff > 0) {
        // Swipe to the left
        if (!isTargetElementRange(evt.target)) {
          triggerSwipeLeftEvent();
        }
      } else {
        // Swipe to the right
        if (!isTargetElementRange(evt.target)) {
          triggerSwipeRightEvent();
        }
      }
    }

    // Reset values
    xDown = null;
    yDown = null;
  }
  ;
  function isTargetElementRange(targetElement) {
    return targetElement.id === 'range';
  }
  function triggerSwipeLeftEvent() {
    document.querySelector(".csidebar").classList.remove("visible");
  }
  function triggerSwipeRightEvent() {
    document.querySelector(".csidebar").classList.add("visible");
  }
  _data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes.forEach(fish => {
    (0,_module__WEBPACK_IMPORTED_MODULE_3__.createList)(fish, window.lang);
  });
  function bindEventListenerToItem() {
    Array.from(document.querySelectorAll(".item")).forEach(item => {
      item.addEventListener("click", () => {
        currentId = item.getAttribute("data-id");
        loadFish(currentId, window.lang);
        triggerSwipeRightEvent();
      });
    });
  }
  bindEventListenerToItem();
  Array.from(document.querySelectorAll("[data-lang")).forEach(elem => {
    elem.classList.remove("selected-language");
  });
  document.querySelector("[data-lang='" + window.lang + "'").classList.add("selected-language");
  Array.from(document.querySelectorAll("[data-lang")).forEach(langBtn => {
    langBtn.addEventListener("click", () => {
      window.lang = langBtn.getAttribute("data-lang");
      Array.from(document.querySelectorAll("[data-lang")).forEach(elem => {
        elem.classList.remove("selected-language");
        langBtn.classList.add("selected-language");
      });
      document.cookie = "language=" + window.lang + "; expires=Fri, 31 Dec 9999 23:59:59 GMT";
      document.querySelector("#fish-list").innerHTML = "";
      _data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes.forEach(fish => {
        (0,_module__WEBPACK_IMPORTED_MODULE_3__.createList)(fish, window.lang);
      });
      bindEventListenerToItem(window.lang);
      loadFish(currentId, window.lang);
    });
  });
  function loadFish(id) {
    // TODO NEIGHBOR
    console.log(findMatchingId(id, 10));
    const fish = lodash__WEBPACK_IMPORTED_MODULE_2___default().find(_data_fish_allfish_js__WEBPACK_IMPORTED_MODULE_4__.fishes, {
      id: id
    });
    currentFish = fish;
    currentMinPoints = currentFish.type == "common" ? 300 : currentFish.type == "rare" ? 400 : currentFish.type == "epic" ? 500 : 5000;
    updateRange();
    Array.from(document.querySelectorAll(".unit")).forEach(elem => {
      elem.innerHTML = unit;
    });
    document.getElementById("range").value = 50;
    document.querySelector(".cdata-container").setAttribute("data-map", fish.map);
    const isIn = fish.seasons[new Date().getMonth()] ? "in" : "out";
    document.querySelector("#season-message").setAttribute("class", isIn);
    document.querySelector(".season-max-weight .mm-value").innerHTML = (currentFish[unit].min + (currentFish[unit].max - currentFish[unit].min) * 0.2).toFixed(2);
    document.querySelector(".season-max-points .mm-value").innerHTML = currentMinPoints + currentMinPoints * 0.2;
    document.querySelector("#no-shadow").setAttribute("data-noshadow", typeof currentFish.attributes[0].shadow[0] == "undefined" ? true : false);
    currentFish.attributes.forEach(attribute => {
      const attributeName = Object.keys(attribute)[0];
      const elem = document.querySelector(`[data-fishattribute='${attributeName}']`) || false;
      if (elem) {
        Array.from(elem.querySelectorAll(".svg-container")).forEach((svg, index) => {
          svg.setAttribute("data-current-svg", attribute[attributeName].includes(index) || false);
        });
      }
    });
    document.getElementById("fishName").innerHTML = fish.name[window.lang] ? fish.name[window.lang] : fish.name.en;
    document.getElementById("fishType").innerHTML = fish.type;
    document.getElementById("map").setAttribute("src", `./images/map-${fish.map}.jpg`);
    document.getElementById("mapName").innerHTML = fish.map;
    document.getElementById("mapName").setAttribute("class", `map-${fish.map}`);
    document.getElementById("positionNote").innerHTML = fish.positionNote;
    document.getElementById("positions-container").innerHTML = "";
    for (let i = 0; i < fish.positions.length; i++) {
      const position = document.createElement("div");
      position.setAttribute("class", "ccross");
      position.setAttribute("data-fishid", id);
      position.setAttribute("style", `background-image:url("./images/${id}.png");top:${fish.positions[i].x}%;left:${fish.positions[i].y}%`);
      document.getElementById("positions-container").appendChild(position);
    }
    fish.seasons.forEach((month, index) => {
      month ? document.querySelectorAll(".months-container > div")[index].setAttribute("class", "season") : document.querySelectorAll(".months-container > div")[index].removeAttribute("class");
    });
    document.querySelector("#minmax-min-points").innerHTML = currentMinPoints;
    document.querySelector("#minmax-max-points").innerHTML = currentMinPoints * 2;
    document.querySelector(".cdata-container").setAttribute("data-season", currentFish.seasons[new Date().getMonth()]);
    document.getElementById("fish-image").setAttribute("src", `./images/${fish.id}.png`);
    Array.from(document.querySelectorAll("#minweight, #minmax-min-weight")).forEach(element => {
      element.innerHTML = fish[unit].min;
    });
    Array.from(document.querySelectorAll("#maxweight, #minmax-max-weight")).forEach(element => {
      element.innerHTML = fish[unit].max;
    });
    Array.from(document.querySelectorAll(".step-weight")).forEach((step, index) => {
      const fifth = (fish[unit].max - fish[unit].min) * 0.2;
      step.innerHTML = (fish[unit].min + fifth * (index * 1)).toFixed(2);
    });
    Array.from(document.querySelectorAll(".step-points")).forEach((step, index) => {
      const fifth = currentMinPoints / 5;
      step.innerHTML = currentMinPoints + fifth * index;
    });
    if (currentFish.type == "monster") {
      function setTodaySpot(date, collection, referenceDate) {
        for (let i = 0; i < collection.length; i++) {
          let dateN = new Date(date);
          dateN.setDate(dateN.getDate() + (i - 1));
          const dateText = (dateN.getMonth() + 1).toString().padStart(2, "0") + "/" + dateN.getDate().toString().padStart(2, "0");
          const timeDiff = Math.floor((dateN - referenceDate) / (1000 * 60 * 60 * 24));
          const index = timeDiff >= 0 ? timeDiff % collection.length : (collection.length + timeDiff) % collection.length;
          collection[index].setAttribute('data-today-spot', 'false');
          collection[index].removeAttribute('data-spot-day');
          if (dateN.getDate() == new Date(date).getDate()) {
            collection[index].setAttribute('data-today-spot', 'true');
          }
          collection[index].setAttribute('data-spot-day', dateText);
        }
      }
      const currentDate = new Date().setDate(new Date().getDate() + 0);
      const htmlCollection = document.getElementsByClassName('ccross');
      const referenceDate = new Date(2023, 5, 1);
      setTodaySpot(currentDate, htmlCollection, referenceDate);
    }
    document.querySelector(".active")?.classList.remove("active");
    document.querySelector(`[data-id="${id}"]`).classList.add("active");
    if (currentFish.difficulty !== 'undefined') {
      Array.from(document.querySelectorAll(".difficulty")).forEach((elem, index) => {
        if (currentFish.difficulty == index) {
          elem.style.display = "block";
        } else {
          elem.style.display = "none";
        }
      });
    }
    document.querySelector("html").setAttribute("class", currentFish.type);
    if (getQueryParamValue("c4rn")) {
      (0,_c4rn_js__WEBPACK_IMPORTED_MODULE_5__.loadC4rn)(id);
    }
  }
  loadFish(currentId, window.lang);
  document.querySelectorAll(".months-container > div")[new Date().getMonth()].setAttribute("data-current", "true");
  function updateRange(percent = 10) {
    document.getElementById("range-values-container").style.left = percent + "%";
    document.getElementById("percent").innerHTML = Number(percent).toFixed(2);
    Array.from(document.querySelectorAll(".stars-container .svg-container")).forEach((container, index) => {
      container.setAttribute("data-current-svg", percent > index * 20);
    });
    document.querySelector("#weight").value = ((currentFish[unit].max - currentFish[unit].min) * (Number(percent) / 100) + currentFish[unit].min).toFixed(3);
    document.querySelector("#points").value = (currentMinPoints + currentMinPoints * (percent / 100)).toFixed();
    document.querySelector("#range-color").style.width = percent + "%";
    document.getElementById("range").value = percent;
  }
  document.querySelector("#range").addEventListener("input", e => {
    updateRange(e.target.value);
  });
  Array.from(document.querySelectorAll(".range-input")).forEach(input => {
    input.addEventListener("keyup", () => {
      if (input.getAttribute("id") == "points") {
        if (input.value >= currentMinPoints && input.value <= currentMinPoints * 2) {
          const currentPercent = (input.value - currentMinPoints) / currentMinPoints * 100;
          updateRange(currentPercent);
        }
      }
      if (input.getAttribute("id") == "weight") {
        if (input.value >= currentFish[unit].min && input.value <= currentFish[unit].max) {
          if (/^\d+(\.\d{3})$/.test(input.value)) {
            const currentPercent = (input.value - currentFish[unit].min) / (currentFish[unit].max - currentFish[unit].min) * 100;
            updateRange(currentPercent);
          }
        }
      }
    });
  });
  document.addEventListener("click", e => {
    if (e.target.classList.contains("list-title")) {
      e.target.closest(".list-container").classList.toggle("hidden-list");
    }
    if (e.target.classList.contains("fishp")) {
      const clickedId = e.target.closest(".item").getAttribute("data-id");
      trackDataIdClicks(clickedId);
    }
  });
  const items = Array.from(document.querySelectorAll(".item"));
  function checkScreenWidth() {
    var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    var isLessThan768 = screenWidth < 768;
    if (isLessThan768) {
      document.querySelector(".csidebar").classList.remove("visible");
      items.forEach(item => {
        item.addEventListener("click", () => {
          document.querySelector(".csidebar").classList.remove("visible");
        });
      });
    }
  }
  window.addEventListener('load', function () {
    checkScreenWidth();
  });
  window.addEventListener('resize', function () {
    checkScreenWidth();
  });
  var scrollableElement = document.querySelector('.section.cscrollable');
  scrollableElement.addEventListener('scroll', function (event) {
    var scrollTop = event.target.scrollTop;
    if (scrollTop > 50) {
      document.querySelector("#header .is-flex:first-of-type").classList.add("sticky");
      var eventScrollMoreThan50 = new CustomEvent('scrollMoreThan50Event');
      document.dispatchEvent(eventScrollMoreThan50);
    } else if (scrollTop >= 0 && scrollTop <= 50) {
      document.querySelector("#header .is-flex:first-of-type").classList.remove("sticky");
      var eventScrollBetween0And50 = new CustomEvent('scrollBetween0And50Event');
      document.dispatchEvent(eventScrollBetween0And50);
    }
  });
});
function onPageLoad(callback) {
  if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
    callback();
  } else {
    document.addEventListener('DOMContentLoaded', callback);
  }
}
onPageLoad(function () {
  setTimeout(() => {
    document.body.classList.remove("is-loading");
  }, 500);
});
if (getQueryParamValue("c4rn")) {
  const steinScript = document.createElement("script");
  steinScript.setAttribute("src", "https://unpkg.com/stein-js-client");
  document.body.appendChild(steinScript);
  setTimeout(() => {
    const key = getQueryParamValue("c4rn");
    const store = new SteinStore("https://api.steinhq.com/v1/storages/" + key);
    store.read("c4rna", {
      limit: 100,
      offset: 0
    }).then(data => {
      window.c4rn = data;
    });
  }, 800);
}
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVUsV0FBVyxVQUFVLFdBQVcsVUFBVSxVQUFVLE1BQU0sTUFBTSxVQUFVLFdBQVcsVUFBVSxXQUFXLFVBQVUsVUFBVSxNQUFNLE1BQU0sVUFBVSxXQUFXLFVBQVUsV0FBVyxVQUFVLFVBQVUsT0FBTyxNQUFNLFlBQVksV0FBVyxZQUFZLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxXQUFXLFVBQVUsT0FBTyxzQkFBc0IsWUFBWSxZQUFZLFlBQVksV0FBVyxZQUFZLFFBQVEsTUFBTSxZQUFZLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVyxXQUFXLFVBQVUsVUFBVSxVQUFVLE9BQU8sc0JBQXNCLDJCQUEyQixXQUFXLFVBQVUsT0FBTyxXQUFXLFVBQVUsV0FBVyxPQUFPLE1BQU0sV0FBVyxPQUFPLFNBQVMsVUFBVSxPQUFPLE1BQU0sV0FBVyxPQUFPLE1BQU0sV0FBVyxPQUFPLE9BQU8sVUFBVSxVQUFVLE9BQU8sTUFBTSxVQUFVLE9BQU8sTUFBTSxXQUFXLFdBQVcsT0FBTyxPQUFPLFVBQVUsTUFBTSxPQUFPLFdBQVcsT0FBTyxNQUFNLFlBQVksWUFBWSxZQUFZLFdBQVcsWUFBWSxjQUFjLGVBQWUsY0FBYyxZQUFZLE9BQU8sWUFBWSxVQUFVLE9BQU8sV0FBVyxhQUFhLFFBQVEsT0FBTyxXQUFXLFdBQVcsYUFBYSxRQUFRLE1BQU0sWUFBWSxZQUFZLGFBQWEsY0FBYyxRQUFRLE1BQU0sWUFBWSxXQUFXLFdBQVcsTUFBTSxNQUFNLFdBQVcsTUFBTSxNQUFNLFlBQVksT0FBTyxNQUFNLFlBQVksWUFBWSxhQUFhLGFBQWEsYUFBYSxPQUFPLE1BQU0sWUFBWSxXQUFXLFVBQVUsV0FBVyxhQUFhLE9BQU8sTUFBTSxVQUFVLFVBQVUsT0FBTyxPQUFPLFdBQVcsT0FBTyxNQUFNLGFBQWEsUUFBUSxNQUFNLFdBQVcsV0FBVyxPQUFPLE1BQU0sWUFBWSxhQUFhLE9BQU8sTUFBTSxVQUFVLE9BQU8sTUFBTSxZQUFZLGFBQWEsYUFBYSxhQUFhLFlBQVksWUFBWSxZQUFZLFdBQVcsTUFBTSxNQUFNLFdBQVcsV0FBVyxZQUFZLFlBQVksT0FBTyxPQUFPLFdBQVcsTUFBTSxPQUFPLFdBQVcsTUFBTSxNQUFNLFlBQVksT0FBTyxNQUFNLEtBQUssV0FBVyxNQUFNLE1BQU0sV0FBVyxNQUFNLEtBQUssWUFBWSxLQUFLLFdBQVcsWUFBWSxhQUFhLFlBQVksVUFBVSxXQUFXLE9BQU8sTUFBTSxZQUFZLE9BQU8sTUFBTSxhQUFhLFFBQVEsTUFBTSxZQUFZLGFBQWEsY0FBYyxjQUFjLFdBQVcsV0FBVyxhQUFhLGVBQWUsZUFBZSxlQUFlLGFBQWEsV0FBVyxNQUFNLE1BQU0sVUFBVSxNQUFNLE1BQU0sVUFBVSxVQUFVLE1BQU0sTUFBTSxjQUFjLGVBQWUsT0FBTyxNQUFNLGNBQWMsZUFBZSxPQUFPLE1BQU0sV0FBVyxXQUFXLE1BQU0sTUFBTSxZQUFZLGFBQWEsTUFBTSxNQUFNLFlBQVksYUFBYSxNQUFNLE1BQU0sV0FBVyxNQUFNLE1BQU0sWUFBWSxhQUFhLE1BQU0sTUFBTSxXQUFXLFdBQVcsWUFBWSxjQUFjLE9BQU8sTUFBTSxZQUFZLGFBQWEsTUFBTSxNQUFNLFdBQVcsWUFBWSxNQUFNLE1BQU0sV0FBVyxXQUFXLFdBQVcsTUFBTSxNQUFNLGFBQWEsZUFBZSxjQUFjLGNBQWMsT0FBTyxNQUFNLFlBQVksY0FBYyxPQUFPLE1BQU0sV0FBVyxXQUFXLFdBQVcsT0FBTyxNQUFNLFdBQVcsV0FBVyxXQUFXLE9BQU8sTUFBTSxXQUFXLFdBQVcsT0FBTyxNQUFNLFdBQVcsTUFBTSxNQUFNLFdBQVcsV0FBVyxZQUFZLE9BQU8sTUFBTSxZQUFZLGFBQWEsWUFBWSxNQUFNLE1BQU0sWUFBWSxhQUFhLE1BQU0sTUFBTSxXQUFXLE1BQU0sTUFBTSxZQUFZLFlBQVksV0FBVyxZQUFZLE1BQU0sTUFBTSxXQUFXLE1BQU0sTUFBTSxXQUFXLFlBQVksYUFBYSxNQUFNLE1BQU0sWUFBWSxhQUFhLGFBQWEsT0FBTyxNQUFNLFdBQVcsTUFBTSxNQUFNLFdBQVcsTUFBTSxNQUFNLFdBQVcsWUFBWSxZQUFZLFlBQVksTUFBTSxNQUFNLFdBQVcsWUFBWSxhQUFhLE9BQU8sTUFBTSxZQUFZLGFBQWEsTUFBTSxNQUFNLFdBQVcsTUFBTSxNQUFNLFdBQVcsWUFBWSxZQUFZLFlBQVksT0FBTyxNQUFNLFdBQVcsV0FBVyxXQUFXLE9BQU8sTUFBTSxXQUFXLFdBQVcsV0FBVyxPQUFPLE1BQU0sV0FBVyxXQUFXLE9BQU8sTUFBTSxXQUFXLE1BQU0sTUFBTSxXQUFXLFdBQVcsWUFBWSxPQUFPLE1BQU0sWUFBWSxhQUFhLFlBQVksTUFBTSxNQUFNLFlBQVksYUFBYSxNQUFNLE1BQU0sV0FBVyxNQUFNLE1BQU0sWUFBWSxZQUFZLFdBQVcsWUFBWSxNQUFNLE1BQU0sV0FBVyxNQUFNLE1BQU0sV0FBVyxZQUFZLGFBQWEsT0FBTyxNQUFNLFlBQVksYUFBYSxhQUFhLFFBQVEsTUFBTSxXQUFXLE1BQU0sTUFBTSxXQUFXLE1BQU0sTUFBTSxXQUFXLFlBQVksWUFBWSxZQUFZLE9BQU8sTUFBTSxXQUFXLFlBQVksYUFBYSxRQUFRLE1BQU0sWUFBWSxhQUFhLE9BQU8sTUFBTSxXQUFXLE1BQU0sTUFBTSxXQUFXLFlBQVksWUFBWSxZQUFZLFFBQVEsT0FBTyxXQUFXLFdBQVcsV0FBVyxRQUFRLE9BQU8sV0FBVyxXQUFXLFdBQVcsUUFBUSxPQUFPLFdBQVcsV0FBVyxRQUFRLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxXQUFXLFlBQVksUUFBUSxPQUFPLFlBQVksYUFBYSxZQUFZLE9BQU8sT0FBTyxZQUFZLGFBQWEsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFlBQVksWUFBWSxXQUFXLFlBQVksT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsWUFBWSxhQUFhLE9BQU8sT0FBTyxZQUFZLGFBQWEsYUFBYSxRQUFRLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxZQUFZLFlBQVksWUFBWSxPQUFPLE9BQU8sV0FBVyxZQUFZLGFBQWEsUUFBUSxPQUFPLFlBQVksYUFBYSxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxZQUFZLFlBQVksWUFBWSxRQUFRLE9BQU8sV0FBVyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsV0FBVyxXQUFXLFFBQVEsT0FBTyxZQUFZLGFBQWEsWUFBWSxPQUFPLE9BQU8sWUFBWSxhQUFhLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxZQUFZLFlBQVksV0FBVyxZQUFZLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFlBQVksYUFBYSxPQUFPLE9BQU8sWUFBWSxhQUFhLFlBQVksUUFBUSxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsWUFBWSxZQUFZLFlBQVksT0FBTyxPQUFPLFdBQVcsWUFBWSxZQUFZLFFBQVEsT0FBTyxZQUFZLGFBQWEsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsWUFBWSxZQUFZLFdBQVcsUUFBUSxPQUFPLFdBQVcsV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFdBQVcsV0FBVyxRQUFRLE9BQU8sWUFBWSxhQUFhLFlBQVksT0FBTyxPQUFPLFlBQVksYUFBYSxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sWUFBWSxZQUFZLFdBQVcsWUFBWSxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxZQUFZLGFBQWEsT0FBTyxPQUFPLFlBQVksYUFBYSxZQUFZLFFBQVEsT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFlBQVksWUFBWSxZQUFZLE9BQU8sT0FBTyxXQUFXLFlBQVksWUFBWSxRQUFRLE9BQU8sWUFBWSxhQUFhLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFlBQVksWUFBWSxXQUFXLFFBQVEsT0FBTyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsV0FBVyxXQUFXLFFBQVEsT0FBTyxZQUFZLGFBQWEsWUFBWSxPQUFPLE9BQU8sWUFBWSxhQUFhLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxZQUFZLFlBQVksV0FBVyxZQUFZLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFlBQVksYUFBYSxPQUFPLE9BQU8sWUFBWSxhQUFhLFlBQVksUUFBUSxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsWUFBWSxZQUFZLFlBQVksT0FBTyxPQUFPLFdBQVcsWUFBWSxZQUFZLFFBQVEsT0FBTyxZQUFZLGFBQWEsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsWUFBWSxZQUFZLFdBQVcsUUFBUSxPQUFPLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxXQUFXLFdBQVcsUUFBUSxPQUFPLFlBQVksYUFBYSxZQUFZLE9BQU8sT0FBTyxZQUFZLGFBQWEsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFlBQVksWUFBWSxXQUFXLFlBQVksT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsWUFBWSxhQUFhLE9BQU8sT0FBTyxZQUFZLGFBQWEsWUFBWSxRQUFRLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxZQUFZLFlBQVksWUFBWSxPQUFPLE9BQU8sV0FBVyxZQUFZLFlBQVksUUFBUSxPQUFPLFlBQVksYUFBYSxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxZQUFZLFlBQVksV0FBVyxRQUFRLE9BQU8sV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFdBQVcsV0FBVyxRQUFRLE9BQU8sWUFBWSxhQUFhLFlBQVksT0FBTyxPQUFPLFlBQVksYUFBYSxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sWUFBWSxZQUFZLFdBQVcsWUFBWSxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxZQUFZLGFBQWEsT0FBTyxPQUFPLFlBQVksYUFBYSxZQUFZLFFBQVEsT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFlBQVksWUFBWSxZQUFZLE9BQU8sT0FBTyxXQUFXLFlBQVksWUFBWSxRQUFRLE9BQU8sWUFBWSxhQUFhLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFlBQVksWUFBWSxXQUFXLFFBQVEsT0FBTyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxXQUFXLFdBQVcsUUFBUSxPQUFPLFdBQVcsV0FBVyxXQUFXLFFBQVEsT0FBTyxXQUFXLFdBQVcsUUFBUSxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsV0FBVyxZQUFZLFFBQVEsT0FBTyxZQUFZLGFBQWEsWUFBWSxPQUFPLE9BQU8sWUFBWSxhQUFhLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxZQUFZLFlBQVksV0FBVyxZQUFZLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFlBQVksYUFBYSxPQUFPLE9BQU8sWUFBWSxhQUFhLGFBQWEsUUFBUSxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsWUFBWSxZQUFZLFlBQVksT0FBTyxPQUFPLFdBQVcsWUFBWSxhQUFhLFFBQVEsT0FBTyxZQUFZLGFBQWEsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsWUFBWSxZQUFZLFlBQVksUUFBUSxPQUFPLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxXQUFXLFVBQVUsUUFBUSxPQUFPLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxXQUFXLFdBQVcsUUFBUSxPQUFPLFlBQVksYUFBYSxZQUFZLE9BQU8sT0FBTyxZQUFZLGFBQWEsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFlBQVksWUFBWSxXQUFXLFlBQVksT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsWUFBWSxhQUFhLE9BQU8sT0FBTyxZQUFZLGFBQWEsWUFBWSxRQUFRLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxZQUFZLFlBQVksWUFBWSxPQUFPLE9BQU8sV0FBVyxZQUFZLFlBQVksUUFBUSxPQUFPLFlBQVksYUFBYSxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxZQUFZLFlBQVksV0FBVyxRQUFRLE9BQU8sV0FBVyxVQUFVLFFBQVEsT0FBTyxXQUFXLFdBQVcsVUFBVSxRQUFRLE9BQU8sV0FBVyxXQUFXLFVBQVUsUUFBUSxPQUFPLFlBQVksT0FBTyxPQUFPLFlBQVksT0FBTyxPQUFPLFlBQVksT0FBTyxPQUFPLGFBQWEsT0FBTyxPQUFPLGFBQWEsT0FBTyxPQUFPLFlBQVksYUFBYSxjQUFjLGNBQWMsUUFBUSxPQUFPLFVBQVUsVUFBVSxPQUFPLE9BQU8sV0FBVyxXQUFXLE9BQU8sT0FBTyxZQUFZLFdBQVcsV0FBVyxZQUFZLE9BQU8sT0FBTyxZQUFZLGFBQWEsYUFBYSxZQUFZLFdBQVcsT0FBTyxPQUFPLFlBQVksWUFBWSxXQUFXLFFBQVEsT0FBTyxXQUFXLFVBQVUsVUFBVSxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxjQUFjLFFBQVEsT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxZQUFZLE9BQU8sT0FBTyxZQUFZLE9BQU8sT0FBTyxhQUFhLE9BQU8sT0FBTyxhQUFhLE9BQU8sT0FBTyxXQUFXLFdBQVcsT0FBTyxPQUFPLFdBQVcsV0FBVyxjQUFjLFFBQVEsT0FBTyxhQUFhLFFBQVEsT0FBTyxVQUFVLE9BQU8sT0FBTyxVQUFVLE9BQU8sT0FBTyxVQUFVLE9BQU8sT0FBTyxVQUFVLFVBQVUsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxXQUFXLFFBQVEsT0FBTyxNQUFNLGFBQWEsUUFBUSxRQUFRLGFBQWEsUUFBUSxPQUFPLGFBQWEsUUFBUSxPQUFPLFlBQVksUUFBUSxLQUFLLE9BQU8sTUFBTSxhQUFhLFFBQVEsUUFBUSxhQUFhLFFBQVEsT0FBTyxZQUFZLFFBQVEsT0FBTyxhQUFhLFFBQVEsS0FBSyxPQUFPLFVBQVUsVUFBVSxXQUFXLFVBQVUsT0FBTyxPQUFPLFdBQVcsWUFBWSxhQUFhLFdBQVcsT0FBTyxPQUFPLE1BQU0sV0FBVyxPQUFPLEtBQUssT0FBTyxNQUFNLFdBQVcsT0FBTyxLQUFLLE9BQU8sTUFBTSxXQUFXLE9BQU8sS0FBSyxPQUFPLE1BQU0sV0FBVyxPQUFPLEtBQUssT0FBTyxNQUFNLFdBQVcsT0FBTyxNQUFNLE9BQU8sV0FBVyxPQUFPLGFBQWEsYUFBYSxRQUFRLFlBQVksWUFBWSxZQUFZLGFBQWEsUUFBUSxPQUFPLFVBQVUsV0FBVyxPQUFPLE9BQU8sVUFBVSxPQUFPLE9BQU8sV0FBVyxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLFdBQVcsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsV0FBVyxPQUFPLE9BQU8sV0FBVyxXQUFXLE9BQU8sT0FBTyxVQUFVLFdBQVcsT0FBTyxPQUFPLFlBQVksY0FBYyxlQUFlLFFBQVEsT0FBTyxXQUFXLGNBQWMsV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sV0FBVyxjQUFjLFdBQVcsT0FBTyxPQUFPLFdBQVcsV0FBVyxPQUFPLE9BQU8sV0FBVyxPQUFPLE9BQU8sY0FBYyxRQUFRLE9BQU8sV0FBVyxXQUFXLFdBQVcsT0FBTyxPQUFPLFVBQVUsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFlBQVksWUFBWSxhQUFhLGFBQWEsV0FBVyxPQUFPLFFBQVEsVUFBVSxPQUFPLE9BQU8sVUFBVSxPQUFPLFFBQVEsYUFBYSxlQUFlLGVBQWUsYUFBYSxPQUFPLE9BQU8sWUFBWSxPQUFPLE9BQU8sV0FBVyxPQUFPLFFBQVEsYUFBYSxjQUFjLE9BQU8sUUFBUSxhQUFhLGNBQWMsT0FBTyxRQUFRLGFBQWEsUUFBUSxPQUFPLFVBQVUsT0FBTyxPQUFPLFlBQVksT0FBTyxPQUFPLFdBQVcsT0FBTyxPQUFPLFlBQVksT0FBTyxPQUFPLFlBQVksUUFBUSxRQUFRLFdBQVcsV0FBVyxXQUFXLFdBQVcsWUFBWSxTQUFTLFFBQVEsV0FBVyxZQUFZLFNBQVMsUUFBUSxXQUFXLGNBQWMsU0FBUyxRQUFRLFlBQVksY0FBYyxVQUFVLFFBQVEsV0FBVyxVQUFVLFdBQVcsVUFBVSxhQUFhLGFBQWEsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsWUFBWSxTQUFTLFFBQVEsWUFBWSxVQUFVLFFBQVEsVUFBVSxTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxVQUFVLFVBQVUsVUFBVSxRQUFRLFFBQVEsWUFBWSxRQUFRLFFBQVEsVUFBVSxRQUFRLHdCQUF3QixVQUFVLFVBQVUsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxTQUFTLFFBQVEsV0FBVyxZQUFZLFlBQVksWUFBWSxTQUFTLFFBQVEsV0FBVyxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsU0FBUyxXQUFXLE9BQU8sUUFBUSxXQUFXLFFBQVEsUUFBUSxZQUFZLFdBQVcsVUFBVSxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxVQUFVLFVBQVUsUUFBUSxXQUFXLFdBQVcsVUFBVSxZQUFZLFdBQVcsV0FBVyxZQUFZLFVBQVUsVUFBVSxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsWUFBWSxPQUFPLFFBQVEsWUFBWSxPQUFPLFFBQVEsWUFBWSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxhQUFhLGFBQWEsV0FBVyxXQUFXLFlBQVksWUFBWSxXQUFXLFdBQVcsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxPQUFPLFFBQVEsV0FBVyxPQUFPLFFBQVEsV0FBVyxRQUFRLFFBQVEsS0FBSyxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsS0FBSyxRQUFRLGFBQWEsZUFBZSxPQUFPLFNBQVMsYUFBYSxlQUFlLGVBQWUsYUFBYSxRQUFRLFNBQVMsV0FBVyxXQUFXLFdBQVcsU0FBUyxTQUFTLFdBQVcsV0FBVyxXQUFXLFNBQVMsU0FBUyxXQUFXLFdBQVcsV0FBVyxTQUFTLFNBQVMsV0FBVyxXQUFXLFVBQVUsU0FBUyxTQUFTLFdBQVcsV0FBVyxVQUFVLFNBQVMsU0FBUyxXQUFXLFdBQVcsVUFBVSxTQUFTLFNBQVMsV0FBVyxXQUFXLFVBQVUsU0FBUyxTQUFTLFdBQVcsV0FBVyxVQUFVLFNBQVMsU0FBUyxXQUFXLFdBQVcsV0FBVyxTQUFTLFNBQVMsV0FBVyxXQUFXLFVBQVUsU0FBUyxTQUFTLFdBQVcsVUFBVSxRQUFRLFNBQVMsYUFBYSxhQUFhLFFBQVEsV0FBVyxXQUFXLFFBQVEsU0FBUyxXQUFXLFFBQVEsUUFBUSxhQUFhLE9BQU8sUUFBUSxhQUFhLFNBQVMsUUFBUSxhQUFhLGFBQWEsUUFBUSxTQUFTLFdBQVcsUUFBUSxTQUFTLFlBQVksWUFBWSxRQUFRLFFBQVEsYUFBYSxTQUFTLFNBQVMsYUFBYSxlQUFlLE9BQU8sUUFBUSxhQUFhLFNBQVMsU0FBUyxhQUFhLGVBQWUsT0FBTyxRQUFRLGFBQWEsU0FBUyxTQUFTLFdBQVcsUUFBUSxTQUFTLFdBQVcsUUFBUSxTQUFTLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLGFBQWEsT0FBTyxRQUFRLGFBQWEsT0FBTyxRQUFRLGFBQWEsT0FBTyxTQUFTLFdBQVcsUUFBUSxRQUFRLGFBQWEsUUFBUSxRQUFRLFlBQVksV0FBVyxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxVQUFVLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxPQUFPLFFBQVEsWUFBWSxPQUFPLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxlQUFlLFNBQVMsUUFBUSxlQUFlLFlBQVksV0FBVyxRQUFRLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLGFBQWEsY0FBYyxjQUFjLGFBQWEsYUFBYSxZQUFZLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLGlCQUFpQixTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxVQUFVLFNBQVMsUUFBUSxhQUFhLE9BQU8sUUFBUSxZQUFZLE9BQU8sUUFBUSxhQUFhLE9BQU8sUUFBUSxnQkFBZ0IsaUJBQWlCLFNBQVMsUUFBUSxnQkFBZ0IsaUJBQWlCLFNBQVMsUUFBUSxnQkFBZ0IsaUJBQWlCLFNBQVMsUUFBUSxnQkFBZ0IsWUFBWSxXQUFXLFVBQVUsUUFBUSxRQUFRLFdBQVcsVUFBVSxVQUFVLFVBQVUsV0FBVyxVQUFVLFdBQVcsV0FBVyxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLGFBQWEsU0FBUyxRQUFRLFdBQVcsU0FBUyxTQUFTLFdBQVcsUUFBUSxXQUFXLFdBQVcsUUFBUSxTQUFTLFlBQVksU0FBUyxTQUFTLFlBQVksU0FBUyxTQUFTLFdBQVcsU0FBUyxRQUFRLGFBQWEsYUFBYSxjQUFjLGVBQWUsU0FBUyxRQUFRLFlBQVksZUFBZSxTQUFTLFFBQVEsYUFBYSxTQUFTLFFBQVEsV0FBVyxPQUFPLFFBQVEsWUFBWSxPQUFPLFFBQVEsV0FBVyxPQUFPLFFBQVEsWUFBWSxPQUFPLFFBQVEsWUFBWSxPQUFPLFFBQVEsV0FBVyxPQUFPLFFBQVEsWUFBWSxRQUFRLFFBQVEsYUFBYSxlQUFlLGVBQWUsZUFBZSxTQUFTLFFBQVEsYUFBYSxlQUFlLFFBQVEsUUFBUSxhQUFhLFNBQVMsUUFBUSxXQUFXLE9BQU8sUUFBUSxZQUFZLE9BQU8sUUFBUSxXQUFXLE9BQU8sUUFBUSxZQUFZLE9BQU8sUUFBUSxZQUFZLE9BQU8sUUFBUSxXQUFXLE9BQU8sUUFBUSxZQUFZLFFBQVEsUUFBUSxVQUFVLFVBQVUsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsWUFBWSxjQUFjLGFBQWEsWUFBWSxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFNBQVMsYUFBYSxNQUFNLGNBQWMsZUFBZSxlQUFlLGVBQWUsT0FBTyxPQUFPLGVBQWUsU0FBUyxPQUFPLGVBQWUsU0FBUyxPQUFPLGVBQWUsU0FBUyxPQUFPLGVBQWUsU0FBUyxRQUFRLGFBQWEsT0FBTyxRQUFRLGFBQWEsYUFBYSxRQUFRLFFBQVEsYUFBYSxlQUFlLGFBQWEsYUFBYSxPQUFPLE9BQU8sZUFBZSxTQUFTLE9BQU8sZUFBZSxTQUFTLE9BQU8sZUFBZSxTQUFTLE9BQU8sZUFBZSxVQUFVLFFBQVEsV0FBVyxVQUFVLFVBQVUsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLGNBQWMsWUFBWSxPQUFPLFFBQVEsYUFBYSxPQUFPLFFBQVEsYUFBYSxPQUFPLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsU0FBUyxRQUFRLGFBQWEsYUFBYSxXQUFXLFFBQVEsUUFBUSxXQUFXLFdBQVcsV0FBVyxVQUFVLFdBQVcsU0FBUyxRQUFRLFVBQVUsVUFBVSxVQUFVLGNBQWMsY0FBYyxRQUFRLFFBQVEsYUFBYSxjQUFjLFNBQVMsUUFBUSxVQUFVLFFBQVEsUUFBUSxVQUFVLFNBQVMsUUFBUSxVQUFVLFdBQVcsV0FBVyxXQUFXLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxZQUFZLE9BQU8sVUFBVSxZQUFZLFlBQVksU0FBUyxRQUFRLGdCQUFnQixVQUFVLFFBQVEsV0FBVyxVQUFVLFdBQVcsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsWUFBWSxjQUFjLFVBQVUsUUFBUSxRQUFRLGFBQWEsZUFBZSxTQUFTLFFBQVEsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxhQUFhLE9BQU8sUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsYUFBYSxPQUFPLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsY0FBYyxZQUFZLE9BQU8sUUFBUSxZQUFZLE9BQU8sUUFBUSxZQUFZLE9BQU8sUUFBUSxXQUFXLFVBQVUsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsV0FBVyxlQUFlLFVBQVUsVUFBVSxRQUFRLFFBQVEsYUFBYSxPQUFPLFFBQVEsYUFBYSxPQUFPLFFBQVEsYUFBYSxRQUFRLFFBQVEsV0FBVyxVQUFVLFdBQVcsV0FBVyxRQUFRLFFBQVEsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsWUFBWSxTQUFTLFFBQVEsV0FBVyxXQUFXLFlBQVksU0FBUyxRQUFRLFdBQVcsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFlBQVksU0FBUyxRQUFRLFdBQVcsV0FBVyxZQUFZLFNBQVMsUUFBUSxXQUFXLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxZQUFZLFNBQVMsUUFBUSxXQUFXLFdBQVcsWUFBWSxTQUFTLFFBQVEsV0FBVyxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxZQUFZLFNBQVMsUUFBUSxXQUFXLFdBQVcsWUFBWSxTQUFTLFFBQVEsV0FBVyxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFlBQVksT0FBTyxRQUFRLFdBQVcsT0FBTyxRQUFRLGFBQWEsT0FBTyxRQUFRLFVBQVUsUUFBUSxRQUFRLGFBQWEsT0FBTyxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsV0FBVyxRQUFRLFFBQVEsV0FBVyxXQUFXLFFBQVEsUUFBUSxZQUFZLE9BQU8sUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFVBQVUsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxVQUFVLFdBQVcsV0FBVyxXQUFXLFFBQVEsUUFBUSxXQUFXLGFBQWEsT0FBTyxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsYUFBYSxPQUFPLFFBQVEsV0FBVyxTQUFTLFFBQVEsVUFBVSxVQUFVLFVBQVUsVUFBVSxXQUFXLFVBQVUsVUFBVSxTQUFTLFNBQVMsYUFBYSxlQUFlLFlBQVksV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLGFBQWEsZUFBZSxRQUFRLFFBQVEsYUFBYSxlQUFlLGVBQWUsWUFBWSxZQUFZLGFBQWEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFVBQVUsVUFBVSxXQUFXLFlBQVksV0FBVyxRQUFRLFFBQVEsVUFBVSxTQUFTLFFBQVEsWUFBWSxXQUFXLFlBQVksZUFBZSxPQUFPLFFBQVEsV0FBVyxRQUFRLFFBQVEsYUFBYSxPQUFPLFFBQVEsYUFBYSxPQUFPLFFBQVEsWUFBWSxRQUFRLFFBQVEsVUFBVSxZQUFZLFlBQVksUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsUUFBUSxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsVUFBVSxXQUFXLFFBQVEsVUFBVSxXQUFXLFdBQVcsUUFBUSxVQUFVLFdBQVcsV0FBVyxRQUFRLFlBQVksVUFBVSxRQUFRLGdCQUFnQixVQUFVLFFBQVEsZ0JBQWdCLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxPQUFPLE1BQU0sVUFBVSxRQUFRLE1BQU0sUUFBUSxXQUFXLFFBQVEsT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxVQUFVLFVBQVUsVUFBVSxnQkFBZ0IsWUFBWSxRQUFRLFFBQVEsYUFBYSxhQUFhLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxhQUFhLGFBQWEsUUFBUSxRQUFRLGFBQWEsYUFBYSxRQUFRLE1BQU0sUUFBUSxXQUFXLFFBQVEsT0FBTyxPQUFPLFVBQVUsVUFBVSxVQUFVLFVBQVUsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLE1BQU0sUUFBUSxXQUFXLFVBQVUsWUFBWSxhQUFhLFdBQVcsUUFBUSxVQUFVLGFBQWEsT0FBTyxVQUFVLGFBQWEsT0FBTyxVQUFVLGFBQWEsT0FBTyxVQUFVLGFBQWEsT0FBTyxRQUFRLGFBQWEsY0FBYyxhQUFhLFdBQVcsVUFBVSxZQUFZLFlBQVksUUFBUSxTQUFTLGFBQWEsUUFBUSxRQUFRLFVBQVUsUUFBUSxTQUFTLGFBQWEsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsZUFBZSxVQUFVLFVBQVUsUUFBUSxRQUFRLGFBQWEsT0FBTyxRQUFRLGFBQWEsT0FBTyxRQUFRLGFBQWEsUUFBUSxjQUFjLEtBQUssWUFBWSxhQUFhLFFBQVEsUUFBUSxXQUFXLFlBQVksV0FBVyxXQUFXLFdBQVcsUUFBUSxRQUFRLGFBQWEsT0FBTyxRQUFRLFdBQVcsVUFBVSxRQUFRLFFBQVEsZUFBZSxTQUFTLFFBQVEsYUFBYSxZQUFZLFdBQVcsUUFBUSxRQUFRLGFBQWEsWUFBWSxRQUFRLFNBQVMsV0FBVyxVQUFVLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxTQUFTLFdBQVcsUUFBUSxTQUFTLFdBQVcsUUFBUSxRQUFRLGFBQWEsT0FBTyxRQUFRLGFBQWEsT0FBTyxRQUFRLGFBQWEsT0FBTyxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsU0FBUyxRQUFRLFlBQVksYUFBYSxjQUFjLGVBQWUsWUFBWSxXQUFXLFNBQVMsUUFBUSxZQUFZLGFBQWEsUUFBUSxRQUFRLFlBQVksYUFBYSxTQUFTLFFBQVEsYUFBYSxhQUFhLGFBQWEsWUFBWSxTQUFTLFFBQVEsV0FBVyxhQUFhLFlBQVksVUFBVSxZQUFZLGNBQWMsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLGFBQWEsV0FBVyxXQUFXLFdBQVcsVUFBVSxXQUFXLFdBQVcsVUFBVSxVQUFVLFVBQVUsYUFBYSxVQUFVLFVBQVUsV0FBVyxhQUFhLFVBQVUsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLFlBQVksYUFBYSxRQUFRLFFBQVEsWUFBWSxhQUFhLFNBQVMsUUFBUSxhQUFhLGNBQWMsVUFBVSxRQUFRLGFBQWEsZUFBZSxhQUFhLFVBQVUsU0FBUyxRQUFRLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxXQUFXLGFBQWEsU0FBUyxRQUFRLGdCQUFnQixVQUFVLFFBQVEsYUFBYSxTQUFTLFFBQVEsV0FBVyxXQUFXLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxhQUFhLGFBQWEsVUFBVSxTQUFTLFFBQVEsVUFBVSxjQUFjLGFBQWEsZUFBZSxhQUFhLFVBQVUsWUFBWSxVQUFVLFFBQVEsYUFBYSxlQUFlLGVBQWUsZUFBZSxlQUFlLFVBQVUsUUFBUSxhQUFhLFlBQVksV0FBVyxXQUFXLFdBQVcsV0FBVyxTQUFTLFNBQVMsZ0JBQWdCLFlBQVksV0FBVyxVQUFVLFFBQVEsU0FBUyxhQUFhLGVBQWUsT0FBTyxTQUFTLGFBQWEsYUFBYSxRQUFRLFFBQVEsYUFBYSxZQUFZLFVBQVUsVUFBVSxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsUUFBUSxRQUFRLGFBQWEsT0FBTyxRQUFRLFdBQVcsV0FBVyxRQUFRLFFBQVEsVUFBVSxRQUFRLFNBQVMsVUFBVSxRQUFRLFFBQVEsVUFBVSxRQUFRLFFBQVEsV0FBVyxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLFFBQVEsVUFBVSxRQUFRLE1BQU0sUUFBUSxXQUFXLFVBQVUsV0FBVyxVQUFVLFVBQVUsV0FBVyxRQUFRLFNBQVMsV0FBVyxRQUFRLE9BQU8sT0FBTyxZQUFZLFNBQVMsTUFBTSxTQUFTLFdBQVcsVUFBVSxVQUFVLFFBQVEsU0FBUyxVQUFVLFFBQVEsT0FBTyxRQUFRLGdCQUFnQixTQUFTLE1BQU0sUUFBUSxXQUFXLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFVBQVUsUUFBUSxNQUFNLFFBQVEsV0FBVyxXQUFXLFFBQVEsT0FBTyxPQUFPLFVBQVUsUUFBUSxNQUFNLFFBQVEsV0FBVyxVQUFVLFdBQVcsUUFBUSxRQUFRLFlBQVksU0FBUyxRQUFRLFdBQVcsVUFBVSxZQUFZLFNBQVMsU0FBUyxZQUFZLFNBQVMsUUFBUSxhQUFhLFNBQVMsUUFBUSxhQUFhLFNBQVMsUUFBUSxXQUFXLFlBQVksYUFBYSxTQUFTLFFBQVEsYUFBYSxlQUFlLFVBQVUsU0FBUyxXQUFXLFVBQVUsVUFBVSxTQUFTLFFBQVEsZUFBZSxVQUFVLFFBQVEsZUFBZSxVQUFVLFFBQVEsV0FBVyxVQUFVLFVBQVUsV0FBVyxTQUFTLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFlBQVksT0FBTyxRQUFRLFlBQVksT0FBTyxRQUFRLFlBQVksT0FBTyxRQUFRLFlBQVksUUFBUSxRQUFRLGFBQWEsU0FBUyxRQUFRLGFBQWEsZUFBZSxZQUFZLGFBQWEsU0FBUyxRQUFRLGFBQWEsZUFBZSxPQUFPLFFBQVEsYUFBYSxjQUFjLE9BQU8sUUFBUSxnQkFBZ0IsY0FBYyxpQkFBaUIsVUFBVSxRQUFRLGFBQWEsZUFBZSxlQUFlLGFBQWEsUUFBUSxRQUFRLFlBQVksU0FBUyxRQUFRLGFBQWEsVUFBVSxRQUFRLFlBQVksY0FBYyxhQUFhLE9BQU8sUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFdBQVcsUUFBUSxRQUFRLFlBQVksT0FBTyxRQUFRLFlBQVksT0FBTyxRQUFRLFlBQVksT0FBTyxRQUFRLFdBQVcsU0FBUyxRQUFRLFlBQVksYUFBYSxTQUFTLFFBQVEsWUFBWSxRQUFRLFFBQVEsV0FBVyxTQUFTLFFBQVEsWUFBWSxhQUFhLFNBQVMsUUFBUSxZQUFZLFFBQVEsUUFBUSxXQUFXLFNBQVMsUUFBUSxZQUFZLGFBQWEsU0FBUyxRQUFRLFlBQVksUUFBUSxRQUFRLFdBQVcsU0FBUyxRQUFRLFlBQVksWUFBWSxTQUFTLFFBQVEsWUFBWSxRQUFRLFFBQVEsV0FBVyxTQUFTLFFBQVEsWUFBWSxZQUFZLFNBQVMsUUFBUSxZQUFZLFlBQVksU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFlBQVksWUFBWSxTQUFTLFFBQVEsWUFBWSxZQUFZLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxZQUFZLFlBQVksU0FBUyxRQUFRLFlBQVksWUFBWSxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsWUFBWSxZQUFZLFNBQVMsUUFBUSxZQUFZLFlBQVksU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFlBQVksYUFBYSxTQUFTLFFBQVEsWUFBWSxZQUFZLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxZQUFZLFlBQVksU0FBUyxRQUFRLFlBQVksWUFBWSxVQUFVLFFBQVEsV0FBVyxhQUFhLGFBQWEsV0FBVyxXQUFXLGFBQWEsYUFBYSxXQUFXLGFBQWEsYUFBYSxRQUFRLFFBQVEsVUFBVSxVQUFVLGdCQUFnQixTQUFTLFFBQVEsWUFBWSxhQUFhLFdBQVcsU0FBUyxRQUFRLGFBQWEsZUFBZSxhQUFhLGFBQWEsZUFBZSxlQUFlLFNBQVMsU0FBUyxhQUFhLE9BQU8sUUFBUSxhQUFhLFVBQVUsUUFBUSxXQUFXLFVBQVUsV0FBVyxXQUFXLFdBQVcsVUFBVSxXQUFXLFFBQVEsUUFBUSxVQUFVLFNBQVMsUUFBUSxhQUFhLFVBQVUsU0FBUyxVQUFVLFdBQVcsVUFBVSxXQUFXLFVBQVUsUUFBUSxPQUFPLFFBQVEsVUFBVSxXQUFXLFlBQVksU0FBUyxNQUFNLFFBQVEsV0FBVyxZQUFZLFlBQVksZUFBZSxjQUFjLGNBQWMsVUFBVSxRQUFRLFVBQVUsV0FBVyxXQUFXLFdBQVcsV0FBVyxTQUFTLFNBQVMsV0FBVyxhQUFhLFlBQVksVUFBVSxXQUFXLFlBQVksYUFBYSxTQUFTLFFBQVEsYUFBYSxlQUFlLGVBQWUsUUFBUSxRQUFRLGFBQWEsWUFBWSxVQUFVLGFBQWEsY0FBYyxVQUFVLFFBQVEsYUFBYSxlQUFlLGVBQWUsU0FBUyxRQUFRLGdCQUFnQixVQUFVLFFBQVEsYUFBYSxlQUFlLFlBQVksVUFBVSxVQUFVLFlBQVksVUFBVSxRQUFRLGFBQWEsY0FBYyxZQUFZLFdBQVcsUUFBUSxRQUFRLFdBQVcsV0FBVyxTQUFTLFNBQVMsV0FBVyxTQUFTLFdBQVcsV0FBVyxXQUFXLFNBQVMsUUFBUSxZQUFZLFNBQVMsUUFBUSxZQUFZLFNBQVMsT0FBTyxTQUFTLFlBQVksU0FBUyxpQkFBaUIsV0FBVyxZQUFZLFNBQVMsU0FBUyxZQUFZLFNBQVMsVUFBVSxXQUFXLFlBQVksU0FBUyxRQUFRLFlBQVksYUFBYSxTQUFTLEtBQUssUUFBUSxXQUFXLFdBQVcsU0FBUyxTQUFTLFdBQVcsU0FBUyxXQUFXLFdBQVcsV0FBVyxTQUFTLFFBQVEsWUFBWSxTQUFTLFFBQVEsWUFBWSxTQUFTLE9BQU8sU0FBUyxZQUFZLFNBQVMsaUJBQWlCLFdBQVcsWUFBWSxTQUFTLFNBQVMsWUFBWSxTQUFTLFVBQVUsV0FBVyxZQUFZLFNBQVMsUUFBUSxZQUFZLGFBQWEsU0FBUyxLQUFLLFFBQVEsV0FBVyxXQUFXLFNBQVMsU0FBUyxXQUFXLFNBQVMsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFlBQVksU0FBUyxRQUFRLFlBQVksU0FBUyxPQUFPLFNBQVMsWUFBWSxTQUFTLGlCQUFpQixXQUFXLFlBQVksU0FBUyxTQUFTLFlBQVksU0FBUyxVQUFVLFdBQVcsWUFBWSxTQUFTLFFBQVEsWUFBWSxhQUFhLFNBQVMsS0FBSyxRQUFRLFdBQVcsVUFBVSxTQUFTLFNBQVMsVUFBVSxTQUFTLFdBQVcsV0FBVyxVQUFVLFNBQVMsUUFBUSxZQUFZLFNBQVMsUUFBUSxXQUFXLFNBQVMsT0FBTyxTQUFTLFdBQVcsU0FBUyxpQkFBaUIsV0FBVyxXQUFXLFNBQVMsU0FBUyxZQUFZLFNBQVMsVUFBVSxXQUFXLFdBQVcsU0FBUyxRQUFRLFlBQVksWUFBWSxTQUFTLEtBQUssUUFBUSxXQUFXLFVBQVUsU0FBUyxTQUFTLFVBQVUsU0FBUyxXQUFXLFdBQVcsVUFBVSxTQUFTLFFBQVEsWUFBWSxTQUFTLFFBQVEsV0FBVyxTQUFTLE9BQU8sU0FBUyxXQUFXLFNBQVMsaUJBQWlCLFdBQVcsV0FBVyxTQUFTLFNBQVMsWUFBWSxTQUFTLFVBQVUsV0FBVyxXQUFXLFNBQVMsUUFBUSxZQUFZLFlBQVksU0FBUyxLQUFLLFFBQVEsV0FBVyxVQUFVLFNBQVMsU0FBUyxVQUFVLFNBQVMsV0FBVyxXQUFXLFVBQVUsU0FBUyxRQUFRLFlBQVksU0FBUyxRQUFRLFdBQVcsU0FBUyxPQUFPLFNBQVMsV0FBVyxTQUFTLGlCQUFpQixXQUFXLFdBQVcsU0FBUyxTQUFTLFlBQVksU0FBUyxVQUFVLFdBQVcsV0FBVyxTQUFTLFFBQVEsWUFBWSxZQUFZLFNBQVMsS0FBSyxRQUFRLFdBQVcsVUFBVSxTQUFTLFNBQVMsVUFBVSxTQUFTLFdBQVcsV0FBVyxVQUFVLFNBQVMsUUFBUSxZQUFZLFNBQVMsUUFBUSxXQUFXLFNBQVMsT0FBTyxTQUFTLFdBQVcsU0FBUyxpQkFBaUIsV0FBVyxXQUFXLFNBQVMsU0FBUyxZQUFZLFNBQVMsVUFBVSxXQUFXLFdBQVcsU0FBUyxRQUFRLFlBQVksWUFBWSxTQUFTLEtBQUssUUFBUSxXQUFXLFVBQVUsU0FBUyxTQUFTLFVBQVUsU0FBUyxXQUFXLFdBQVcsVUFBVSxTQUFTLFFBQVEsWUFBWSxTQUFTLFFBQVEsV0FBVyxTQUFTLE9BQU8sU0FBUyxXQUFXLFNBQVMsaUJBQWlCLFdBQVcsV0FBVyxTQUFTLFNBQVMsWUFBWSxTQUFTLFVBQVUsV0FBVyxXQUFXLFNBQVMsUUFBUSxZQUFZLFlBQVksU0FBUyxLQUFLLFFBQVEsV0FBVyxXQUFXLFNBQVMsU0FBUyxXQUFXLFNBQVMsV0FBVyxXQUFXLFdBQVcsU0FBUyxRQUFRLFlBQVksU0FBUyxRQUFRLFlBQVksU0FBUyxPQUFPLFNBQVMsWUFBWSxTQUFTLGlCQUFpQixXQUFXLFlBQVksU0FBUyxTQUFTLFlBQVksU0FBUyxVQUFVLFdBQVcsWUFBWSxTQUFTLFFBQVEsWUFBWSxhQUFhLFNBQVMsS0FBSyxRQUFRLFdBQVcsVUFBVSxTQUFTLFNBQVMsVUFBVSxTQUFTLFdBQVcsV0FBVyxVQUFVLFNBQVMsUUFBUSxZQUFZLFNBQVMsUUFBUSxXQUFXLFNBQVMsT0FBTyxTQUFTLFdBQVcsU0FBUyxpQkFBaUIsV0FBVyxXQUFXLFNBQVMsU0FBUyxZQUFZLFNBQVMsVUFBVSxXQUFXLFdBQVcsU0FBUyxRQUFRLFlBQVksWUFBWSxTQUFTLEtBQUssUUFBUSxXQUFXLFVBQVUsWUFBWSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFVBQVUsVUFBVSxXQUFXLFNBQVMsUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxVQUFVLFNBQVMsU0FBUyxZQUFZLFNBQVMsU0FBUyxZQUFZLFVBQVUsU0FBUyxXQUFXLFVBQVUsVUFBVSxZQUFZLFVBQVUsUUFBUSxXQUFXLFNBQVMsUUFBUSxhQUFhLGFBQWEsV0FBVyxXQUFXLFNBQVMsUUFBUSxhQUFhLFlBQVksV0FBVyxXQUFXLFdBQVcsVUFBVSxVQUFVLFVBQVUsWUFBWSxhQUFhLFlBQVksZ0JBQWdCLFNBQVMsT0FBTyxXQUFXLFVBQVUsVUFBVSxXQUFXLFdBQVcsV0FBVyxZQUFZLFlBQVksWUFBWSxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxXQUFXLE9BQU8sT0FBTyxVQUFVLE9BQU8sT0FBTyxXQUFXLFFBQVEsUUFBUSxVQUFVLFNBQVMsU0FBUyxhQUFhLFlBQVksV0FBVyxXQUFXLFdBQVcsUUFBUSxTQUFTLFdBQVcsV0FBVyxTQUFTLFNBQVMsVUFBVSxRQUFRLFlBQVksYUFBYSxlQUFlLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGFBQWEsU0FBUyxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsV0FBVyxZQUFZLFlBQVksUUFBUSxRQUFRLGFBQWEsZUFBZSxPQUFPLFFBQVEsYUFBYSxlQUFlLGVBQWUsZUFBZSxlQUFlLGFBQWEsU0FBUyxRQUFRLFVBQVUsVUFBVSxTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxhQUFhLGFBQWEsY0FBYyxVQUFVLFFBQVEsV0FBVyxXQUFXLFdBQVcsUUFBUSxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsYUFBYSxZQUFZLFVBQVUsWUFBWSxhQUFhLFNBQVMsT0FBTyxPQUFPLFVBQVUsUUFBUSxTQUFTLFdBQVcsVUFBVSxRQUFRLFFBQVEsVUFBVSxRQUFRLFFBQVEsYUFBYSxhQUFhLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsVUFBVSxVQUFVLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLGFBQWEsYUFBYSxVQUFVLFFBQVEsU0FBUyxZQUFZLFFBQVEsU0FBUyxZQUFZLFFBQVEsS0FBSyxPQUFPLFVBQVUsV0FBVyxVQUFVLFFBQVEsUUFBUSxZQUFZLFFBQVEsUUFBUSxXQUFXLFFBQVEsU0FBUyxXQUFXLFFBQVEsU0FBUyxhQUFhLE9BQU8sV0FBVyxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxhQUFhLGVBQWUsT0FBTyxRQUFRLGFBQWEsZUFBZSxPQUFPLFFBQVEsVUFBVSxRQUFRLFNBQVMsV0FBVyxVQUFVLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxhQUFhLGFBQWEsV0FBVyxVQUFVLFdBQVcsVUFBVSxRQUFRLFFBQVEsVUFBVSxRQUFRLFFBQVEsVUFBVSxXQUFXLFdBQVcsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsV0FBVyxnQkFBZ0IsU0FBUyxRQUFRLFdBQVcsZ0JBQWdCLFNBQVMsUUFBUSxhQUFhLGVBQWUsZUFBZSxlQUFlLGFBQWEsVUFBVSxXQUFXLGNBQWMsVUFBVSxXQUFXLFVBQVUsWUFBWSxTQUFTLFFBQVEsV0FBVyxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGFBQWEsZUFBZSxPQUFPLFFBQVEsYUFBYSxlQUFlLE9BQU8sUUFBUSxhQUFhLGFBQWEsYUFBYSxZQUFZLFVBQVUsV0FBVyxXQUFXLFdBQVcsYUFBYSxhQUFhLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsUUFBUSxTQUFTLGdCQUFnQixTQUFTLFNBQVMsZ0JBQWdCLFNBQVMsUUFBUSxXQUFXLFVBQVUsVUFBVSxXQUFXLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxVQUFVLFFBQVEsU0FBUyxZQUFZLFFBQVEsU0FBUyxZQUFZLFFBQVEsU0FBUyxXQUFXLFFBQVEsU0FBUyxXQUFXLFFBQVEsU0FBUyxhQUFhLE9BQU8sU0FBUyxhQUFhLFNBQVMsUUFBUSxhQUFhLE9BQU8sS0FBSyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsY0FBYyxTQUFTLFFBQVEsWUFBWSxPQUFPLFFBQVEsWUFBWSxPQUFPLFFBQVEsWUFBWSxPQUFPLFNBQVMsV0FBVyxXQUFXLGFBQWEsUUFBUSxRQUFRLGFBQWEsU0FBUyxTQUFTLFdBQVcsVUFBVSxXQUFXLFdBQVcsU0FBUyxXQUFXLFlBQVksYUFBYSxZQUFZLGVBQWUsZUFBZSxhQUFhLFNBQVMsVUFBVSxhQUFhLGVBQWUsZUFBZSxRQUFRLFVBQVUsYUFBYSxlQUFlLE9BQU8sVUFBVSxhQUFhLE9BQU8sVUFBVSxhQUFhLFNBQVMsWUFBWSxhQUFhLGVBQWUsYUFBYSxhQUFhLFlBQVksU0FBUyxTQUFTLGFBQWEsZUFBZSxhQUFhLFNBQVMsUUFBUSxhQUFhLGVBQWUsY0FBYyxRQUFRLFFBQVEsYUFBYSxhQUFhLFNBQVMsUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFNBQVMsT0FBTyxPQUFPLFVBQVUsUUFBUSxTQUFTLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsS0FBSyxPQUFPLE9BQU8sVUFBVSxVQUFVLFdBQVcsVUFBVSxRQUFRLFdBQVcsV0FBVyxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFdBQVcsVUFBVSxRQUFRLFFBQVEsVUFBVSxRQUFRLFFBQVEsV0FBVyxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFVBQVUsUUFBUSxLQUFLLFFBQVEsYUFBYSxlQUFlLGFBQWEsT0FBTyxRQUFRLFlBQVksUUFBUSxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFVBQVUsU0FBUyxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxVQUFVLFNBQVMsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsVUFBVSxTQUFTLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxTQUFTLFNBQVMsYUFBYSxVQUFVLFFBQVEsYUFBYSxhQUFhLGFBQWEsZUFBZSxlQUFlLGVBQWUsZUFBZSxVQUFVLFFBQVEsV0FBVyxVQUFVLGFBQWEsYUFBYSxRQUFRLFFBQVEsYUFBYSxhQUFhLFVBQVUsUUFBUSxRQUFRLGFBQWEsZUFBZSxRQUFRLFFBQVEsYUFBYSxPQUFPLFFBQVEsYUFBYSxRQUFRLFFBQVEsV0FBVyxhQUFhLFlBQVksV0FBVyxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxhQUFhLGVBQWUsT0FBTyxRQUFRLGFBQWEsT0FBTyxRQUFRLGFBQWEsZUFBZSxRQUFRLFNBQVMsVUFBVSxRQUFRLFNBQVMsYUFBYSxRQUFRLFFBQVEsYUFBYSxZQUFZLGNBQWMsZUFBZSxhQUFhLFdBQVcsWUFBWSxhQUFhLGVBQWUsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsYUFBYSxhQUFhLFVBQVUsV0FBVyxZQUFZLFdBQVcsV0FBVyxXQUFXLFFBQVEsUUFBUSxXQUFXLGFBQWEsZUFBZSxlQUFlLGVBQWUsWUFBWSxXQUFXLFdBQVcsYUFBYSxhQUFhLFFBQVEsUUFBUSxhQUFhLGVBQWUsT0FBTyxRQUFRLFVBQVUsUUFBUSxRQUFRLGFBQWEsZUFBZSxPQUFPLFFBQVEsV0FBVyxhQUFhLGVBQWUsZUFBZSxZQUFZLFVBQVUsVUFBVSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxVQUFVLFdBQVcsV0FBVyxXQUFXLFFBQVEsUUFBUSxXQUFXLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFdBQVcsUUFBUSxRQUFRLGFBQWEsZUFBZSxPQUFPLFFBQVEsYUFBYSxlQUFlLGFBQWEsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsYUFBYSxlQUFlLGVBQWUsYUFBYSxXQUFXLFFBQVEsUUFBUSxhQUFhLGVBQWUsWUFBWSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxhQUFhLGVBQWUsT0FBTyxRQUFRLGFBQWEsZUFBZSxPQUFPLFFBQVEsYUFBYSxlQUFlLGNBQWMsWUFBWSxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsYUFBYSxlQUFlLGFBQWEsUUFBUSxRQUFRLGFBQWEsZUFBZSxhQUFhLFFBQVEsUUFBUSxhQUFhLE9BQU8sUUFBUSxhQUFhLE9BQU8sUUFBUSxhQUFhLFFBQVEsYUFBYSxLQUFLLFVBQVUsVUFBVSxVQUFVLFVBQVUsV0FBVyxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZUFBZSxTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLE9BQU8sT0FBTyxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxlQUFlLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsS0FBSyxPQUFPLE9BQU8sVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGNBQWMsU0FBUyxRQUFRLGNBQWMsU0FBUyxRQUFRLGNBQWMsU0FBUyxRQUFRLGNBQWMsU0FBUyxRQUFRLGNBQWMsU0FBUyxRQUFRLGNBQWMsU0FBUyxRQUFRLGNBQWMsU0FBUyxRQUFRLGNBQWMsU0FBUyxRQUFRLGVBQWUsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZUFBZSxTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLEtBQUssT0FBTyxPQUFPLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGVBQWUsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxLQUFLLE9BQU8sT0FBTyxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxlQUFlLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsS0FBSyxPQUFPLE9BQU8sVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsZUFBZSxTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxXQUFXLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGdCQUFnQixTQUFTLEtBQUssT0FBTyxPQUFPLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLFVBQVUsVUFBVSxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLGdCQUFnQixTQUFTLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFVBQVUsUUFBUSxRQUFRLGVBQWUsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsZ0JBQWdCLFNBQVMsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLGdCQUFnQixTQUFTLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxnQkFBZ0IsU0FBUyxNQUFNLFFBQVEsZ0JBQWdCLGlCQUFpQixZQUFZLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxlQUFlLGdCQUFnQixXQUFXLFFBQVEsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sVUFBVSxRQUFRLEtBQUssT0FBTyxPQUFPLFVBQVUsUUFBUSxNQUFNLFFBQVEsV0FBVyxnQkFBZ0IsaUJBQWlCLFNBQVMsUUFBUSxXQUFXLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsTUFBTSxRQUFRLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxXQUFXLFFBQVEsUUFBUSxXQUFXLFdBQVcsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsWUFBWSxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsWUFBWSxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLE9BQU8sT0FBTyxVQUFVLFFBQVEsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsUUFBUSxVQUFVLFdBQVcsUUFBUSxRQUFRLFVBQVUsV0FBVyxRQUFRLFFBQVEsVUFBVSxVQUFVLFFBQVEsTUFBTSxjQUFjLEtBQUssV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLE9BQU8sVUFBVSxVQUFVLFVBQVUsUUFBUSxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxPQUFPLE9BQU8sV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLFFBQVEsV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxRQUFRLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsU0FBUyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsU0FBUyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsU0FBUyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsU0FBUyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsU0FBUyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxTQUFTLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLFFBQVEsV0FBVyxTQUFTLE9BQU8sTUFBTSxXQUFXLFFBQVEsS0FBSyxPQUFPLE1BQU0sV0FBVyxRQUFRLEtBQUssT0FBTyxNQUFNLFdBQVcsUUFBUSxLQUFLLE9BQU8sTUFBTSxXQUFXLFFBQVEsS0FBSyxPQUFPLE1BQU0sV0FBVyxRQUFRLEtBQUssT0FBTyxNQUFNLFdBQVcsUUFBUSxLQUFLLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLGNBQWMsS0FBSyxXQUFXLFVBQVUsV0FBVyxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFFBQVEsUUFBUSxXQUFXLFdBQVcsU0FBUyxTQUFTLFVBQVUsUUFBUSxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsUUFBUSxTQUFTLFdBQVcsU0FBUyxPQUFPLE9BQU8sWUFBWSxRQUFRLEtBQUssU0FBUyxXQUFXLFFBQVEsVUFBVSxXQUFXLFlBQVksU0FBUyxRQUFRLFlBQVksV0FBVyxRQUFRLFFBQVEsVUFBVSxRQUFRLFFBQVEsV0FBVyxVQUFVLFFBQVEsUUFBUSxZQUFZLFNBQVMsUUFBUSxXQUFXLFFBQVEsUUFBUSxZQUFZLGFBQWEsYUFBYSxRQUFRLFFBQVEsV0FBVyxRQUFRLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsV0FBVyxTQUFTLFNBQVMsVUFBVSxRQUFRLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxRQUFRLFNBQVMsV0FBVyxTQUFTLE9BQU8sT0FBTyxZQUFZLFFBQVEsS0FBSyxTQUFTLFdBQVcsUUFBUSxVQUFVLFdBQVcsWUFBWSxTQUFTLFFBQVEsWUFBWSxXQUFXLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFVBQVUsUUFBUSxRQUFRLFlBQVksU0FBUyxRQUFRLFdBQVcsUUFBUSxRQUFRLFlBQVksYUFBYSxhQUFhLFFBQVEsUUFBUSxXQUFXLFFBQVEsT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLFFBQVEsV0FBVyxXQUFXLFNBQVMsU0FBUyxVQUFVLFFBQVEsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFFBQVEsU0FBUyxXQUFXLFNBQVMsT0FBTyxPQUFPLFlBQVksUUFBUSxLQUFLLFNBQVMsV0FBVyxRQUFRLFVBQVUsV0FBVyxZQUFZLFNBQVMsUUFBUSxZQUFZLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsVUFBVSxRQUFRLFFBQVEsWUFBWSxTQUFTLFFBQVEsV0FBVyxRQUFRLFFBQVEsWUFBWSxhQUFhLGFBQWEsUUFBUSxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssUUFBUSxXQUFXLFVBQVUsU0FBUyxTQUFTLFVBQVUsUUFBUSxRQUFRLFVBQVUsU0FBUyxRQUFRLFdBQVcsUUFBUSxTQUFTLFVBQVUsU0FBUyxPQUFPLE9BQU8sWUFBWSxRQUFRLEtBQUssU0FBUyxXQUFXLFFBQVEsVUFBVSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxRQUFRLFFBQVEsVUFBVSxRQUFRLFFBQVEsV0FBVyxVQUFVLFFBQVEsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFFBQVEsUUFBUSxZQUFZLGFBQWEsYUFBYSxRQUFRLFFBQVEsV0FBVyxRQUFRLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsVUFBVSxTQUFTLFNBQVMsVUFBVSxRQUFRLFFBQVEsVUFBVSxTQUFTLFFBQVEsV0FBVyxRQUFRLFNBQVMsVUFBVSxTQUFTLE9BQU8sT0FBTyxZQUFZLFFBQVEsS0FBSyxTQUFTLFdBQVcsUUFBUSxVQUFVLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFVBQVUsUUFBUSxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsUUFBUSxRQUFRLFlBQVksYUFBYSxhQUFhLFFBQVEsUUFBUSxXQUFXLFFBQVEsT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLFFBQVEsV0FBVyxVQUFVLFNBQVMsU0FBUyxVQUFVLFFBQVEsUUFBUSxVQUFVLFNBQVMsUUFBUSxXQUFXLFFBQVEsU0FBUyxVQUFVLFNBQVMsT0FBTyxPQUFPLFlBQVksUUFBUSxLQUFLLFNBQVMsV0FBVyxRQUFRLFVBQVUsV0FBVyxXQUFXLFNBQVMsUUFBUSxXQUFXLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsVUFBVSxRQUFRLFFBQVEsV0FBVyxTQUFTLFFBQVEsV0FBVyxRQUFRLFFBQVEsWUFBWSxhQUFhLGFBQWEsUUFBUSxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssUUFBUSxXQUFXLFVBQVUsU0FBUyxTQUFTLFVBQVUsUUFBUSxRQUFRLFVBQVUsU0FBUyxRQUFRLFdBQVcsUUFBUSxTQUFTLFVBQVUsU0FBUyxPQUFPLE9BQU8sWUFBWSxRQUFRLEtBQUssU0FBUyxXQUFXLFFBQVEsVUFBVSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxRQUFRLFFBQVEsVUFBVSxRQUFRLFFBQVEsV0FBVyxVQUFVLFFBQVEsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFFBQVEsUUFBUSxZQUFZLGFBQWEsYUFBYSxRQUFRLFFBQVEsV0FBVyxRQUFRLE9BQU8sT0FBTyxXQUFXLFFBQVEsS0FBSyxRQUFRLFdBQVcsVUFBVSxTQUFTLFNBQVMsVUFBVSxRQUFRLFFBQVEsVUFBVSxTQUFTLFFBQVEsV0FBVyxRQUFRLFNBQVMsVUFBVSxTQUFTLE9BQU8sT0FBTyxZQUFZLFFBQVEsS0FBSyxTQUFTLFdBQVcsUUFBUSxVQUFVLFdBQVcsV0FBVyxTQUFTLFFBQVEsV0FBVyxXQUFXLFFBQVEsUUFBUSxVQUFVLFFBQVEsUUFBUSxXQUFXLFVBQVUsUUFBUSxRQUFRLFdBQVcsU0FBUyxRQUFRLFdBQVcsUUFBUSxRQUFRLFlBQVksYUFBYSxhQUFhLFFBQVEsUUFBUSxXQUFXLFFBQVEsT0FBTyxPQUFPLFdBQVcsUUFBUSxLQUFLLFFBQVEsV0FBVyxXQUFXLFNBQVMsU0FBUyxVQUFVLFFBQVEsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFFBQVEsU0FBUyxXQUFXLFNBQVMsT0FBTyxPQUFPLFlBQVksUUFBUSxLQUFLLFNBQVMsV0FBVyxRQUFRLFVBQVUsV0FBVyxZQUFZLFNBQVMsUUFBUSxZQUFZLFdBQVcsUUFBUSxRQUFRLFVBQVUsUUFBUSxRQUFRLFdBQVcsVUFBVSxRQUFRLFFBQVEsWUFBWSxTQUFTLFFBQVEsV0FBVyxRQUFRLFFBQVEsWUFBWSxhQUFhLGFBQWEsUUFBUSxRQUFRLFdBQVcsUUFBUSxPQUFPLE9BQU8sV0FBVyxRQUFRLEtBQUssUUFBUSxXQUFXLFVBQVUsU0FBUyxTQUFTLFVBQVUsUUFBUSxRQUFRLFVBQVUsU0FBUyxRQUFRLFdBQVcsUUFBUSxTQUFTLFVBQVUsU0FBUyxPQUFPLE9BQU8sWUFBWSxRQUFRLEtBQUssU0FBUyxXQUFXLFFBQVEsVUFBVSxXQUFXLFdBQVcsU0FBUyxRQUFRLFdBQVcsV0FBVyxRQUFRLFFBQVEsVUFBVSxRQUFRLFFBQVEsV0FBVyxVQUFVLFFBQVEsUUFBUSxXQUFXLFNBQVMsUUFBUSxXQUFXLFFBQVEsUUFBUSxZQUFZLGFBQWEsYUFBYSxRQUFRLFFBQVEsV0FBVyxRQUFRLE9BQU8s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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELEVBQUU7QUFDbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQyxFQUFFOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2QsY0FBYztBQUNkLGdCQUFnQjtBQUNoQixlQUFlO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVixTQUFTO0FBQ1QsU0FBUztBQUNULFdBQVc7QUFDWCxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLEdBQUc7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLEdBQUc7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsR0FBRztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixHQUFHO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFB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QUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUSxVQUFVO0FBQ2pDLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUSxVQUFVO0FBQ2pDLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsVUFBVTtBQUN6QixpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFVBQVU7QUFDekIsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFVBQVU7QUFDekIsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixlQUFlLEdBQUc7QUFDbEIsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FB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QTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsR0FBRztBQUNsQixlQUFlLE1BQU07QUFDckIsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLE1BQU07QUFDckIsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsZUFBZSxRQUFRO0FBQ3ZCLGdCQUFnQixRQUFRO0FBQ3hCLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCLFFBQVE7QUFDeEIsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVEsV0FBVztBQUNsQyxlQUFlLFNBQVM7QUFDeEI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQSxpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLG1EQUFtRCxpQkFBaUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsTUFBTTtBQUNyQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxNQUFNO0FBQ3JCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsVUFBVTtBQUN6QixpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsMEJBQTBCO0FBQ3pDO0FBQ0EsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUc7QUFDbEIsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLG1CQUFtQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELG1CQUFtQjtBQUN0RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFT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QUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixnQkFBZ0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsUUFBUTtBQUMxQixlQUFlO0FBQ2Y7QUFDQSxrQkFBa0IsUUFBUTtBQUMxQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsV0FBVztBQUMxQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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ZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0NBQWtDLEtBQUs7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixnQkFBZ0IsUUFBUTtBQUN4QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixnQkFBZ0IsUUFBUTtBQUN4QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGdCQUFnQixRQUFRO0FBQ3hCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCLFFBQVE7QUFDeEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGdCQUFnQixRQUFRO0FBQ3hCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVEsV0FBVztBQUNsQyxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsZUFBZTtBQUM5QixpQkFBaUIsUUFBUTtB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLLE9BQU8sZ0JBQWdCOztBQUU1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87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QztFQUNkLENBQUMsTUFBTTtJQUNIM04sUUFBUSxDQUFDK0csZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUU0RyxRQUFRLENBQUM7RUFDM0Q7QUFDSjtBQUNBRCxVQUFVLENBQUMsWUFBWTtFQUNuQkksVUFBVSxDQUFDLE1BQU07SUFDYjlOLFFBQVEsQ0FBQ2tOLElBQUksQ0FBQ3BGLFNBQVMsQ0FBQ0csTUFBTSxDQUFDLFlBQVksQ0FBQztFQUVoRCxDQUFDLEVBQUUsR0FBRyxDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBR0YsSUFBSXBELGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxFQUFFO0VBQzVCLE1BQU1rSixXQUFXLEdBQUcvTixRQUFRLENBQUNRLGFBQWEsQ0FBQyxRQUFRLENBQUM7RUFDcER1TixXQUFXLENBQUN0TixZQUFZLENBQUMsS0FBSyxFQUFFLG1DQUFtQyxDQUFDO0VBQ3BFVCxRQUFRLENBQUNrTixJQUFJLENBQUNuTSxXQUFXLENBQUNnTixXQUFXLENBQUM7RUFFdENELFVBQVUsQ0FBQyxNQUFNO0lBQ2IsTUFBTWhKLEdBQUcsR0FBR0Qsa0JBQWtCLENBQUMsTUFBTSxDQUFDO0lBQ3RDLE1BQU1tSixLQUFLLEdBQUcsSUFBSUMsVUFBVSxDQUN4QixzQ0FBc0MsR0FBR25KLEdBQzdDLENBQUM7SUFDRGtKLEtBQUssQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRTtNQUFFQyxLQUFLLEVBQUUsR0FBRztNQUFFQyxNQUFNLEVBQUU7SUFBRSxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDeFAsSUFBSSxJQUFJO01BQ3hEVyxNQUFNLENBQUNDLElBQUksR0FBR1osSUFBSTtJQUN0QixDQUFDLENBQUM7RUFDTixDQUFDLEVBQUUsR0FBRyxDQUFDO0FBQ1gsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvdGQvLi9zcmMvYzRybi5qcyIsIndlYnBhY2s6Ly9jb3RkLy4vc3JjL2RhdGEvZmlzaC9hbGFza2EuanMiLCJ3ZWJwYWNrOi8vY290ZC8uL3NyYy9kYXRhL2Zpc2gvYWxsZmlzaC5qcyIsIndlYnBhY2s6Ly9jb3RkLy4vc3JjL2RhdGEvZmlzaC9hdXN0cmFsaWEuanMiLCJ3ZWJwYWNrOi8vY290ZC8uL3NyYy9kYXRhL2Zpc2gvY3IuanMiLCJ3ZWJwYWNrOi8vY290ZC8uL3NyYy9kYXRhL2Zpc2gvZ2wuanMiLCJ3ZWJwYWNrOi8vY290ZC8uL3NyYy9kYXRhL2Zpc2gvcGFyYWRpc2UuanMiLCJ3ZWJwYWNrOi8vY290ZC8uL3NyYy9kYXRhL2Zpc2gvc2NvdGxhbmQuanMiLCJ3ZWJwYWNrOi8vY290ZC8uL3NyYy9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vY290ZC8uL25vZGVfbW9kdWxlcy9idWxtYS9idWxtYS5zYXNzIiwid2VicGFjazovL2NvdGQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2NvdGQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9jb3RkLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vY290ZC8uL3NyYy9zdHlsZS5zY3NzP2JjM2IiLCJ3ZWJwYWNrOi8vY290ZC8uL25vZGVfbW9kdWxlcy9idWxtYS9idWxtYS5zYXNzPzBlMDYiLCJ3ZWJwYWNrOi8vY290ZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9jb3RkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9jb3RkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2NvdGQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vY290ZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2NvdGQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9jb3RkL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NvdGQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vY290ZC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY290ZC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2NvdGQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9jb3RkL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vY290ZC93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2NvdGQvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2NvdGQvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vL2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC8/YzRybj02NDgyM2E1ZmVjZWQ5YjA5ZTlkNGFhZjVcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDNHJuKGZpc2hJZCkge1xuXG4gICAgZnVuY3Rpb24gZmluZE9iamVjdEJ5SWQoYXJyYXksIGlkKSB7XG4gICAgICAgIHJldHVybiBfLmZpbmQoYXJyYXksIHsgaWQ6IGlkIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnZlcnRUb0pTT04oanNvblN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBmaXhlZFN0cmluZyA9IGpzb25TdHJpbmcucmVwbGFjZSgvKFthLXpBLVowLTldKz8pOi9nLCAnXCIkMVwiOicpO1xuICAgICAgICAgIHZhciBqc29uQXJyYXlTdHJpbmcgPSBcIltcIiArIGZpeGVkU3RyaW5nICsgXCJdXCI7XG4gICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKGpzb25BcnJheVN0cmluZyk7XG4gICAgICAgICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJldXIgbG9ycyBkZSBsYSBjb252ZXJzaW9uIGVuIEpTT04gOicsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cblxuICAgIGZ1bmN0aW9uIHRlc3RXaW5kb3dDNHJuKCkge1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICBpZiAod2luZG93LmM0cm4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYzRybk5vdGUoKVxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICBpZiAoY291bnQgPT09IDUwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd3aW5kb3cuYzRybiBpbnRyb3V2YWJsZSBhcHLDqHMgNTAgZXNzYWlzLicpO1xuICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIDUwKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdGVzdFdpbmRvd0M0cm4oKTtcbiAgICAgIFxuXG4gICAgICBmdW5jdGlvbiBjNHJuTm90ZSgpIHtcbiAgICAgICAgY29uc3QgYzRybkZpc2ggPSBmaW5kT2JqZWN0QnlJZCh3aW5kb3cuYzRybiwgZmlzaElkKTtcblxuICAgICAgICBpZihjNHJuRmlzaCl7XG4gICAgICAgICAgICBpZihjNHJuRmlzaC5ub3RlICE9PSBudWxsKXtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBvc2l0aW9uTm90ZVwiKS5pbm5lckhUTUwgPSBjNHJuRmlzaC5ub3RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICBcbiAgICAgICAgICAgIHZhciBjb252ZXJ0ZWRKU09OID0gY29udmVydFRvSlNPTihjNHJuRmlzaC5wb3MpOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihjb252ZXJ0ZWRKU09OKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjNHJuUG9zID0gSlNPTi5wYXJzZShjb252ZXJ0ZWRKU09OKTtcblxuICAgICAgICAgICAgICAgIGM0cm5Qb3MuZm9yRWFjaChwb3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zRWxlbS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNjcm9zc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zRWxlbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWZpc2hpZFwiLCBmaXNoSWQpO1xuICAgICAgICAgICAgICAgICAgICBwb3NFbGVtLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiYmFja2dyb3VuZC1pbWFnZTp1cmwoJy4vaW1hZ2VzL2M0cm4ucG5nJylcIilcbiAgICAgICAgICAgICAgICAgICAgcG9zRWxlbS5zdHlsZS5sZWZ0ID0gcG9zLnggKyBcIiVcIlxuICAgICAgICAgICAgICAgICAgICBwb3NFbGVtLnN0eWxlLnRvcCA9IHBvcy55ICsgXCIlXCJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwb3NpdGlvbnMtY29udGFpbmVyXCIpLmFwcGVuZENoaWxkKHBvc0VsZW0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbn1cblxuIiwiXG5leHBvcnQgY29uc3QgYWxhc2thRmlzaCA9IFtcbiAgICB7XG4gICAgICAgIGlkOiBcIjMxXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImFyY3RpYyBjaGFyXCIsXG4gICAgICAgICAgICBmcjogXCJvbWJsZSBjaGV2YWxpZXJcIixcbiAgICAgICAgICAgIHB0OiBcInRydXRhIGRlIMOgcnRpY29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAzLFxuICAgICAgICAgICAgbWF4OiAxNVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNi42MSxcbiAgICAgICAgICAgIG1heDogMzMuMDdcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImFsYXNrYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAzMCxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMzJcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiYXRrYSBtYWNrZXJlbFwiLFxuICAgICAgICAgICAgZnI6IFwibWFxdWVyZWF1IGF0a2FcIixcbiAgICAgICAgICAgIHB0OiBcImNhdmFsYSBhdGthXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFszXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiAyXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIsXG4gICAgICAgICAgICBtYXg6IDQuNDFcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImFsYXNrYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAzMCxcbiAgICAgICAgICAgICAgICB5OiA1NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAxNSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAzMCxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NSxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMzNcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwieWVsbG93IGlyaXNoIGxvcmRcIixcbiAgICAgICAgICAgIGZyOiBcInNlaWduZXVyIGlybGFuZGFpcyBqYXVuZVwiLFxuICAgICAgICAgICAgcHQ6IFwibG9yZCBpcmxhbmTDqnMgYW1hcmVsb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiAzXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIsXG4gICAgICAgICAgICBtYXg6IDYuNjFcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImFsYXNrYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2NSxcbiAgICAgICAgICAgICAgICB5OiA0MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA0NSxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4MCxcbiAgICAgICAgICAgICAgICB5OiA0NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAzNSxcbiAgICAgICAgICAgICAgICB5OiAyMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMzRcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwibGFuY2V0ZmlzaFwiLFxuICAgICAgICAgICAgZnI6IFwiY2F2YWxvIGbDqXJvY2VcIixcbiAgICAgICAgICAgIHB0OiBcImxpcmlvIGZlcnJvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiA5XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIsXG4gICAgICAgICAgICBtYXg6IDE5Ljg0XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhbGFza2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMzAsXG4gICAgICAgICAgICAgICAgeTogNTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNjUsXG4gICAgICAgICAgICAgICAgeTogODVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogODAsXG4gICAgICAgICAgICAgICAgeTogNDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogODUsXG4gICAgICAgICAgICAgICAgeTogNjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjM1XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInN0ZWVsaGVhZFwiLFxuICAgICAgICAgICAgZnI6IFwidHJ1aXRlIGFyYy1lbi1jaWVsXCIsXG4gICAgICAgICAgICBwdDogXCJ0cnVpdGEgYXJjby1pcmlzXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyLDNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDMsXG4gICAgICAgICAgICBtYXg6IDI1XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA2LjYxLFxuICAgICAgICAgICAgbWF4OiA1NS4xMlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY1LFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY1LFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDgwLFxuICAgICAgICAgICAgICAgIHk6IDQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDM1LFxuICAgICAgICAgICAgICAgIHk6IDIwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzNlwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJzaWx2ZXIgc2FsbW9uXCIsXG4gICAgICAgICAgICBmcjogXCJzYXVtb24gY29ob1wiLFxuICAgICAgICAgICAgcHQ6IFwic2FsbcOjbyBwcmF0ZWFkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDE1XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIwLFxuICAgICAgICAgICAgbWF4OiAzMy4wN1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY1LFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDgwLFxuICAgICAgICAgICAgICAgIHk6IDQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDM1LFxuICAgICAgICAgICAgICAgIHk6IDIwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzN1wiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJyb3VnaGV5ZSByb2NrZmlzaFwiLFxuICAgICAgICAgICAgZnI6IFwic8OpYmFzdGUgw6Agb2VpbCDDqXBpbmV1eFwiLFxuICAgICAgICAgICAgcHQ6IFwicGVpeGUtcm9jayByb3VnaGV5ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiA3XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxNS40M1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQ1LFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY1LFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzOFwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJwYWNpZmljIGhlcnJpbmdcIixcbiAgICAgICAgICAgIGZyOiBcImhhcmVuZyBkdSBwYWNpZmlxdWVcIixcbiAgICAgICAgICAgIHB0OiBcImFyZW5xdWUgZGUgcGFjaWZpY29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogW10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAwLjEsXG4gICAgICAgICAgICBtYXg6IDAuM1xuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMC4yMixcbiAgICAgICAgICAgIG1heDogMC42NlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDEwLFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDEwLFxuICAgICAgICAgICAgICAgIHk6IDM1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzOVwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJzb2NrZXllIHNhbG1vblwiLFxuICAgICAgICAgICAgZnI6IFwic2F1bW9uIHJvdWdlXCIsXG4gICAgICAgICAgICBwdDogXCJzYWxtw6NvLXZlcm1lbGhvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiA4XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxNy42NFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY0LFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDcwLFxuICAgICAgICAgICAgICAgIHk6IDYwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMTBcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiZG9sbHkgdmFyZGVuXCIsXG4gICAgICAgICAgICBmcjogXCJkb2xseSB2YXJkZW5cIixcbiAgICAgICAgICAgIHB0OiBcInRydXRhIGRvbGx5IHZhcmRlblwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAzLFxuICAgICAgICAgICAgbWF4OiAxOFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNi42MSxcbiAgICAgICAgICAgIG1heDogMzkuNjhcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImFsYXNrYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2NCxcbiAgICAgICAgICAgICAgICB5OiA0MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NSxcbiAgICAgICAgICAgICAgICB5OiA2NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA3MCxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4MCxcbiAgICAgICAgICAgICAgICB5OiA0MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMzExXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImNvYWxmaXNoXCIsXG4gICAgICAgICAgICBmcjogXCJjaGFyYm9ubmllclwiLFxuICAgICAgICAgICAgcHQ6IFwicGVpeGUtY2FydsOjbyBkZSBwYWNpZmljb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAzLFxuICAgICAgICAgICAgbWF4OiAxOFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMTEuMDIsXG4gICAgICAgICAgICBtYXg6IDY4LjM0XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhbGFza2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNjQsXG4gICAgICAgICAgICAgICAgeTogNDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogODUsXG4gICAgICAgICAgICAgICAgeTogNDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMzAsXG4gICAgICAgICAgICAgICAgeTogNTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDAsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjMxMlwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJjaHVtIHNhbG1vblwiLFxuICAgICAgICAgICAgZnI6IFwic2F1bW9uIGNoaWVuXCIsXG4gICAgICAgICAgICBwdDogXCJzYWxtw6NvIGPDo29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDIsXG4gICAgICAgICAgICBtYXg6IDE2XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAzNS4yN1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDMwLFxuICAgICAgICAgICAgICAgIHk6IDU1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMTNcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiY2FwZWxpblwiLFxuICAgICAgICAgICAgZnI6IFwiY2FwZWxhblwiLFxuICAgICAgICAgICAgcHQ6IFwiY2FwZWxpbVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAwLjAxLFxuICAgICAgICAgICAgbWF4OiAwLjFcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDAuMDIsXG4gICAgICAgICAgICBtYXg6IDAuMjJcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImFsYXNrYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA5MCxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAzMCxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAxNSxcbiAgICAgICAgICAgICAgICB5OiA1MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMzE0XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImJ1cmJvdFwiLFxuICAgICAgICAgICAgZnI6IFwibG90dGVcIixcbiAgICAgICAgICAgIHB0OiBcImJ1cmJvdFwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogNSxcbiAgICAgICAgICAgIG1heDogMzRcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDExLjAyLFxuICAgICAgICAgICAgbWF4OiA3NC45NlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDY1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDgwLFxuICAgICAgICAgICAgICAgIHk6IDQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDMwLFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMTVcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiYmlnbW91dGggc2N1bHBpblwiLFxuICAgICAgICAgICAgZnI6IFwiY2hhYm90IMOgIGdyYW5kZS1ib3VjaGVcIixcbiAgICAgICAgICAgIHB0OiBcImVzY3VsdG9yIGRlIGJpZ21vdXRoXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFswLDFdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuNSxcbiAgICAgICAgICAgIG1heDogM1xuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMS4xMCxcbiAgICAgICAgICAgIG1heDogNi42MVxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY1LFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDgwLFxuICAgICAgICAgICAgICAgIHk6IDQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMTZcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiYXJjdGljIGdyZXlsaW5nXCIsXG4gICAgICAgICAgICBmcjogXCJvbWJyZSBhcmN0aXF1ZVwiLFxuICAgICAgICAgICAgcHQ6IFwiZ3JheWxpbmcgw6BydGljb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMCwxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMixcbiAgICAgICAgICAgIG1heDogNFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNC40MSxcbiAgICAgICAgICAgIG1heDogOC44MlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDMwLFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDI1LFxuICAgICAgICAgICAgICAgIHk6IDU1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMTdcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiaHVtcGJhY2sgc2FsbW9uXCIsXG4gICAgICAgICAgICBmcjogXCJzYXVtb24gcm9zZSDDoCBib3NzZVwiLFxuICAgICAgICAgICAgcHQ6IFwic2FsbcOjbyByb3NhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzFdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiA3XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxNS40M1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY1LFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDIwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMThcIixcbiAgICAgICAgdHlwZTogXCJyYXJlXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImhhbGlidXRcIixcbiAgICAgICAgICAgIGZyOiBcImZsw6l0YW4gZHUgcGFjaWZpcXVlXCIsXG4gICAgICAgICAgICBwdDogXCJoYWxpYnV0ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMyw0XSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDIwLFxuICAgICAgICAgICAgbWF4OiAzNjNcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQ0LjA5LFxuICAgICAgICAgICAgbWF4OiA4MDAuMjhcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImFsYXNrYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA5MCxcbiAgICAgICAgICAgICAgICB5OiAyNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAzMCxcbiAgICAgICAgICAgICAgICB5OiA1NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMzE5XCIsXG4gICAgICAgIHR5cGU6IFwicmFyZVwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJibHVlIGxpbmdjb2RcIixcbiAgICAgICAgICAgIGZyOiBcIm1vcnVlLWxpbmd1ZSBibGV1ZVwiLFxuICAgICAgICAgICAgcHQ6IFwiYmFjYWxoYXUgbGluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMjAsXG4gICAgICAgICAgICBtYXg6IDM2M1xuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMTEuMDIsXG4gICAgICAgICAgICBtYXg6IDEzMC4wN1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQ1LFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDcwLFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMjBcIixcbiAgICAgICAgdHlwZTogXCJyYXJlXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInNwaW55IHNrYXRlXCIsXG4gICAgICAgICAgICBmcjogXCJyYWllIGJsYW5jaGUgZHUgcGFjaWZpcXVlXCIsXG4gICAgICAgICAgICBwdDogXCJhcnJhaWEgYnJhbmNvIGRlIHBhY2lmaWNvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyLDNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogNjBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMjAsXG4gICAgICAgICAgICBtYXg6IDEzMi4yOFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQ1LFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDcwLFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDMwLFxuICAgICAgICAgICAgICAgIHk6IDU1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJJcyBiYXNpY2FsbHkgZXZlcnl3aGVyZS4uLlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjMyMVwiLFxuICAgICAgICB0eXBlOiBcInJhcmVcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwid29sZiBlZWxcIixcbiAgICAgICAgICAgIGZyOiBcInBvaXNzb24gbG91cCDDoCBvY2VsbGVzXCIsXG4gICAgICAgICAgICBwdDogXCJlbmd1aWEtbG9ib1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAzLFxuICAgICAgICAgICAgbWF4OiAxOFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNi42MSxcbiAgICAgICAgICAgIG1heDogMzkuNjhcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImFsYXNrYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NSxcbiAgICAgICAgICAgICAgICB5OiA2NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA3MCxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4MCxcbiAgICAgICAgICAgICAgICB5OiA0NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMzIyXCIsXG4gICAgICAgIHR5cGU6IFwiZXBpY1wiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJraW5nIHNhbG1vblwiLFxuICAgICAgICAgICAgZnI6IFwic2F1bW9uIHJveWFsXCIsXG4gICAgICAgICAgICBwdDogXCJzYWxtw6NvLXJlaVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA1LFxuICAgICAgICAgICAgbWF4OiA2MVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMTEuMDIsXG4gICAgICAgICAgICBtYXg6IDEzNC40OFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY1LFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMjNcIixcbiAgICAgICAgdHlwZTogXCJlcGljXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInNhbG1vbiBzaGFya1wiLFxuICAgICAgICAgICAgZnI6IFwicmVxdWluIHNhdW1vblwiLFxuICAgICAgICAgICAgcHQ6IFwidHViYXLDo28tc2FsbcOjb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbM10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA0MCxcbiAgICAgICAgICAgIG1heDogMTc1XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA4OC4xOCxcbiAgICAgICAgICAgIG1heDogMzg1LjgxXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhbGFza2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogODUsXG4gICAgICAgICAgICAgICAgeTogNDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNTAsXG4gICAgICAgICAgICAgICAgeTogNzVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNTUsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcInBvc2l0aW9uIGhhcyBiZWVuIGNoYW5nZWQgcmVjZW50bHkuPGJyPlRyeSB0aGUgd2VzdCBzcG90IGZpcnN0Ljxicj5QbGVhc2Ugc2VuZCBhIG1lc3NhZ2UgaWYgeW91IGhhdmUgZm91bmQgYSBzb2xpZCBzcG90LlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjMyNFwiLFxuICAgICAgICB0eXBlOiBcImVwaWNcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwicGFjaWZpYyBzbGVlcGVyIHNoYXJrXCIsXG4gICAgICAgICAgICBmcjogXCJyZXF1aW4gZG9ybWV1ciBkdSBwYWNpZmlxdWVcIixcbiAgICAgICAgICAgIHB0OiBcInR1YmFyw6NvLWRvcm1lZG9yIGRlIHBhY2lmaWNvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFszLDRdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICBtYXg6IDM2M1xuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMjIuMDUsXG4gICAgICAgICAgICBtYXg6IDgwMC4yOFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYWxhc2thXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDMwLFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDgwLFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMjVcIixcbiAgICAgICAgdHlwZTogXCJlcGljXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInN1bmZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcIm3DtGxlXCIsXG4gICAgICAgICAgICBwdDogXCJwZWl4ZS1sdW5hXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTAwLFxuICAgICAgICAgICAgbWF4OiAyNDAwXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyMjAuNDYsXG4gICAgICAgICAgICBtYXg6IDUyOTEuMDlcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImFsYXNrYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiVmVyeSBkaWZmaWN1bHQgdG8gZmluZC4gQmUgcGF0aWVudC5cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIzMjZcIixcbiAgICAgICAgdHlwZTogXCJtb25zdGVyXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImtyYWtlblwiLFxuICAgICAgICAgICAgZnI6IFwia3Jha2VuXCIsXG4gICAgICAgICAgICBwdDogXCJrcmFrZW5cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAyLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogW10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyMDAsXG4gICAgICAgICAgICBtYXg6IDUwMFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNDQwLjkyLFxuICAgICAgICAgICAgbWF4OiAxMTAyLjMxXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhbGFza2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTQsXG4gICAgICAgICAgICAgICAgeTogNjZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTcsXG4gICAgICAgICAgICAgICAgeTogNzRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTcsXG4gICAgICAgICAgICAgICAgeTogODhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMjksXG4gICAgICAgICAgICAgICAgeTogODVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIk1PTlNURVI8YnI+U3BvdCByb3RhdGlvbjogaXQgY2hhbmdlcyBldmVyeSBkYXkuPGJyPlRyeSBtb25zdGVyIGJhaXRzIHRvIGZpbmQgdGhlIGJ1YmJsZXMsIHRoZW4gY2FzdCBhbmQgd2FpdCBpbnRvIHRoZSBidWJibGVzLjxicj5JZiB5b3UgZG9uJ3QgaGF2ZSBhbnkgbW9uc3RlciBiYWl0cywgdHJ5IGNhc3QgYW5kIHJlZWwgYW5kIHdhaXQgKGFuZCBiZSBwYXRpZW50KS5cIlxuICAgIH0sXG5dIiwiXG5pbXBvcnQgeyBwYXJhZGlzZUZpc2ggfSBmcm9tICcuL3BhcmFkaXNlLmpzJztcbmltcG9ydCB7IGdsRmlzaCB9IGZyb20gJy4vZ2wuanMnO1xuaW1wb3J0IHsgY3JGaXNoIH0gZnJvbSAnLi9jci5qcyc7XG5pbXBvcnQgeyBhbGFza2FGaXNoIH0gZnJvbSAnLi9hbGFza2EuanMnO1xuaW1wb3J0IHsgYXVzdHJhbGlhRmlzaCB9IGZyb20gJy4vYXVzdHJhbGlhLmpzJztcbmltcG9ydCB7IHNjb3RsYW5kRmlzaCB9IGZyb20gJy4vc2NvdGxhbmQuanMnO1xuXG5cbmNvbnN0IGZpc2hlcyA9IFsuLi5wYXJhZGlzZUZpc2gsIC4uLmdsRmlzaCwgLi4uY3JGaXNoLCAuLi5hbGFza2FGaXNoLCAuLi5hdXN0cmFsaWFGaXNoLCAuLi5zY290bGFuZEZpc2hdO1xuXG5cblxuZXhwb3J0IHsgZmlzaGVzIH07XG4iLCJleHBvcnQgY29uc3QgYXVzdHJhbGlhRmlzaCA9IFtcbiAgICB7XG4gICAgICAgIGlkOiBcIjQwXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIkJsYWNrIEJyZWFtXCIsXG4gICAgICAgICAgICBmcjogXCJkYXVyYWRlIG5vaXJlXCIsXG4gICAgICAgICAgICBwdDogXCJzYXJnby1wcmV0b1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMCwxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDRcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMixcbiAgICAgICAgICAgIG1heDogOC44MlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NSxcbiAgICAgICAgICAgICAgICB5Ojk1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6ODUsXG4gICAgICAgICAgICAgICAgeTo0N1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjcwLFxuICAgICAgICAgICAgICAgIHk6MzBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjQxXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImR1c2t5IGZsYXRoZWFkXCIsXG4gICAgICAgICAgICBmcjogXCJwb2lzc29uLWNyb2NvZGlsZVwiLFxuICAgICAgICAgICAgcHQ6IFwiZmxhdGhlYWRcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMyxcbiAgICAgICAgICAgIG1heDogMTVcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDYuNjEsXG4gICAgICAgICAgICBtYXg6IDMzLjA3XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhdXN0cmFsaWFcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDoxNSxcbiAgICAgICAgICAgICAgICB5OjQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6OTUsXG4gICAgICAgICAgICAgICAgeTozMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDJcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiUmVkIEVtcGVyb3IgU25hcHBlclwiLFxuICAgICAgICAgICAgZnI6IFwidml2YW5lYXUgYm91cmdlb2lzXCIsXG4gICAgICAgICAgICBwdDogXCJqZW5haGFrXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxMixcbiAgICAgICAgICAgIG1heDogMzJcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDI2LjQ2LFxuICAgICAgICAgICAgbWF4OiA3MC41NVxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6ODUsXG4gICAgICAgICAgICAgICAgeTo0N1xuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiIFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjQzXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIlNob3J0ZmluIE1ha28gU2hhcmtcIixcbiAgICAgICAgICAgIGZyOiBcInJlcXVpbiBtYWtvXCIsXG4gICAgICAgICAgICBwdDogXCJ0dWJhcsOjby1tYWtvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsxLDIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTE0LFxuICAgICAgICAgICAgbWF4OiA1MDVcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDI1MS4zMyxcbiAgICAgICAgICAgIG1heDogMTExMy4zM1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NSxcbiAgICAgICAgICAgICAgICB5Ojk1XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIiBcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI0NFwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJDYXJwZXQgU2hhcmtcIixcbiAgICAgICAgICAgIGZyOiBcInJlcXVpbi10YXBpcyBiYXJidVwiLFxuICAgICAgICAgICAgcHQ6IFwidHViYXLDo28gdGFwZXRlXCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyLDMsNF0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTUsXG4gICAgICAgICAgICBtYXg6IDcwXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAzMy4wNyxcbiAgICAgICAgICAgIG1heDogMTU0LjMyXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhdXN0cmFsaWFcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMzAsXG4gICAgICAgICAgICAgICAgeTogNjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo1NSxcbiAgICAgICAgICAgICAgICB5OjgwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6ODIsXG4gICAgICAgICAgICAgICAgeTo5MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDVcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwicG9ydCBKYWNrc29uIFNoYXJrXCIsXG4gICAgICAgICAgICBmcjogXCJyZXF1aW4gZGUgcG9ydC1qYWNrc29uXCIsXG4gICAgICAgICAgICBwdDogXCJ0dWJhcsOjbyBkZSBwb3J0IGphY2tzb25cIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogW10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzEsMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OjEsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogNSxcbiAgICAgICAgICAgIG1heDogMTZcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDExLjAyLFxuICAgICAgICAgICAgbWF4OiAzNS4yN1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NzUsXG4gICAgICAgICAgICAgICAgeToyMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAxMCxcbiAgICAgICAgICAgICAgICB5OiA0MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDZcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiU3BhbmlzaCBNYWNrZXJlbFwiLFxuICAgICAgICAgICAgZnI6IFwidGhhemFyZCByYXnDqVwiLFxuICAgICAgICAgICAgcHQ6IFwiY2F2YWxhIGVzcGFuaG9sYSBkZSBiYXJyZWlyYXMgZXN0cmVpdGFzXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFszXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyMCxcbiAgICAgICAgICAgIG1heDogNzBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQ0LjA5LFxuICAgICAgICAgICAgbWF4OiAxNTQuMzJcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjE1LFxuICAgICAgICAgICAgICAgIHk6NDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo1MCxcbiAgICAgICAgICAgICAgICB5OjMwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NjAsXG4gICAgICAgICAgICAgICAgeTo5NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDdcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiQWxiYWNvcmVcIixcbiAgICAgICAgICAgIGZyOiBcInRob24gYmxhbmNcIixcbiAgICAgICAgICAgIHB0OiBcImFsYmFjb3JhXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEyLFxuICAgICAgICAgICAgbWF4OiA2MFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMjYuNDYsXG4gICAgICAgICAgICBtYXg6IDEzMi4yOFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NDIsXG4gICAgICAgICAgICAgICAgeTo5NFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjUsXG4gICAgICAgICAgICAgICAgeTo5NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjYwLFxuICAgICAgICAgICAgICAgIHk6NTVcbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiIFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjQ4XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIkJhcnJhbXVuZGlcIixcbiAgICAgICAgICAgIGZyOiBcImJhcnJhbXVuZGlcIixcbiAgICAgICAgICAgIHB0OiBcInBlcmNhLWdpZ2FudGVcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxMixcbiAgICAgICAgICAgIG1heDogNjBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDI2LjQ2LFxuICAgICAgICAgICAgbWF4OiAxMzIuMjhcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjUwLFxuICAgICAgICAgICAgICAgIHk6MzBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMjUsXG4gICAgICAgICAgICAgICAgeTogNTVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiIC48YnI+KFN0ZXZlIHJlcXVpcmVkIDkwa2dzIG9mIGl0IGZvciB0aGUgbWFpbiBxdWVzdClcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI0OVwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJVbmljb3JuIExlYXRoZXJqYWNrZXRcIixcbiAgICAgICAgICAgIGZyOiBcImJvdXJzZSBsb3Vsb3VcIixcbiAgICAgICAgICAgIHB0OiBcInBvcmNvIGxpc29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuNSxcbiAgICAgICAgICAgIG1heDogMi43XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAxLjEsXG4gICAgICAgICAgICBtYXg6IDUuOTVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAzMCxcbiAgICAgICAgICAgICAgICB5OiA2NVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI0MTBcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiVGFpbG9yXCIsXG4gICAgICAgICAgICBmcjogXCJ0YXNzZXJnYWxcIixcbiAgICAgICAgICAgIHB0OiBcImVuY2hvdmFcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzEsMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMyxcbiAgICAgICAgICAgIG1heDogMTQuNFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNi42MSxcbiAgICAgICAgICAgIG1heDogMzEuNzVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjM1LFxuICAgICAgICAgICAgICAgIHk6NDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo1MCxcbiAgICAgICAgICAgICAgICB5OjMwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCIgXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDExXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIkxlYWZ5IFNlYWRyYWdvblwiLFxuICAgICAgICAgICAgZnI6IFwiZHJhZ29uIGRlIG1lciBmZXVpbGx1XCIsXG4gICAgICAgICAgICBwdDogXCJkcmFnw6NvIG1hcmluaG8gZm9saGFkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuMDUsXG4gICAgICAgICAgICBtYXg6IDAuMVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMC4xMSxcbiAgICAgICAgICAgIG1heDogMC4yMlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NTAsXG4gICAgICAgICAgICAgICAgeTozMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDEyXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIlJvY2sgRmxhZ3RhaWxcIixcbiAgICAgICAgICAgIGZyOiBcImRvdWxlIGRlIHJvY2hlXCIsXG4gICAgICAgICAgICBwdDogXCJ0cnV0YSBkZSBtb250YW5oYVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMCwxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogW10gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuMSxcbiAgICAgICAgICAgIG1heDogMTAwMFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMC4xLFxuICAgICAgICAgICAgbWF4OiAxMDAwXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhdXN0cmFsaWFcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo1LFxuICAgICAgICAgICAgICAgIHk6OTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDozMCxcbiAgICAgICAgICAgICAgICB5OjY1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6MTAsXG4gICAgICAgICAgICAgICAgeTo0NVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCIhIUJVRyEhPGJyPk5vIGRhdGEgYWJvdXQgdGhpcyBmaXNoLiBJdCBjYXJhc3RlcmlzdGljcyBhcmUgbm90IGF2YWlsYWJsZSBpbiB0aGUgaW4gZ2FtZSBiZXN0aWFyeS5cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI0MTNcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiQmxhY2stU2FkZGxlciBDb3JhbCBHcm91cGVyXCIsXG4gICAgICAgICAgICBmcjogXCJtw6lyb3UgY29yYWxsaWVuIMOgIHNlbGxlIG5vaXJlXCIsXG4gICAgICAgICAgICBwdDogXCJnYXJvdXBhIGRlIHNlbGEgbmVncmFcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzMsNF0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA4LFxuICAgICAgICAgICAgbWF4OiAyNFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMTcuNjQsXG4gICAgICAgICAgICBtYXg6IDUyLjkxXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhdXN0cmFsaWFcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDozMCxcbiAgICAgICAgICAgICAgICB5OjY1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NTUsXG4gICAgICAgICAgICAgICAgeTo4MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDE0XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIkNvbW1vbiBTdGFyZ2F6ZXJcIixcbiAgICAgICAgICAgIGZyOiBcInN0cmFnYXplclwiLFxuICAgICAgICAgICAgcHQ6IFwic3RyYWdhemVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiA5XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxOS44NFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6MTUsXG4gICAgICAgICAgICAgICAgeTo0NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjQyLFxuICAgICAgICAgICAgICAgIHk6OTRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo1LFxuICAgICAgICAgICAgICAgIHk6OTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo3MCxcbiAgICAgICAgICAgICAgICB5OjMwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI0MTVcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiU2tpcGphY2sgVHVuYVwiLFxuICAgICAgICAgICAgZnI6IFwiYm9uaXRlIMOgIHZlbnRyZSByYXnDqVwiLFxuICAgICAgICAgICAgcHQ6IFwiYm9uaXRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxMCxcbiAgICAgICAgICAgIG1heDogNDBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIyLjA1LFxuICAgICAgICAgICAgbWF4OiA4OC4xOFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6MTUsXG4gICAgICAgICAgICAgICAgeTo0NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjUsXG4gICAgICAgICAgICAgICAgeTo5NVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG5cbiAgICB7XG4gICAgICAgIGlkOiBcIjQxNlwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJGaW5nZXJtYXJrXCIsXG4gICAgICAgICAgICBmcjogXCJ2aXZhbmVhdSB6aWViZWxvXCIsXG4gICAgICAgICAgICBwdDogXCJwYXJnbyBkZSBqb8Ojb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMSwyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiAxMFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNC40MSxcbiAgICAgICAgICAgIG1heDogMjIuMDVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjMwLFxuICAgICAgICAgICAgICAgIHk6NjBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjQxN1wiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJDb3JhbCBUcm91dFwiLFxuICAgICAgICAgICAgZnI6IFwic2F1bW9uw6llIGzDqW9wYXJkXCIsXG4gICAgICAgICAgICBwdDogXCJnYXJvdXBhIGNvcmFsIGxlb3BhcmRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgbWF4OiAyM1xuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMjIuMDUsXG4gICAgICAgICAgICBtYXg6IDUwLjcxXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhdXN0cmFsaWFcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDozMCxcbiAgICAgICAgICAgICAgICB5OjY1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI0MThcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiSm9obiBEb3J5XCIsXG4gICAgICAgICAgICBmcjogXCJzYWludCBwaWVycmVcIixcbiAgICAgICAgICAgIHB0OiBcInBlaXhlIGdhbG9cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiA4XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxNy42NFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6MzAsXG4gICAgICAgICAgICAgICAgeTo2NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjQyLFxuICAgICAgICAgICAgICAgIHk6OTRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo1LFxuICAgICAgICAgICAgICAgIHk6OTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo4NSxcbiAgICAgICAgICAgICAgICB5OjQ3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NSxcbiAgICAgICAgICAgICAgICB5Ojk1XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjQxOVwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJMdWRlcmlja1wiLFxuICAgICAgICAgICAgZnI6IFwicGFyb3JlXCIsXG4gICAgICAgICAgICBwdDogXCJwZXJjYSBwcmV0YVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMF0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiA0XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIsXG4gICAgICAgICAgICBtYXg6IDguODJcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4Ojk1LFxuICAgICAgICAgICAgICAgIHk6MzBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjQyMFwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJNYW5ncm92ZSBKYWNrXCIsXG4gICAgICAgICAgICBmcjogXCJ2aXZhbmVhdSBkZXMgbWFuZ3JvdmVzXCIsXG4gICAgICAgICAgICBwdDogXCJwYXJnbyB2ZXJtZWxobyBkbyBtYW5ndWVcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMyxcbiAgICAgICAgICAgIG1heDogOC43MFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNi42MSxcbiAgICAgICAgICAgIG1heDogMTkuMThcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjUsXG4gICAgICAgICAgICAgICAgeTo5NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAzMCxcbiAgICAgICAgICAgICAgICB5OiA2MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA1MCxcbiAgICAgICAgICAgICAgICB5OiAzMFxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI0MjFcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiR29sZGVuIFRyZXZhbGx5XCIsXG4gICAgICAgICAgICBmcjogXCJjYXJhbmd1ZSByb3lhbGVcIixcbiAgICAgICAgICAgIHB0OiBcInhhcsOpdSBkb3VyYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDQsXG4gICAgICAgICAgICBtYXg6IDE1XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA4LjgyLFxuICAgICAgICAgICAgbWF4OiAzMy4wN1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6MTUsXG4gICAgICAgICAgICAgICAgeTo0NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjUsXG4gICAgICAgICAgICAgICAgeTo5NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4Ojg1LFxuICAgICAgICAgICAgICAgIHk6NDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo3MCxcbiAgICAgICAgICAgICAgICB5OjMwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDMwLFxuICAgICAgICAgICAgICAgIHk6IDYwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI0MjJcIixcbiAgICAgICAgdHlwZTogXCJyYXJlXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIlF1ZWVuc2xhbmQgR3JvdXBlclwiLFxuICAgICAgICAgICAgZnI6IFwibcOpcm91IGfDqWFudFwiLFxuICAgICAgICAgICAgcHQ6IFwiZ2Fyb3VwYSBnaWdhbnRlXCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFszLDRdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6MixcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDIwMCxcbiAgICAgICAgICAgIG1heDogNjAwXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0NDAuOTIsXG4gICAgICAgICAgICBtYXg6IDEzMjIuNzdcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjMwLFxuICAgICAgICAgICAgICAgIHk6NjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo4MCxcbiAgICAgICAgICAgICAgICB5OjkwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NTAsXG4gICAgICAgICAgICAgICAgeTo3MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDIzXCIsXG4gICAgICAgIHR5cGU6IFwicmFyZVwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJTbW9vdGggT3JlbyBEb3J5XCIsXG4gICAgICAgICAgICBmcjogXCJsb21wZVwiLFxuICAgICAgICAgICAgcHQ6IFwib3JlbyBkb3J5XCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiA1XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxMS4wMlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiYXVzdHJhbGlhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NDIsXG4gICAgICAgICAgICAgICAgeTo5NFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjUsXG4gICAgICAgICAgICAgICAgeTo5NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDI0XCIsXG4gICAgICAgIHR5cGU6IFwicmFyZVwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJTd29yZGZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcImVzcGFkb25cIixcbiAgICAgICAgICAgIHB0OiBcImVzcGFkYXJ0ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDIsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbM10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxNTAsXG4gICAgICAgICAgICBtYXg6IDY1MFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMzMwLjY5LFxuICAgICAgICAgICAgbWF4OiAxNDMzLjAxXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJhdXN0cmFsaWFcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDo0MixcbiAgICAgICAgICAgICAgICB5Ojk0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6NSxcbiAgICAgICAgICAgICAgICB5Ojk1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI0MjVcIixcbiAgICAgICAgdHlwZTogXCJyYXJlXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInNwb3R0ZWQgaGFuZGZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcInBvaXNzb24gbWFpbiB0YWNoZXTDqVwiLFxuICAgICAgICAgICAgcHQ6IFwicGVpeGUgbcOjbyBtYWxoYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsxLDIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMC4yLFxuICAgICAgICAgICAgbWF4OiAwLjZcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDAuNDQsXG4gICAgICAgICAgICBtYXg6IDEuMzJcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4Ojg1LFxuICAgICAgICAgICAgICAgIHk6NDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjQyNlwiLFxuICAgICAgICB0eXBlOiBcInJhcmVcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiR2lhbnQgVHJldmFsbHlcIixcbiAgICAgICAgICAgIGZyOiBcImNhcmFuZ3VlIMOgIGdyb3NzZSB0w6p0ZVwiLFxuICAgICAgICAgICAgcHQ6IFwieGFyw6l1IGdpZ2FudGVcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMjEsXG4gICAgICAgICAgICBtYXg6IDgwXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0Ni4zLFxuICAgICAgICAgICAgbWF4OiAxNzYuMzdcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OjE1LFxuICAgICAgICAgICAgICAgIHk6NDVcbiAgICAgICAgICAgIH1cblxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDI3XCIsXG4gICAgICAgIHR5cGU6IFwiZXBpY1wiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJ0aWdlciBzaGFya1wiLFxuICAgICAgICAgICAgZnI6IFwicmVxdWluIHRpZ3JlXCIsXG4gICAgICAgICAgICBwdDogXCJ0dWJhcsOjbyB0aWdyZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6MixcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyLDNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDMwMCxcbiAgICAgICAgICAgIG1heDogODA3XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA2NjEuMzksXG4gICAgICAgICAgICBtYXg6IDE3NzkuMTNcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA0MCxcbiAgICAgICAgICAgICAgICB5OiA5NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDI4XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIm1hbnRhIHJheVwiLFxuICAgICAgICAgICAgZnI6IFwicmFpZSBtYW50YVwiLFxuICAgICAgICAgICAgcHQ6IFwiYXJyYWlhXCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyLDNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDIsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogNDAwLFxuICAgICAgICAgICAgbWF4OiAzMDAwXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA4ODEuODUsXG4gICAgICAgICAgICBtYXg6IDY2MTMuODdcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAzMCxcbiAgICAgICAgICAgICAgICB5OiA2NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNDI5XCIsXG4gICAgICAgIHR5cGU6IFwiZXBpY1wiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJIb29kd2lua2VyIFN1bmZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcIm3DtGxlXCIsXG4gICAgICAgICAgICBwdDogXCJwZWl4ZSBsdWFcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogW10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMzAwLFxuICAgICAgICAgICAgbWF4OiAyMDAwXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA2NjEuMzksXG4gICAgICAgICAgICBtYXg6IDQ0MDkuMjVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImF1c3RyYWxpYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4Ojk1LFxuICAgICAgICAgICAgICAgIHk6NjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIk5vdCBzdXJlIGlmIGl0IGhhcyBhIHNoYWRvdyBvciBub3QuIFBsZWFzZSBjb25maXJtIGlmIHlvdSB3YW50IHRvIDwzXCJcbiAgICB9XG5dIiwiZXhwb3J0IGNvbnN0IGNyRmlzaCA9IFtcbiAgICB7XG4gICAgICAgIGlkOiBcIjIxXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImJhcnJhY3VkYVwiLFxuICAgICAgICAgICAgZnI6IFwiYmFycmFjdWRhXCIsXG4gICAgICAgICAgICBwdDogXCJncmFuZGUgYmFycmFjdWRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyLDNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMyxcbiAgICAgICAgICAgIG1heDogNTBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDYuNjEsXG4gICAgICAgICAgICBtYXg6IDExMC4yM1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiY29zdGEtcmljYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAyNSxcbiAgICAgICAgICAgICAgICB5OiA2MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2NSxcbiAgICAgICAgICAgICAgICB5OiAyNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMjJcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwicm9vc3RlcmZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcInBvaXNzb24gY29xXCIsXG4gICAgICAgICAgICBwdDogXCJwZWl4ZSBnYWxvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogNSxcbiAgICAgICAgICAgIG1heDogNTFcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDExLjAyLFxuICAgICAgICAgICAgbWF4OiAxMTIuNDRcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDUsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogODUsXG4gICAgICAgICAgICAgICAgeTogNDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjIzXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImRvcmFkb1wiLFxuICAgICAgICAgICAgZnI6IFwiZG9yYWRlIGNvcnlwaMOobmVcIixcbiAgICAgICAgICAgIHB0OiBcImRvdXJhZG8tZG8tbWFyXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogNSxcbiAgICAgICAgICAgIG1heDogNDBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDExLjAyLFxuICAgICAgICAgICAgbWF4OiA4OC4xOFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiY29zdGEtcmljYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAxNSxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA5MCxcbiAgICAgICAgICAgICAgICB5OiA4MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMjRcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwicG9tcGFub1wiLFxuICAgICAgICAgICAgZnI6IFwicG9tcGFuZWF1IHNvbGVcIixcbiAgICAgICAgICAgIHB0OiBcInBhbXBvIHZlcmRhZGVpcm9cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzBdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogOVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMi4yMCxcbiAgICAgICAgICAgIG1heDogMTkuODRcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDUsXG4gICAgICAgICAgICAgICAgeTogNjVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzAsXG4gICAgICAgICAgICAgICAgeTogOTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjI1XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIndhaG9vXCIsXG4gICAgICAgICAgICBmcjogXCJ0aGF6YXJkIG5vaXJcIixcbiAgICAgICAgICAgIHB0OiBcImNhdmFsYSBkYSBpbmRpYVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMSwyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDUsXG4gICAgICAgICAgICBtYXg6IDI1MFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMTEuMDIsXG4gICAgICAgICAgICBtYXg6IDU1MS4xNlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiY29zdGEtcmljYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NSxcbiAgICAgICAgICAgICAgICB5OiA0NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMjZcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwidHJpcGxldGFpbFwiLFxuICAgICAgICAgICAgZnI6IFwiY3JvdXBpYSByb2NoZVwiLFxuICAgICAgICAgICAgcHQ6IFwicHJlamVyZWJhXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogMTlcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMjAsXG4gICAgICAgICAgICBtYXg6IDQxLjg5XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJjb3N0YS1yaWNhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQ1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDU1LFxuICAgICAgICAgICAgICAgIHk6IDM1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIyN1wiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJ0YXJwb25cIixcbiAgICAgICAgICAgIGZyOiBcInRhcnBvbiBkZSBsJ2F0bGFudGlxdWVcIixcbiAgICAgICAgICAgIHB0OiBcInRhcnDDo29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAxLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzMsNF0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzEsMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgbWF4OiAxNjFcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIyLjA1LFxuICAgICAgICAgICAgbWF4OiAzNTQuOTRcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMzAsXG4gICAgICAgICAgICAgICAgeTogMzBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNTUsXG4gICAgICAgICAgICAgICAgeTogMzVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjI4XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInllbGxvd2ZpbiB0dW5hXCIsXG4gICAgICAgICAgICBmcjogXCJ0aG9uIGphdW5lXCIsXG4gICAgICAgICAgICBwdDogXCJhbGJhY29yYVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbM10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICBtYXg6IDIwMFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMjIuMDUsXG4gICAgICAgICAgICBtYXg6IDQ0MC45MlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiY29zdGEtcmljYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2MCxcbiAgICAgICAgICAgICAgICB5OiAzNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA0MCxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2NSxcbiAgICAgICAgICAgICAgICB5OiA1NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMjlcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwic2llcnJhIG1hY2tlcmVsXCIsXG4gICAgICAgICAgICBmcjogXCJ0aGF6YXJkIHNpZXJyYVwiLFxuICAgICAgICAgICAgcHQ6IFwic2VycmEgZG8gcGFjaWZpY29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMixcbiAgICAgICAgICAgIG1heDogOC45XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxOS42MlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiY29zdGEtcmljYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA1MCxcbiAgICAgICAgICAgICAgICB5OiA2MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAxNSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NSxcbiAgICAgICAgICAgICAgICB5OiA1MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMjEwXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInBhY2lmaWMgc2FpbGZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcInZvaWxpZXIgZGUgbCdpbmRvLXBhY2lmaXF1ZVwiLFxuICAgICAgICAgICAgcHQ6IFwiYWd1bGjDo28gdmVsYVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMSwyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEwLFxuICAgICAgICAgICAgbWF4OiAxMDBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIyLjA1LFxuICAgICAgICAgICAgbWF4OiAyMjAuNDZcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTUsXG4gICAgICAgICAgICAgICAgeTogODVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTUsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogODUsXG4gICAgICAgICAgICAgICAgeTogNTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogODUsXG4gICAgICAgICAgICAgICAgeTogMjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjIxMVwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJqYWNrIGNyZXZhbGxlXCIsXG4gICAgICAgICAgICBmcjogXCJjYXJhbmd1ZSBjcmV2YWxsZVwiLFxuICAgICAgICAgICAgcHQ6IFwiY2hhcm8tbGFyZ29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzEsMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDUsXG4gICAgICAgICAgICBtYXg6IDMyXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAxMS4wMixcbiAgICAgICAgICAgIG1heDogNzAuNTVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTUsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMjUsXG4gICAgICAgICAgICAgICAgeTogNTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNjUsXG4gICAgICAgICAgICAgICAgeTogNTVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjIxMlwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJjdWJlcmEgc25hcHBlclwiLFxuICAgICAgICAgICAgZnI6IFwidml2YW5lYXUgY3Viw6lyYVwiLFxuICAgICAgICAgICAgcHQ6IFwiY2FyYW5oYVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxMCxcbiAgICAgICAgICAgIG1heDogNTdcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIyLjA1LFxuICAgICAgICAgICAgbWF4OiAxMjUuNjZcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTUsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMjUsXG4gICAgICAgICAgICAgICAgeTogNTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzAsXG4gICAgICAgICAgICAgICAgeTogOTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjIxM1wiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJicm9vbXRhaWwgZ3JvdXBlclwiLFxuICAgICAgICAgICAgZnI6IFwibcOpcm91IGdlbsOqdC1xdWV1ZVwiLFxuICAgICAgICAgICAgcHQ6IFwiZ2Fyb3VwYSBkZSBtYW5ndWVcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzMsNF0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICBtYXg6IDkxXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyMi4wNSxcbiAgICAgICAgICAgIG1heDogMjAwLjYyXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJjb3N0YS1yaWNhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDM1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQ1LFxuICAgICAgICAgICAgICAgIHk6IDg1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIyMTRcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwic25vb2tcIixcbiAgICAgICAgICAgIGZyOiBcImJyb2NoZXQgZGUgbWVyXCIsXG4gICAgICAgICAgICBwdDogXCJyb2JhbG8gYnJhbmNvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiAyNFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNC40MSxcbiAgICAgICAgICAgIG1heDogNTIuOTFcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTUsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzAsXG4gICAgICAgICAgICAgICAgeTogNTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMjUsXG4gICAgICAgICAgICAgICAgeTogNTVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjIxNVwiLFxuICAgICAgICB0eXBlOiBcInJhcmVcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiYmx1ZSBtYXJsaW5cIixcbiAgICAgICAgICAgIGZyOiBcIm1ha2FpcmUgYmxldVwiLFxuICAgICAgICAgICAgcHQ6IFwibWFybGltIGF6dWxcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAyLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDUwLFxuICAgICAgICAgICAgbWF4OiA2MzZcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDExMC4yMyxcbiAgICAgICAgICAgIG1heDogMTQwMi4xNFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiY29zdGEtcmljYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAxNSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMjE2XCIsXG4gICAgICAgIHR5cGU6IFwicmFyZVwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJzdHJpcGVkIG1hcmxpblwiLFxuICAgICAgICAgICAgZnI6IFwibWFybGluIHJhecOpXCIsXG4gICAgICAgICAgICBwdDogXCJtYXJsaW0gbGlzdHJhZG9cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAyLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA1MCxcbiAgICAgICAgICAgIG1heDogNDQwXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAxMTAuMjMsXG4gICAgICAgICAgICBtYXg6IDk3MC4wM1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiY29zdGEtcmljYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAxNSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMjE3XCIsXG4gICAgICAgIHR5cGU6IFwicmFyZVwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJudXJzZSBzaGFya1wiLFxuICAgICAgICAgICAgZnI6IFwicmVxdWluIG5vdXJyaWNlIGF0bGFudGlxdWVcIixcbiAgICAgICAgICAgIHB0OiBcInR1YmFyw6NvIGVuZmVybWVpcm9cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAxLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDUwLFxuICAgICAgICAgICAgbWF4OiA0NDBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQ0LjA5LFxuICAgICAgICAgICAgbWF4OiAyNDAuMzBcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTUsXG4gICAgICAgICAgICAgICAgeTogMjVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDUsXG4gICAgICAgICAgICAgICAgeTogODVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjIxOFwiLFxuICAgICAgICB0eXBlOiBcInJhcmVcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiYmxhY2sgbWFybGluXCIsXG4gICAgICAgICAgICBmcjogXCJtYWthaXJlIG5vaXJcIixcbiAgICAgICAgICAgIHB0OiBcIm1hcmxpbSBwcmV0b1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDIsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbM10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA1MCxcbiAgICAgICAgICAgIG1heDogNzUwXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAxMTAuMjMsXG4gICAgICAgICAgICBtYXg6IDE2NTMuNDdcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTUsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDUsXG4gICAgICAgICAgICAgICAgeTogODVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjIxOVwiLFxuICAgICAgICB0eXBlOiBcImVwaWNcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiYnVsbCBzaGFya1wiLFxuICAgICAgICAgICAgZnI6IFwicmVxdWluLWJvdWxlZG9ndWVcIixcbiAgICAgICAgICAgIHB0OiBcInR1YmFyw6NvIGNhYmXDp2EgY2hhdGFcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAyLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICBtYXg6IDMxNlxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMjIuMDUsXG4gICAgICAgICAgICBtYXg6IDY5Ni42NlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiY29zdGEtcmljYVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAxNSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA0NSxcbiAgICAgICAgICAgICAgICB5OiA4NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMjIwXCIsXG4gICAgICAgIHR5cGU6IFwiZXBpY1wiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJoYW1tZXJoZWFkIHNoYXJrXCIsXG4gICAgICAgICAgICBmcjogXCJyZXF1aW4tbWFydGVhdSBoYWxpY29ybmVcIixcbiAgICAgICAgICAgIHB0OiBcInR1YmFyw6NvLW1hcnRlbG8tIHJlY29ydGFkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDIsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbM10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyMCxcbiAgICAgICAgICAgIG1heDogMTUyXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0NC4wOSxcbiAgICAgICAgICAgIG1heDogMzM1LjEwXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJjb3N0YS1yaWNhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDI1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAgeyBcbiAgICAgICAgaWQ6IFwiMjIxXCIsXG4gICAgICAgIHR5cGU6IFwiZXBpY1wiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJ3aGFsZSBzaGFya1wiLFxuICAgICAgICAgICAgZnI6IFwicmVxdWluLWJhbGVpbmVcIixcbiAgICAgICAgICAgIHB0OiBcInR1YmFyw6NvLWJhbGVpYVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDIsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDIwMCxcbiAgICAgICAgICAgIG1heDogMzQwMFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNDQwLjkyLFxuICAgICAgICAgICAgbWF4OiA3NDk1LjcyXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJjb3N0YS1yaWNhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDI1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAgeyBcbiAgICAgICAgaWQ6IFwiMjIyXCIsXG4gICAgICAgIHR5cGU6IFwiZXBpY1wiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJ3aGl0ZXRpcCBzaGFya1wiLFxuICAgICAgICAgICAgZnI6IFwicmVxdWluIGxvbmdpbWFuZVwiLFxuICAgICAgICAgICAgcHQ6IFwiZ2FsaGEgYnJhbmNhIG9jZcOibmljb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDIsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDIwLFxuICAgICAgICAgICAgbWF4OiAxNjdcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQ0LjA5LFxuICAgICAgICAgICAgbWF4OiAzNjguMTdcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImNvc3RhLXJpY2FcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTAsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7IFxuICAgICAgICBpZDogXCIyMjNcIixcbiAgICAgICAgdHlwZTogXCJtb25zdGVyXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImRvbiBwZWRyb1wiLFxuICAgICAgICAgICAgZnI6IFwiZG9uIHBlZHJvXCIsXG4gICAgICAgICAgICBwdDogXCJkb24gcGVkcm9cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAyLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogW10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogODUwLFxuICAgICAgICAgICAgbWF4OiAxNDAwXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAxODczLjkzLFxuICAgICAgICAgICAgbWF4OiAzMDg2LjQ3XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJjb3N0YS1yaWNhXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDMwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJNT05TVEVSPGJyPlNwb3Qgcm90YXRpb246IGl0IGNoYW5nZXMgZXZlcnkgZGF5Ljxicj5UcnkgbW9uc3RlciBiYWl0cyB0byBmaW5kIHRoZSBidWJibGVzLCB0aGVuIGNhc3QgYW5kIHdhaXQgaW50byB0aGUgYnViYmxlcy48YnI+SWYgeW91IGRvbid0IGhhdmUgYW55IG1vbnN0ZXIgYmFpdHMsIHRyeSBjYXN0IGFuZCByZWVsIGFuZCB3YWl0IChhbmQgYmUgcGF0aWVudCkuXCJcbiAgICB9LFxuXSIsImV4cG9ydCBjb25zdCBnbEZpc2ggPSBbXG4gICAge1xuICAgICAgICBpZDogXCIxMVwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJhbGV3aWZlXCIsXG4gICAgICAgICAgICBmcjogXCJnYXNwYXJlYXVcIixcbiAgICAgICAgICAgIHB0OiBcImFsb3NhIGNpbnplbnRhXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFtdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMC4xLFxuICAgICAgICAgICAgbWF4OiAwLjJcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDAuMjIsXG4gICAgICAgICAgICBtYXg6IDAuNDRcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDIwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDMwLFxuICAgICAgICAgICAgICAgIHk6IDQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDgwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxMlwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJicm9vayB0cm91dFwiLFxuICAgICAgICAgICAgZnI6IFwib21ibGUgZGVzIGZvbnRhaW5lc1wiLFxuICAgICAgICAgICAgcHQ6IFwidHJ1dGEgZGUgcmlhY2hvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiA4XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxNy42NFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiZ3JlYXQtbGFrZXNcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDAsXG4gICAgICAgICAgICAgICAgeTogNDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjEzXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImJyb3duIHRyb3V0XCIsXG4gICAgICAgICAgICBmcjogXCJ0cnVpdGUgYnJ1bmVcIixcbiAgICAgICAgICAgIHB0OiBcInRydXRhIG1hcmlzY2FcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzIsM10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDIsXG4gICAgICAgICAgICBtYXg6IDhcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDguODIsXG4gICAgICAgICAgICBtYXg6IDExMC4yM1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiZ3JlYXQtbGFrZXNcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDAsXG4gICAgICAgICAgICAgICAgeTogNDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogODUsXG4gICAgICAgICAgICAgICAgeTogMzBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjE0XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImxhcmdlbW91dGggYmFzc1wiLFxuICAgICAgICAgICAgZnI6IFwiYWNoaWdhbiDDoCBncmFuZGUgYm91Y2hlXCIsXG4gICAgICAgICAgICBwdDogXCJhY2hpZ8OjXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMixcbiAgICAgICAgICAgIG1heDogMTBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQuNDEsXG4gICAgICAgICAgICBtYXg6IDIyLjA1XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJncmVhdC1sYWtlc1wiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2MCxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMTVcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwieWVsbG93IHBlcmNoXCIsXG4gICAgICAgICAgICBmcjogXCJwZXJjaGF1ZGVcIixcbiAgICAgICAgICAgIHB0OiBcInBlcmNhIGFtYXJlbGFcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAwLjUsXG4gICAgICAgICAgICBtYXg6IDEuOVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMS4xMCxcbiAgICAgICAgICAgIG1heDogNC4xOVxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiZ3JlYXQtbGFrZXNcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDAsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMzUsXG4gICAgICAgICAgICAgICAgeTogNDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMjAsXG4gICAgICAgICAgICAgICAgeTogODBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzUsXG4gICAgICAgICAgICAgICAgeTogNTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjE2XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIndoaXRlIGNyYXBwaWVcIixcbiAgICAgICAgICAgIGZyOiBcImNyYXBldCBjYWxpY290XCIsXG4gICAgICAgICAgICBwdDogXCJwcm9tb3hpc1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMCwxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiAyLjRcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMjAsXG4gICAgICAgICAgICBtYXg6IDUuMjlcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDgwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDIwLFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxN1wiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJ3aGl0ZSBiYXNzXCIsXG4gICAgICAgICAgICBmcjogXCJiYXIgYmxhbmNcIixcbiAgICAgICAgICAgIHB0OiBcImJhc3MgYnJhbmNvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFswLDFdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogMy4yXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIwLFxuICAgICAgICAgICAgbWF4OiA3LjA1XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJncmVhdC1sYWtlc1wiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2NSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA5MCxcbiAgICAgICAgICAgICAgICB5OiAzMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMThcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwid2FsbGV5ZVwiLFxuICAgICAgICAgICAgZnI6IFwiZG9yw6kgamF1bmVcIixcbiAgICAgICAgICAgIHB0OiBcInBpY8Ojby12ZXJkZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMSwyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMixcbiAgICAgICAgICAgIG1heDogMTEuM1xuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNC40MSxcbiAgICAgICAgICAgIG1heDogMjQuOTFcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDgwLFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDgwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxOVwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJzZWEgbGFtcHJleVwiLFxuICAgICAgICAgICAgZnI6IFwibGFtcHJvaWUgbWFyaW5lXCIsXG4gICAgICAgICAgICBwdDogXCJsYW1wcmVpYS1tYXJpbmhhXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMC41LFxuICAgICAgICAgICAgbWF4OiAyLjVcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDEuMTAsXG4gICAgICAgICAgICBtYXg6IDUuNTFcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDgwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDgwLFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxMTBcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwicGluayBzYWxtb25cIixcbiAgICAgICAgICAgIGZyOiBcInNhdW1vbiByb3NlIMOgIGJvc3NlXCIsXG4gICAgICAgICAgICBwdDogXCJzYWxtw6NvLXJvc2Fkb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMSwyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDIsXG4gICAgICAgICAgICBtYXg6IDdcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQuNDEsXG4gICAgICAgICAgICBtYXg6IDE1LjQzXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJncmVhdC1sYWtlc1wiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA3NSxcbiAgICAgICAgICAgICAgICB5OiA1MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMTExXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInNtYWxsbW91dGggYmFzc1wiLFxuICAgICAgICAgICAgZnI6IFwiYWNoaWdhbiDDoCBwZXRpdGUgYm91Y2hlXCIsXG4gICAgICAgICAgICBwdDogXCJhY2hpZ8OjLWJvY2EtcGVxdWVuYVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMSwyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDUuNFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMi4yMCxcbiAgICAgICAgICAgIG1heDogMTEuOTBcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDYwLFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxMTJcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwicm91bmQgd2hpdGVmaXNoXCIsXG4gICAgICAgICAgICBmcjogXCJtw6lub21pbmkgcm9uZFwiLFxuICAgICAgICAgICAgcHQ6IFwicGVpeGUgYnJhbmNvIHJlZG9uZG9cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzBdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiAyLjdcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMjAsXG4gICAgICAgICAgICBtYXg6IDUuOTVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDYwLFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxMTNcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwicmVkZWFyIHN1bmZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcImNyYXBldCDDoCBvcmVpbGxlcyByb3VnZXNcIixcbiAgICAgICAgICAgIHB0OiBcInBvbGVpcm8gZG8gc29sXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFswXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMC4xLFxuICAgICAgICAgICAgbWF4OiAzXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAwLjIyLFxuICAgICAgICAgICAgbWF4OiA2LjYxXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJncmVhdC1sYWtlc1wiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2MCxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMTE0XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImNoYW5uZWwgY2F0ZmlzaFwiLFxuICAgICAgICAgICAgZnI6IFwiYmFyYnVlIGRlIHJpdmnDqHJlXCIsXG4gICAgICAgICAgICBwdDogXCJiYWdyZS1hbWVyaWNhbm9cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogNSxcbiAgICAgICAgICAgIG1heDogMjZcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDExLjAyLFxuICAgICAgICAgICAgbWF4OiA1Ny4zMlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiZ3JlYXQtbGFrZXNcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMjUsXG4gICAgICAgICAgICAgICAgeTogNzVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjExNVwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJibG9hdGVyXCIsXG4gICAgICAgICAgICBmcjogXCJibG9hdGVyXCIsXG4gICAgICAgICAgICBwdDogXCJpbmNoYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFtdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMC4xLFxuICAgICAgICAgICAgbWF4OiAwLjVcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDAuMjIsXG4gICAgICAgICAgICBtYXg6IDEuMTBcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDI1LFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDMwLFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDkwLFxuICAgICAgICAgICAgICAgIHk6IDMwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDcwLFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxMTZcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiY29obyBzYWxtb25cIixcbiAgICAgICAgICAgIGZyOiBcInNhdW1vbiBjb2hvXCIsXG4gICAgICAgICAgICBwdDogXCJzYWxtw6NvLXByYXRlYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDE1XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIwLFxuICAgICAgICAgICAgbWF4OiAzMy4wN1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiZ3JlYXQtbGFrZXNcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzUsXG4gICAgICAgICAgICAgICAgeTogNTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMTE3XCIsXG4gICAgICAgIHR5cGU6IFwicmFyZVwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJjaGlub29rIHNhbG1vblwiLFxuICAgICAgICAgICAgZnI6IFwic2F1bW9uIHJveWFsXCIsXG4gICAgICAgICAgICBwdDogXCJzYWxtw6NvLXJlaVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMiwzXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMSwyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA1LFxuICAgICAgICAgICAgbWF4OiA2MVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMTEuMDIsXG4gICAgICAgICAgICBtYXg6IDEzNC40OFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiZ3JlYXQtbGFrZXNcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzUsXG4gICAgICAgICAgICAgICAgeTogNTVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjExOFwiLFxuICAgICAgICB0eXBlOiBcInJhcmVcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwibXVza2llXCIsXG4gICAgICAgICAgICBmcjogXCJtYXNraW5vbmfDqVwiLFxuICAgICAgICAgICAgcHQ6IFwibMO5Y2lvLWFsbWlzY2FyYWRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyLDNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsxLDIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiAzMVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNC40MSxcbiAgICAgICAgICAgIG1heDogNjguMzRcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxMTlcIixcbiAgICAgICAgdHlwZTogXCJyYXJlXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImZsYXRoZWFkIGNhdGZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcInBvaXNzb24tY2hhdCDDoCB0w6p0ZSBwbGF0ZVwiLFxuICAgICAgICAgICAgcHQ6IFwicGVpeGUtZ2F0byBhbWFyZWxvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyLDNdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsxLDIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA1LFxuICAgICAgICAgICAgbWF4OiA1NVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMTEuMDIsXG4gICAgICAgICAgICBtYXg6IDEyMS4yNVxuICAgICAgICB9LFxuICAgICAgICBkYXk6IGZhbHNlLFxuICAgICAgICBuaWdodDogdHJ1ZSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQ1LFxuICAgICAgICAgICAgICAgIHk6IDQ1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDI1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDc4XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxMjBcIixcbiAgICAgICAgdHlwZTogXCJyYXJlXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImxha2UgdHJvdXRcIixcbiAgICAgICAgICAgIGZyOiBcImxlIHRvdWxhZGlcIixcbiAgICAgICAgICAgIHB0OiBcInRydXRhIGRlIGxhZ29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAxLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzIsM10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzEsMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzBdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA1LFxuICAgICAgICAgICAgbWF4OiAzMlxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMTEuMDIsXG4gICAgICAgICAgICBtYXg6IDcwLjU1XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJncmVhdC1sYWtlc1wiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAxNSxcbiAgICAgICAgICAgICAgICB5OiA4MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA0MCxcbiAgICAgICAgICAgICAgICB5OiA0MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMTIxXCIsXG4gICAgICAgIHR5cGU6IFwiZXBpY1wiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJsb25nbm9zZSBnYXJcIixcbiAgICAgICAgICAgIGZyOiBcImzDqXBpc29zdMOpIG9zc2V1eFwiLFxuICAgICAgICAgICAgcHQ6IFwibGVwaXNvc3RldXNcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAxLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDUsXG4gICAgICAgICAgICBtYXg6IDIyXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAxMS4wMixcbiAgICAgICAgICAgIG1heDogNDguNTBcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcImdyZWF0LWxha2VzXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDgwLFxuICAgICAgICAgICAgICAgIHk6IDEwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIxMjJcIixcbiAgICAgICAgdHlwZTogXCJlcGljXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImFtZXJpY2FuIGVlbFwiLFxuICAgICAgICAgICAgZnI6IFwiYW5ndWlsbGUgZCdhbcOpcmlxdWVcIixcbiAgICAgICAgICAgIHB0OiBcImVuZ3VpYS1hbWVyaWNhbmFcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAxLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMixcbiAgICAgICAgICAgIG1heDogNy4zXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxNi4wOVxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiZ3JlYXQtbGFrZXNcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogOTAsXG4gICAgICAgICAgICAgICAgeTogNjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjEyM1wiLFxuICAgICAgICB0eXBlOiBcImVwaWNcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiZ29sZGZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcInBvaXNzb24gcm91Z2VcIixcbiAgICAgICAgICAgIHB0OiBcInF1aW5ndWlvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFswLDFdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuMSxcbiAgICAgICAgICAgIG1heDogMC43XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAwLjIyLFxuICAgICAgICAgICAgbWF4OiAxLjU0XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJncmVhdC1sYWtlc1wiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA1MCxcbiAgICAgICAgICAgICAgICB5OiA3MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMTI0XCIsXG4gICAgICAgIHR5cGU6IFwiZXBpY1wiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJsYWtlIHN0dXJnZW9uXCIsXG4gICAgICAgICAgICBmcjogXCJlc3R1cmdlb24gamF1bmVcIixcbiAgICAgICAgICAgIHB0OiBcImVzdHVyasOjbyBkZSBsYWdvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFszLDRdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogNSxcbiAgICAgICAgICAgIG1heDogMTI1XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAxMS4wMixcbiAgICAgICAgICAgIG1heDogMjc1LjU4XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJncmVhdC1sYWtlc1wiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA0MCxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMTI1XCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3RlclwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJiZXNzaWVcIixcbiAgICAgICAgICAgIGZyOiBcImJlc3NpZVwiLFxuICAgICAgICAgICAgcHQ6IFwiYmVzc2llXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMixcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFtdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMjAwLFxuICAgICAgICAgICAgbWF4OiA1MDBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQ0MC45MixcbiAgICAgICAgICAgIG1heDogMTEwMi4zMVxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwiZ3JlYXQtbGFrZXNcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzAsXG4gICAgICAgICAgICAgICAgeTogOTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzUsXG4gICAgICAgICAgICAgICAgeTogODBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzUsXG4gICAgICAgICAgICAgICAgeTogNjVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogOTAsXG4gICAgICAgICAgICAgICAgeTogNjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIk1PTlNURVI8YnI+U3BvdCByb3RhdGlvbjogaXQgY2hhbmdlcyBldmVyeSBkYXkuPGJyPlRyeSBtb25zdGVyIGJhaXRzIHRvIGZpbmQgdGhlIGJ1YmJsZXMsIHRoZW4gY2FzdCBhbmQgd2FpdCBpbnRvIHRoZSBidWJibGVzLjxicj5JZiB5b3UgZG9uJ3QgaGF2ZSBhbnkgbW9uc3RlciBiYWl0cywgdHJ5IGNhc3QgYW5kIHJlZWwgYW5kIHdhaXQgKGFuZCBiZSBwYXRpZW50KS5cIlxuICAgIH0sXG5dIiwiZXhwb3J0IGNvbnN0IHBhcmFkaXNlRmlzaCA9IFtcbiAgICB7XG4gICAgICAgIGlkOiBcIjAxXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImJsdWVmaXNoXCIsXG4gICAgICAgICAgICBmcjogXCJ0YXNzZXJnYWxcIixcbiAgICAgICAgICAgIHB0OiBcImFuY2hvdmFcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzEsMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMyxcbiAgICAgICAgICAgIG1heDogMTQuNFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNi42MSxcbiAgICAgICAgICAgIG1heDogMzEuNzVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInBhcmFkaXNlXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDMwLFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIwMlwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJzcG90LWZpbiBwb3JjdXBpbmVmaXNoXCIsXG4gICAgICAgICAgICBmcjogXCJwb2lzc29uIHBvcmMtw6lwaWNcIixcbiAgICAgICAgICAgIHB0OiBcInBlaXhlLW91cmnDp29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzBdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwgMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDIuOFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMi4yLFxuICAgICAgICAgICAgbWF4OiA2LjE3XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJwYXJhZGlzZVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA1MCxcbiAgICAgICAgICAgICAgICB5OiA3NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMDNcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwic251Ym5vc2UgcG9tcGFub1wiLFxuICAgICAgICAgICAgZnI6IFwicG9tcGFuZWF1IGx1bmVcIixcbiAgICAgICAgICAgIHB0OiBcInBhbXBvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDlcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMixcbiAgICAgICAgICAgIG1heDogMTkuODRcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInBhcmFkaXNlXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDYwLFxuICAgICAgICAgICAgICAgIHk6IDYwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDIwLFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIwNFwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICB0cnVzdGVkOiB0cnVlLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJsYXJnZXRvb3RoIGZsb3VuZGVyXCIsXG4gICAgICAgICAgICBmcjogXCJmbGV0XCIsXG4gICAgICAgICAgICBwdDogXCJsaW5ndWFuZG8gZ3JhbmRlXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsxLDJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwgMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDNcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMixcbiAgICAgICAgICAgIG1heDogNi42MVxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwicGFyYWRpc2VcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzUsXG4gICAgICAgICAgICAgICAgeTogNTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2hhZG93OiBbMSwyXSxcbiAgICAgICAgcm9kczogWzAsIDEsIDIsIDMsIDQsIDVdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMDVcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgdHJ1c3RlZDogdHJ1ZSxcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiYmx1ZSB0cmV2YWxseVwiLFxuICAgICAgICAgICAgZnI6IFwiY2FyYW5ndWUgcmF5w6llXCIsXG4gICAgICAgICAgICBwdDogXCJ4YXLDqXUgZ2lnYW50ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMixcbiAgICAgICAgICAgIG1heDogOFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogNC40MSxcbiAgICAgICAgICAgIG1heDogMTcuNjRcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInBhcmFkaXNlXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDc1LFxuICAgICAgICAgICAgICAgIHk6IDUwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIwNlwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICB0cnVzdGVkOiB0cnVlLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJib25lZmlzaFwiLFxuICAgICAgICAgICAgZnI6IFwiYm9uZWZpc2hcIixcbiAgICAgICAgICAgIHB0OiBcInViYXJhbmEtZm9jaW5oby1kZS1yYXRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiAxMFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMi4yLFxuICAgICAgICAgICAgbWF4OiAyMi4wNVxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwicGFyYWRpc2VcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMzAsXG4gICAgICAgICAgICAgICAgeTogNDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzUsXG4gICAgICAgICAgICAgICAgeTogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogOTAsXG4gICAgICAgICAgICAgICAgeTogMTVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogOTAsXG4gICAgICAgICAgICAgICAgeTogODVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2hhZG93OiBbMl0sXG4gICAgICAgIHJvZHM6IFswLCAxLCAyLCAzLCA0LCA1XSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjA3XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIHRydXN0ZWQ6IHRydWUsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcImxvbmd0YWlsIHR1bmFcIixcbiAgICAgICAgICAgIGZyOiBcInRob24gdG9uZ2dvbFwiLFxuICAgICAgICAgICAgcHQ6IFwiYXR1bS1kby1pbmRpY29cIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzEsMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA1LFxuICAgICAgICAgICAgbWF4OiAzNS45XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAxMS4wMixcbiAgICAgICAgICAgIG1heDogNzkuMTVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInBhcmFkaXNlXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDUwLFxuICAgICAgICAgICAgICAgIHk6IDI1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIwOFwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICB0cnVzdGVkOiB0cnVlLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJjbG93bmZpc2hcIixcbiAgICAgICAgICAgIGZyOiBcInBvaXNzb24tY2xvd24gZHUgcGFjaWZpY1wiLFxuICAgICAgICAgICAgcHQ6IFwicGVpeGUtcGFsaGHDp28tcGVyY3VsYVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuMDEsXG4gICAgICAgICAgICBtYXg6IDAuMDVcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDAuMDIsXG4gICAgICAgICAgICBtYXg6IDAuMTFcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInBhcmFkaXNlXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDcwLFxuICAgICAgICAgICAgICAgIHk6IDcwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIwOVwiLFxuICAgICAgICB0eXBlOiBcInJhcmVcIixcbiAgICAgICAgdHJ1c3RlZDogdHJ1ZSxcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiZ3JlZW4gaHVtcGhlYWQgcGFycm90ZmlzaFwiLFxuICAgICAgICAgICAgZnI6IFwicG9pc3Nvbi1wZXJyb3F1ZXQgw6AgYm9zc2VcIixcbiAgICAgICAgICAgIHB0OiBcInBlaXhlLXBhcGFnYWlvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFszLDRdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsxLDIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMixcbiAgICAgICAgICAgIG1heDogNDNcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQuNDEsXG4gICAgICAgICAgICBtYXg6IDk0LjhcbiAgICAgICAgfSxcbiAgICAgICAgZGF5OiB0cnVlLFxuICAgICAgICBuaWdodDogZmFsc2UsXG4gICAgICAgIG1hcDogXCJwYXJhZGlzZVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA3MCxcbiAgICAgICAgICAgICAgICB5OiA3MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA1MCxcbiAgICAgICAgICAgICAgICB5OiA3NVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA3NSxcbiAgICAgICAgICAgICAgICB5OiA1MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA1MCxcbiAgICAgICAgICAgICAgICB5OiAyMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAyMCxcbiAgICAgICAgICAgICAgICB5OiA4MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAyMCxcbiAgICAgICAgICAgICAgICB5OiAxMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiMDEwXCIsXG4gICAgICAgIHR5cGU6IFwicmFyZVwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJ3aGl0ZS10dW5hXCIsXG4gICAgICAgICAgICBmcjogXCJ0aG9uIMOgIGRlbnRzIGRlIGNoaWVuXCIsXG4gICAgICAgICAgICBwdDogXCJhdHVtIGJyYW5jb1wiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMyw0XSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMSwyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogNDAsXG4gICAgICAgICAgICBtYXg6IDEzMVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogODguMTgsXG4gICAgICAgICAgICBtYXg6IDI4OC44MVxuICAgICAgICB9LFxuICAgICAgICBkYXk6IHRydWUsXG4gICAgICAgIG5pZ2h0OiB0cnVlLFxuICAgICAgICBtYXA6IFwicGFyYWRpc2VcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNTAsXG4gICAgICAgICAgICAgICAgeTogMjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjAxMVwiLFxuICAgICAgICB0eXBlOiBcImVwaWNcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwicGVsYWdpYyBzdGluZ3JheVwiLFxuICAgICAgICAgICAgZnI6IFwicGFzdGVuYWd1ZSB2aW9sZXR0ZVwiLFxuICAgICAgICAgICAgcHQ6IFwiYXJyYWlhIHBlbMOgZ2ljYVwiXG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbM10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzEsMiwzLDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDQsXG4gICAgICAgICAgICBtYXg6IDQ5XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA4LjgyLFxuICAgICAgICAgICAgbWF4OiAxMDguMDNcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInBhcmFkaXNlXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDE1LFxuICAgICAgICAgICAgICAgIHk6IDc1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDkwLFxuICAgICAgICAgICAgICAgIHk6IDE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHNoYWRvdzogWzNdLFxuICAgICAgICByb2RzOiBbMiwgMywgNV0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIwMTJcIixcbiAgICAgICAgdHlwZTogXCJlcGljXCIsXG4gICAgICAgIHRydXN0ZWQ6IHRydWUsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInBhY2lmaWMgZm9vdGJhbGxmaXNoXCIsXG4gICAgICAgICAgICBmcjogXCJwb2lzc29uLWZvb3RiYWxsXCIsXG4gICAgICAgICAgICBwdDogXCJwZWl4ZS1mdXRlYm9sIGRlIHBhY2lmaWNvXCJcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZmljdWx0eTogMSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFsyXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMSwyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDJcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMixcbiAgICAgICAgICAgIG1heDogNC40MVxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwicGFyYWRpc2VcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMjAsXG4gICAgICAgICAgICAgICAgeTogNzBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogOTAsXG4gICAgICAgICAgICAgICAgeTogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDoyMCxcbiAgICAgICAgICAgICAgICB5OjE1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCIwMTNcIixcbiAgICAgICAgdHlwZTogXCJtb25zdGVyXCIsXG4gICAgICAgIHRydXN0ZWQ6IHRydWUsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcInNocmVkZGVyXCIsXG4gICAgICAgICAgICBmcjogXCJzaHJlZGRlclwiLFxuICAgICAgICAgICAgcHQ6IFwic2hyZWRkZXJcIlxuICAgICAgICB9LFxuICAgICAgICBkaWZmaWN1bHR5OiAyLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogW10gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTUwLFxuICAgICAgICAgICAgbWF4OiAyMDBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDMzMC42OSxcbiAgICAgICAgICAgIG1heDogNDQwLjkyXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJwYXJhZGlzZVwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzcG90OiBcIlNwb3QgMSAtIE5vcnRoIG9mIEdhcmJhZ2UgUGF0Y2hcIixcbiAgICAgICAgICAgICAgICB4OiAxNSxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzcG90OiBcIlNwb3QgMiAtIEJsdWVmaXNoIFBvaW50XCIsXG4gICAgICAgICAgICAgICAgeDogMTUsXG4gICAgICAgICAgICAgICAgeTogNDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3BvdDogXCJTcG90IDMgLSBEYXJrIFdhdGVyXCIsXG4gICAgICAgICAgICAgICAgeDogMTUsXG4gICAgICAgICAgICAgICAgeTogNzVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2hhZG93OiBbXSxcbiAgICAgICAgcm9kczogWzIsIDMsIDVdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiTU9OU1RFUjxicj5TcG90IHJvdGF0aW9uOiBpdCBjaGFuZ2VzIGV2ZXJ5IGRheS48YnI+VHJ5IG1vbnN0ZXIgYmFpdHMgdG8gZmluZCB0aGUgYnViYmxlcywgdGhlbiBjYXN0IGFuZCB3YWl0IGludG8gdGhlIGJ1YmJsZXMuPGJyPklmIHlvdSBkb24ndCBoYXZlIGFueSBtb25zdGVyIGJhaXRzLCB0cnkgY2FzdCBhbmQgcmVlbCBhbmQgd2FpdCAoYW5kIGJlIHBhdGllbnQpLlwiXG4gICAgfVxuXSIsImV4cG9ydCBjb25zdCBzY290bGFuZEZpc2ggPSBbXG4gICAge1xuICAgICAgICBpZDogXCI1NFwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJDYXJwXCIsXG4gICAgICAgICAgICBmcjogXCJ1bmtub3dcIixcbiAgICAgICAgICAgIHB0OiBcInVua29ud1wiXG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMixcbiAgICAgICAgICAgIG1heDogNDBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQuNDEsXG4gICAgICAgICAgICBtYXg6IDg4LjE4XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA1MCxcbiAgICAgICAgICAgICAgICB5OiA5MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAyMCxcbiAgICAgICAgICAgICAgICB5OiA3N1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAyMCxcbiAgICAgICAgICAgICAgICB5OiA5MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTIyXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIlNlYSBUcm91dFwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwgMV0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxNSxcbiAgICAgICAgICAgIG1heDogNTBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDMzLjA3LFxuICAgICAgICAgICAgbWF4OiAxMTAuMjNcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInNjb3RsYW5kXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDkwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI1MTNcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiR3JleSBUcm91dFwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwgMV0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgICBtYXg6IDMyXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyMi4wNSxcbiAgICAgICAgICAgIG1heDogNzAuNTVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInNjb3RsYW5kXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDkwLFxuICAgICAgICAgICAgICAgIHk6IDQwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDEwLFxuICAgICAgICAgICAgICAgIHk6IDY1XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI1MjVcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiVHdhaXRlIFNoYWRcIixcbiAgICAgICAgICAgIGZyOiBcInVua25vd1wiLFxuICAgICAgICAgICAgcHQ6IFwidW5rb253XCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFswLDFdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuMyxcbiAgICAgICAgICAgIG1heDogMS41XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAwLjY2LFxuICAgICAgICAgICAgbWF4OiAzLjMxXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2NSxcbiAgICAgICAgICAgICAgICB5OiA5MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTE3XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIlBvd2FuXCIsXG4gICAgICAgICAgICBmcjogXCJ1bmtub3dcIixcbiAgICAgICAgICAgIHB0OiBcInVua29ud1wiXG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMCwxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsIDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA0LFxuICAgICAgICAgICAgbWF4OiAxMVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogOC44MixcbiAgICAgICAgICAgIG1heDogMjQuMjVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInNjb3RsYW5kXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDEwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI1MTJcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiRnJlc2h3YXRlciBCcmVhbVwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiA2XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIwLFxuICAgICAgICAgICAgbWF4OiAxMy4yM1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwic2NvdGxhbmRcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogODUsXG4gICAgICAgICAgICAgICAgeTogNjBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjUyNFwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJUaHJlZS1TcGluZWQgU3RpY2tsZWJhY2tcIixcbiAgICAgICAgICAgIGZyOiBcInVua25vd1wiLFxuICAgICAgICAgICAgcHQ6IFwidW5rb253XCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFtdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuMSxcbiAgICAgICAgICAgIG1heDogMC4zXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAwLjIyLFxuICAgICAgICAgICAgbWF4OiAwLjY2XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NyxcbiAgICAgICAgICAgICAgICB5OiAzOFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTNcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiQ2h1YlwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDhcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMjAsXG4gICAgICAgICAgICBtYXg6IDE3LjY0XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAyMCxcbiAgICAgICAgICAgICAgICB5OiA0NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTIzXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIlRlbmNoXCIsXG4gICAgICAgICAgICBmcjogXCJ1bmtub3dcIixcbiAgICAgICAgICAgIHB0OiBcInVua29ud1wiXG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMCwxXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzAsIDFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiA3LjVcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDQuNDEsXG4gICAgICAgICAgICBtYXg6IDE2LjUzXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NyxcbiAgICAgICAgICAgICAgICB5OiAzOFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTFcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiQWxsaXMgU2hhZFwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogNFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMi4yMCxcbiAgICAgICAgICAgIG1heDogOC44MlxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwic2NvdGxhbmRcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNjUsXG4gICAgICAgICAgICAgICAgeTogMTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjUxNlwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJOb3J0aGVybiBQaWtlXCIsXG4gICAgICAgICAgICBmcjogXCJ1bmtub3dcIixcbiAgICAgICAgICAgIHB0OiBcInVua29ud1wiXG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDksXG4gICAgICAgICAgICBtYXg6IDI4XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAxOS44NCxcbiAgICAgICAgICAgIG1heDogNjEuNzNcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInNjb3RsYW5kXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDg1LFxuICAgICAgICAgICAgICAgIHk6IDYwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI1MThcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiUmFpbmJvdyBUcm91dFwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwgMV0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiA5LFxuICAgICAgICAgICAgbWF4OiAyNVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMTkuODQsXG4gICAgICAgICAgICBtYXg6IDU1LjEyXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2NSxcbiAgICAgICAgICAgICAgICB5OiAxMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA2NSxcbiAgICAgICAgICAgICAgICB5OiA5MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTE0XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIkd1ZGdlb25cIixcbiAgICAgICAgICAgIGZyOiBcInVua25vd1wiLFxuICAgICAgICAgICAgcHQ6IFwidW5rb253XCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFtdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuMSxcbiAgICAgICAgICAgIG1heDogMC4yXG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAwLjIyLFxuICAgICAgICAgICAgbWF4OiAwLjQ0XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA0MCxcbiAgICAgICAgICAgICAgICB5OiAxMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTI2XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIlZlbmRhY2VcIixcbiAgICAgICAgICAgIGZyOiBcInVua25vd1wiLFxuICAgICAgICAgICAgcHQ6IFwidW5rb253XCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFswLDFdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMV0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDAuMixcbiAgICAgICAgICAgIG1heDogMVxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMC40NCxcbiAgICAgICAgICAgIG1heDogMi4yMFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwic2NvdGxhbmRcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDAsXG4gICAgICAgICAgICAgICAgeTogMTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjUxOVwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJSb2FjaFwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMC4yLFxuICAgICAgICAgICAgbWF4OiAxLjhcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDAuNDQsXG4gICAgICAgICAgICBtYXg6IDMuOTdcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInNjb3RsYW5kXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDIxLFxuICAgICAgICAgICAgICAgIHk6IDQzXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI1MjBcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiUnVkZFwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMC40LFxuICAgICAgICAgICAgbWF4OiAxLjJcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDAuODgsXG4gICAgICAgICAgICBtYXg6IDIuNjVcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInNjb3RsYW5kXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDIxLFxuICAgICAgICAgICAgICAgIHk6IDQzXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI1MTVcIixcbiAgICAgICAgdHlwZTogXCJjb21tb25cIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiTGFtcHJleVwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMC41LFxuICAgICAgICAgICAgbWF4OiAyLjVcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDEuMTAsXG4gICAgICAgICAgICBtYXg6IDUuNTFcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInNjb3RsYW5kXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDQwLFxuICAgICAgICAgICAgICAgIHk6IDEwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI1OVwiLFxuICAgICAgICB0eXBlOiBcImNvbW1vblwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJFdXJvcGVhbiBQZXJjaFwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzAsMV0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzAsMSwyLDMsNCw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogNC44XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIwLFxuICAgICAgICAgICAgbWF4OiAxMC41OFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwic2NvdGxhbmRcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMjAsXG4gICAgICAgICAgICAgICAgeTogODBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNDAsXG4gICAgICAgICAgICAgICAgeTogNTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMzAsXG4gICAgICAgICAgICAgICAgeTogNjBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjU2XCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIkRhY2VcIixcbiAgICAgICAgICAgIGZyOiBcInVua25vd1wiLFxuICAgICAgICAgICAgcHQ6IFwidW5rb253XCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFswLDFdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFswLDEsMiwzLDQsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwgMV0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAwLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAwLjIsXG4gICAgICAgICAgICBtYXg6IDEuMFxuICAgICAgICB9LFxuICAgICAgICBsYnM6IHtcbiAgICAgICAgICAgIG1pbjogMC40NCxcbiAgICAgICAgICAgIG1heDogMi4yXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiAyMCxcbiAgICAgICAgICAgICAgICB5OiA3N1xuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTEwXCIsXG4gICAgICAgIHR5cGU6IFwiY29tbW9uXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIkV1cm9wZWFuIFNtZWx0XCIsXG4gICAgICAgICAgICBmcjogXCJ1bmtub3dcIixcbiAgICAgICAgICAgIHB0OiBcInVua29ud1wiXG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbXSB9LFxuICAgICAgICAgICAgeyByb2RzOiBbMCwxLDIsMyw0LDVdIH0sXG4gICAgICAgICAgICB7IG1vbWVudDogWzFdIH1cbiAgICAgICAgXSxcbiAgICAgICAgZGlmZmljdWx0eTogMCxcbiAgICAgICAgc2Vhc29uczogW1xuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAwLjEsXG4gICAgICAgICAgICBtYXg6IDAuMTdcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDAuMjIsXG4gICAgICAgICAgICBtYXg6IDAuMzdcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBcInNjb3RsYW5kXCIsXG4gICAgICAgIHBvc2l0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IDY1LFxuICAgICAgICAgICAgICAgIHk6IDEwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBvc2l0aW9uTm90ZTogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogXCI1N1wiLFxuICAgICAgICB0eXBlOiBcInJhcmVcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiRXVyb3BlYW4gRWVsXCIsXG4gICAgICAgICAgICBmcjogXCJ1bmtub3dcIixcbiAgICAgICAgICAgIHB0OiBcInVua29ud1wiXG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIF0sXG4gICAgICAgIGtnczoge1xuICAgICAgICAgICAgbWluOiAyLFxuICAgICAgICAgICAgbWF4OiA4XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiA0LjQxLFxuICAgICAgICAgICAgbWF4OiAxNy42NFxuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwic2NvdGxhbmRcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogOTAsXG4gICAgICAgICAgICAgICAgeTogMjBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogOTAsXG4gICAgICAgICAgICAgICAgeTogNTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjU4XCIsXG4gICAgICAgIHR5cGU6IFwicmFyZVwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJFdXJvcGVhbiBHcmF5bGluZ1wiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzJdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAxLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogNi43XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyLjIwLFxuICAgICAgICAgICAgbWF4OiAxNC43N1xuICAgICAgICB9LFxuICAgICAgICBtYXA6IFwic2NvdGxhbmRcIixcbiAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogOTAsXG4gICAgICAgICAgICAgICAgeTogNDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogMTAsXG4gICAgICAgICAgICAgICAgeTogNjVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogNzUsXG4gICAgICAgICAgICAgICAgeTogNzVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcG9zaXRpb25Ob3RlOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiBcIjUxMVwiLFxuICAgICAgICB0eXBlOiBcInJhcmVcIixcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZW46IFwiRXVyb3BlYW4gV2hpdGVmaXNoXCIsXG4gICAgICAgICAgICBmcjogXCJ1bmtub3dcIixcbiAgICAgICAgICAgIHB0OiBcInVua29ud1wiXG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgIHsgc2hhZG93OiBbMl0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFswLCAxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogMTBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDIuMjAsXG4gICAgICAgICAgICBtYXg6IDIyLjA1XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA4NSxcbiAgICAgICAgICAgICAgICB5OiA0NVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTJcIixcbiAgICAgICAgdHlwZTogXCJlcGljXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIkJ1bGwgVHJvdXRcIixcbiAgICAgICAgICAgIGZyOiBcInVua25vd1wiLFxuICAgICAgICAgICAgcHQ6IFwidW5rb253XCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFszLDRdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwgMV0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAxLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgXSxcbiAgICAgICAga2dzOiB7XG4gICAgICAgICAgICBtaW46IDQsXG4gICAgICAgICAgICBtYXg6IDE0LjVcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDguODIsXG4gICAgICAgICAgICBtYXg6IDMxLjk3XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA5MCxcbiAgICAgICAgICAgICAgICB5OiA1MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTIxXCIsXG4gICAgICAgIHR5cGU6IFwiZXBpY1wiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJTY290dGlzaCBTYWxtb25cIixcbiAgICAgICAgICAgIGZyOiBcInVua25vd1wiLFxuICAgICAgICAgICAgcHQ6IFwidW5rb253XCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFtdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMF0gfVxuICAgICAgICBdLFxuICAgICAgICBkaWZmaWN1bHR5OiAyLFxuICAgICAgICBzZWFzb25zOiBbXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTIsXG4gICAgICAgICAgICBtYXg6IDQ2XG4gICAgICAgIH0sXG4gICAgICAgIGxiczoge1xuICAgICAgICAgICAgbWluOiAyNC40NixcbiAgICAgICAgICAgIG1heDogMTAxLjQxXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA0MCxcbiAgICAgICAgICAgICAgICB5OiA5MFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTVcIixcbiAgICAgICAgdHlwZTogXCJlcGljXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGVuOiBcIkNvbW1vbiBTdHVyZ2VvblwiLFxuICAgICAgICAgICAgZnI6IFwidW5rbm93XCIsXG4gICAgICAgICAgICBwdDogXCJ1bmtvbndcIlxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICB7IHNoYWRvdzogWzMsNF0gfSxcbiAgICAgICAgICAgIHsgcm9kczogWzIsMyw1XSB9LFxuICAgICAgICAgICAgeyBtb21lbnQ6IFsxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMTEyLFxuICAgICAgICAgICAgbWF4OiA0MDBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDI0Ni45MixcbiAgICAgICAgICAgIG1heDogODgxLjg1XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA1NyxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6IFwiNTI3XCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3RlclwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBlbjogXCJOZXNzaWVcIixcbiAgICAgICAgICAgIGZyOiBcInVua25vd1wiLFxuICAgICAgICAgICAgcHQ6IFwidW5rb253XCJcbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgeyBzaGFkb3c6IFtdIH0sXG4gICAgICAgICAgICB7IHJvZHM6IFsyLDMsNV0gfSxcbiAgICAgICAgICAgIHsgbW9tZW50OiBbMCwxXSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRpZmZpY3VsdHk6IDAsXG4gICAgICAgIHNlYXNvbnM6IFtcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBdLFxuICAgICAgICBrZ3M6IHtcbiAgICAgICAgICAgIG1pbjogMjUwLFxuICAgICAgICAgICAgbWF4OiAzNTBcbiAgICAgICAgfSxcbiAgICAgICAgbGJzOiB7XG4gICAgICAgICAgICBtaW46IDU1MS4xNixcbiAgICAgICAgICAgIG1heDogNzcxLjYyXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogXCJzY290bGFuZFwiLFxuICAgICAgICBwb3NpdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiA1NyxcbiAgICAgICAgICAgICAgICB5OiAxNVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwb3NpdGlvbk5vdGU6IFwiXCJcbiAgICB9XG5dXG4iLCJcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxpc3QoZmlzaCwgbGFuZ3VhZ2UpIHtcbiAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNsaXN0LSR7ZmlzaC5tYXB9YCkpIHtcblxuXG4gICAgICAgIGNvbnN0IGxpc3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBsaXN0Q29udGFpbmVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwibGlzdC1jb250YWluZXIgaGlkZGVuLWxpc3RcIik7XG4gICAgICAgIGxpc3RDb250YWluZXIuc2V0QXR0cmlidXRlKFwiaWRcIiwgYGxpc3QtJHtmaXNoLm1hcH1gKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmaXNoLWxpc3RcIikuYXBwZW5kQ2hpbGQobGlzdENvbnRhaW5lcik7XG5cbiAgICAgICAgY29uc3QgbGlzdFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbGlzdFRpdGxlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiaXMtZmxleCBteS0yIGlzLWFsaWduLWl0ZW1zLWNlbnRlciBsaXN0LXRpdGxlXCIpO1xuICAgICAgICBsaXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKGxpc3RUaXRsZSk7XG5cblxuICAgICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgY29uc3QgdXJsID0gYGltYWdlcy8ke2Zpc2gubWFwfS5zdmdgO1xuICAgICAgICB4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImltYWdlL3N2Zyt4bWxcIik7XG4gICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3ZnRWxlbWVudCA9IHhoci5yZXNwb25zZVhNTC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgbGlzdFRpdGxlLmFwcGVuZENoaWxkKHN2Z0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4aHIuc2VuZCgpO1xuXG5cbiAgICAgICAgY29uc3QgaWNvbkFycm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJzdmdcIik7XG4gICAgICAgIGljb25BcnJvdy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImljb24tYXJyb3dcIik7XG4gICAgICAgIGljb25BcnJvdy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjI0XCIpO1xuICAgICAgICBpY29uQXJyb3cuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiMjRcIik7XG4gICAgICAgIGljb25BcnJvdy5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIFwiMCAwIDI0IDI0XCIpO1xuICAgICAgICBsaXN0VGl0bGUuYXBwZW5kQ2hpbGQoaWNvbkFycm93KTtcblxuICAgICAgICBjb25zdCBwYXRoQXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInBhdGhcIik7XG4gICAgICAgIHBhdGhBcnJvdy5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgICBwYXRoQXJyb3cuc2V0QXR0cmlidXRlKFwiZFwiLCBcIk0xNi41OSA4LjU5MDA0TDEyIDEzLjE3TDcuNDEgOC41OTAwNEw2IDEwTDEyIDE2TDE4IDEwTDE2LjU5IDguNTkwMDRaXCIpO1xuICAgICAgICBpY29uQXJyb3cuYXBwZW5kQ2hpbGQocGF0aEFycm93KTtcblxuICAgICAgICBjb25zdCB0aXRsZVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKVxuICAgICAgICB0aXRsZVRleHQuaW5uZXJIVE1MID0gZmlzaC5tYXA7XG4gICAgICAgIGxpc3RUaXRsZS5hcHBlbmRDaGlsZCh0aXRsZVRleHQpXG5cblxuICAgICAgICBjb25zdCBpbm5lckxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBpbm5lckxpc3Quc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJpbm5lci1saXN0XCIpO1xuICAgICAgICBsaXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKGlubmVyTGlzdCk7XG5cbiAgICB9XG5cblxuICAgIGNvbnN0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGl0ZW0uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgYGl0ZW0gaXMtZmxleCBpcy1hbGlnbi1pdGVtcy1jZW50ZXIgcHktMSBweC00IG1hcC0ke2Zpc2gubWFwfSAke2Zpc2gudHlwZX1gKTtcbiAgICBpdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgZmlzaC5pZCk7XG4gICAgaXRlbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNlYXNvblwiLCBmaXNoLnNlYXNvbnNbbmV3IERhdGUoKS5nZXRNb250aCgpXSA/IFwiaW5cIiA6IFwib3V0XCIpXG4gICAgaWYoZmlzaC5pbnByb2dyZXNzKXtcbiAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcInBvaW50ZXItZXZlbnRzOm5vbmU7YmFja2dyb3VuZC1jb2xvcjogIzE5MTkxOTtjb2xvcjogIzg1MzUzNTtcIik7XG4gICAgfVxuICAgIGNvbnN0IGZpZ3VyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWd1cmVcIik7XG4gICAgZmlndXJlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiaW1hZ2UgaXMtMjR4MjQgbXItM1wiKTtcbiAgICBpdGVtLmFwcGVuZENoaWxkKGZpZ3VyZSk7XG4gICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICBpbWcuc2V0QXR0cmlidXRlKFwic3JjXCIsIGAuL2ltYWdlcy8ke2Zpc2guaWR9LnBuZ2ApO1xuICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImlzLXJvdW5kZWRcIik7XG4gICAgZmlndXJlLmFwcGVuZENoaWxkKGltZyk7XG4gICAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIHAuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJpcy1zaXplLTYgZmlzaHBcIik7XG4gICAgcC5pbm5lckhUTUwgPSBmaXNoLm5hbWVbbGFuZ3VhZ2VdID8gZmlzaC5uYW1lW2xhbmd1YWdlXSA6IGZpc2gubmFtZS5lbjtcbiAgICBpdGVtLmFwcGVuZENoaWxkKHApXG4gICAgXG5cblxuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2xpc3QtJHtmaXNoLm1hcH0gLmlubmVyLWxpc3RgKS5hcHBlbmRDaGlsZChpdGVtKTtcblxuXG59IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGNoYXJzZXQgXFxcIlVURi04XFxcIjtcXG4vKiEgYnVsbWEuaW8gdjAuOS40IHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL2pndGhtcy9idWxtYSAqL1xcbi8qIEJ1bG1hIFV0aWxpdGllcyAqL1xcbi5wYWdpbmF0aW9uLXByZXZpb3VzLFxcbi5wYWdpbmF0aW9uLW5leHQsXFxuLnBhZ2luYXRpb24tbGluayxcXG4ucGFnaW5hdGlvbi1lbGxpcHNpcywgLmZpbGUtY3RhLFxcbi5maWxlLW5hbWUsIC5zZWxlY3Qgc2VsZWN0LCAudGV4dGFyZWEsIC5pbnB1dCwgLmJ1dHRvbiB7XFxuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBoZWlnaHQ6IDIuNWVtO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDAuNWVtIC0gMXB4KTtcXG4gIHBhZGRpbmctbGVmdDogY2FsYygwLjc1ZW0gLSAxcHgpO1xcbiAgcGFkZGluZy1yaWdodDogY2FsYygwLjc1ZW0gLSAxcHgpO1xcbiAgcGFkZGluZy10b3A6IGNhbGMoMC41ZW0gLSAxcHgpO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG59XFxuLnBhZ2luYXRpb24tcHJldmlvdXM6Zm9jdXMsXFxuLnBhZ2luYXRpb24tbmV4dDpmb2N1cyxcXG4ucGFnaW5hdGlvbi1saW5rOmZvY3VzLFxcbi5wYWdpbmF0aW9uLWVsbGlwc2lzOmZvY3VzLCAuZmlsZS1jdGE6Zm9jdXMsXFxuLmZpbGUtbmFtZTpmb2N1cywgLnNlbGVjdCBzZWxlY3Q6Zm9jdXMsIC50ZXh0YXJlYTpmb2N1cywgLmlucHV0OmZvY3VzLCAuYnV0dG9uOmZvY3VzLCAuaXMtZm9jdXNlZC5wYWdpbmF0aW9uLXByZXZpb3VzLFxcbi5pcy1mb2N1c2VkLnBhZ2luYXRpb24tbmV4dCxcXG4uaXMtZm9jdXNlZC5wYWdpbmF0aW9uLWxpbmssXFxuLmlzLWZvY3VzZWQucGFnaW5hdGlvbi1lbGxpcHNpcywgLmlzLWZvY3VzZWQuZmlsZS1jdGEsXFxuLmlzLWZvY3VzZWQuZmlsZS1uYW1lLCAuc2VsZWN0IHNlbGVjdC5pcy1mb2N1c2VkLCAuaXMtZm9jdXNlZC50ZXh0YXJlYSwgLmlzLWZvY3VzZWQuaW5wdXQsIC5pcy1mb2N1c2VkLmJ1dHRvbiwgLnBhZ2luYXRpb24tcHJldmlvdXM6YWN0aXZlLFxcbi5wYWdpbmF0aW9uLW5leHQ6YWN0aXZlLFxcbi5wYWdpbmF0aW9uLWxpbms6YWN0aXZlLFxcbi5wYWdpbmF0aW9uLWVsbGlwc2lzOmFjdGl2ZSwgLmZpbGUtY3RhOmFjdGl2ZSxcXG4uZmlsZS1uYW1lOmFjdGl2ZSwgLnNlbGVjdCBzZWxlY3Q6YWN0aXZlLCAudGV4dGFyZWE6YWN0aXZlLCAuaW5wdXQ6YWN0aXZlLCAuYnV0dG9uOmFjdGl2ZSwgLmlzLWFjdGl2ZS5wYWdpbmF0aW9uLXByZXZpb3VzLFxcbi5pcy1hY3RpdmUucGFnaW5hdGlvbi1uZXh0LFxcbi5pcy1hY3RpdmUucGFnaW5hdGlvbi1saW5rLFxcbi5pcy1hY3RpdmUucGFnaW5hdGlvbi1lbGxpcHNpcywgLmlzLWFjdGl2ZS5maWxlLWN0YSxcXG4uaXMtYWN0aXZlLmZpbGUtbmFtZSwgLnNlbGVjdCBzZWxlY3QuaXMtYWN0aXZlLCAuaXMtYWN0aXZlLnRleHRhcmVhLCAuaXMtYWN0aXZlLmlucHV0LCAuaXMtYWN0aXZlLmJ1dHRvbiB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5bZGlzYWJsZWRdLnBhZ2luYXRpb24tcHJldmlvdXMsXFxuW2Rpc2FibGVkXS5wYWdpbmF0aW9uLW5leHQsXFxuW2Rpc2FibGVkXS5wYWdpbmF0aW9uLWxpbmssXFxuW2Rpc2FibGVkXS5wYWdpbmF0aW9uLWVsbGlwc2lzLCBbZGlzYWJsZWRdLmZpbGUtY3RhLFxcbltkaXNhYmxlZF0uZmlsZS1uYW1lLCAuc2VsZWN0IHNlbGVjdFtkaXNhYmxlZF0sIFtkaXNhYmxlZF0udGV4dGFyZWEsIFtkaXNhYmxlZF0uaW5wdXQsIFtkaXNhYmxlZF0uYnV0dG9uLCBmaWVsZHNldFtkaXNhYmxlZF0gLnBhZ2luYXRpb24tcHJldmlvdXMsXFxuZmllbGRzZXRbZGlzYWJsZWRdIC5wYWdpbmF0aW9uLW5leHQsXFxuZmllbGRzZXRbZGlzYWJsZWRdIC5wYWdpbmF0aW9uLWxpbmssXFxuZmllbGRzZXRbZGlzYWJsZWRdIC5wYWdpbmF0aW9uLWVsbGlwc2lzLCBmaWVsZHNldFtkaXNhYmxlZF0gLmZpbGUtY3RhLFxcbmZpZWxkc2V0W2Rpc2FibGVkXSAuZmlsZS1uYW1lLCBmaWVsZHNldFtkaXNhYmxlZF0gLnNlbGVjdCBzZWxlY3QsIC5zZWxlY3QgZmllbGRzZXRbZGlzYWJsZWRdIHNlbGVjdCwgZmllbGRzZXRbZGlzYWJsZWRdIC50ZXh0YXJlYSwgZmllbGRzZXRbZGlzYWJsZWRdIC5pbnB1dCwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24ge1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG59XFxuXFxuLmlzLXVuc2VsZWN0YWJsZSwgLnRhYnMsIC5wYWdpbmF0aW9uLXByZXZpb3VzLFxcbi5wYWdpbmF0aW9uLW5leHQsXFxuLnBhZ2luYXRpb24tbGluayxcXG4ucGFnaW5hdGlvbi1lbGxpcHNpcywgLmJyZWFkY3J1bWIsIC5maWxlLCAuYnV0dG9uIHtcXG4gIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5uYXZiYXItbGluazpub3QoLmlzLWFycm93bGVzcyk6OmFmdGVyLCAuc2VsZWN0Om5vdCguaXMtbXVsdGlwbGUpOm5vdCguaXMtbG9hZGluZyk6OmFmdGVyIHtcXG4gIGJvcmRlcjogM3B4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm9yZGVyLXJpZ2h0OiAwO1xcbiAgYm9yZGVyLXRvcDogMDtcXG4gIGNvbnRlbnQ6IFxcXCIgXFxcIjtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAwLjYyNWVtO1xcbiAgbWFyZ2luLXRvcDogLTAuNDM3NWVtO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XFxuICB3aWR0aDogMC42MjVlbTtcXG59XFxuXFxuLnRhYnM6bm90KDpsYXN0LWNoaWxkKSwgLnBhZ2luYXRpb246bm90KDpsYXN0LWNoaWxkKSwgLm1lc3NhZ2U6bm90KDpsYXN0LWNoaWxkKSwgLmxldmVsOm5vdCg6bGFzdC1jaGlsZCksIC5icmVhZGNydW1iOm5vdCg6bGFzdC1jaGlsZCksIC5ibG9jazpub3QoOmxhc3QtY2hpbGQpLCAudGl0bGU6bm90KDpsYXN0LWNoaWxkKSxcXG4uc3VidGl0bGU6bm90KDpsYXN0LWNoaWxkKSwgLnRhYmxlLWNvbnRhaW5lcjpub3QoOmxhc3QtY2hpbGQpLCAudGFibGU6bm90KDpsYXN0LWNoaWxkKSwgLnByb2dyZXNzOm5vdCg6bGFzdC1jaGlsZCksIC5ub3RpZmljYXRpb246bm90KDpsYXN0LWNoaWxkKSwgLmNvbnRlbnQ6bm90KDpsYXN0LWNoaWxkKSwgLmJveDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTtcXG59XFxuXFxuLm1vZGFsLWNsb3NlLCAuZGVsZXRlIHtcXG4gIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwLCAxMCwgMTAsIDAuMik7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA5OTk5cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb2ludGVyLWV2ZW50czogYXV0bztcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZsZXgtZ3JvdzogMDtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgZm9udC1zaXplOiAwO1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgbWF4LWhlaWdodDogMjBweDtcXG4gIG1heC13aWR0aDogMjBweDtcXG4gIG1pbi1oZWlnaHQ6IDIwcHg7XFxuICBtaW4td2lkdGg6IDIwcHg7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIHdpZHRoOiAyMHB4O1xcbn1cXG4ubW9kYWwtY2xvc2U6OmJlZm9yZSwgLmRlbGV0ZTo6YmVmb3JlLCAubW9kYWwtY2xvc2U6OmFmdGVyLCAuZGVsZXRlOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGxlZnQ6IDUwJTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSkgcm90YXRlKDQ1ZGVnKTtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XFxufVxcbi5tb2RhbC1jbG9zZTo6YmVmb3JlLCAuZGVsZXRlOjpiZWZvcmUge1xcbiAgaGVpZ2h0OiAycHg7XFxuICB3aWR0aDogNTAlO1xcbn1cXG4ubW9kYWwtY2xvc2U6OmFmdGVyLCAuZGVsZXRlOjphZnRlciB7XFxuICBoZWlnaHQ6IDUwJTtcXG4gIHdpZHRoOiAycHg7XFxufVxcbi5tb2RhbC1jbG9zZTpob3ZlciwgLmRlbGV0ZTpob3ZlciwgLm1vZGFsLWNsb3NlOmZvY3VzLCAuZGVsZXRlOmZvY3VzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTAsIDEwLCAxMCwgMC4zKTtcXG59XFxuLm1vZGFsLWNsb3NlOmFjdGl2ZSwgLmRlbGV0ZTphY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMCwgMTAsIDEwLCAwLjQpO1xcbn1cXG4uaXMtc21hbGwubW9kYWwtY2xvc2UsIC5pcy1zbWFsbC5kZWxldGUge1xcbiAgaGVpZ2h0OiAxNnB4O1xcbiAgbWF4LWhlaWdodDogMTZweDtcXG4gIG1heC13aWR0aDogMTZweDtcXG4gIG1pbi1oZWlnaHQ6IDE2cHg7XFxuICBtaW4td2lkdGg6IDE2cHg7XFxuICB3aWR0aDogMTZweDtcXG59XFxuLmlzLW1lZGl1bS5tb2RhbC1jbG9zZSwgLmlzLW1lZGl1bS5kZWxldGUge1xcbiAgaGVpZ2h0OiAyNHB4O1xcbiAgbWF4LWhlaWdodDogMjRweDtcXG4gIG1heC13aWR0aDogMjRweDtcXG4gIG1pbi1oZWlnaHQ6IDI0cHg7XFxuICBtaW4td2lkdGg6IDI0cHg7XFxuICB3aWR0aDogMjRweDtcXG59XFxuLmlzLWxhcmdlLm1vZGFsLWNsb3NlLCAuaXMtbGFyZ2UuZGVsZXRlIHtcXG4gIGhlaWdodDogMzJweDtcXG4gIG1heC1oZWlnaHQ6IDMycHg7XFxuICBtYXgtd2lkdGg6IDMycHg7XFxuICBtaW4taGVpZ2h0OiAzMnB4O1xcbiAgbWluLXdpZHRoOiAzMnB4O1xcbiAgd2lkdGg6IDMycHg7XFxufVxcblxcbi5jb250cm9sLmlzLWxvYWRpbmc6OmFmdGVyLCAuc2VsZWN0LmlzLWxvYWRpbmc6OmFmdGVyLCAubG9hZGVyLCAuYnV0dG9uLmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIGFuaW1hdGlvbjogc3BpbkFyb3VuZCA1MDBtcyBpbmZpbml0ZSBsaW5lYXI7XFxuICBib3JkZXI6IDJweCBzb2xpZCBoc2woMCwgMCUsIDg2JSk7XFxuICBib3JkZXItcmFkaXVzOiA5OTk5cHg7XFxuICBib3JkZXItcmlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAxZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMWVtO1xcbn1cXG5cXG4uaGVyby12aWRlbywgLmlzLW92ZXJsYXksIC5tb2RhbC1iYWNrZ3JvdW5kLCAubW9kYWwsIC5pbWFnZS5pcy1zcXVhcmUgaW1nLFxcbi5pbWFnZS5pcy1zcXVhcmUgLmhhcy1yYXRpbywgLmltYWdlLmlzLTFieTEgaW1nLFxcbi5pbWFnZS5pcy0xYnkxIC5oYXMtcmF0aW8sIC5pbWFnZS5pcy01Ynk0IGltZyxcXG4uaW1hZ2UuaXMtNWJ5NCAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtNGJ5MyBpbWcsXFxuLmltYWdlLmlzLTRieTMgLmhhcy1yYXRpbywgLmltYWdlLmlzLTNieTIgaW1nLFxcbi5pbWFnZS5pcy0zYnkyIC5oYXMtcmF0aW8sIC5pbWFnZS5pcy01YnkzIGltZyxcXG4uaW1hZ2UuaXMtNWJ5MyAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtMTZieTkgaW1nLFxcbi5pbWFnZS5pcy0xNmJ5OSAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtMmJ5MSBpbWcsXFxuLmltYWdlLmlzLTJieTEgLmhhcy1yYXRpbywgLmltYWdlLmlzLTNieTEgaW1nLFxcbi5pbWFnZS5pcy0zYnkxIC5oYXMtcmF0aW8sIC5pbWFnZS5pcy00Ynk1IGltZyxcXG4uaW1hZ2UuaXMtNGJ5NSAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtM2J5NCBpbWcsXFxuLmltYWdlLmlzLTNieTQgLmhhcy1yYXRpbywgLmltYWdlLmlzLTJieTMgaW1nLFxcbi5pbWFnZS5pcy0yYnkzIC5oYXMtcmF0aW8sIC5pbWFnZS5pcy0zYnk1IGltZyxcXG4uaW1hZ2UuaXMtM2J5NSAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtOWJ5MTYgaW1nLFxcbi5pbWFnZS5pcy05YnkxNiAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtMWJ5MiBpbWcsXFxuLmltYWdlLmlzLTFieTIgLmhhcy1yYXRpbywgLmltYWdlLmlzLTFieTMgaW1nLFxcbi5pbWFnZS5pcy0xYnkzIC5oYXMtcmF0aW8ge1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwO1xcbn1cXG5cXG4ubmF2YmFyLWJ1cmdlciB7XFxuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGNvbG9yOiBjdXJyZW50Q29sb3I7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuLyogQnVsbWEgQmFzZSAqLyAvKiEgbWluaXJlc2V0LmNzcyB2MC4wLjYgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vamd0aG1zL21pbmlyZXNldC5jc3MgKi9cXG5odG1sLFxcbmJvZHksXFxucCxcXG5vbCxcXG51bCxcXG5saSxcXG5kbCxcXG5kdCxcXG5kZCxcXG5ibG9ja3F1b3RlLFxcbmZpZ3VyZSxcXG5maWVsZHNldCxcXG5sZWdlbmQsXFxudGV4dGFyZWEsXFxucHJlLFxcbmlmcmFtZSxcXG5ocixcXG5oMSxcXG5oMixcXG5oMyxcXG5oNCxcXG5oNSxcXG5oNiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5oMSxcXG5oMixcXG5oMyxcXG5oNCxcXG5oNSxcXG5oNiB7XFxuICBmb250LXNpemU6IDEwMCU7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbn1cXG5cXG51bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG5idXR0b24sXFxuaW5wdXQsXFxuc2VsZWN0LFxcbnRleHRhcmVhIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuaHRtbCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4qLCAqOjpiZWZvcmUsICo6OmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGluaGVyaXQ7XFxufVxcblxcbmltZyxcXG52aWRlbyB7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxufVxcblxcbmlmcmFtZSB7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbnRhYmxlIHtcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuICBib3JkZXItc3BhY2luZzogMDtcXG59XFxuXFxudGQsXFxudGgge1xcbiAgcGFkZGluZzogMDtcXG59XFxudGQ6bm90KFthbGlnbl0pLFxcbnRoOm5vdChbYWxpZ25dKSB7XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xcbn1cXG5cXG5odG1sIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICBtaW4td2lkdGg6IDMwMHB4O1xcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcXG4gIHRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XFxufVxcblxcbmFydGljbGUsXFxuYXNpZGUsXFxuZmlndXJlLFxcbmZvb3RlcixcXG5oZWFkZXIsXFxuaGdyb3VwLFxcbnNlY3Rpb24ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbmJvZHksXFxuYnV0dG9uLFxcbmlucHV0LFxcbm9wdGdyb3VwLFxcbnNlbGVjdCxcXG50ZXh0YXJlYSB7XFxuICBmb250LWZhbWlseTogQmxpbmtNYWNTeXN0ZW1Gb250LCAtYXBwbGUtc3lzdGVtLCBcXFwiU2Vnb2UgVUlcXFwiLCBcXFwiUm9ib3RvXFxcIiwgXFxcIk94eWdlblxcXCIsIFxcXCJVYnVudHVcXFwiLCBcXFwiQ2FudGFyZWxsXFxcIiwgXFxcIkZpcmEgU2Fuc1xcXCIsIFxcXCJEcm9pZCBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgXFxcIkhlbHZldGljYVxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7XFxufVxcblxcbmNvZGUsXFxucHJlIHtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBhdXRvO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYXV0bztcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxufVxcblxcbmJvZHkge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxufVxcblxcbmEge1xcbiAgY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuYSBzdHJvbmcge1xcbiAgY29sb3I6IGN1cnJlbnRDb2xvcjtcXG59XFxuYTpob3ZlciB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG5cXG5jb2RlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGNvbG9yOiAjZGExMDM5O1xcbiAgZm9udC1zaXplOiAwLjg3NWVtO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIHBhZGRpbmc6IDAuMjVlbSAwLjVlbSAwLjI1ZW07XFxufVxcblxcbmhyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAycHg7XFxuICBtYXJnaW46IDEuNXJlbSAwO1xcbn1cXG5cXG5pbWcge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG5cXG5pbnB1dFt0eXBlPWNoZWNrYm94XSxcXG5pbnB1dFt0eXBlPXJhZGlvXSB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbnNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogMC44NzVlbTtcXG59XFxuXFxuc3BhbiB7XFxuICBmb250LXN0eWxlOiBpbmhlcml0O1xcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XFxufVxcblxcbnN0cm9uZyB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG59XFxuXFxuZmllbGRzZXQge1xcbiAgYm9yZGVyOiBub25lO1xcbn1cXG5cXG5wcmUge1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIGZvbnQtc2l6ZTogMC44NzVlbTtcXG4gIG92ZXJmbG93LXg6IGF1dG87XFxuICBwYWRkaW5nOiAxLjI1cmVtIDEuNXJlbTtcXG4gIHdoaXRlLXNwYWNlOiBwcmU7XFxuICB3b3JkLXdyYXA6IG5vcm1hbDtcXG59XFxucHJlIGNvZGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogY3VycmVudENvbG9yO1xcbiAgZm9udC1zaXplOiAxZW07XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG50YWJsZSB0ZCxcXG50YWJsZSB0aCB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG50YWJsZSB0ZDpub3QoW2FsaWduXSksXFxudGFibGUgdGg6bm90KFthbGlnbl0pIHtcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7XFxufVxcbnRhYmxlIHRoIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcblxcbkBrZXlmcmFtZXMgc3BpbkFyb3VuZCB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICB9XFxuICB0byB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM1OWRlZyk7XFxuICB9XFxufVxcbi8qIEJ1bG1hIEVsZW1lbnRzICovXFxuLmJveCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgYm94LXNoYWRvdzogMCAwLjVlbSAxZW0gLTAuMTI1ZW0gcmdiYSgxMCwgMTAsIDEwLCAwLjEpLCAwIDBweCAwIDFweCByZ2JhKDEwLCAxMCwgMTAsIDAuMDIpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMS4yNXJlbTtcXG59XFxuXFxuYS5ib3g6aG92ZXIsIGEuYm94OmZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMC41ZW0gMWVtIC0wLjEyNWVtIHJnYmEoMTAsIDEwLCAxMCwgMC4xKSwgMCAwIDAgMXB4IGhzbCgyMjksIDUzJSwgNTMlKTtcXG59XFxuYS5ib3g6YWN0aXZlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDJweCByZ2JhKDEwLCAxMCwgMTAsIDAuMiksIDAgMCAwIDFweCBoc2woMjI5LCA1MyUsIDUzJSk7XFxufVxcblxcbi5idXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA4NiUpO1xcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBwYWRkaW5nLWJvdHRvbTogY2FsYygwLjVlbSAtIDFweCk7XFxuICBwYWRkaW5nLWxlZnQ6IDFlbTtcXG4gIHBhZGRpbmctcmlnaHQ6IDFlbTtcXG4gIHBhZGRpbmctdG9wOiBjYWxjKDAuNWVtIC0gMXB4KTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcbi5idXR0b24gc3Ryb25nIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG4uYnV0dG9uIC5pY29uLCAuYnV0dG9uIC5pY29uLmlzLXNtYWxsLCAuYnV0dG9uIC5pY29uLmlzLW1lZGl1bSwgLmJ1dHRvbiAuaWNvbi5pcy1sYXJnZSB7XFxuICBoZWlnaHQ6IDEuNWVtO1xcbiAgd2lkdGg6IDEuNWVtO1xcbn1cXG4uYnV0dG9uIC5pY29uOmZpcnN0LWNoaWxkOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWxlZnQ6IGNhbGMoLTAuNWVtIC0gMXB4KTtcXG4gIG1hcmdpbi1yaWdodDogMC4yNWVtO1xcbn1cXG4uYnV0dG9uIC5pY29uOmxhc3QtY2hpbGQ6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWxlZnQ6IDAuMjVlbTtcXG4gIG1hcmdpbi1yaWdodDogY2FsYygtMC41ZW0gLSAxcHgpO1xcbn1cXG4uYnV0dG9uIC5pY29uOmZpcnN0LWNoaWxkOmxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLWxlZnQ6IGNhbGMoLTAuNWVtIC0gMXB4KTtcXG4gIG1hcmdpbi1yaWdodDogY2FsYygtMC41ZW0gLSAxcHgpO1xcbn1cXG4uYnV0dG9uOmhvdmVyLCAuYnV0dG9uLmlzLWhvdmVyZWQge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDcxJSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uYnV0dG9uOmZvY3VzLCAuYnV0dG9uLmlzLWZvY3VzZWQge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uYnV0dG9uOmZvY3VzOm5vdCg6YWN0aXZlKSwgLmJ1dHRvbi5pcy1mb2N1c2VkOm5vdCg6YWN0aXZlKSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoNzIsIDk1LCAxOTksIDAuMjUpO1xcbn1cXG4uYnV0dG9uOmFjdGl2ZSwgLmJ1dHRvbi5pcy1hY3RpdmUge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDI5JSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uYnV0dG9uLmlzLXRleHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbn1cXG4uYnV0dG9uLmlzLXRleHQ6aG92ZXIsIC5idXR0b24uaXMtdGV4dC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLXRleHQ6Zm9jdXMsIC5idXR0b24uaXMtdGV4dC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5idXR0b24uaXMtdGV4dDphY3RpdmUsIC5idXR0b24uaXMtdGV4dC5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U4ZThlODtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5idXR0b24uaXMtdGV4dFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLXRleHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuLmJ1dHRvbi5pcy1naG9zdCB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcbi5idXR0b24uaXMtZ2hvc3Q6aG92ZXIsIC5idXR0b24uaXMtZ2hvc3QuaXMtaG92ZXJlZCB7XFxuICBjb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcbi5idXR0b24uaXMtd2hpdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5idXR0b24uaXMtd2hpdGU6aG92ZXIsIC5idXR0b24uaXMtd2hpdGUuaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLmJ1dHRvbi5pcy13aGl0ZTpmb2N1cywgLmJ1dHRvbi5pcy13aGl0ZS5pcy1mb2N1c2VkIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5idXR0b24uaXMtd2hpdGU6Zm9jdXM6bm90KDphY3RpdmUpLCAuYnV0dG9uLmlzLXdoaXRlLmlzLWZvY3VzZWQ6bm90KDphY3RpdmUpIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTtcXG59XFxuLmJ1dHRvbi5pcy13aGl0ZTphY3RpdmUsIC5idXR0b24uaXMtd2hpdGUuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4uYnV0dG9uLmlzLXdoaXRlW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtd2hpdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxufVxcbi5idXR0b24uaXMtd2hpdGUuaXMtaW52ZXJ0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLmJ1dHRvbi5pcy13aGl0ZS5pcy1pbnZlcnRlZDpob3ZlciwgLmJ1dHRvbi5pcy13aGl0ZS5pcy1pbnZlcnRlZC5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcbn1cXG4uYnV0dG9uLmlzLXdoaXRlLmlzLWludmVydGVkW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtd2hpdGUuaXMtaW52ZXJ0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uYnV0dG9uLmlzLXdoaXRlLmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgaHNsKDAsIDAlLCA0JSkgaHNsKDAsIDAlLCA0JSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy13aGl0ZS5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uYnV0dG9uLmlzLXdoaXRlLmlzLW91dGxpbmVkOmhvdmVyLCAuYnV0dG9uLmlzLXdoaXRlLmlzLW91dGxpbmVkLmlzLWhvdmVyZWQsIC5idXR0b24uaXMtd2hpdGUuaXMtb3V0bGluZWQ6Zm9jdXMsIC5idXR0b24uaXMtd2hpdGUuaXMtb3V0bGluZWQuaXMtZm9jdXNlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4uYnV0dG9uLmlzLXdoaXRlLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgaHNsKDAsIDAlLCAxMDAlKSBoc2woMCwgMCUsIDEwMCUpICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtd2hpdGUuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpob3Zlcjo6YWZ0ZXIsIC5idXR0b24uaXMtd2hpdGUuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1ob3ZlcmVkOjphZnRlciwgLmJ1dHRvbi5pcy13aGl0ZS5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmZvY3VzOjphZnRlciwgLmJ1dHRvbi5pcy13aGl0ZS5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWZvY3VzZWQ6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgaHNsKDAsIDAlLCA0JSkgaHNsKDAsIDAlLCA0JSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy13aGl0ZS5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLXdoaXRlLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uYnV0dG9uLmlzLXdoaXRlLmlzLWludmVydGVkLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLmJ1dHRvbi5pcy13aGl0ZS5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZDpob3ZlciwgLmJ1dHRvbi5pcy13aGl0ZS5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLXdoaXRlLmlzLWludmVydGVkLmlzLW91dGxpbmVkOmZvY3VzLCAuYnV0dG9uLmlzLXdoaXRlLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWZvY3VzZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLmJ1dHRvbi5pcy13aGl0ZS5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmhvdmVyOjphZnRlciwgLmJ1dHRvbi5pcy13aGl0ZS5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWhvdmVyZWQ6OmFmdGVyLCAuYnV0dG9uLmlzLXdoaXRlLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6Zm9jdXM6OmFmdGVyLCAuYnV0dG9uLmlzLXdoaXRlLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtZm9jdXNlZDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCBoc2woMCwgMCUsIDEwMCUpIGhzbCgwLCAwJSwgMTAwJSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy13aGl0ZS5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLXdoaXRlLmlzLWludmVydGVkLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5idXR0b24uaXMtYmxhY2sge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5idXR0b24uaXMtYmxhY2s6aG92ZXIsIC5idXR0b24uaXMtYmxhY2suaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDQwNDA0O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uYnV0dG9uLmlzLWJsYWNrOmZvY3VzLCAuYnV0dG9uLmlzLWJsYWNrLmlzLWZvY3VzZWQge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uYnV0dG9uLmlzLWJsYWNrOmZvY3VzOm5vdCg6YWN0aXZlKSwgLmJ1dHRvbi5pcy1ibGFjay5pcy1mb2N1c2VkOm5vdCg6YWN0aXZlKSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoMTAsIDEwLCAxMCwgMC4yNSk7XFxufVxcbi5idXR0b24uaXMtYmxhY2s6YWN0aXZlLCAuYnV0dG9uLmlzLWJsYWNrLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLmJ1dHRvbi5pcy1ibGFja1tkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLWJsYWNrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxufVxcbi5idXR0b24uaXMtYmxhY2suaXMtaW52ZXJ0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLmJ1dHRvbi5pcy1ibGFjay5pcy1pbnZlcnRlZDpob3ZlciwgLmJ1dHRvbi5pcy1ibGFjay5pcy1pbnZlcnRlZC5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XFxufVxcbi5idXR0b24uaXMtYmxhY2suaXMtaW52ZXJ0ZWRbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1ibGFjay5pcy1pbnZlcnRlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5idXR0b24uaXMtYmxhY2suaXMtbG9hZGluZzo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCBoc2woMCwgMCUsIDEwMCUpIGhzbCgwLCAwJSwgMTAwJSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1ibGFjay5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5idXR0b24uaXMtYmxhY2suaXMtb3V0bGluZWQ6aG92ZXIsIC5idXR0b24uaXMtYmxhY2suaXMtb3V0bGluZWQuaXMtaG92ZXJlZCwgLmJ1dHRvbi5pcy1ibGFjay5pcy1vdXRsaW5lZDpmb2N1cywgLmJ1dHRvbi5pcy1ibGFjay5pcy1vdXRsaW5lZC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uYnV0dG9uLmlzLWJsYWNrLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgaHNsKDAsIDAlLCA0JSkgaHNsKDAsIDAlLCA0JSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1ibGFjay5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmhvdmVyOjphZnRlciwgLmJ1dHRvbi5pcy1ibGFjay5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWhvdmVyZWQ6OmFmdGVyLCAuYnV0dG9uLmlzLWJsYWNrLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6Zm9jdXM6OmFmdGVyLCAuYnV0dG9uLmlzLWJsYWNrLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtZm9jdXNlZDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCBoc2woMCwgMCUsIDEwMCUpIGhzbCgwLCAwJSwgMTAwJSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1ibGFjay5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLWJsYWNrLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5idXR0b24uaXMtYmxhY2suaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLmJ1dHRvbi5pcy1ibGFjay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZDpob3ZlciwgLmJ1dHRvbi5pcy1ibGFjay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLWJsYWNrLmlzLWludmVydGVkLmlzLW91dGxpbmVkOmZvY3VzLCAuYnV0dG9uLmlzLWJsYWNrLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWZvY3VzZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLmJ1dHRvbi5pcy1ibGFjay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmhvdmVyOjphZnRlciwgLmJ1dHRvbi5pcy1ibGFjay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWhvdmVyZWQ6OmFmdGVyLCAuYnV0dG9uLmlzLWJsYWNrLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6Zm9jdXM6OmFmdGVyLCAuYnV0dG9uLmlzLWJsYWNrLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtZm9jdXNlZDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCBoc2woMCwgMCUsIDQlKSBoc2woMCwgMCUsIDQlKSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLWJsYWNrLmlzLWludmVydGVkLmlzLW91dGxpbmVkW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtYmxhY2suaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQ6aG92ZXIsIC5idXR0b24uaXMtbGlnaHQuaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlZWVlO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQ6Zm9jdXMsIC5idXR0b24uaXMtbGlnaHQuaXMtZm9jdXNlZCB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLmJ1dHRvbi5pcy1saWdodDpmb2N1czpub3QoOmFjdGl2ZSksIC5idXR0b24uaXMtbGlnaHQuaXMtZm9jdXNlZDpub3QoOmFjdGl2ZSkge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4xMjVlbSByZ2JhKDI0NSwgMjQ1LCAyNDUsIDAuMjUpO1xcbn1cXG4uYnV0dG9uLmlzLWxpZ2h0OmFjdGl2ZSwgLmJ1dHRvbi5pcy1saWdodC5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U4ZThlODtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uYnV0dG9uLmlzLWxpZ2h0W2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbn1cXG4uYnV0dG9uLmlzLWxpZ2h0LmlzLWludmVydGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQuaXMtaW52ZXJ0ZWQ6aG92ZXIsIC5idXR0b24uaXMtbGlnaHQuaXMtaW52ZXJ0ZWQuaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQuaXMtaW52ZXJ0ZWRbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1saWdodC5pcy1pbnZlcnRlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQuaXMtbG9hZGluZzo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCByZ2JhKDAsIDAsIDAsIDAuNykgcmdiYSgwLCAwLCAwLCAwLjcpICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtbGlnaHQuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQuaXMtb3V0bGluZWQ6aG92ZXIsIC5idXR0b24uaXMtbGlnaHQuaXMtb3V0bGluZWQuaXMtaG92ZXJlZCwgLmJ1dHRvbi5pcy1saWdodC5pcy1vdXRsaW5lZDpmb2N1cywgLmJ1dHRvbi5pcy1saWdodC5pcy1vdXRsaW5lZC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLmJ1dHRvbi5pcy1saWdodC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IGhzbCgwLCAwJSwgOTYlKSBoc2woMCwgMCUsIDk2JSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1saWdodC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmhvdmVyOjphZnRlciwgLmJ1dHRvbi5pcy1saWdodC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWhvdmVyZWQ6OmFmdGVyLCAuYnV0dG9uLmlzLWxpZ2h0LmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6Zm9jdXM6OmFmdGVyLCAuYnV0dG9uLmlzLWxpZ2h0LmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtZm9jdXNlZDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCByZ2JhKDAsIDAsIDAsIDAuNykgcmdiYSgwLCAwLCAwLCAwLjcpICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtbGlnaHQuaXMtb3V0bGluZWRbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1saWdodC5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQ6aG92ZXIsIC5idXR0b24uaXMtbGlnaHQuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtaG92ZXJlZCwgLmJ1dHRvbi5pcy1saWdodC5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZDpmb2N1cywgLmJ1dHRvbi5pcy1saWdodC5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxufVxcbi5idXR0b24uaXMtbGlnaHQuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpob3Zlcjo6YWZ0ZXIsIC5idXR0b24uaXMtbGlnaHQuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1ob3ZlcmVkOjphZnRlciwgLmJ1dHRvbi5pcy1saWdodC5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmZvY3VzOjphZnRlciwgLmJ1dHRvbi5pcy1saWdodC5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWZvY3VzZWQ6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgaHNsKDAsIDAlLCA5NiUpIGhzbCgwLCAwJSwgOTYlKSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLWxpZ2h0LmlzLWludmVydGVkLmlzLW91dGxpbmVkW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtbGlnaHQuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uYnV0dG9uLmlzLWRhcmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLWRhcms6aG92ZXIsIC5idXR0b24uaXMtZGFyay5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyZjJmMmY7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtZGFyazpmb2N1cywgLmJ1dHRvbi5pcy1kYXJrLmlzLWZvY3VzZWQge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLWRhcms6Zm9jdXM6bm90KDphY3RpdmUpLCAuYnV0dG9uLmlzLWRhcmsuaXMtZm9jdXNlZDpub3QoOmFjdGl2ZSkge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4xMjVlbSByZ2JhKDU0LCA1NCwgNTQsIDAuMjUpO1xcbn1cXG4uYnV0dG9uLmlzLWRhcms6YWN0aXZlLCAuYnV0dG9uLmlzLWRhcmsuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyOTI5Mjk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtZGFya1tkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLWRhcmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbn1cXG4uYnV0dG9uLmlzLWRhcmsuaXMtaW52ZXJ0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5idXR0b24uaXMtZGFyay5pcy1pbnZlcnRlZDpob3ZlciwgLmJ1dHRvbi5pcy1kYXJrLmlzLWludmVydGVkLmlzLWhvdmVyZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcXG59XFxuLmJ1dHRvbi5pcy1kYXJrLmlzLWludmVydGVkW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtZGFyay5pcy1pbnZlcnRlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uYnV0dG9uLmlzLWRhcmsuaXMtbG9hZGluZzo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjZmZmICNmZmYgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1kYXJrLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uYnV0dG9uLmlzLWRhcmsuaXMtb3V0bGluZWQ6aG92ZXIsIC5idXR0b24uaXMtZGFyay5pcy1vdXRsaW5lZC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLWRhcmsuaXMtb3V0bGluZWQ6Zm9jdXMsIC5idXR0b24uaXMtZGFyay5pcy1vdXRsaW5lZC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtZGFyay5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IGhzbCgwLCAwJSwgMjElKSBoc2woMCwgMCUsIDIxJSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1kYXJrLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6aG92ZXI6OmFmdGVyLCAuYnV0dG9uLmlzLWRhcmsuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1ob3ZlcmVkOjphZnRlciwgLmJ1dHRvbi5pcy1kYXJrLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6Zm9jdXM6OmFmdGVyLCAuYnV0dG9uLmlzLWRhcmsuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1mb2N1c2VkOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmYgI2ZmZiAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLWRhcmsuaXMtb3V0bGluZWRbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1kYXJrLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG59XFxuLmJ1dHRvbi5pcy1kYXJrLmlzLWludmVydGVkLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtZGFyay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZDpob3ZlciwgLmJ1dHRvbi5pcy1kYXJrLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWhvdmVyZWQsIC5idXR0b24uaXMtZGFyay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZDpmb2N1cywgLmJ1dHRvbi5pcy1kYXJrLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWZvY3VzZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5idXR0b24uaXMtZGFyay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmhvdmVyOjphZnRlciwgLmJ1dHRvbi5pcy1kYXJrLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtaG92ZXJlZDo6YWZ0ZXIsIC5idXR0b24uaXMtZGFyay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmZvY3VzOjphZnRlciwgLmJ1dHRvbi5pcy1kYXJrLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtZm9jdXNlZDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCBoc2woMCwgMCUsIDIxJSkgaHNsKDAsIDAlLCAyMSUpICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtZGFyay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLWRhcmsuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6ICNmZmY7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnk6aG92ZXIsIC5idXR0b24uaXMtcHJpbWFyeS5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMGM0YTc7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtcHJpbWFyeTpmb2N1cywgLmJ1dHRvbi5pcy1wcmltYXJ5LmlzLWZvY3VzZWQge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnk6Zm9jdXM6bm90KDphY3RpdmUpLCAuYnV0dG9uLmlzLXByaW1hcnkuaXMtZm9jdXNlZDpub3QoOmFjdGl2ZSkge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4xMjVlbSByZ2JhKDAsIDIwOSwgMTc4LCAwLjI1KTtcXG59XFxuLmJ1dHRvbi5pcy1wcmltYXJ5OmFjdGl2ZSwgLmJ1dHRvbi5pcy1wcmltYXJ5LmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiODljO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnlbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1wcmltYXJ5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnkuaXMtaW52ZXJ0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnkuaXMtaW52ZXJ0ZWQ6aG92ZXIsIC5idXR0b24uaXMtcHJpbWFyeS5pcy1pbnZlcnRlZC5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XFxufVxcbi5idXR0b24uaXMtcHJpbWFyeS5pcy1pbnZlcnRlZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLXByaW1hcnkuaXMtaW52ZXJ0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxufVxcbi5idXR0b24uaXMtcHJpbWFyeS5pcy1sb2FkaW5nOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmYgI2ZmZiAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnkuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxuICBjb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG59XFxuLmJ1dHRvbi5pcy1wcmltYXJ5LmlzLW91dGxpbmVkOmhvdmVyLCAuYnV0dG9uLmlzLXByaW1hcnkuaXMtb3V0bGluZWQuaXMtaG92ZXJlZCwgLmJ1dHRvbi5pcy1wcmltYXJ5LmlzLW91dGxpbmVkOmZvY3VzLCAuYnV0dG9uLmlzLXByaW1hcnkuaXMtb3V0bGluZWQuaXMtZm9jdXNlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtcHJpbWFyeS5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IGhzbCgxNzEsIDEwMCUsIDQxJSkgaHNsKDE3MSwgMTAwJSwgNDElKSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnkuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpob3Zlcjo6YWZ0ZXIsIC5idXR0b24uaXMtcHJpbWFyeS5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWhvdmVyZWQ6OmFmdGVyLCAuYnV0dG9uLmlzLXByaW1hcnkuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpmb2N1czo6YWZ0ZXIsIC5idXR0b24uaXMtcHJpbWFyeS5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWZvY3VzZWQ6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgI2ZmZiAjZmZmICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtcHJpbWFyeS5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLXByaW1hcnkuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxufVxcbi5idXR0b24uaXMtcHJpbWFyeS5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnkuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQ6aG92ZXIsIC5idXR0b24uaXMtcHJpbWFyeS5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLXByaW1hcnkuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQ6Zm9jdXMsIC5idXR0b24uaXMtcHJpbWFyeS5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBjb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG59XFxuLmJ1dHRvbi5pcy1wcmltYXJ5LmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6aG92ZXI6OmFmdGVyLCAuYnV0dG9uLmlzLXByaW1hcnkuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1ob3ZlcmVkOjphZnRlciwgLmJ1dHRvbi5pcy1wcmltYXJ5LmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6Zm9jdXM6OmFmdGVyLCAuYnV0dG9uLmlzLXByaW1hcnkuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1mb2N1c2VkOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IGhzbCgxNzEsIDEwMCUsIDQxJSkgaHNsKDE3MSwgMTAwJSwgNDElKSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnkuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWRbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1wcmltYXJ5LmlzLWludmVydGVkLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnkuaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ViZmZmYztcXG4gIGNvbG9yOiAjMDA5NDdlO1xcbn1cXG4uYnV0dG9uLmlzLXByaW1hcnkuaXMtbGlnaHQ6aG92ZXIsIC5idXR0b24uaXMtcHJpbWFyeS5pcy1saWdodC5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkZWZmZmE7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICMwMDk0N2U7XFxufVxcbi5idXR0b24uaXMtcHJpbWFyeS5pcy1saWdodDphY3RpdmUsIC5idXR0b24uaXMtcHJpbWFyeS5pcy1saWdodC5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2QxZmZmODtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogIzAwOTQ3ZTtcXG59XFxuLmJ1dHRvbi5pcy1saW5rIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1saW5rOmhvdmVyLCAuYnV0dG9uLmlzLWxpbmsuaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2U1NmM0O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLWxpbms6Zm9jdXMsIC5idXR0b24uaXMtbGluay5pcy1mb2N1c2VkIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1saW5rOmZvY3VzOm5vdCg6YWN0aXZlKSwgLmJ1dHRvbi5pcy1saW5rLmlzLWZvY3VzZWQ6bm90KDphY3RpdmUpIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSg3MiwgOTUsIDE5OSwgMC4yNSk7XFxufVxcbi5idXR0b24uaXMtbGluazphY3RpdmUsIC5idXR0b24uaXMtbGluay5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNhNTFiYjtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1saW5rW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtbGluayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxufVxcbi5idXR0b24uaXMtbGluay5pcy1pbnZlcnRlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG59XFxuLmJ1dHRvbi5pcy1saW5rLmlzLWludmVydGVkOmhvdmVyLCAuYnV0dG9uLmlzLWxpbmsuaXMtaW52ZXJ0ZWQuaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO1xcbn1cXG4uYnV0dG9uLmlzLWxpbmsuaXMtaW52ZXJ0ZWRbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1saW5rLmlzLWludmVydGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxufVxcbi5idXR0b24uaXMtbGluay5pcy1sb2FkaW5nOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmYgI2ZmZiAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLWxpbmsuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxufVxcbi5idXR0b24uaXMtbGluay5pcy1vdXRsaW5lZDpob3ZlciwgLmJ1dHRvbi5pcy1saW5rLmlzLW91dGxpbmVkLmlzLWhvdmVyZWQsIC5idXR0b24uaXMtbGluay5pcy1vdXRsaW5lZDpmb2N1cywgLmJ1dHRvbi5pcy1saW5rLmlzLW91dGxpbmVkLmlzLWZvY3VzZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1saW5rLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgaHNsKDIyOSwgNTMlLCA1MyUpIGhzbCgyMjksIDUzJSwgNTMlKSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLWxpbmsuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpob3Zlcjo6YWZ0ZXIsIC5idXR0b24uaXMtbGluay5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWhvdmVyZWQ6OmFmdGVyLCAuYnV0dG9uLmlzLWxpbmsuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpmb2N1czo6YWZ0ZXIsIC5idXR0b24uaXMtbGluay5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWZvY3VzZWQ6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgI2ZmZiAjZmZmICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtbGluay5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLWxpbmsuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbn1cXG4uYnV0dG9uLmlzLWxpbmsuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6ICNmZmY7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1saW5rLmlzLWludmVydGVkLmlzLW91dGxpbmVkOmhvdmVyLCAuYnV0dG9uLmlzLWxpbmsuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtaG92ZXJlZCwgLmJ1dHRvbi5pcy1saW5rLmlzLWludmVydGVkLmlzLW91dGxpbmVkOmZvY3VzLCAuYnV0dG9uLmlzLWxpbmsuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtZm9jdXNlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG59XFxuLmJ1dHRvbi5pcy1saW5rLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6aG92ZXI6OmFmdGVyLCAuYnV0dG9uLmlzLWxpbmsuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1ob3ZlcmVkOjphZnRlciwgLmJ1dHRvbi5pcy1saW5rLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6Zm9jdXM6OmFmdGVyLCAuYnV0dG9uLmlzLWxpbmsuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1mb2N1c2VkOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IGhzbCgyMjksIDUzJSwgNTMlKSBoc2woMjI5LCA1MyUsIDUzJSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1saW5rLmlzLWludmVydGVkLmlzLW91dGxpbmVkW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtbGluay5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZjtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1saW5rLmlzLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmYxZmE7XFxuICBjb2xvcjogIzM4NTBiNztcXG59XFxuLmJ1dHRvbi5pcy1saW5rLmlzLWxpZ2h0OmhvdmVyLCAuYnV0dG9uLmlzLWxpbmsuaXMtbGlnaHQuaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlOWY3O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjMzg1MGI3O1xcbn1cXG4uYnV0dG9uLmlzLWxpbmsuaXMtbGlnaHQ6YWN0aXZlLCAuYnV0dG9uLmlzLWxpbmsuaXMtbGlnaHQuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkY2UwZjQ7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICMzODUwYjc7XFxufVxcbi5idXR0b24uaXMtaW5mbyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtaW5mbzpob3ZlciwgLmJ1dHRvbi5pcy1pbmZvLmlzLWhvdmVyZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM0ODhjZTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1pbmZvOmZvY3VzLCAuYnV0dG9uLmlzLWluZm8uaXMtZm9jdXNlZCB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtaW5mbzpmb2N1czpub3QoOmFjdGl2ZSksIC5idXR0b24uaXMtaW5mby5pcy1mb2N1c2VkOm5vdCg6YWN0aXZlKSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoNjIsIDE0MiwgMjA4LCAwLjI1KTtcXG59XFxuLmJ1dHRvbi5pcy1pbmZvOmFjdGl2ZSwgLmJ1dHRvbi5pcy1pbmZvLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzA4MmM1O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLWluZm9bZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1pbmZvIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuLmJ1dHRvbi5pcy1pbmZvLmlzLWludmVydGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBjb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbn1cXG4uYnV0dG9uLmlzLWluZm8uaXMtaW52ZXJ0ZWQ6aG92ZXIsIC5idXR0b24uaXMtaW5mby5pcy1pbnZlcnRlZC5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XFxufVxcbi5idXR0b24uaXMtaW5mby5pcy1pbnZlcnRlZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLWluZm8uaXMtaW52ZXJ0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG59XFxuLmJ1dHRvbi5pcy1pbmZvLmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgI2ZmZiAjZmZmICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtaW5mby5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbiAgY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG59XFxuLmJ1dHRvbi5pcy1pbmZvLmlzLW91dGxpbmVkOmhvdmVyLCAuYnV0dG9uLmlzLWluZm8uaXMtb3V0bGluZWQuaXMtaG92ZXJlZCwgLmJ1dHRvbi5pcy1pbmZvLmlzLW91dGxpbmVkOmZvY3VzLCAuYnV0dG9uLmlzLWluZm8uaXMtb3V0bGluZWQuaXMtZm9jdXNlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLWluZm8uaXMtb3V0bGluZWQuaXMtbG9hZGluZzo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCBoc2woMjA3LCA2MSUsIDUzJSkgaHNsKDIwNywgNjElLCA1MyUpICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtaW5mby5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmhvdmVyOjphZnRlciwgLmJ1dHRvbi5pcy1pbmZvLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtaG92ZXJlZDo6YWZ0ZXIsIC5idXR0b24uaXMtaW5mby5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmZvY3VzOjphZnRlciwgLmJ1dHRvbi5pcy1pbmZvLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtZm9jdXNlZDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjZmZmICNmZmYgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1pbmZvLmlzLW91dGxpbmVkW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtaW5mby5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSk7XFxufVxcbi5idXR0b24uaXMtaW5mby5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLWluZm8uaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQ6aG92ZXIsIC5idXR0b24uaXMtaW5mby5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLWluZm8uaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQ6Zm9jdXMsIC5idXR0b24uaXMtaW5mby5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBjb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbn1cXG4uYnV0dG9uLmlzLWluZm8uaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpob3Zlcjo6YWZ0ZXIsIC5idXR0b24uaXMtaW5mby5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWhvdmVyZWQ6OmFmdGVyLCAuYnV0dG9uLmlzLWluZm8uaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpmb2N1czo6YWZ0ZXIsIC5idXR0b24uaXMtaW5mby5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWZvY3VzZWQ6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgaHNsKDIwNywgNjElLCA1MyUpIGhzbCgyMDcsIDYxJSwgNTMlKSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLWluZm8uaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWRbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1pbmZvLmlzLWludmVydGVkLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLWluZm8uaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VmZjVmYjtcXG4gIGNvbG9yOiAjMjk2ZmE4O1xcbn1cXG4uYnV0dG9uLmlzLWluZm8uaXMtbGlnaHQ6aG92ZXIsIC5idXR0b24uaXMtaW5mby5pcy1saWdodC5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNGVmZjk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICMyOTZmYTg7XFxufVxcbi5idXR0b24uaXMtaW5mby5pcy1saWdodDphY3RpdmUsIC5idXR0b24uaXMtaW5mby5pcy1saWdodC5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhZTlmNjtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogIzI5NmZhODtcXG59XFxuLmJ1dHRvbi5pcy1zdWNjZXNzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNTMsIDUzJSwgNTMlKTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1zdWNjZXNzOmhvdmVyLCAuYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2VjNDg3O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLXN1Y2Nlc3M6Zm9jdXMsIC5idXR0b24uaXMtc3VjY2Vzcy5pcy1mb2N1c2VkIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1zdWNjZXNzOmZvY3VzOm5vdCg6YWN0aXZlKSwgLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWZvY3VzZWQ6bm90KDphY3RpdmUpIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSg3MiwgMTk5LCAxNDIsIDAuMjUpO1xcbn1cXG4uYnV0dG9uLmlzLXN1Y2Nlc3M6YWN0aXZlLCAuYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzYWJiODE7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtc3VjY2Vzc1tkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLXN1Y2Nlc3Mge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbn1cXG4uYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtaW52ZXJ0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxufVxcbi5idXR0b24uaXMtc3VjY2Vzcy5pcy1pbnZlcnRlZDpob3ZlciwgLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWludmVydGVkLmlzLWhvdmVyZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcXG59XFxuLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWludmVydGVkW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtc3VjY2Vzcy5pcy1pbnZlcnRlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbn1cXG4uYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtbG9hZGluZzo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjZmZmICNmZmYgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxuICBjb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbn1cXG4uYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtb3V0bGluZWQ6aG92ZXIsIC5idXR0b24uaXMtc3VjY2Vzcy5pcy1vdXRsaW5lZC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtb3V0bGluZWQ6Zm9jdXMsIC5idXR0b24uaXMtc3VjY2Vzcy5pcy1vdXRsaW5lZC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNTMsIDUzJSwgNTMlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtc3VjY2Vzcy5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IGhzbCgxNTMsIDUzJSwgNTMlKSBoc2woMTUzLCA1MyUsIDUzJSkgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6aG92ZXI6OmFmdGVyLCAuYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1ob3ZlcmVkOjphZnRlciwgLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6Zm9jdXM6OmFmdGVyLCAuYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1mb2N1c2VkOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmYgI2ZmZiAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtb3V0bGluZWRbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgY29sb3I6IGhzbCgxNTMsIDUzJSwgNTMlKTtcXG59XFxuLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWludmVydGVkLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtc3VjY2Vzcy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZDpob3ZlciwgLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWhvdmVyZWQsIC5idXR0b24uaXMtc3VjY2Vzcy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZDpmb2N1cywgLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWZvY3VzZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxufVxcbi5idXR0b24uaXMtc3VjY2Vzcy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmhvdmVyOjphZnRlciwgLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtaG92ZXJlZDo6YWZ0ZXIsIC5idXR0b24uaXMtc3VjY2Vzcy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmZvY3VzOjphZnRlciwgLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtZm9jdXNlZDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCBoc2woMTUzLCA1MyUsIDUzJSkgaHNsKDE1MywgNTMlLCA1MyUpICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtc3VjY2Vzcy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLXN1Y2Nlc3MuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6ICNmZmY7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtc3VjY2Vzcy5pcy1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZmYWY1O1xcbiAgY29sb3I6ICMyNTc5NTM7XFxufVxcbi5idXR0b24uaXMtc3VjY2Vzcy5pcy1saWdodDpob3ZlciwgLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWxpZ2h0LmlzLWhvdmVyZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZjdlZjtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogIzI1Nzk1MztcXG59XFxuLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWxpZ2h0OmFjdGl2ZSwgLmJ1dHRvbi5pcy1zdWNjZXNzLmlzLWxpZ2h0LmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGNmNGU5O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjMjU3OTUzO1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5idXR0b24uaXMtd2FybmluZzpob3ZlciwgLmJ1dHRvbi5pcy13YXJuaW5nLmlzLWhvdmVyZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZGM3ZDtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmc6Zm9jdXMsIC5idXR0b24uaXMtd2FybmluZy5pcy1mb2N1c2VkIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmc6Zm9jdXM6bm90KDphY3RpdmUpLCAuYnV0dG9uLmlzLXdhcm5pbmcuaXMtZm9jdXNlZDpub3QoOmFjdGl2ZSkge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4xMjVlbSByZ2JhKDI1NSwgMjI0LCAxMzgsIDAuMjUpO1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmc6YWN0aXZlLCAuYnV0dG9uLmlzLXdhcm5pbmcuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmQ5NzA7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLmJ1dHRvbi5pcy13YXJuaW5nW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtd2FybmluZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxuICBib3JkZXItY29sb3I6IGhzbCg0NCwgMTAwJSwgNzclKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxufVxcbi5idXR0b24uaXMtd2FybmluZy5pcy1pbnZlcnRlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICBjb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmcuaXMtaW52ZXJ0ZWQ6aG92ZXIsIC5idXR0b24uaXMtd2FybmluZy5pcy1pbnZlcnRlZC5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLmJ1dHRvbi5pcy13YXJuaW5nLmlzLWludmVydGVkW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtd2FybmluZy5pcy1pbnZlcnRlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxufVxcbi5idXR0b24uaXMtd2FybmluZy5pcy1sb2FkaW5nOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHJnYmEoMCwgMCwgMCwgMC43KSByZ2JhKDAsIDAsIDAsIDAuNykgIWltcG9ydGFudDtcXG59XFxuLmJ1dHRvbi5pcy13YXJuaW5nLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxuICBjb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmcuaXMtb3V0bGluZWQ6aG92ZXIsIC5idXR0b24uaXMtd2FybmluZy5pcy1vdXRsaW5lZC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLXdhcm5pbmcuaXMtb3V0bGluZWQ6Zm9jdXMsIC5idXR0b24uaXMtd2FybmluZy5pcy1vdXRsaW5lZC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCg0NCwgMTAwJSwgNzclKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLmJ1dHRvbi5pcy13YXJuaW5nLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgaHNsKDQ0LCAxMDAlLCA3NyUpIGhzbCg0NCwgMTAwJSwgNzclKSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmcuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpob3Zlcjo6YWZ0ZXIsIC5idXR0b24uaXMtd2FybmluZy5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWhvdmVyZWQ6OmFmdGVyLCAuYnV0dG9uLmlzLXdhcm5pbmcuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpmb2N1czo6YWZ0ZXIsIC5idXR0b24uaXMtd2FybmluZy5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWZvY3VzZWQ6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgcmdiYSgwLCAwLCAwLCAwLjcpIHJnYmEoMCwgMCwgMCwgMC43KSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmcuaXMtb3V0bGluZWRbZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbi5pcy13YXJuaW5nLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgY29sb3I6IGhzbCg0NCwgMTAwJSwgNzclKTtcXG59XFxuLmJ1dHRvbi5pcy13YXJuaW5nLmlzLWludmVydGVkLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmcuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQ6aG92ZXIsIC5idXR0b24uaXMtd2FybmluZy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLXdhcm5pbmcuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQ6Zm9jdXMsIC5idXR0b24uaXMtd2FybmluZy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1mb2N1c2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIGNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxufVxcbi5idXR0b24uaXMtd2FybmluZy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmhvdmVyOjphZnRlciwgLmJ1dHRvbi5pcy13YXJuaW5nLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtaG92ZXJlZDo6YWZ0ZXIsIC5idXR0b24uaXMtd2FybmluZy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmZvY3VzOjphZnRlciwgLmJ1dHRvbi5pcy13YXJuaW5nLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtZm9jdXNlZDo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCBoc2woNDQsIDEwMCUsIDc3JSkgaHNsKDQ0LCAxMDAlLCA3NyUpICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtd2FybmluZy5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLXdhcm5pbmcuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmcuaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmFlYjtcXG4gIGNvbG9yOiAjOTQ2YzAwO1xcbn1cXG4uYnV0dG9uLmlzLXdhcm5pbmcuaXMtbGlnaHQ6aG92ZXIsIC5idXR0b24uaXMtd2FybmluZy5pcy1saWdodC5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY2ZGU7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICM5NDZjMDA7XFxufVxcbi5idXR0b24uaXMtd2FybmluZy5pcy1saWdodDphY3RpdmUsIC5idXR0b24uaXMtd2FybmluZy5pcy1saWdodC5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjNkMTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogIzk0NmMwMDtcXG59XFxuLmJ1dHRvbi5pcy1kYW5nZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLWRhbmdlcjpob3ZlciwgLmJ1dHRvbi5pcy1kYW5nZXIuaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjAzYTVmO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uYnV0dG9uLmlzLWRhbmdlcjpmb2N1cywgLmJ1dHRvbi5pcy1kYW5nZXIuaXMtZm9jdXNlZCB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyOmZvY3VzOm5vdCg6YWN0aXZlKSwgLmJ1dHRvbi5pcy1kYW5nZXIuaXMtZm9jdXNlZDpub3QoOmFjdGl2ZSkge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4xMjVlbSByZ2JhKDI0MSwgNzAsIDEwNCwgMC4yNSk7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyOmFjdGl2ZSwgLmJ1dHRvbi5pcy1kYW5nZXIuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZjJlNTU7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtZGFuZ2VyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgzNDgsIDg2JSwgNjElKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuLmJ1dHRvbi5pcy1kYW5nZXIuaXMtaW52ZXJ0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyLmlzLWludmVydGVkOmhvdmVyLCAuYnV0dG9uLmlzLWRhbmdlci5pcy1pbnZlcnRlZC5pcy1ob3ZlcmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyLmlzLWludmVydGVkW2Rpc2FibGVkXSwgZmllbGRzZXRbZGlzYWJsZWRdIC5idXR0b24uaXMtZGFuZ2VyLmlzLWludmVydGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyLmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgI2ZmZiAjZmZmICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxuICBjb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbn1cXG4uYnV0dG9uLmlzLWRhbmdlci5pcy1vdXRsaW5lZDpob3ZlciwgLmJ1dHRvbi5pcy1kYW5nZXIuaXMtb3V0bGluZWQuaXMtaG92ZXJlZCwgLmJ1dHRvbi5pcy1kYW5nZXIuaXMtb3V0bGluZWQ6Zm9jdXMsIC5idXR0b24uaXMtZGFuZ2VyLmlzLW91dGxpbmVkLmlzLWZvY3VzZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1kYW5nZXIuaXMtb3V0bGluZWQuaXMtbG9hZGluZzo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCBoc2woMzQ4LCA4NiUsIDYxJSkgaHNsKDM0OCwgODYlLCA2MSUpICFpbXBvcnRhbnQ7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6aG92ZXI6OmFmdGVyLCAuYnV0dG9uLmlzLWRhbmdlci5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWhvdmVyZWQ6OmFmdGVyLCAuYnV0dG9uLmlzLWRhbmdlci5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nOmZvY3VzOjphZnRlciwgLmJ1dHRvbi5pcy1kYW5nZXIuaXMtb3V0bGluZWQuaXMtbG9hZGluZy5pcy1mb2N1c2VkOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNmZmYgI2ZmZiAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLWRhbmdlci5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLWRhbmdlci5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyLmlzLWludmVydGVkLmlzLW91dGxpbmVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5idXR0b24uaXMtZGFuZ2VyLmlzLWludmVydGVkLmlzLW91dGxpbmVkOmhvdmVyLCAuYnV0dG9uLmlzLWRhbmdlci5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1ob3ZlcmVkLCAuYnV0dG9uLmlzLWRhbmdlci5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZDpmb2N1cywgLmJ1dHRvbi5pcy1kYW5nZXIuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtZm9jdXNlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgY29sb3I6IGhzbCgzNDgsIDg2JSwgNjElKTtcXG59XFxuLmJ1dHRvbi5pcy1kYW5nZXIuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWQuaXMtbG9hZGluZzpob3Zlcjo6YWZ0ZXIsIC5idXR0b24uaXMtZGFuZ2VyLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmcuaXMtaG92ZXJlZDo6YWZ0ZXIsIC5idXR0b24uaXMtZGFuZ2VyLmlzLWludmVydGVkLmlzLW91dGxpbmVkLmlzLWxvYWRpbmc6Zm9jdXM6OmFmdGVyLCAuYnV0dG9uLmlzLWRhbmdlci5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZC5pcy1sb2FkaW5nLmlzLWZvY3VzZWQ6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgaHNsKDM0OCwgODYlLCA2MSUpIGhzbCgzNDgsIDg2JSwgNjElKSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLWRhbmdlci5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZFtkaXNhYmxlZF0sIGZpZWxkc2V0W2Rpc2FibGVkXSAuYnV0dG9uLmlzLWRhbmdlci5pcy1pbnZlcnRlZC5pcy1vdXRsaW5lZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZjtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmJ1dHRvbi5pcy1kYW5nZXIuaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZlZWNmMDtcXG4gIGNvbG9yOiAjY2MwZjM1O1xcbn1cXG4uYnV0dG9uLmlzLWRhbmdlci5pcy1saWdodDpob3ZlciwgLmJ1dHRvbi5pcy1kYW5nZXIuaXMtbGlnaHQuaXMtaG92ZXJlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRlMGU2O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjY2MwZjM1O1xcbn1cXG4uYnV0dG9uLmlzLWRhbmdlci5pcy1saWdodDphY3RpdmUsIC5idXR0b24uaXMtZGFuZ2VyLmlzLWxpZ2h0LmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNkNGRjO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjY2MwZjM1O1xcbn1cXG4uYnV0dG9uLmlzLXNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG59XFxuLmJ1dHRvbi5pcy1zbWFsbDpub3QoLmlzLXJvdW5kZWQpIHtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxuLmJ1dHRvbi5pcy1ub3JtYWwge1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG4uYnV0dG9uLmlzLW1lZGl1bSB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcbi5idXR0b24uaXMtbGFyZ2Uge1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxufVxcbi5idXR0b25bZGlzYWJsZWRdLCBmaWVsZHNldFtkaXNhYmxlZF0gLmJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDg2JSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG4uYnV0dG9uLmlzLWZ1bGx3aWR0aCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5idXR0b24uaXMtbG9hZGluZyB7XFxuICBjb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4uYnV0dG9uLmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IGNhbGMoNTAlIC0gKDFlbSAqIDAuNSkpO1xcbiAgdG9wOiBjYWxjKDUwJSAtICgxZW0gKiAwLjUpKTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50O1xcbn1cXG4uYnV0dG9uLmlzLXN0YXRpYyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgODYlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQ4JSk7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbi5idXR0b24uaXMtcm91bmRlZCB7XFxuICBib3JkZXItcmFkaXVzOiA5OTk5cHg7XFxuICBwYWRkaW5nLWxlZnQ6IGNhbGMoMWVtICsgMC4yNWVtKTtcXG4gIHBhZGRpbmctcmlnaHQ6IGNhbGMoMWVtICsgMC4yNWVtKTtcXG59XFxuXFxuLmJ1dHRvbnMge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcbi5idXR0b25zIC5idXR0b24ge1xcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbn1cXG4uYnV0dG9ucyAuYnV0dG9uOm5vdCg6bGFzdC1jaGlsZCk6bm90KC5pcy1mdWxsd2lkdGgpIHtcXG4gIG1hcmdpbi1yaWdodDogMC41cmVtO1xcbn1cXG4uYnV0dG9uczpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IC0wLjVyZW07XFxufVxcbi5idXR0b25zOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG59XFxuLmJ1dHRvbnMuYXJlLXNtYWxsIC5idXR0b246bm90KC5pcy1ub3JtYWwpOm5vdCguaXMtbWVkaXVtKTpub3QoLmlzLWxhcmdlKSB7XFxuICBmb250LXNpemU6IDAuNzVyZW07XFxufVxcbi5idXR0b25zLmFyZS1zbWFsbCAuYnV0dG9uOm5vdCguaXMtbm9ybWFsKTpub3QoLmlzLW1lZGl1bSk6bm90KC5pcy1sYXJnZSk6bm90KC5pcy1yb3VuZGVkKSB7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcbi5idXR0b25zLmFyZS1tZWRpdW0gLmJ1dHRvbjpub3QoLmlzLXNtYWxsKTpub3QoLmlzLW5vcm1hbCk6bm90KC5pcy1sYXJnZSkge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG4uYnV0dG9ucy5hcmUtbGFyZ2UgLmJ1dHRvbjpub3QoLmlzLXNtYWxsKTpub3QoLmlzLW5vcm1hbCk6bm90KC5pcy1tZWRpdW0pIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG4uYnV0dG9ucy5oYXMtYWRkb25zIC5idXR0b246bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxufVxcbi5idXR0b25zLmhhcy1hZGRvbnMgLmJ1dHRvbjpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxuICBtYXJnaW4tcmlnaHQ6IC0xcHg7XFxufVxcbi5idXR0b25zLmhhcy1hZGRvbnMgLmJ1dHRvbjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG59XFxuLmJ1dHRvbnMuaGFzLWFkZG9ucyAuYnV0dG9uOmhvdmVyLCAuYnV0dG9ucy5oYXMtYWRkb25zIC5idXR0b24uaXMtaG92ZXJlZCB7XFxuICB6LWluZGV4OiAyO1xcbn1cXG4uYnV0dG9ucy5oYXMtYWRkb25zIC5idXR0b246Zm9jdXMsIC5idXR0b25zLmhhcy1hZGRvbnMgLmJ1dHRvbi5pcy1mb2N1c2VkLCAuYnV0dG9ucy5oYXMtYWRkb25zIC5idXR0b246YWN0aXZlLCAuYnV0dG9ucy5oYXMtYWRkb25zIC5idXR0b24uaXMtYWN0aXZlLCAuYnV0dG9ucy5oYXMtYWRkb25zIC5idXR0b24uaXMtc2VsZWN0ZWQge1xcbiAgei1pbmRleDogMztcXG59XFxuLmJ1dHRvbnMuaGFzLWFkZG9ucyAuYnV0dG9uOmZvY3VzOmhvdmVyLCAuYnV0dG9ucy5oYXMtYWRkb25zIC5idXR0b24uaXMtZm9jdXNlZDpob3ZlciwgLmJ1dHRvbnMuaGFzLWFkZG9ucyAuYnV0dG9uOmFjdGl2ZTpob3ZlciwgLmJ1dHRvbnMuaGFzLWFkZG9ucyAuYnV0dG9uLmlzLWFjdGl2ZTpob3ZlciwgLmJ1dHRvbnMuaGFzLWFkZG9ucyAuYnV0dG9uLmlzLXNlbGVjdGVkOmhvdmVyIHtcXG4gIHotaW5kZXg6IDQ7XFxufVxcbi5idXR0b25zLmhhcy1hZGRvbnMgLmJ1dHRvbi5pcy1leHBhbmRlZCB7XFxuICBmbGV4LWdyb3c6IDE7XFxuICBmbGV4LXNocmluazogMTtcXG59XFxuLmJ1dHRvbnMuaXMtY2VudGVyZWQge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi5idXR0b25zLmlzLWNlbnRlcmVkOm5vdCguaGFzLWFkZG9ucykgLmJ1dHRvbjpub3QoLmlzLWZ1bGx3aWR0aCkge1xcbiAgbWFyZ2luLWxlZnQ6IDAuMjVyZW07XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW07XFxufVxcbi5idXR0b25zLmlzLXJpZ2h0IHtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxufVxcbi5idXR0b25zLmlzLXJpZ2h0Om5vdCguaGFzLWFkZG9ucykgLmJ1dHRvbjpub3QoLmlzLWZ1bGx3aWR0aCkge1xcbiAgbWFyZ2luLWxlZnQ6IDAuMjVyZW07XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW07XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuYnV0dG9uLmlzLXJlc3BvbnNpdmUuaXMtc21hbGwge1xcbiAgICBmb250LXNpemU6IDAuNTYyNXJlbTtcXG4gIH1cXG4gIC5idXR0b24uaXMtcmVzcG9uc2l2ZSxcXG4gIC5idXR0b24uaXMtcmVzcG9uc2l2ZS5pcy1ub3JtYWwge1xcbiAgICBmb250LXNpemU6IDAuNjU2MjVyZW07XFxuICB9XFxuICAuYnV0dG9uLmlzLXJlc3BvbnNpdmUuaXMtbWVkaXVtIHtcXG4gICAgZm9udC1zaXplOiAwLjc1cmVtO1xcbiAgfVxcbiAgLmJ1dHRvbi5pcy1yZXNwb25zaXZlLmlzLWxhcmdlIHtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmJ1dHRvbi5pcy1yZXNwb25zaXZlLmlzLXNtYWxsIHtcXG4gICAgZm9udC1zaXplOiAwLjY1NjI1cmVtO1xcbiAgfVxcbiAgLmJ1dHRvbi5pcy1yZXNwb25zaXZlLFxcbiAgLmJ1dHRvbi5pcy1yZXNwb25zaXZlLmlzLW5vcm1hbCB7XFxuICAgIGZvbnQtc2l6ZTogMC43NXJlbTtcXG4gIH1cXG4gIC5idXR0b24uaXMtcmVzcG9uc2l2ZS5pcy1tZWRpdW0ge1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICB9XFxuICAuYnV0dG9uLmlzLXJlc3BvbnNpdmUuaXMtbGFyZ2Uge1xcbiAgICBmb250LXNpemU6IDEuMjVyZW07XFxuICB9XFxufVxcbi5jb250YWluZXIge1xcbiAgZmxleC1ncm93OiAxO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogYXV0bztcXG59XFxuLmNvbnRhaW5lci5pcy1mbHVpZCB7XFxuICBtYXgtd2lkdGg6IG5vbmUgIWltcG9ydGFudDtcXG4gIHBhZGRpbmctbGVmdDogMzJweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDMycHg7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiA5NjBweDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTIxNXB4KSB7XFxuICAuY29udGFpbmVyLmlzLXdpZGVzY3JlZW46bm90KC5pcy1tYXgtZGVza3RvcCkge1xcbiAgICBtYXgtd2lkdGg6IDExNTJweDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTQwN3B4KSB7XFxuICAuY29udGFpbmVyLmlzLWZ1bGxoZDpub3QoLmlzLW1heC1kZXNrdG9wKTpub3QoLmlzLW1heC13aWRlc2NyZWVuKSB7XFxuICAgIG1heC13aWR0aDogMTM0NHB4O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIHtcXG4gIC5jb250YWluZXI6bm90KC5pcy1tYXgtZGVza3RvcCkge1xcbiAgICBtYXgtd2lkdGg6IDExNTJweDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQwOHB4KSB7XFxuICAuY29udGFpbmVyOm5vdCguaXMtbWF4LWRlc2t0b3ApOm5vdCguaXMtbWF4LXdpZGVzY3JlZW4pIHtcXG4gICAgbWF4LXdpZHRoOiAxMzQ0cHg7XFxuICB9XFxufVxcblxcbi5jb250ZW50IGxpICsgbGkge1xcbiAgbWFyZ2luLXRvcDogMC4yNWVtO1xcbn1cXG4uY29udGVudCBwOm5vdCg6bGFzdC1jaGlsZCksXFxuLmNvbnRlbnQgZGw6bm90KDpsYXN0LWNoaWxkKSxcXG4uY29udGVudCBvbDpub3QoOmxhc3QtY2hpbGQpLFxcbi5jb250ZW50IHVsOm5vdCg6bGFzdC1jaGlsZCksXFxuLmNvbnRlbnQgYmxvY2txdW90ZTpub3QoOmxhc3QtY2hpbGQpLFxcbi5jb250ZW50IHByZTpub3QoOmxhc3QtY2hpbGQpLFxcbi5jb250ZW50IHRhYmxlOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMWVtO1xcbn1cXG4uY29udGVudCBoMSxcXG4uY29udGVudCBoMixcXG4uY29udGVudCBoMyxcXG4uY29udGVudCBoNCxcXG4uY29udGVudCBoNSxcXG4uY29udGVudCBoNiB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjEyNTtcXG59XFxuLmNvbnRlbnQgaDEge1xcbiAgZm9udC1zaXplOiAyZW07XFxuICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcXG59XFxuLmNvbnRlbnQgaDE6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgbWFyZ2luLXRvcDogMWVtO1xcbn1cXG4uY29udGVudCBoMiB7XFxuICBmb250LXNpemU6IDEuNzVlbTtcXG4gIG1hcmdpbi1ib3R0b206IDAuNTcxNGVtO1xcbn1cXG4uY29udGVudCBoMjpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICBtYXJnaW4tdG9wOiAxLjE0MjhlbTtcXG59XFxuLmNvbnRlbnQgaDMge1xcbiAgZm9udC1zaXplOiAxLjVlbTtcXG4gIG1hcmdpbi1ib3R0b206IDAuNjY2NmVtO1xcbn1cXG4uY29udGVudCBoMzpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICBtYXJnaW4tdG9wOiAxLjMzMzNlbTtcXG59XFxuLmNvbnRlbnQgaDQge1xcbiAgZm9udC1zaXplOiAxLjI1ZW07XFxuICBtYXJnaW4tYm90dG9tOiAwLjhlbTtcXG59XFxuLmNvbnRlbnQgaDUge1xcbiAgZm9udC1zaXplOiAxLjEyNWVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMC44ODg4ZW07XFxufVxcbi5jb250ZW50IGg2IHtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMWVtO1xcbn1cXG4uY29udGVudCBibG9ja3F1b3RlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGJvcmRlci1sZWZ0OiA1cHggc29saWQgaHNsKDAsIDAlLCA4NiUpO1xcbiAgcGFkZGluZzogMS4yNWVtIDEuNWVtO1xcbn1cXG4uY29udGVudCBvbCB7XFxuICBsaXN0LXN0eWxlLXBvc2l0aW9uOiBvdXRzaWRlO1xcbiAgbWFyZ2luLWxlZnQ6IDJlbTtcXG4gIG1hcmdpbi10b3A6IDFlbTtcXG59XFxuLmNvbnRlbnQgb2w6bm90KFt0eXBlXSkge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBkZWNpbWFsO1xcbn1cXG4uY29udGVudCBvbDpub3QoW3R5cGVdKS5pcy1sb3dlci1hbHBoYSB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IGxvd2VyLWFscGhhO1xcbn1cXG4uY29udGVudCBvbDpub3QoW3R5cGVdKS5pcy1sb3dlci1yb21hbiB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IGxvd2VyLXJvbWFuO1xcbn1cXG4uY29udGVudCBvbDpub3QoW3R5cGVdKS5pcy11cHBlci1hbHBoYSB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IHVwcGVyLWFscGhhO1xcbn1cXG4uY29udGVudCBvbDpub3QoW3R5cGVdKS5pcy11cHBlci1yb21hbiB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IHVwcGVyLXJvbWFuO1xcbn1cXG4uY29udGVudCB1bCB7XFxuICBsaXN0LXN0eWxlOiBkaXNjIG91dHNpZGU7XFxuICBtYXJnaW4tbGVmdDogMmVtO1xcbiAgbWFyZ2luLXRvcDogMWVtO1xcbn1cXG4uY29udGVudCB1bCB1bCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IGNpcmNsZTtcXG4gIG1hcmdpbi10b3A6IDAuNWVtO1xcbn1cXG4uY29udGVudCB1bCB1bCB1bCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IHNxdWFyZTtcXG59XFxuLmNvbnRlbnQgZGQge1xcbiAgbWFyZ2luLWxlZnQ6IDJlbTtcXG59XFxuLmNvbnRlbnQgZmlndXJlIHtcXG4gIG1hcmdpbi1sZWZ0OiAyZW07XFxuICBtYXJnaW4tcmlnaHQ6IDJlbTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLmNvbnRlbnQgZmlndXJlOm5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi10b3A6IDJlbTtcXG59XFxuLmNvbnRlbnQgZmlndXJlOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMmVtO1xcbn1cXG4uY29udGVudCBmaWd1cmUgaW1nIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuLmNvbnRlbnQgZmlndXJlIGZpZ2NhcHRpb24ge1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbn1cXG4uY29udGVudCBwcmUge1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgb3ZlcmZsb3cteDogYXV0bztcXG4gIHBhZGRpbmc6IDEuMjVlbSAxLjVlbTtcXG4gIHdoaXRlLXNwYWNlOiBwcmU7XFxuICB3b3JkLXdyYXA6IG5vcm1hbDtcXG59XFxuLmNvbnRlbnQgc3VwLFxcbi5jb250ZW50IHN1YiB7XFxuICBmb250LXNpemU6IDc1JTtcXG59XFxuLmNvbnRlbnQgdGFibGUge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5jb250ZW50IHRhYmxlIHRkLFxcbi5jb250ZW50IHRhYmxlIHRoIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGhzbCgwLCAwJSwgODYlKTtcXG4gIGJvcmRlci13aWR0aDogMCAwIDFweDtcXG4gIHBhZGRpbmc6IDAuNWVtIDAuNzVlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxufVxcbi5jb250ZW50IHRhYmxlIHRoIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5jb250ZW50IHRhYmxlIHRoOm5vdChbYWxpZ25dKSB7XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xcbn1cXG4uY29udGVudCB0YWJsZSB0aGVhZCB0ZCxcXG4uY29udGVudCB0YWJsZSB0aGVhZCB0aCB7XFxuICBib3JkZXItd2lkdGg6IDAgMCAycHg7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uY29udGVudCB0YWJsZSB0Zm9vdCB0ZCxcXG4uY29udGVudCB0YWJsZSB0Zm9vdCB0aCB7XFxuICBib3JkZXItd2lkdGg6IDJweCAwIDA7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uY29udGVudCB0YWJsZSB0Ym9keSB0cjpsYXN0LWNoaWxkIHRkLFxcbi5jb250ZW50IHRhYmxlIHRib2R5IHRyOmxhc3QtY2hpbGQgdGgge1xcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMDtcXG59XFxuLmNvbnRlbnQgLnRhYnMgbGkgKyBsaSB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbn1cXG4uY29udGVudC5pcy1zbWFsbCB7XFxuICBmb250LXNpemU6IDAuNzVyZW07XFxufVxcbi5jb250ZW50LmlzLW5vcm1hbCB7XFxuICBmb250LXNpemU6IDFyZW07XFxufVxcbi5jb250ZW50LmlzLW1lZGl1bSB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcbi5jb250ZW50LmlzLWxhcmdlIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG5cXG4uaWNvbiB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGhlaWdodDogMS41cmVtO1xcbiAgd2lkdGg6IDEuNXJlbTtcXG59XFxuLmljb24uaXMtc21hbGwge1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgd2lkdGg6IDFyZW07XFxufVxcbi5pY29uLmlzLW1lZGl1bSB7XFxuICBoZWlnaHQ6IDJyZW07XFxuICB3aWR0aDogMnJlbTtcXG59XFxuLmljb24uaXMtbGFyZ2Uge1xcbiAgaGVpZ2h0OiAzcmVtO1xcbiAgd2lkdGg6IDNyZW07XFxufVxcblxcbi5pY29uLXRleHQge1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxufVxcbi5pY29uLXRleHQgLmljb24ge1xcbiAgZmxleC1ncm93OiAwO1xcbiAgZmxleC1zaHJpbms6IDA7XFxufVxcbi5pY29uLXRleHQgLmljb246bm90KDpsYXN0LWNoaWxkKSB7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjVlbTtcXG59XFxuLmljb24tdGV4dCAuaWNvbjpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICBtYXJnaW4tbGVmdDogMC4yNWVtO1xcbn1cXG5cXG5kaXYuaWNvbi10ZXh0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5pbWFnZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmltYWdlIGltZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogYXV0bztcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uaW1hZ2UgaW1nLmlzLXJvdW5kZWQge1xcbiAgYm9yZGVyLXJhZGl1czogOTk5OXB4O1xcbn1cXG4uaW1hZ2UuaXMtZnVsbHdpZHRoIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uaW1hZ2UuaXMtc3F1YXJlIGltZyxcXG4uaW1hZ2UuaXMtc3F1YXJlIC5oYXMtcmF0aW8sIC5pbWFnZS5pcy0xYnkxIGltZyxcXG4uaW1hZ2UuaXMtMWJ5MSAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtNWJ5NCBpbWcsXFxuLmltYWdlLmlzLTVieTQgLmhhcy1yYXRpbywgLmltYWdlLmlzLTRieTMgaW1nLFxcbi5pbWFnZS5pcy00YnkzIC5oYXMtcmF0aW8sIC5pbWFnZS5pcy0zYnkyIGltZyxcXG4uaW1hZ2UuaXMtM2J5MiAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtNWJ5MyBpbWcsXFxuLmltYWdlLmlzLTVieTMgLmhhcy1yYXRpbywgLmltYWdlLmlzLTE2Ynk5IGltZyxcXG4uaW1hZ2UuaXMtMTZieTkgLmhhcy1yYXRpbywgLmltYWdlLmlzLTJieTEgaW1nLFxcbi5pbWFnZS5pcy0yYnkxIC5oYXMtcmF0aW8sIC5pbWFnZS5pcy0zYnkxIGltZyxcXG4uaW1hZ2UuaXMtM2J5MSAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtNGJ5NSBpbWcsXFxuLmltYWdlLmlzLTRieTUgLmhhcy1yYXRpbywgLmltYWdlLmlzLTNieTQgaW1nLFxcbi5pbWFnZS5pcy0zYnk0IC5oYXMtcmF0aW8sIC5pbWFnZS5pcy0yYnkzIGltZyxcXG4uaW1hZ2UuaXMtMmJ5MyAuaGFzLXJhdGlvLCAuaW1hZ2UuaXMtM2J5NSBpbWcsXFxuLmltYWdlLmlzLTNieTUgLmhhcy1yYXRpbywgLmltYWdlLmlzLTlieTE2IGltZyxcXG4uaW1hZ2UuaXMtOWJ5MTYgLmhhcy1yYXRpbywgLmltYWdlLmlzLTFieTIgaW1nLFxcbi5pbWFnZS5pcy0xYnkyIC5oYXMtcmF0aW8sIC5pbWFnZS5pcy0xYnkzIGltZyxcXG4uaW1hZ2UuaXMtMWJ5MyAuaGFzLXJhdGlvIHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uaW1hZ2UuaXMtc3F1YXJlLCAuaW1hZ2UuaXMtMWJ5MSB7XFxuICBwYWRkaW5nLXRvcDogMTAwJTtcXG59XFxuLmltYWdlLmlzLTVieTQge1xcbiAgcGFkZGluZy10b3A6IDgwJTtcXG59XFxuLmltYWdlLmlzLTRieTMge1xcbiAgcGFkZGluZy10b3A6IDc1JTtcXG59XFxuLmltYWdlLmlzLTNieTIge1xcbiAgcGFkZGluZy10b3A6IDY2LjY2NjYlO1xcbn1cXG4uaW1hZ2UuaXMtNWJ5MyB7XFxuICBwYWRkaW5nLXRvcDogNjAlO1xcbn1cXG4uaW1hZ2UuaXMtMTZieTkge1xcbiAgcGFkZGluZy10b3A6IDU2LjI1JTtcXG59XFxuLmltYWdlLmlzLTJieTEge1xcbiAgcGFkZGluZy10b3A6IDUwJTtcXG59XFxuLmltYWdlLmlzLTNieTEge1xcbiAgcGFkZGluZy10b3A6IDMzLjMzMzMlO1xcbn1cXG4uaW1hZ2UuaXMtNGJ5NSB7XFxuICBwYWRkaW5nLXRvcDogMTI1JTtcXG59XFxuLmltYWdlLmlzLTNieTQge1xcbiAgcGFkZGluZy10b3A6IDEzMy4zMzMzJTtcXG59XFxuLmltYWdlLmlzLTJieTMge1xcbiAgcGFkZGluZy10b3A6IDE1MCU7XFxufVxcbi5pbWFnZS5pcy0zYnk1IHtcXG4gIHBhZGRpbmctdG9wOiAxNjYuNjY2NiU7XFxufVxcbi5pbWFnZS5pcy05YnkxNiB7XFxuICBwYWRkaW5nLXRvcDogMTc3Ljc3NzclO1xcbn1cXG4uaW1hZ2UuaXMtMWJ5MiB7XFxuICBwYWRkaW5nLXRvcDogMjAwJTtcXG59XFxuLmltYWdlLmlzLTFieTMge1xcbiAgcGFkZGluZy10b3A6IDMwMCU7XFxufVxcbi5pbWFnZS5pcy0xNngxNiB7XFxuICBoZWlnaHQ6IDE2cHg7XFxuICB3aWR0aDogMTZweDtcXG59XFxuLmltYWdlLmlzLTI0eDI0IHtcXG4gIGhlaWdodDogMjRweDtcXG4gIHdpZHRoOiAyNHB4O1xcbn1cXG4uaW1hZ2UuaXMtMzJ4MzIge1xcbiAgaGVpZ2h0OiAzMnB4O1xcbiAgd2lkdGg6IDMycHg7XFxufVxcbi5pbWFnZS5pcy00OHg0OCB7XFxuICBoZWlnaHQ6IDQ4cHg7XFxuICB3aWR0aDogNDhweDtcXG59XFxuLmltYWdlLmlzLTY0eDY0IHtcXG4gIGhlaWdodDogNjRweDtcXG4gIHdpZHRoOiA2NHB4O1xcbn1cXG4uaW1hZ2UuaXMtOTZ4OTYge1xcbiAgaGVpZ2h0OiA5NnB4O1xcbiAgd2lkdGg6IDk2cHg7XFxufVxcbi5pbWFnZS5pcy0xMjh4MTI4IHtcXG4gIGhlaWdodDogMTI4cHg7XFxuICB3aWR0aDogMTI4cHg7XFxufVxcblxcbi5ub3RpZmljYXRpb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgcGFkZGluZzogMS4yNXJlbSAyLjVyZW0gMS4yNXJlbSAxLjVyZW07XFxufVxcbi5ub3RpZmljYXRpb24gYTpub3QoLmJ1dHRvbik6bm90KC5kcm9wZG93bi1pdGVtKSB7XFxuICBjb2xvcjogY3VycmVudENvbG9yO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcbi5ub3RpZmljYXRpb24gc3Ryb25nIHtcXG4gIGNvbG9yOiBjdXJyZW50Q29sb3I7XFxufVxcbi5ub3RpZmljYXRpb24gY29kZSxcXG4ubm90aWZpY2F0aW9uIHByZSB7XFxuICBiYWNrZ3JvdW5kOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4ubm90aWZpY2F0aW9uIHByZSBjb2RlIHtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbn1cXG4ubm90aWZpY2F0aW9uID4gLmRlbGV0ZSB7XFxuICByaWdodDogMC41cmVtO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwLjVyZW07XFxufVxcbi5ub3RpZmljYXRpb24gLnRpdGxlLFxcbi5ub3RpZmljYXRpb24gLnN1YnRpdGxlLFxcbi5ub3RpZmljYXRpb24gLmNvbnRlbnQge1xcbiAgY29sb3I6IGN1cnJlbnRDb2xvcjtcXG59XFxuLm5vdGlmaWNhdGlvbi5pcy13aGl0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4ubm90aWZpY2F0aW9uLmlzLWJsYWNrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5ub3RpZmljYXRpb24uaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLm5vdGlmaWNhdGlvbi5pcy1kYXJrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubm90aWZpY2F0aW9uLmlzLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubm90aWZpY2F0aW9uLmlzLXByaW1hcnkuaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ViZmZmYztcXG4gIGNvbG9yOiAjMDA5NDdlO1xcbn1cXG4ubm90aWZpY2F0aW9uLmlzLWxpbmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5ub3RpZmljYXRpb24uaXMtbGluay5pcy1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZmMWZhO1xcbiAgY29sb3I6ICMzODUwYjc7XFxufVxcbi5ub3RpZmljYXRpb24uaXMtaW5mbyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLm5vdGlmaWNhdGlvbi5pcy1pbmZvLmlzLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmY1ZmI7XFxuICBjb2xvcjogIzI5NmZhODtcXG59XFxuLm5vdGlmaWNhdGlvbi5pcy1zdWNjZXNzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNTMsIDUzJSwgNTMlKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubm90aWZpY2F0aW9uLmlzLXN1Y2Nlc3MuaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VmZmFmNTtcXG4gIGNvbG9yOiAjMjU3OTUzO1xcbn1cXG4ubm90aWZpY2F0aW9uLmlzLXdhcm5pbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLm5vdGlmaWNhdGlvbi5pcy13YXJuaW5nLmlzLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZhZWI7XFxuICBjb2xvcjogIzk0NmMwMDtcXG59XFxuLm5vdGlmaWNhdGlvbi5pcy1kYW5nZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5ub3RpZmljYXRpb24uaXMtZGFuZ2VyLmlzLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZWVjZjA7XFxuICBjb2xvcjogI2NjMGYzNTtcXG59XFxuXFxuLnByb2dyZXNzIHtcXG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDk5OTlweDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBhZGRpbmc6IDA7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnByb2dyZXNzOjotd2Via2l0LXByb2dyZXNzLWJhciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDkzJSk7XFxufVxcbi5wcm9ncmVzczo6LXdlYmtpdC1wcm9ncmVzcy12YWx1ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDI5JSk7XFxufVxcbi5wcm9ncmVzczo6LW1vei1wcm9ncmVzcy1iYXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAyOSUpO1xcbn1cXG4ucHJvZ3Jlc3M6Oi1tcy1maWxsIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIGJvcmRlcjogbm9uZTtcXG59XFxuLnByb2dyZXNzLmlzLXdoaXRlOjotd2Via2l0LXByb2dyZXNzLXZhbHVlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5wcm9ncmVzcy5pcy13aGl0ZTo6LW1vei1wcm9ncmVzcy1iYXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLnByb2dyZXNzLmlzLXdoaXRlOjotbXMtZmlsbCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtd2hpdGU6aW5kZXRlcm1pbmF0ZSB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIGhzbCgwLCAwJSwgMTAwJSkgMzAlLCBoc2woMCwgMCUsIDkzJSkgMzAlKTtcXG59XFxuLnByb2dyZXNzLmlzLWJsYWNrOjotd2Via2l0LXByb2dyZXNzLXZhbHVlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtYmxhY2s6Oi1tb3otcHJvZ3Jlc3MtYmFyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtYmxhY2s6Oi1tcy1maWxsIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtYmxhY2s6aW5kZXRlcm1pbmF0ZSB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIGhzbCgwLCAwJSwgNCUpIDMwJSwgaHNsKDAsIDAlLCA5MyUpIDMwJSk7XFxufVxcbi5wcm9ncmVzcy5pcy1saWdodDo6LXdlYmtpdC1wcm9ncmVzcy12YWx1ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxufVxcbi5wcm9ncmVzcy5pcy1saWdodDo6LW1vei1wcm9ncmVzcy1iYXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtbGlnaHQ6Oi1tcy1maWxsIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG59XFxuLnByb2dyZXNzLmlzLWxpZ2h0OmluZGV0ZXJtaW5hdGUge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCBoc2woMCwgMCUsIDk2JSkgMzAlLCBoc2woMCwgMCUsIDkzJSkgMzAlKTtcXG59XFxuLnByb2dyZXNzLmlzLWRhcms6Oi13ZWJraXQtcHJvZ3Jlc3MtdmFsdWUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtZGFyazo6LW1vei1wcm9ncmVzcy1iYXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtZGFyazo6LW1zLWZpbGwge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtZGFyazppbmRldGVybWluYXRlIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgaHNsKDAsIDAlLCAyMSUpIDMwJSwgaHNsKDAsIDAlLCA5MyUpIDMwJSk7XFxufVxcbi5wcm9ncmVzcy5pcy1wcmltYXJ5Ojotd2Via2l0LXByb2dyZXNzLXZhbHVlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxufVxcbi5wcm9ncmVzcy5pcy1wcmltYXJ5OjotbW96LXByb2dyZXNzLWJhciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtcHJpbWFyeTo6LW1zLWZpbGwge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG59XFxuLnByb2dyZXNzLmlzLXByaW1hcnk6aW5kZXRlcm1pbmF0ZSB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIGhzbCgxNzEsIDEwMCUsIDQxJSkgMzAlLCBoc2woMCwgMCUsIDkzJSkgMzAlKTtcXG59XFxuLnByb2dyZXNzLmlzLWxpbms6Oi13ZWJraXQtcHJvZ3Jlc3MtdmFsdWUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtbGluazo6LW1vei1wcm9ncmVzcy1iYXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtbGluazo6LW1zLWZpbGwge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtbGluazppbmRldGVybWluYXRlIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgaHNsKDIyOSwgNTMlLCA1MyUpIDMwJSwgaHNsKDAsIDAlLCA5MyUpIDMwJSk7XFxufVxcbi5wcm9ncmVzcy5pcy1pbmZvOjotd2Via2l0LXByb2dyZXNzLXZhbHVlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG59XFxuLnByb2dyZXNzLmlzLWluZm86Oi1tb3otcHJvZ3Jlc3MtYmFyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG59XFxuLnByb2dyZXNzLmlzLWluZm86Oi1tcy1maWxsIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG59XFxuLnByb2dyZXNzLmlzLWluZm86aW5kZXRlcm1pbmF0ZSB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIGhzbCgyMDcsIDYxJSwgNTMlKSAzMCUsIGhzbCgwLCAwJSwgOTMlKSAzMCUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtc3VjY2Vzczo6LXdlYmtpdC1wcm9ncmVzcy12YWx1ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxufVxcbi5wcm9ncmVzcy5pcy1zdWNjZXNzOjotbW96LXByb2dyZXNzLWJhciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxufVxcbi5wcm9ncmVzcy5pcy1zdWNjZXNzOjotbXMtZmlsbCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxufVxcbi5wcm9ncmVzcy5pcy1zdWNjZXNzOmluZGV0ZXJtaW5hdGUge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCBoc2woMTUzLCA1MyUsIDUzJSkgMzAlLCBoc2woMCwgMCUsIDkzJSkgMzAlKTtcXG59XFxuLnByb2dyZXNzLmlzLXdhcm5pbmc6Oi13ZWJraXQtcHJvZ3Jlc3MtdmFsdWUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtd2FybmluZzo6LW1vei1wcm9ncmVzcy1iYXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtd2FybmluZzo6LW1zLWZpbGwge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtd2FybmluZzppbmRldGVybWluYXRlIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgaHNsKDQ0LCAxMDAlLCA3NyUpIDMwJSwgaHNsKDAsIDAlLCA5MyUpIDMwJSk7XFxufVxcbi5wcm9ncmVzcy5pcy1kYW5nZXI6Oi13ZWJraXQtcHJvZ3Jlc3MtdmFsdWUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtZGFuZ2VyOjotbW96LXByb2dyZXNzLWJhciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxufVxcbi5wcm9ncmVzcy5pcy1kYW5nZXI6Oi1tcy1maWxsIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgzNDgsIDg2JSwgNjElKTtcXG59XFxuLnByb2dyZXNzLmlzLWRhbmdlcjppbmRldGVybWluYXRlIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgaHNsKDM0OCwgODYlLCA2MSUpIDMwJSwgaHNsKDAsIDAlLCA5MyUpIDMwJSk7XFxufVxcbi5wcm9ncmVzczppbmRldGVybWluYXRlIHtcXG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogMS41cztcXG4gIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xcbiAgYW5pbWF0aW9uLW5hbWU6IG1vdmVJbmRldGVybWluYXRlO1xcbiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5MyUpO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCBoc2woMCwgMCUsIDI5JSkgMzAlLCBoc2woMCwgMCUsIDkzJSkgMzAlKTtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IHRvcCBsZWZ0O1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtc2l6ZTogMTUwJSAxNTAlO1xcbn1cXG4ucHJvZ3Jlc3M6aW5kZXRlcm1pbmF0ZTo6LXdlYmtpdC1wcm9ncmVzcy1iYXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcbi5wcm9ncmVzczppbmRldGVybWluYXRlOjotbW96LXByb2dyZXNzLWJhciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuLnByb2dyZXNzOmluZGV0ZXJtaW5hdGU6Oi1tcy1maWxsIHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBub25lO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtc21hbGwge1xcbiAgaGVpZ2h0OiAwLjc1cmVtO1xcbn1cXG4ucHJvZ3Jlc3MuaXMtbWVkaXVtIHtcXG4gIGhlaWdodDogMS4yNXJlbTtcXG59XFxuLnByb2dyZXNzLmlzLWxhcmdlIHtcXG4gIGhlaWdodDogMS41cmVtO1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIG1vdmVJbmRldGVybWluYXRlIHtcXG4gIGZyb20ge1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAyMDAlIDA7XFxuICB9XFxuICB0byB7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IC0yMDAlIDA7XFxuICB9XFxufVxcbi50YWJsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG59XFxuLnRhYmxlIHRkLFxcbi50YWJsZSB0aCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCBoc2woMCwgMCUsIDg2JSk7XFxuICBib3JkZXItd2lkdGg6IDAgMCAxcHg7XFxuICBwYWRkaW5nOiAwLjVlbSAwLjc1ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG4udGFibGUgdGQuaXMtd2hpdGUsXFxuLnRhYmxlIHRoLmlzLXdoaXRlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi50YWJsZSB0ZC5pcy1ibGFjayxcXG4udGFibGUgdGguaXMtYmxhY2sge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi50YWJsZSB0ZC5pcy1saWdodCxcXG4udGFibGUgdGguaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4udGFibGUgdGQuaXMtZGFyayxcXG4udGFibGUgdGguaXMtZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4udGFibGUgdGQuaXMtcHJpbWFyeSxcXG4udGFibGUgdGguaXMtcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi50YWJsZSB0ZC5pcy1saW5rLFxcbi50YWJsZSB0aC5pcy1saW5rIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi50YWJsZSB0ZC5pcy1pbmZvLFxcbi50YWJsZSB0aC5pcy1pbmZvIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi50YWJsZSB0ZC5pcy1zdWNjZXNzLFxcbi50YWJsZSB0aC5pcy1zdWNjZXNzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNTMsIDUzJSwgNTMlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi50YWJsZSB0ZC5pcy13YXJuaW5nLFxcbi50YWJsZSB0aC5pcy13YXJuaW5nIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCg0NCwgMTAwJSwgNzclKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLnRhYmxlIHRkLmlzLWRhbmdlcixcXG4udGFibGUgdGguaXMtZGFuZ2VyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgzNDgsIDg2JSwgNjElKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi50YWJsZSB0ZC5pcy1uYXJyb3csXFxuLnRhYmxlIHRoLmlzLW5hcnJvdyB7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgd2lkdGg6IDElO1xcbn1cXG4udGFibGUgdGQuaXMtc2VsZWN0ZWQsXFxuLnRhYmxlIHRoLmlzLXNlbGVjdGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnRhYmxlIHRkLmlzLXNlbGVjdGVkIGEsXFxuLnRhYmxlIHRkLmlzLXNlbGVjdGVkIHN0cm9uZyxcXG4udGFibGUgdGguaXMtc2VsZWN0ZWQgYSxcXG4udGFibGUgdGguaXMtc2VsZWN0ZWQgc3Ryb25nIHtcXG4gIGNvbG9yOiBjdXJyZW50Q29sb3I7XFxufVxcbi50YWJsZSB0ZC5pcy12Y2VudGVyZWQsXFxuLnRhYmxlIHRoLmlzLXZjZW50ZXJlZCB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG4udGFibGUgdGgge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG59XFxuLnRhYmxlIHRoOm5vdChbYWxpZ25dKSB7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG4udGFibGUgdHIuaXMtc2VsZWN0ZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4udGFibGUgdHIuaXMtc2VsZWN0ZWQgYSxcXG4udGFibGUgdHIuaXMtc2VsZWN0ZWQgc3Ryb25nIHtcXG4gIGNvbG9yOiBjdXJyZW50Q29sb3I7XFxufVxcbi50YWJsZSB0ci5pcy1zZWxlY3RlZCB0ZCxcXG4udGFibGUgdHIuaXMtc2VsZWN0ZWQgdGgge1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgY29sb3I6IGN1cnJlbnRDb2xvcjtcXG59XFxuLnRhYmxlIHRoZWFkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG4udGFibGUgdGhlYWQgdGQsXFxuLnRhYmxlIHRoZWFkIHRoIHtcXG4gIGJvcmRlci13aWR0aDogMCAwIDJweDtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi50YWJsZSB0Zm9vdCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuLnRhYmxlIHRmb290IHRkLFxcbi50YWJsZSB0Zm9vdCB0aCB7XFxuICBib3JkZXItd2lkdGg6IDJweCAwIDA7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4udGFibGUgdGJvZHkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcbi50YWJsZSB0Ym9keSB0cjpsYXN0LWNoaWxkIHRkLFxcbi50YWJsZSB0Ym9keSB0cjpsYXN0LWNoaWxkIHRoIHtcXG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDA7XFxufVxcbi50YWJsZS5pcy1ib3JkZXJlZCB0ZCxcXG4udGFibGUuaXMtYm9yZGVyZWQgdGgge1xcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XFxufVxcbi50YWJsZS5pcy1ib3JkZXJlZCB0cjpsYXN0LWNoaWxkIHRkLFxcbi50YWJsZS5pcy1ib3JkZXJlZCB0cjpsYXN0LWNoaWxkIHRoIHtcXG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDtcXG59XFxuLnRhYmxlLmlzLWZ1bGx3aWR0aCB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnRhYmxlLmlzLWhvdmVyYWJsZSB0Ym9keSB0cjpub3QoLmlzLXNlbGVjdGVkKTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk4JSk7XFxufVxcbi50YWJsZS5pcy1ob3ZlcmFibGUuaXMtc3RyaXBlZCB0Ym9keSB0cjpub3QoLmlzLXNlbGVjdGVkKTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk4JSk7XFxufVxcbi50YWJsZS5pcy1ob3ZlcmFibGUuaXMtc3RyaXBlZCB0Ym9keSB0cjpub3QoLmlzLXNlbGVjdGVkKTpob3ZlcjpudGgtY2hpbGQoZXZlbikge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4udGFibGUuaXMtbmFycm93IHRkLFxcbi50YWJsZS5pcy1uYXJyb3cgdGgge1xcbiAgcGFkZGluZzogMC4yNWVtIDAuNWVtO1xcbn1cXG4udGFibGUuaXMtc3RyaXBlZCB0Ym9keSB0cjpub3QoLmlzLXNlbGVjdGVkKTpudGgtY2hpbGQoZXZlbikge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5OCUpO1xcbn1cXG5cXG4udGFibGUtY29udGFpbmVyIHtcXG4gIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG5cXG4udGFncyB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuLnRhZ3MgLnRhZyB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxufVxcbi50YWdzIC50YWc6bm90KDpsYXN0LWNoaWxkKSB7XFxuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcXG59XFxuLnRhZ3M6bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tYm90dG9tOiAtMC41cmVtO1xcbn1cXG4udGFnczpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxufVxcbi50YWdzLmFyZS1tZWRpdW0gLnRhZzpub3QoLmlzLW5vcm1hbCk6bm90KC5pcy1sYXJnZSkge1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG4udGFncy5hcmUtbGFyZ2UgLnRhZzpub3QoLmlzLW5vcm1hbCk6bm90KC5pcy1tZWRpdW0pIHtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG59XFxuLnRhZ3MuaXMtY2VudGVyZWQge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi50YWdzLmlzLWNlbnRlcmVkIC50YWcge1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtO1xcbiAgbWFyZ2luLWxlZnQ6IDAuMjVyZW07XFxufVxcbi50YWdzLmlzLXJpZ2h0IHtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxufVxcbi50YWdzLmlzLXJpZ2h0IC50YWc6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWxlZnQ6IDAuNXJlbTtcXG59XFxuLnRhZ3MuaXMtcmlnaHQgLnRhZzpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG59XFxuLnRhZ3MuaGFzLWFkZG9ucyAudGFnIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG59XFxuLnRhZ3MuaGFzLWFkZG9ucyAudGFnOm5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XFxufVxcbi50YWdzLmhhcy1hZGRvbnMgLnRhZzpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XFxufVxcblxcbi50YWc6bm90KGJvZHkpIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyOSUpO1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBmb250LXNpemU6IDAuNzVyZW07XFxuICBoZWlnaHQ6IDJlbTtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIHBhZGRpbmctbGVmdDogMC43NWVtO1xcbiAgcGFkZGluZy1yaWdodDogMC43NWVtO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuLnRhZzpub3QoYm9keSkgLmRlbGV0ZSB7XFxuICBtYXJnaW4tbGVmdDogMC4yNXJlbTtcXG4gIG1hcmdpbi1yaWdodDogLTAuMzc1cmVtO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy13aGl0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1ibGFjayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1kYXJrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1wcmltYXJ5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtcHJpbWFyeS5pcy1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWJmZmZjO1xcbiAgY29sb3I6ICMwMDk0N2U7XFxufVxcbi50YWc6bm90KGJvZHkpLmlzLWxpbmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi50YWc6bm90KGJvZHkpLmlzLWxpbmsuaXMtbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VmZjFmYTtcXG4gIGNvbG9yOiAjMzg1MGI3O1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1pbmZvIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1pbmZvLmlzLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmY1ZmI7XFxuICBjb2xvcjogIzI5NmZhODtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtc3VjY2VzcyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtc3VjY2Vzcy5pcy1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZmYWY1O1xcbiAgY29sb3I6ICMyNTc5NTM7XFxufVxcbi50YWc6bm90KGJvZHkpLmlzLXdhcm5pbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtd2FybmluZy5pcy1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmYWViO1xcbiAgY29sb3I6ICM5NDZjMDA7XFxufVxcbi50YWc6bm90KGJvZHkpLmlzLWRhbmdlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtZGFuZ2VyLmlzLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZWVjZjA7XFxuICBjb2xvcjogI2NjMGYzNTtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtbm9ybWFsIHtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtbWVkaXVtIHtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtbGFyZ2Uge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG4udGFnOm5vdChib2R5KSAuaWNvbjpmaXJzdC1jaGlsZDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1sZWZ0OiAtMC4zNzVlbTtcXG4gIG1hcmdpbi1yaWdodDogMC4xODc1ZW07XFxufVxcbi50YWc6bm90KGJvZHkpIC5pY29uOmxhc3QtY2hpbGQ6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWxlZnQ6IDAuMTg3NWVtO1xcbiAgbWFyZ2luLXJpZ2h0OiAtMC4zNzVlbTtcXG59XFxuLnRhZzpub3QoYm9keSkgLmljb246Zmlyc3QtY2hpbGQ6bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tbGVmdDogLTAuMzc1ZW07XFxuICBtYXJnaW4tcmlnaHQ6IC0wLjM3NWVtO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1kZWxldGUge1xcbiAgbWFyZ2luLWxlZnQ6IDFweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMmVtO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1kZWxldGU6OmJlZm9yZSwgLnRhZzpub3QoYm9keSkuaXMtZGVsZXRlOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbGVmdDogNTAlO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKSByb3RhdGUoNDVkZWcpO1xcbiAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtZGVsZXRlOjpiZWZvcmUge1xcbiAgaGVpZ2h0OiAxcHg7XFxuICB3aWR0aDogNTAlO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1kZWxldGU6OmFmdGVyIHtcXG4gIGhlaWdodDogNTAlO1xcbiAgd2lkdGg6IDFweDtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtZGVsZXRlOmhvdmVyLCAudGFnOm5vdChib2R5KS5pcy1kZWxldGU6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U4ZThlODtcXG59XFxuLnRhZzpub3QoYm9keSkuaXMtZGVsZXRlOmFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGJkYmRiO1xcbn1cXG4udGFnOm5vdChib2R5KS5pcy1yb3VuZGVkIHtcXG4gIGJvcmRlci1yYWRpdXM6IDk5OTlweDtcXG59XFxuXFxuYS50YWc6aG92ZXIge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblxcbi50aXRsZSxcXG4uc3VidGl0bGUge1xcbiAgd29yZC1icmVhazogYnJlYWstd29yZDtcXG59XFxuLnRpdGxlIGVtLFxcbi50aXRsZSBzcGFuLFxcbi5zdWJ0aXRsZSBlbSxcXG4uc3VidGl0bGUgc3BhbiB7XFxuICBmb250LXdlaWdodDogaW5oZXJpdDtcXG59XFxuLnRpdGxlIHN1YixcXG4uc3VidGl0bGUgc3ViIHtcXG4gIGZvbnQtc2l6ZTogMC43NWVtO1xcbn1cXG4udGl0bGUgc3VwLFxcbi5zdWJ0aXRsZSBzdXAge1xcbiAgZm9udC1zaXplOiAwLjc1ZW07XFxufVxcbi50aXRsZSAudGFnLFxcbi5zdWJ0aXRsZSAudGFnIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbi50aXRsZSB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjEyNTtcXG59XFxuLnRpdGxlIHN0cm9uZyB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xcbn1cXG4udGl0bGU6bm90KC5pcy1zcGFjZWQpICsgLnN1YnRpdGxlIHtcXG4gIG1hcmdpbi10b3A6IC0xLjI1cmVtO1xcbn1cXG4udGl0bGUuaXMtMSB7XFxuICBmb250LXNpemU6IDNyZW07XFxufVxcbi50aXRsZS5pcy0yIHtcXG4gIGZvbnQtc2l6ZTogMi41cmVtO1xcbn1cXG4udGl0bGUuaXMtMyB7XFxuICBmb250LXNpemU6IDJyZW07XFxufVxcbi50aXRsZS5pcy00IHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG4udGl0bGUuaXMtNSB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcbi50aXRsZS5pcy02IHtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuLnRpdGxlLmlzLTcge1xcbiAgZm9udC1zaXplOiAwLjc1cmVtO1xcbn1cXG5cXG4uc3VidGl0bGUge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBsaW5lLWhlaWdodDogMS4yNTtcXG59XFxuLnN1YnRpdGxlIHN0cm9uZyB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuLnN1YnRpdGxlOm5vdCguaXMtc3BhY2VkKSArIC50aXRsZSB7XFxuICBtYXJnaW4tdG9wOiAtMS4yNXJlbTtcXG59XFxuLnN1YnRpdGxlLmlzLTEge1xcbiAgZm9udC1zaXplOiAzcmVtO1xcbn1cXG4uc3VidGl0bGUuaXMtMiB7XFxuICBmb250LXNpemU6IDIuNXJlbTtcXG59XFxuLnN1YnRpdGxlLmlzLTMge1xcbiAgZm9udC1zaXplOiAycmVtO1xcbn1cXG4uc3VidGl0bGUuaXMtNCB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuLnN1YnRpdGxlLmlzLTUge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG4uc3VidGl0bGUuaXMtNiB7XFxuICBmb250LXNpemU6IDFyZW07XFxufVxcbi5zdWJ0aXRsZS5pcy03IHtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG59XFxuXFxuLmhlYWRpbmcge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXNpemU6IDExcHg7XFxuICBsZXR0ZXItc3BhY2luZzogMXB4O1xcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG59XFxuXFxuLm51bWJlciB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgYm9yZGVyLXJhZGl1czogOTk5OXB4O1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBoZWlnaHQ6IDJlbTtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgbWFyZ2luLXJpZ2h0OiAxLjVyZW07XFxuICBtaW4td2lkdGg6IDIuNWVtO1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG5cXG4vKiBCdWxtYSBGb3JtICovXFxuLnNlbGVjdCBzZWxlY3QsIC50ZXh0YXJlYSwgLmlucHV0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgODYlKTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5zZWxlY3Qgc2VsZWN0OjotbW96LXBsYWNlaG9sZGVyLCAudGV4dGFyZWE6Oi1tb3otcGxhY2Vob2xkZXIsIC5pbnB1dDo6LW1vei1wbGFjZWhvbGRlciB7XFxuICBjb2xvcjogcmdiYSg1NCwgNTQsIDU0LCAwLjMpO1xcbn1cXG4uc2VsZWN0IHNlbGVjdDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgLnRleHRhcmVhOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyLCAuaW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6IHJnYmEoNTQsIDU0LCA1NCwgMC4zKTtcXG59XFxuLnNlbGVjdCBzZWxlY3Q6LW1vei1wbGFjZWhvbGRlciwgLnRleHRhcmVhOi1tb3otcGxhY2Vob2xkZXIsIC5pbnB1dDotbW96LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiByZ2JhKDU0LCA1NCwgNTQsIDAuMyk7XFxufVxcbi5zZWxlY3Qgc2VsZWN0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciwgLnRleHRhcmVhOi1tcy1pbnB1dC1wbGFjZWhvbGRlciwgLmlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XFxuICBjb2xvcjogcmdiYSg1NCwgNTQsIDU0LCAwLjMpO1xcbn1cXG4uc2VsZWN0IHNlbGVjdDpob3ZlciwgLnRleHRhcmVhOmhvdmVyLCAuaW5wdXQ6aG92ZXIsIC5zZWxlY3Qgc2VsZWN0LmlzLWhvdmVyZWQsIC5pcy1ob3ZlcmVkLnRleHRhcmVhLCAuaXMtaG92ZXJlZC5pbnB1dCB7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgNzElKTtcXG59XFxuLnNlbGVjdCBzZWxlY3Q6Zm9jdXMsIC50ZXh0YXJlYTpmb2N1cywgLmlucHV0OmZvY3VzLCAuc2VsZWN0IHNlbGVjdC5pcy1mb2N1c2VkLCAuaXMtZm9jdXNlZC50ZXh0YXJlYSwgLmlzLWZvY3VzZWQuaW5wdXQsIC5zZWxlY3Qgc2VsZWN0OmFjdGl2ZSwgLnRleHRhcmVhOmFjdGl2ZSwgLmlucHV0OmFjdGl2ZSwgLnNlbGVjdCBzZWxlY3QuaXMtYWN0aXZlLCAuaXMtYWN0aXZlLnRleHRhcmVhLCAuaXMtYWN0aXZlLmlucHV0IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4xMjVlbSByZ2JhKDcyLCA5NSwgMTk5LCAwLjI1KTtcXG59XFxuLnNlbGVjdCBzZWxlY3RbZGlzYWJsZWRdLCBbZGlzYWJsZWRdLnRleHRhcmVhLCBbZGlzYWJsZWRdLmlucHV0LCBmaWVsZHNldFtkaXNhYmxlZF0gLnNlbGVjdCBzZWxlY3QsIC5zZWxlY3QgZmllbGRzZXRbZGlzYWJsZWRdIHNlbGVjdCwgZmllbGRzZXRbZGlzYWJsZWRdIC50ZXh0YXJlYSwgZmllbGRzZXRbZGlzYWJsZWRdIC5pbnB1dCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0OCUpO1xcbn1cXG4uc2VsZWN0IHNlbGVjdFtkaXNhYmxlZF06Oi1tb3otcGxhY2Vob2xkZXIsIFtkaXNhYmxlZF0udGV4dGFyZWE6Oi1tb3otcGxhY2Vob2xkZXIsIFtkaXNhYmxlZF0uaW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXIsIGZpZWxkc2V0W2Rpc2FibGVkXSAuc2VsZWN0IHNlbGVjdDo6LW1vei1wbGFjZWhvbGRlciwgLnNlbGVjdCBmaWVsZHNldFtkaXNhYmxlZF0gc2VsZWN0OjotbW96LXBsYWNlaG9sZGVyLCBmaWVsZHNldFtkaXNhYmxlZF0gLnRleHRhcmVhOjotbW96LXBsYWNlaG9sZGVyLCBmaWVsZHNldFtkaXNhYmxlZF0gLmlucHV0OjotbW96LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiByZ2JhKDEyMiwgMTIyLCAxMjIsIDAuMyk7XFxufVxcbi5zZWxlY3Qgc2VsZWN0W2Rpc2FibGVkXTo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgW2Rpc2FibGVkXS50ZXh0YXJlYTo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgW2Rpc2FibGVkXS5pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgZmllbGRzZXRbZGlzYWJsZWRdIC5zZWxlY3Qgc2VsZWN0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyLCAuc2VsZWN0IGZpZWxkc2V0W2Rpc2FibGVkXSBzZWxlY3Q6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIsIGZpZWxkc2V0W2Rpc2FibGVkXSAudGV4dGFyZWE6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIsIGZpZWxkc2V0W2Rpc2FibGVkXSAuaW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6IHJnYmEoMTIyLCAxMjIsIDEyMiwgMC4zKTtcXG59XFxuLnNlbGVjdCBzZWxlY3RbZGlzYWJsZWRdOi1tb3otcGxhY2Vob2xkZXIsIFtkaXNhYmxlZF0udGV4dGFyZWE6LW1vei1wbGFjZWhvbGRlciwgW2Rpc2FibGVkXS5pbnB1dDotbW96LXBsYWNlaG9sZGVyLCBmaWVsZHNldFtkaXNhYmxlZF0gLnNlbGVjdCBzZWxlY3Q6LW1vei1wbGFjZWhvbGRlciwgLnNlbGVjdCBmaWVsZHNldFtkaXNhYmxlZF0gc2VsZWN0Oi1tb3otcGxhY2Vob2xkZXIsIGZpZWxkc2V0W2Rpc2FibGVkXSAudGV4dGFyZWE6LW1vei1wbGFjZWhvbGRlciwgZmllbGRzZXRbZGlzYWJsZWRdIC5pbnB1dDotbW96LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiByZ2JhKDEyMiwgMTIyLCAxMjIsIDAuMyk7XFxufVxcbi5zZWxlY3Qgc2VsZWN0W2Rpc2FibGVkXTotbXMtaW5wdXQtcGxhY2Vob2xkZXIsIFtkaXNhYmxlZF0udGV4dGFyZWE6LW1zLWlucHV0LXBsYWNlaG9sZGVyLCBbZGlzYWJsZWRdLmlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciwgZmllbGRzZXRbZGlzYWJsZWRdIC5zZWxlY3Qgc2VsZWN0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciwgLnNlbGVjdCBmaWVsZHNldFtkaXNhYmxlZF0gc2VsZWN0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciwgZmllbGRzZXRbZGlzYWJsZWRdIC50ZXh0YXJlYTotbXMtaW5wdXQtcGxhY2Vob2xkZXIsIGZpZWxkc2V0W2Rpc2FibGVkXSAuaW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiByZ2JhKDEyMiwgMTIyLCAxMjIsIDAuMyk7XFxufVxcblxcbi50ZXh0YXJlYSwgLmlucHV0IHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMC4wNjI1ZW0gMC4xMjVlbSByZ2JhKDEwLCAxMCwgMTAsIDAuMDUpO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbltyZWFkb25seV0udGV4dGFyZWEsIFtyZWFkb25seV0uaW5wdXQge1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuLmlzLXdoaXRlLnRleHRhcmVhLCAuaXMtd2hpdGUuaW5wdXQge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uaXMtd2hpdGUudGV4dGFyZWE6Zm9jdXMsIC5pcy13aGl0ZS5pbnB1dDpmb2N1cywgLmlzLXdoaXRlLmlzLWZvY3VzZWQudGV4dGFyZWEsIC5pcy13aGl0ZS5pcy1mb2N1c2VkLmlucHV0LCAuaXMtd2hpdGUudGV4dGFyZWE6YWN0aXZlLCAuaXMtd2hpdGUuaW5wdXQ6YWN0aXZlLCAuaXMtd2hpdGUuaXMtYWN0aXZlLnRleHRhcmVhLCAuaXMtd2hpdGUuaXMtYWN0aXZlLmlucHV0IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTtcXG59XFxuLmlzLWJsYWNrLnRleHRhcmVhLCAuaXMtYmxhY2suaW5wdXQge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLmlzLWJsYWNrLnRleHRhcmVhOmZvY3VzLCAuaXMtYmxhY2suaW5wdXQ6Zm9jdXMsIC5pcy1ibGFjay5pcy1mb2N1c2VkLnRleHRhcmVhLCAuaXMtYmxhY2suaXMtZm9jdXNlZC5pbnB1dCwgLmlzLWJsYWNrLnRleHRhcmVhOmFjdGl2ZSwgLmlzLWJsYWNrLmlucHV0OmFjdGl2ZSwgLmlzLWJsYWNrLmlzLWFjdGl2ZS50ZXh0YXJlYSwgLmlzLWJsYWNrLmlzLWFjdGl2ZS5pbnB1dCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoMTAsIDEwLCAxMCwgMC4yNSk7XFxufVxcbi5pcy1saWdodC50ZXh0YXJlYSwgLmlzLWxpZ2h0LmlucHV0IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4uaXMtbGlnaHQudGV4dGFyZWE6Zm9jdXMsIC5pcy1saWdodC5pbnB1dDpmb2N1cywgLmlzLWxpZ2h0LmlzLWZvY3VzZWQudGV4dGFyZWEsIC5pcy1saWdodC5pcy1mb2N1c2VkLmlucHV0LCAuaXMtbGlnaHQudGV4dGFyZWE6YWN0aXZlLCAuaXMtbGlnaHQuaW5wdXQ6YWN0aXZlLCAuaXMtbGlnaHQuaXMtYWN0aXZlLnRleHRhcmVhLCAuaXMtbGlnaHQuaXMtYWN0aXZlLmlucHV0IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSgyNDUsIDI0NSwgMjQ1LCAwLjI1KTtcXG59XFxuLmlzLWRhcmsudGV4dGFyZWEsIC5pcy1kYXJrLmlucHV0IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uaXMtZGFyay50ZXh0YXJlYTpmb2N1cywgLmlzLWRhcmsuaW5wdXQ6Zm9jdXMsIC5pcy1kYXJrLmlzLWZvY3VzZWQudGV4dGFyZWEsIC5pcy1kYXJrLmlzLWZvY3VzZWQuaW5wdXQsIC5pcy1kYXJrLnRleHRhcmVhOmFjdGl2ZSwgLmlzLWRhcmsuaW5wdXQ6YWN0aXZlLCAuaXMtZGFyay5pcy1hY3RpdmUudGV4dGFyZWEsIC5pcy1kYXJrLmlzLWFjdGl2ZS5pbnB1dCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoNTQsIDU0LCA1NCwgMC4yNSk7XFxufVxcbi5pcy1wcmltYXJ5LnRleHRhcmVhLCAuaXMtcHJpbWFyeS5pbnB1dCB7XFxuICBib3JkZXItY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxufVxcbi5pcy1wcmltYXJ5LnRleHRhcmVhOmZvY3VzLCAuaXMtcHJpbWFyeS5pbnB1dDpmb2N1cywgLmlzLXByaW1hcnkuaXMtZm9jdXNlZC50ZXh0YXJlYSwgLmlzLXByaW1hcnkuaXMtZm9jdXNlZC5pbnB1dCwgLmlzLXByaW1hcnkudGV4dGFyZWE6YWN0aXZlLCAuaXMtcHJpbWFyeS5pbnB1dDphY3RpdmUsIC5pcy1wcmltYXJ5LmlzLWFjdGl2ZS50ZXh0YXJlYSwgLmlzLXByaW1hcnkuaXMtYWN0aXZlLmlucHV0IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSgwLCAyMDksIDE3OCwgMC4yNSk7XFxufVxcbi5pcy1saW5rLnRleHRhcmVhLCAuaXMtbGluay5pbnB1dCB7XFxuICBib3JkZXItY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG59XFxuLmlzLWxpbmsudGV4dGFyZWE6Zm9jdXMsIC5pcy1saW5rLmlucHV0OmZvY3VzLCAuaXMtbGluay5pcy1mb2N1c2VkLnRleHRhcmVhLCAuaXMtbGluay5pcy1mb2N1c2VkLmlucHV0LCAuaXMtbGluay50ZXh0YXJlYTphY3RpdmUsIC5pcy1saW5rLmlucHV0OmFjdGl2ZSwgLmlzLWxpbmsuaXMtYWN0aXZlLnRleHRhcmVhLCAuaXMtbGluay5pcy1hY3RpdmUuaW5wdXQge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4xMjVlbSByZ2JhKDcyLCA5NSwgMTk5LCAwLjI1KTtcXG59XFxuLmlzLWluZm8udGV4dGFyZWEsIC5pcy1pbmZvLmlucHV0IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbn1cXG4uaXMtaW5mby50ZXh0YXJlYTpmb2N1cywgLmlzLWluZm8uaW5wdXQ6Zm9jdXMsIC5pcy1pbmZvLmlzLWZvY3VzZWQudGV4dGFyZWEsIC5pcy1pbmZvLmlzLWZvY3VzZWQuaW5wdXQsIC5pcy1pbmZvLnRleHRhcmVhOmFjdGl2ZSwgLmlzLWluZm8uaW5wdXQ6YWN0aXZlLCAuaXMtaW5mby5pcy1hY3RpdmUudGV4dGFyZWEsIC5pcy1pbmZvLmlzLWFjdGl2ZS5pbnB1dCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoNjIsIDE0MiwgMjA4LCAwLjI1KTtcXG59XFxuLmlzLXN1Y2Nlc3MudGV4dGFyZWEsIC5pcy1zdWNjZXNzLmlucHV0IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbn1cXG4uaXMtc3VjY2Vzcy50ZXh0YXJlYTpmb2N1cywgLmlzLXN1Y2Nlc3MuaW5wdXQ6Zm9jdXMsIC5pcy1zdWNjZXNzLmlzLWZvY3VzZWQudGV4dGFyZWEsIC5pcy1zdWNjZXNzLmlzLWZvY3VzZWQuaW5wdXQsIC5pcy1zdWNjZXNzLnRleHRhcmVhOmFjdGl2ZSwgLmlzLXN1Y2Nlc3MuaW5wdXQ6YWN0aXZlLCAuaXMtc3VjY2Vzcy5pcy1hY3RpdmUudGV4dGFyZWEsIC5pcy1zdWNjZXNzLmlzLWFjdGl2ZS5pbnB1dCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoNzIsIDE5OSwgMTQyLCAwLjI1KTtcXG59XFxuLmlzLXdhcm5pbmcudGV4dGFyZWEsIC5pcy13YXJuaW5nLmlucHV0IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbn1cXG4uaXMtd2FybmluZy50ZXh0YXJlYTpmb2N1cywgLmlzLXdhcm5pbmcuaW5wdXQ6Zm9jdXMsIC5pcy13YXJuaW5nLmlzLWZvY3VzZWQudGV4dGFyZWEsIC5pcy13YXJuaW5nLmlzLWZvY3VzZWQuaW5wdXQsIC5pcy13YXJuaW5nLnRleHRhcmVhOmFjdGl2ZSwgLmlzLXdhcm5pbmcuaW5wdXQ6YWN0aXZlLCAuaXMtd2FybmluZy5pcy1hY3RpdmUudGV4dGFyZWEsIC5pcy13YXJuaW5nLmlzLWFjdGl2ZS5pbnB1dCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoMjU1LCAyMjQsIDEzOCwgMC4yNSk7XFxufVxcbi5pcy1kYW5nZXIudGV4dGFyZWEsIC5pcy1kYW5nZXIuaW5wdXQge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxufVxcbi5pcy1kYW5nZXIudGV4dGFyZWE6Zm9jdXMsIC5pcy1kYW5nZXIuaW5wdXQ6Zm9jdXMsIC5pcy1kYW5nZXIuaXMtZm9jdXNlZC50ZXh0YXJlYSwgLmlzLWRhbmdlci5pcy1mb2N1c2VkLmlucHV0LCAuaXMtZGFuZ2VyLnRleHRhcmVhOmFjdGl2ZSwgLmlzLWRhbmdlci5pbnB1dDphY3RpdmUsIC5pcy1kYW5nZXIuaXMtYWN0aXZlLnRleHRhcmVhLCAuaXMtZGFuZ2VyLmlzLWFjdGl2ZS5pbnB1dCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoMjQxLCA3MCwgMTA0LCAwLjI1KTtcXG59XFxuLmlzLXNtYWxsLnRleHRhcmVhLCAuaXMtc21hbGwuaW5wdXQge1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgZm9udC1zaXplOiAwLjc1cmVtO1xcbn1cXG4uaXMtbWVkaXVtLnRleHRhcmVhLCAuaXMtbWVkaXVtLmlucHV0IHtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG59XFxuLmlzLWxhcmdlLnRleHRhcmVhLCAuaXMtbGFyZ2UuaW5wdXQge1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxufVxcbi5pcy1mdWxsd2lkdGgudGV4dGFyZWEsIC5pcy1mdWxsd2lkdGguaW5wdXQge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLmlzLWlubGluZS50ZXh0YXJlYSwgLmlzLWlubGluZS5pbnB1dCB7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxuICB3aWR0aDogYXV0bztcXG59XFxuXFxuLmlucHV0LmlzLXJvdW5kZWQge1xcbiAgYm9yZGVyLXJhZGl1czogOTk5OXB4O1xcbiAgcGFkZGluZy1sZWZ0OiBjYWxjKGNhbGMoMC43NWVtIC0gMXB4KSArIDAuMzc1ZW0pO1xcbiAgcGFkZGluZy1yaWdodDogY2FsYyhjYWxjKDAuNzVlbSAtIDFweCkgKyAwLjM3NWVtKTtcXG59XFxuLmlucHV0LmlzLXN0YXRpYyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3gtc2hhZG93OiBub25lO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgcGFkZGluZy1yaWdodDogMDtcXG59XFxuXFxuLnRleHRhcmVhIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgbWluLXdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogY2FsYygwLjc1ZW0gLSAxcHgpO1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcXG59XFxuLnRleHRhcmVhOm5vdChbcm93c10pIHtcXG4gIG1heC1oZWlnaHQ6IDQwZW07XFxuICBtaW4taGVpZ2h0OiA4ZW07XFxufVxcbi50ZXh0YXJlYVtyb3dzXSB7XFxuICBoZWlnaHQ6IGluaXRpYWw7XFxufVxcbi50ZXh0YXJlYS5oYXMtZml4ZWQtc2l6ZSB7XFxuICByZXNpemU6IG5vbmU7XFxufVxcblxcbi5yYWRpbywgLmNoZWNrYm94IHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGxpbmUtaGVpZ2h0OiAxLjI1O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ucmFkaW8gaW5wdXQsIC5jaGVja2JveCBpbnB1dCB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5yYWRpbzpob3ZlciwgLmNoZWNrYm94OmhvdmVyIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbltkaXNhYmxlZF0ucmFkaW8sIFtkaXNhYmxlZF0uY2hlY2tib3gsIGZpZWxkc2V0W2Rpc2FibGVkXSAucmFkaW8sIGZpZWxkc2V0W2Rpc2FibGVkXSAuY2hlY2tib3gsXFxuLnJhZGlvIGlucHV0W2Rpc2FibGVkXSxcXG4uY2hlY2tib3ggaW5wdXRbZGlzYWJsZWRdIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQ4JSk7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG5cXG4ucmFkaW8gKyAucmFkaW8ge1xcbiAgbWFyZ2luLWxlZnQ6IDAuNWVtO1xcbn1cXG5cXG4uc2VsZWN0IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxufVxcbi5zZWxlY3Q6bm90KC5pcy1tdWx0aXBsZSkge1xcbiAgaGVpZ2h0OiAyLjVlbTtcXG59XFxuLnNlbGVjdDpub3QoLmlzLW11bHRpcGxlKTpub3QoLmlzLWxvYWRpbmcpOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIHJpZ2h0OiAxLjEyNWVtO1xcbiAgei1pbmRleDogNDtcXG59XFxuLnNlbGVjdC5pcy1yb3VuZGVkIHNlbGVjdCB7XFxuICBib3JkZXItcmFkaXVzOiA5OTk5cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDFlbTtcXG59XFxuLnNlbGVjdCBzZWxlY3Qge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXNpemU6IDFlbTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcbi5zZWxlY3Qgc2VsZWN0OjotbXMtZXhwYW5kIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5zZWxlY3Qgc2VsZWN0W2Rpc2FibGVkXTpob3ZlciwgZmllbGRzZXRbZGlzYWJsZWRdIC5zZWxlY3Qgc2VsZWN0OmhvdmVyIHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4uc2VsZWN0IHNlbGVjdDpub3QoW211bHRpcGxlXSkge1xcbiAgcGFkZGluZy1yaWdodDogMi41ZW07XFxufVxcbi5zZWxlY3Qgc2VsZWN0W211bHRpcGxlXSB7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4uc2VsZWN0IHNlbGVjdFttdWx0aXBsZV0gb3B0aW9uIHtcXG4gIHBhZGRpbmc6IDAuNWVtIDFlbTtcXG59XFxuLnNlbGVjdDpub3QoLmlzLW11bHRpcGxlKTpub3QoLmlzLWxvYWRpbmcpOmhvdmVyOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG59XFxuLnNlbGVjdC5pcy13aGl0ZTpub3QoOmhvdmVyKTo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uc2VsZWN0LmlzLXdoaXRlIHNlbGVjdCB7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5zZWxlY3QuaXMtd2hpdGUgc2VsZWN0OmhvdmVyLCAuc2VsZWN0LmlzLXdoaXRlIHNlbGVjdC5pcy1ob3ZlcmVkIHtcXG4gIGJvcmRlci1jb2xvcjogI2YyZjJmMjtcXG59XFxuLnNlbGVjdC5pcy13aGl0ZSBzZWxlY3Q6Zm9jdXMsIC5zZWxlY3QuaXMtd2hpdGUgc2VsZWN0LmlzLWZvY3VzZWQsIC5zZWxlY3QuaXMtd2hpdGUgc2VsZWN0OmFjdGl2ZSwgLnNlbGVjdC5pcy13aGl0ZSBzZWxlY3QuaXMtYWN0aXZlIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTtcXG59XFxuLnNlbGVjdC5pcy1ibGFjazpub3QoOmhvdmVyKTo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLnNlbGVjdC5pcy1ibGFjayBzZWxlY3Qge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLnNlbGVjdC5pcy1ibGFjayBzZWxlY3Q6aG92ZXIsIC5zZWxlY3QuaXMtYmxhY2sgc2VsZWN0LmlzLWhvdmVyZWQge1xcbiAgYm9yZGVyLWNvbG9yOiBibGFjaztcXG59XFxuLnNlbGVjdC5pcy1ibGFjayBzZWxlY3Q6Zm9jdXMsIC5zZWxlY3QuaXMtYmxhY2sgc2VsZWN0LmlzLWZvY3VzZWQsIC5zZWxlY3QuaXMtYmxhY2sgc2VsZWN0OmFjdGl2ZSwgLnNlbGVjdC5pcy1ibGFjayBzZWxlY3QuaXMtYWN0aXZlIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSgxMCwgMTAsIDEwLCAwLjI1KTtcXG59XFxuLnNlbGVjdC5pcy1saWdodDpub3QoOmhvdmVyKTo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxufVxcbi5zZWxlY3QuaXMtbGlnaHQgc2VsZWN0IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4uc2VsZWN0LmlzLWxpZ2h0IHNlbGVjdDpob3ZlciwgLnNlbGVjdC5pcy1saWdodCBzZWxlY3QuaXMtaG92ZXJlZCB7XFxuICBib3JkZXItY29sb3I6ICNlOGU4ZTg7XFxufVxcbi5zZWxlY3QuaXMtbGlnaHQgc2VsZWN0OmZvY3VzLCAuc2VsZWN0LmlzLWxpZ2h0IHNlbGVjdC5pcy1mb2N1c2VkLCAuc2VsZWN0LmlzLWxpZ2h0IHNlbGVjdDphY3RpdmUsIC5zZWxlY3QuaXMtbGlnaHQgc2VsZWN0LmlzLWFjdGl2ZSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoMjQ1LCAyNDUsIDI0NSwgMC4yNSk7XFxufVxcbi5zZWxlY3QuaXMtZGFyazpub3QoOmhvdmVyKTo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5zZWxlY3QuaXMtZGFyayBzZWxlY3Qge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5zZWxlY3QuaXMtZGFyayBzZWxlY3Q6aG92ZXIsIC5zZWxlY3QuaXMtZGFyayBzZWxlY3QuaXMtaG92ZXJlZCB7XFxuICBib3JkZXItY29sb3I6ICMyOTI5Mjk7XFxufVxcbi5zZWxlY3QuaXMtZGFyayBzZWxlY3Q6Zm9jdXMsIC5zZWxlY3QuaXMtZGFyayBzZWxlY3QuaXMtZm9jdXNlZCwgLnNlbGVjdC5pcy1kYXJrIHNlbGVjdDphY3RpdmUsIC5zZWxlY3QuaXMtZGFyayBzZWxlY3QuaXMtYWN0aXZlIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSg1NCwgNTQsIDU0LCAwLjI1KTtcXG59XFxuLnNlbGVjdC5pcy1wcmltYXJ5Om5vdCg6aG92ZXIpOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxufVxcbi5zZWxlY3QuaXMtcHJpbWFyeSBzZWxlY3Qge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbn1cXG4uc2VsZWN0LmlzLXByaW1hcnkgc2VsZWN0OmhvdmVyLCAuc2VsZWN0LmlzLXByaW1hcnkgc2VsZWN0LmlzLWhvdmVyZWQge1xcbiAgYm9yZGVyLWNvbG9yOiAjMDBiODljO1xcbn1cXG4uc2VsZWN0LmlzLXByaW1hcnkgc2VsZWN0OmZvY3VzLCAuc2VsZWN0LmlzLXByaW1hcnkgc2VsZWN0LmlzLWZvY3VzZWQsIC5zZWxlY3QuaXMtcHJpbWFyeSBzZWxlY3Q6YWN0aXZlLCAuc2VsZWN0LmlzLXByaW1hcnkgc2VsZWN0LmlzLWFjdGl2ZSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoMCwgMjA5LCAxNzgsIDAuMjUpO1xcbn1cXG4uc2VsZWN0LmlzLWxpbms6bm90KDpob3Zlcik6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbn1cXG4uc2VsZWN0LmlzLWxpbmsgc2VsZWN0IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbn1cXG4uc2VsZWN0LmlzLWxpbmsgc2VsZWN0OmhvdmVyLCAuc2VsZWN0LmlzLWxpbmsgc2VsZWN0LmlzLWhvdmVyZWQge1xcbiAgYm9yZGVyLWNvbG9yOiAjM2E1MWJiO1xcbn1cXG4uc2VsZWN0LmlzLWxpbmsgc2VsZWN0OmZvY3VzLCAuc2VsZWN0LmlzLWxpbmsgc2VsZWN0LmlzLWZvY3VzZWQsIC5zZWxlY3QuaXMtbGluayBzZWxlY3Q6YWN0aXZlLCAuc2VsZWN0LmlzLWxpbmsgc2VsZWN0LmlzLWFjdGl2ZSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoNzIsIDk1LCAxOTksIDAuMjUpO1xcbn1cXG4uc2VsZWN0LmlzLWluZm86bm90KDpob3Zlcik6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbn1cXG4uc2VsZWN0LmlzLWluZm8gc2VsZWN0IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbn1cXG4uc2VsZWN0LmlzLWluZm8gc2VsZWN0OmhvdmVyLCAuc2VsZWN0LmlzLWluZm8gc2VsZWN0LmlzLWhvdmVyZWQge1xcbiAgYm9yZGVyLWNvbG9yOiAjMzA4MmM1O1xcbn1cXG4uc2VsZWN0LmlzLWluZm8gc2VsZWN0OmZvY3VzLCAuc2VsZWN0LmlzLWluZm8gc2VsZWN0LmlzLWZvY3VzZWQsIC5zZWxlY3QuaXMtaW5mbyBzZWxlY3Q6YWN0aXZlLCAuc2VsZWN0LmlzLWluZm8gc2VsZWN0LmlzLWFjdGl2ZSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjEyNWVtIHJnYmEoNjIsIDE0MiwgMjA4LCAwLjI1KTtcXG59XFxuLnNlbGVjdC5pcy1zdWNjZXNzOm5vdCg6aG92ZXIpOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IGhzbCgxNTMsIDUzJSwgNTMlKTtcXG59XFxuLnNlbGVjdC5pcy1zdWNjZXNzIHNlbGVjdCB7XFxuICBib3JkZXItY29sb3I6IGhzbCgxNTMsIDUzJSwgNTMlKTtcXG59XFxuLnNlbGVjdC5pcy1zdWNjZXNzIHNlbGVjdDpob3ZlciwgLnNlbGVjdC5pcy1zdWNjZXNzIHNlbGVjdC5pcy1ob3ZlcmVkIHtcXG4gIGJvcmRlci1jb2xvcjogIzNhYmI4MTtcXG59XFxuLnNlbGVjdC5pcy1zdWNjZXNzIHNlbGVjdDpmb2N1cywgLnNlbGVjdC5pcy1zdWNjZXNzIHNlbGVjdC5pcy1mb2N1c2VkLCAuc2VsZWN0LmlzLXN1Y2Nlc3Mgc2VsZWN0OmFjdGl2ZSwgLnNlbGVjdC5pcy1zdWNjZXNzIHNlbGVjdC5pcy1hY3RpdmUge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4xMjVlbSByZ2JhKDcyLCAxOTksIDE0MiwgMC4yNSk7XFxufVxcbi5zZWxlY3QuaXMtd2FybmluZzpub3QoOmhvdmVyKTo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxufVxcbi5zZWxlY3QuaXMtd2FybmluZyBzZWxlY3Qge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxufVxcbi5zZWxlY3QuaXMtd2FybmluZyBzZWxlY3Q6aG92ZXIsIC5zZWxlY3QuaXMtd2FybmluZyBzZWxlY3QuaXMtaG92ZXJlZCB7XFxuICBib3JkZXItY29sb3I6ICNmZmQ5NzA7XFxufVxcbi5zZWxlY3QuaXMtd2FybmluZyBzZWxlY3Q6Zm9jdXMsIC5zZWxlY3QuaXMtd2FybmluZyBzZWxlY3QuaXMtZm9jdXNlZCwgLnNlbGVjdC5pcy13YXJuaW5nIHNlbGVjdDphY3RpdmUsIC5zZWxlY3QuaXMtd2FybmluZyBzZWxlY3QuaXMtYWN0aXZlIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSgyNTUsIDIyNCwgMTM4LCAwLjI1KTtcXG59XFxuLnNlbGVjdC5pcy1kYW5nZXI6bm90KDpob3Zlcik6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbn1cXG4uc2VsZWN0LmlzLWRhbmdlciBzZWxlY3Qge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxufVxcbi5zZWxlY3QuaXMtZGFuZ2VyIHNlbGVjdDpob3ZlciwgLnNlbGVjdC5pcy1kYW5nZXIgc2VsZWN0LmlzLWhvdmVyZWQge1xcbiAgYm9yZGVyLWNvbG9yOiAjZWYyZTU1O1xcbn1cXG4uc2VsZWN0LmlzLWRhbmdlciBzZWxlY3Q6Zm9jdXMsIC5zZWxlY3QuaXMtZGFuZ2VyIHNlbGVjdC5pcy1mb2N1c2VkLCAuc2VsZWN0LmlzLWRhbmdlciBzZWxlY3Q6YWN0aXZlLCAuc2VsZWN0LmlzLWRhbmdlciBzZWxlY3QuaXMtYWN0aXZlIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMTI1ZW0gcmdiYSgyNDEsIDcwLCAxMDQsIDAuMjUpO1xcbn1cXG4uc2VsZWN0LmlzLXNtYWxsIHtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG59XFxuLnNlbGVjdC5pcy1tZWRpdW0ge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG4uc2VsZWN0LmlzLWxhcmdlIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG4uc2VsZWN0LmlzLWRpc2FibGVkOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgNDglKSAhaW1wb3J0YW50O1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG4uc2VsZWN0LmlzLWZ1bGx3aWR0aCB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnNlbGVjdC5pcy1mdWxsd2lkdGggc2VsZWN0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uc2VsZWN0LmlzLWxvYWRpbmc6OmFmdGVyIHtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMC42MjVlbTtcXG4gIHRvcDogMC42MjVlbTtcXG4gIHRyYW5zZm9ybTogbm9uZTtcXG59XFxuLnNlbGVjdC5pcy1sb2FkaW5nLmlzLXNtYWxsOmFmdGVyIHtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG59XFxuLnNlbGVjdC5pcy1sb2FkaW5nLmlzLW1lZGl1bTphZnRlciB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcbi5zZWxlY3QuaXMtbG9hZGluZy5pcy1sYXJnZTphZnRlciB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuLmZpbGUge1xcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uZmlsZS5pcy13aGl0ZSAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5maWxlLmlzLXdoaXRlOmhvdmVyIC5maWxlLWN0YSwgLmZpbGUuaXMtd2hpdGUuaXMtaG92ZXJlZCAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5maWxlLmlzLXdoaXRlOmZvY3VzIC5maWxlLWN0YSwgLmZpbGUuaXMtd2hpdGUuaXMtZm9jdXNlZCAuZmlsZS1jdGEge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJveC1zaGFkb3c6IDAgMCAwLjVlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4uZmlsZS5pcy13aGl0ZTphY3RpdmUgLmZpbGUtY3RhLCAuZmlsZS5pcy13aGl0ZS5pcy1hY3RpdmUgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4uZmlsZS5pcy1ibGFjayAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5maWxlLmlzLWJsYWNrOmhvdmVyIC5maWxlLWN0YSwgLmZpbGUuaXMtYmxhY2suaXMtaG92ZXJlZCAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzA0MDQwNDtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLmZpbGUuaXMtYmxhY2s6Zm9jdXMgLmZpbGUtY3RhLCAuZmlsZS5pcy1ibGFjay5pcy1mb2N1c2VkIC5maWxlLWN0YSB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogMCAwIDAuNWVtIHJnYmEoMTAsIDEwLCAxMCwgMC4yNSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLmZpbGUuaXMtYmxhY2s6YWN0aXZlIC5maWxlLWN0YSwgLmZpbGUuaXMtYmxhY2suaXMtYWN0aXZlIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLmZpbGUuaXMtbGlnaHQgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uZmlsZS5pcy1saWdodDpob3ZlciAuZmlsZS1jdGEsIC5maWxlLmlzLWxpZ2h0LmlzLWhvdmVyZWQgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZWVlZWU7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLmZpbGUuaXMtbGlnaHQ6Zm9jdXMgLmZpbGUtY3RhLCAuZmlsZS5pcy1saWdodC5pcy1mb2N1c2VkIC5maWxlLWN0YSB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogMCAwIDAuNWVtIHJnYmEoMjQ1LCAyNDUsIDI0NSwgMC4yNSk7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uZmlsZS5pcy1saWdodDphY3RpdmUgLmZpbGUtY3RhLCAuZmlsZS5pcy1saWdodC5pcy1hY3RpdmUgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOGU4ZTg7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLmZpbGUuaXMtZGFyayAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZmlsZS5pcy1kYXJrOmhvdmVyIC5maWxlLWN0YSwgLmZpbGUuaXMtZGFyay5pcy1ob3ZlcmVkIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmYyZjJmO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZmlsZS5pcy1kYXJrOmZvY3VzIC5maWxlLWN0YSwgLmZpbGUuaXMtZGFyay5pcy1mb2N1c2VkIC5maWxlLWN0YSB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogMCAwIDAuNWVtIHJnYmEoNTQsIDU0LCA1NCwgMC4yNSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmZpbGUuaXMtZGFyazphY3RpdmUgLmZpbGUtY3RhLCAuZmlsZS5pcy1kYXJrLmlzLWFjdGl2ZSAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI5MjkyOTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmZpbGUuaXMtcHJpbWFyeSAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmZpbGUuaXMtcHJpbWFyeTpob3ZlciAuZmlsZS1jdGEsIC5maWxlLmlzLXByaW1hcnkuaXMtaG92ZXJlZCAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwYzRhNztcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmZpbGUuaXMtcHJpbWFyeTpmb2N1cyAuZmlsZS1jdGEsIC5maWxlLmlzLXByaW1hcnkuaXMtZm9jdXNlZCAuZmlsZS1jdGEge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJveC1zaGFkb3c6IDAgMCAwLjVlbSByZ2JhKDAsIDIwOSwgMTc4LCAwLjI1KTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZmlsZS5pcy1wcmltYXJ5OmFjdGl2ZSAuZmlsZS1jdGEsIC5maWxlLmlzLXByaW1hcnkuaXMtYWN0aXZlIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiODljO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZmlsZS5pcy1saW5rIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5maWxlLmlzLWxpbms6aG92ZXIgLmZpbGUtY3RhLCAuZmlsZS5pcy1saW5rLmlzLWhvdmVyZWQgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzZTU2YzQ7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5maWxlLmlzLWxpbms6Zm9jdXMgLmZpbGUtY3RhLCAuZmlsZS5pcy1saW5rLmlzLWZvY3VzZWQgLmZpbGUtY3RhIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3gtc2hhZG93OiAwIDAgMC41ZW0gcmdiYSg3MiwgOTUsIDE5OSwgMC4yNSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmZpbGUuaXMtbGluazphY3RpdmUgLmZpbGUtY3RhLCAuZmlsZS5pcy1saW5rLmlzLWFjdGl2ZSAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNhNTFiYjtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmZpbGUuaXMtaW5mbyAuZmlsZS1jdGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZmlsZS5pcy1pbmZvOmhvdmVyIC5maWxlLWN0YSwgLmZpbGUuaXMtaW5mby5pcy1ob3ZlcmVkIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQ4OGNlO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZmlsZS5pcy1pbmZvOmZvY3VzIC5maWxlLWN0YSwgLmZpbGUuaXMtaW5mby5pcy1mb2N1c2VkIC5maWxlLWN0YSB7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogMCAwIDAuNWVtIHJnYmEoNjIsIDE0MiwgMjA4LCAwLjI1KTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZmlsZS5pcy1pbmZvOmFjdGl2ZSAuZmlsZS1jdGEsIC5maWxlLmlzLWluZm8uaXMtYWN0aXZlIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzA4MmM1O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZmlsZS5pcy1zdWNjZXNzIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5maWxlLmlzLXN1Y2Nlc3M6aG92ZXIgLmZpbGUtY3RhLCAuZmlsZS5pcy1zdWNjZXNzLmlzLWhvdmVyZWQgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzZWM0ODc7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5maWxlLmlzLXN1Y2Nlc3M6Zm9jdXMgLmZpbGUtY3RhLCAuZmlsZS5pcy1zdWNjZXNzLmlzLWZvY3VzZWQgLmZpbGUtY3RhIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3gtc2hhZG93OiAwIDAgMC41ZW0gcmdiYSg3MiwgMTk5LCAxNDIsIDAuMjUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5maWxlLmlzLXN1Y2Nlc3M6YWN0aXZlIC5maWxlLWN0YSwgLmZpbGUuaXMtc3VjY2Vzcy5pcy1hY3RpdmUgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzYWJiODE7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5maWxlLmlzLXdhcm5pbmcgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCg0NCwgMTAwJSwgNzclKTtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uZmlsZS5pcy13YXJuaW5nOmhvdmVyIC5maWxlLWN0YSwgLmZpbGUuaXMtd2FybmluZy5pcy1ob3ZlcmVkIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZkYzdkO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5maWxlLmlzLXdhcm5pbmc6Zm9jdXMgLmZpbGUtY3RhLCAuZmlsZS5pcy13YXJuaW5nLmlzLWZvY3VzZWQgLmZpbGUtY3RhIHtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3gtc2hhZG93OiAwIDAgMC41ZW0gcmdiYSgyNTUsIDIyNCwgMTM4LCAwLjI1KTtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5maWxlLmlzLXdhcm5pbmc6YWN0aXZlIC5maWxlLWN0YSwgLmZpbGUuaXMtd2FybmluZy5pcy1hY3RpdmUgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmQ5NzA7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLmZpbGUuaXMtZGFuZ2VyIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5maWxlLmlzLWRhbmdlcjpob3ZlciAuZmlsZS1jdGEsIC5maWxlLmlzLWRhbmdlci5pcy1ob3ZlcmVkIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjAzYTVmO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZmlsZS5pcy1kYW5nZXI6Zm9jdXMgLmZpbGUtY3RhLCAuZmlsZS5pcy1kYW5nZXIuaXMtZm9jdXNlZCAuZmlsZS1jdGEge1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJveC1zaGFkb3c6IDAgMCAwLjVlbSByZ2JhKDI0MSwgNzAsIDEwNCwgMC4yNSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmZpbGUuaXMtZGFuZ2VyOmFjdGl2ZSAuZmlsZS1jdGEsIC5maWxlLmlzLWRhbmdlci5pcy1hY3RpdmUgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZjJlNTU7XFxuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5maWxlLmlzLXNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG59XFxuLmZpbGUuaXMtbm9ybWFsIHtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuLmZpbGUuaXMtbWVkaXVtIHtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG59XFxuLmZpbGUuaXMtbWVkaXVtIC5maWxlLWljb24gLmZhIHtcXG4gIGZvbnQtc2l6ZTogMjFweDtcXG59XFxuLmZpbGUuaXMtbGFyZ2Uge1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxufVxcbi5maWxlLmlzLWxhcmdlIC5maWxlLWljb24gLmZhIHtcXG4gIGZvbnQtc2l6ZTogMjhweDtcXG59XFxuLmZpbGUuaGFzLW5hbWUgLmZpbGUtY3RhIHtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxufVxcbi5maWxlLmhhcy1uYW1lIC5maWxlLW5hbWUge1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxufVxcbi5maWxlLmhhcy1uYW1lLmlzLWVtcHR5IC5maWxlLWN0YSB7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbi5maWxlLmhhcy1uYW1lLmlzLWVtcHR5IC5maWxlLW5hbWUge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLmZpbGUuaXMtYm94ZWQgLmZpbGUtbGFiZWwge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuLmZpbGUuaXMtYm94ZWQgLmZpbGUtY3RhIHtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBoZWlnaHQ6IGF1dG87XFxuICBwYWRkaW5nOiAxZW0gM2VtO1xcbn1cXG4uZmlsZS5pcy1ib3hlZCAuZmlsZS1uYW1lIHtcXG4gIGJvcmRlci13aWR0aDogMCAxcHggMXB4O1xcbn1cXG4uZmlsZS5pcy1ib3hlZCAuZmlsZS1pY29uIHtcXG4gIGhlaWdodDogMS41ZW07XFxuICB3aWR0aDogMS41ZW07XFxufVxcbi5maWxlLmlzLWJveGVkIC5maWxlLWljb24gLmZhIHtcXG4gIGZvbnQtc2l6ZTogMjFweDtcXG59XFxuLmZpbGUuaXMtYm94ZWQuaXMtc21hbGwgLmZpbGUtaWNvbiAuZmEge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG4uZmlsZS5pcy1ib3hlZC5pcy1tZWRpdW0gLmZpbGUtaWNvbiAuZmEge1xcbiAgZm9udC1zaXplOiAyOHB4O1xcbn1cXG4uZmlsZS5pcy1ib3hlZC5pcy1sYXJnZSAuZmlsZS1pY29uIC5mYSB7XFxuICBmb250LXNpemU6IDM1cHg7XFxufVxcbi5maWxlLmlzLWJveGVkLmhhcy1uYW1lIC5maWxlLWN0YSB7XFxuICBib3JkZXItcmFkaXVzOiA0cHggNHB4IDAgMDtcXG59XFxuLmZpbGUuaXMtYm94ZWQuaGFzLW5hbWUgLmZpbGUtbmFtZSB7XFxuICBib3JkZXItcmFkaXVzOiAwIDAgNHB4IDRweDtcXG4gIGJvcmRlci13aWR0aDogMCAxcHggMXB4O1xcbn1cXG4uZmlsZS5pcy1jZW50ZXJlZCB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuLmZpbGUuaXMtZnVsbHdpZHRoIC5maWxlLWxhYmVsIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZmlsZS5pcy1mdWxsd2lkdGggLmZpbGUtbmFtZSB7XFxuICBmbGV4LWdyb3c6IDE7XFxuICBtYXgtd2lkdGg6IG5vbmU7XFxufVxcbi5maWxlLmlzLXJpZ2h0IHtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxufVxcbi5maWxlLmlzLXJpZ2h0IC5maWxlLWN0YSB7XFxuICBib3JkZXItcmFkaXVzOiAwIDRweCA0cHggMDtcXG59XFxuLmZpbGUuaXMtcmlnaHQgLmZpbGUtbmFtZSB7XFxuICBib3JkZXItcmFkaXVzOiA0cHggMCAwIDRweDtcXG4gIGJvcmRlci13aWR0aDogMXB4IDAgMXB4IDFweDtcXG4gIG9yZGVyOiAtMTtcXG59XFxuXFxuLmZpbGUtbGFiZWwge1xcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmZpbGUtbGFiZWw6aG92ZXIgLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZWVlZWU7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uZmlsZS1sYWJlbDpob3ZlciAuZmlsZS1uYW1lIHtcXG4gIGJvcmRlci1jb2xvcjogI2Q1ZDVkNTtcXG59XFxuLmZpbGUtbGFiZWw6YWN0aXZlIC5maWxlLWN0YSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZThlOGU4O1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG59XFxuLmZpbGUtbGFiZWw6YWN0aXZlIC5maWxlLW5hbWUge1xcbiAgYm9yZGVyLWNvbG9yOiAjY2ZjZmNmO1xcbn1cXG5cXG4uZmlsZS1pbnB1dCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBsZWZ0OiAwO1xcbiAgb3BhY2l0eTogMDtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLmZpbGUtY3RhLFxcbi5maWxlLW5hbWUge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDg2JSk7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBmb250LXNpemU6IDFlbTtcXG4gIHBhZGRpbmctbGVmdDogMWVtO1xcbiAgcGFkZGluZy1yaWdodDogMWVtO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuXFxuLmZpbGUtY3RhIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDI5JSk7XFxufVxcblxcbi5maWxlLW5hbWUge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDg2JSk7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLXdpZHRoOiAxcHggMXB4IDFweCAwO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXgtd2lkdGg6IDE2ZW07XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1hbGlnbjogaW5oZXJpdDtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbn1cXG5cXG4uZmlsZS1pY29uIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAxZW07XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG1hcmdpbi1yaWdodDogMC41ZW07XFxuICB3aWR0aDogMWVtO1xcbn1cXG4uZmlsZS1pY29uIC5mYSB7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi5sYWJlbCB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBmb250LXdlaWdodDogNzAwO1xcbn1cXG4ubGFiZWw6bm90KDpsYXN0LWNoaWxkKSB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcXG59XFxuLmxhYmVsLmlzLXNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG59XFxuLmxhYmVsLmlzLW1lZGl1bSB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcbi5sYWJlbC5pcy1sYXJnZSB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuLmhlbHAge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXNpemU6IDAuNzVyZW07XFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtO1xcbn1cXG4uaGVscC5pcy13aGl0ZSB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLmhlbHAuaXMtYmxhY2sge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4uaGVscC5pcy1saWdodCB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4uaGVscC5pcy1kYXJrIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5oZWxwLmlzLXByaW1hcnkge1xcbiAgY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxufVxcbi5oZWxwLmlzLWxpbmsge1xcbiAgY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG59XFxuLmhlbHAuaXMtaW5mbyB7XFxuICBjb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbn1cXG4uaGVscC5pcy1zdWNjZXNzIHtcXG4gIGNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxufVxcbi5oZWxwLmlzLXdhcm5pbmcge1xcbiAgY29sb3I6IGhzbCg0NCwgMTAwJSwgNzclKTtcXG59XFxuLmhlbHAuaXMtZGFuZ2VyIHtcXG4gIGNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxufVxcblxcbi5maWVsZDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNzVyZW07XFxufVxcbi5maWVsZC5oYXMtYWRkb25zIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcbi5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLXJpZ2h0OiAtMXB4O1xcbn1cXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbDpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpIC5idXR0b24sXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2w6bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKSAuaW5wdXQsXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2w6bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKSAuc2VsZWN0IHNlbGVjdCB7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbn1cXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbDpmaXJzdC1jaGlsZDpub3QoOm9ubHktY2hpbGQpIC5idXR0b24sXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2w6Zmlyc3QtY2hpbGQ6bm90KDpvbmx5LWNoaWxkKSAuaW5wdXQsXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2w6Zmlyc3QtY2hpbGQ6bm90KDpvbmx5LWNoaWxkKSAuc2VsZWN0IHNlbGVjdCB7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbn1cXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbDpsYXN0LWNoaWxkOm5vdCg6b25seS1jaGlsZCkgLmJ1dHRvbixcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbDpsYXN0LWNoaWxkOm5vdCg6b25seS1jaGlsZCkgLmlucHV0LFxcbi5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sOmxhc3QtY2hpbGQ6bm90KDpvbmx5LWNoaWxkKSAuc2VsZWN0IHNlbGVjdCB7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG59XFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2wgLmJ1dHRvbjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sIC5idXR0b246bm90KFtkaXNhYmxlZF0pLmlzLWhvdmVyZWQsXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2wgLmlucHV0Om5vdChbZGlzYWJsZWRdKTpob3ZlcixcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuaW5wdXQ6bm90KFtkaXNhYmxlZF0pLmlzLWhvdmVyZWQsXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2wgLnNlbGVjdCBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pOmhvdmVyLFxcbi5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sIC5zZWxlY3Qgc2VsZWN0Om5vdChbZGlzYWJsZWRdKS5pcy1ob3ZlcmVkIHtcXG4gIHotaW5kZXg6IDI7XFxufVxcbi5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sIC5idXR0b246bm90KFtkaXNhYmxlZF0pOmZvY3VzLCAuZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuYnV0dG9uOm5vdChbZGlzYWJsZWRdKS5pcy1mb2N1c2VkLCAuZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuYnV0dG9uOm5vdChbZGlzYWJsZWRdKTphY3RpdmUsIC5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sIC5idXR0b246bm90KFtkaXNhYmxlZF0pLmlzLWFjdGl2ZSxcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuaW5wdXQ6bm90KFtkaXNhYmxlZF0pOmZvY3VzLFxcbi5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sIC5pbnB1dDpub3QoW2Rpc2FibGVkXSkuaXMtZm9jdXNlZCxcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuaW5wdXQ6bm90KFtkaXNhYmxlZF0pOmFjdGl2ZSxcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuaW5wdXQ6bm90KFtkaXNhYmxlZF0pLmlzLWFjdGl2ZSxcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuc2VsZWN0IHNlbGVjdDpub3QoW2Rpc2FibGVkXSk6Zm9jdXMsXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2wgLnNlbGVjdCBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLmlzLWZvY3VzZWQsXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2wgLnNlbGVjdCBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pOmFjdGl2ZSxcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuc2VsZWN0IHNlbGVjdDpub3QoW2Rpc2FibGVkXSkuaXMtYWN0aXZlIHtcXG4gIHotaW5kZXg6IDM7XFxufVxcbi5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sIC5idXR0b246bm90KFtkaXNhYmxlZF0pOmZvY3VzOmhvdmVyLCAuZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuYnV0dG9uOm5vdChbZGlzYWJsZWRdKS5pcy1mb2N1c2VkOmhvdmVyLCAuZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuYnV0dG9uOm5vdChbZGlzYWJsZWRdKTphY3RpdmU6aG92ZXIsIC5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sIC5idXR0b246bm90KFtkaXNhYmxlZF0pLmlzLWFjdGl2ZTpob3ZlcixcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuaW5wdXQ6bm90KFtkaXNhYmxlZF0pOmZvY3VzOmhvdmVyLFxcbi5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sIC5pbnB1dDpub3QoW2Rpc2FibGVkXSkuaXMtZm9jdXNlZDpob3ZlcixcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuaW5wdXQ6bm90KFtkaXNhYmxlZF0pOmFjdGl2ZTpob3ZlcixcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuaW5wdXQ6bm90KFtkaXNhYmxlZF0pLmlzLWFjdGl2ZTpob3ZlcixcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuc2VsZWN0IHNlbGVjdDpub3QoW2Rpc2FibGVkXSk6Zm9jdXM6aG92ZXIsXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2wgLnNlbGVjdCBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLmlzLWZvY3VzZWQ6aG92ZXIsXFxuLmZpZWxkLmhhcy1hZGRvbnMgLmNvbnRyb2wgLnNlbGVjdCBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pOmFjdGl2ZTpob3ZlcixcXG4uZmllbGQuaGFzLWFkZG9ucyAuY29udHJvbCAuc2VsZWN0IHNlbGVjdDpub3QoW2Rpc2FibGVkXSkuaXMtYWN0aXZlOmhvdmVyIHtcXG4gIHotaW5kZXg6IDQ7XFxufVxcbi5maWVsZC5oYXMtYWRkb25zIC5jb250cm9sLmlzLWV4cGFuZGVkIHtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGZsZXgtc2hyaW5rOiAxO1xcbn1cXG4uZmllbGQuaGFzLWFkZG9ucy5oYXMtYWRkb25zLWNlbnRlcmVkIHtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG4uZmllbGQuaGFzLWFkZG9ucy5oYXMtYWRkb25zLXJpZ2h0IHtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxufVxcbi5maWVsZC5oYXMtYWRkb25zLmhhcy1hZGRvbnMtZnVsbHdpZHRoIC5jb250cm9sIHtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbn1cXG4uZmllbGQuaXMtZ3JvdXBlZCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbn1cXG4uZmllbGQuaXMtZ3JvdXBlZCA+IC5jb250cm9sIHtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbn1cXG4uZmllbGQuaXMtZ3JvdXBlZCA+IC5jb250cm9sOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIG1hcmdpbi1yaWdodDogMC43NXJlbTtcXG59XFxuLmZpZWxkLmlzLWdyb3VwZWQgPiAuY29udHJvbC5pcy1leHBhbmRlZCB7XFxuICBmbGV4LWdyb3c6IDE7XFxuICBmbGV4LXNocmluazogMTtcXG59XFxuLmZpZWxkLmlzLWdyb3VwZWQuaXMtZ3JvdXBlZC1jZW50ZXJlZCB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuLmZpZWxkLmlzLWdyb3VwZWQuaXMtZ3JvdXBlZC1yaWdodCB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbn1cXG4uZmllbGQuaXMtZ3JvdXBlZC5pcy1ncm91cGVkLW11bHRpbGluZSB7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcbi5maWVsZC5pcy1ncm91cGVkLmlzLWdyb3VwZWQtbXVsdGlsaW5lID4gLmNvbnRyb2w6bGFzdC1jaGlsZCwgLmZpZWxkLmlzLWdyb3VwZWQuaXMtZ3JvdXBlZC1tdWx0aWxpbmUgPiAuY29udHJvbDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNzVyZW07XFxufVxcbi5maWVsZC5pcy1ncm91cGVkLmlzLWdyb3VwZWQtbXVsdGlsaW5lOmxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLWJvdHRvbTogLTAuNzVyZW07XFxufVxcbi5maWVsZC5pcy1ncm91cGVkLmlzLWdyb3VwZWQtbXVsdGlsaW5lOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuZmllbGQuaXMtaG9yaXpvbnRhbCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICB9XFxufVxcblxcbi5maWVsZC1sYWJlbCAubGFiZWwge1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmZpZWxkLWxhYmVsIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5maWVsZC1sYWJlbCB7XFxuICAgIGZsZXgtYmFzaXM6IDA7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgZmxleC1zaHJpbms6IDA7XFxuICAgIG1hcmdpbi1yaWdodDogMS41cmVtO1xcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIH1cXG4gIC5maWVsZC1sYWJlbC5pcy1zbWFsbCB7XFxuICAgIGZvbnQtc2l6ZTogMC43NXJlbTtcXG4gICAgcGFkZGluZy10b3A6IDAuMzc1ZW07XFxuICB9XFxuICAuZmllbGQtbGFiZWwuaXMtbm9ybWFsIHtcXG4gICAgcGFkZGluZy10b3A6IDAuMzc1ZW07XFxuICB9XFxuICAuZmllbGQtbGFiZWwuaXMtbWVkaXVtIHtcXG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgICBwYWRkaW5nLXRvcDogMC4zNzVlbTtcXG4gIH1cXG4gIC5maWVsZC1sYWJlbC5pcy1sYXJnZSB7XFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgICBwYWRkaW5nLXRvcDogMC4zNzVlbTtcXG4gIH1cXG59XFxuXFxuLmZpZWxkLWJvZHkgLmZpZWxkIC5maWVsZCB7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5maWVsZC1ib2R5IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1iYXNpczogMDtcXG4gICAgZmxleC1ncm93OiA1O1xcbiAgICBmbGV4LXNocmluazogMTtcXG4gIH1cXG4gIC5maWVsZC1ib2R5IC5maWVsZCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICB9XFxuICAuZmllbGQtYm9keSA+IC5maWVsZCB7XFxuICAgIGZsZXgtc2hyaW5rOiAxO1xcbiAgfVxcbiAgLmZpZWxkLWJvZHkgPiAuZmllbGQ6bm90KC5pcy1uYXJyb3cpIHtcXG4gICAgZmxleC1ncm93OiAxO1xcbiAgfVxcbiAgLmZpZWxkLWJvZHkgPiAuZmllbGQ6bm90KDpsYXN0LWNoaWxkKSB7XFxuICAgIG1hcmdpbi1yaWdodDogMC43NXJlbTtcXG4gIH1cXG59XFxuXFxuLmNvbnRyb2wge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGNsZWFyOiBib3RoO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdGV4dC1hbGlnbjogaW5oZXJpdDtcXG59XFxuLmNvbnRyb2wuaGFzLWljb25zLWxlZnQgLmlucHV0OmZvY3VzIH4gLmljb24sXFxuLmNvbnRyb2wuaGFzLWljb25zLWxlZnQgLnNlbGVjdDpmb2N1cyB+IC5pY29uLCAuY29udHJvbC5oYXMtaWNvbnMtcmlnaHQgLmlucHV0OmZvY3VzIH4gLmljb24sXFxuLmNvbnRyb2wuaGFzLWljb25zLXJpZ2h0IC5zZWxlY3Q6Zm9jdXMgfiAuaWNvbiB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyOSUpO1xcbn1cXG4uY29udHJvbC5oYXMtaWNvbnMtbGVmdCAuaW5wdXQuaXMtc21hbGwgfiAuaWNvbixcXG4uY29udHJvbC5oYXMtaWNvbnMtbGVmdCAuc2VsZWN0LmlzLXNtYWxsIH4gLmljb24sIC5jb250cm9sLmhhcy1pY29ucy1yaWdodCAuaW5wdXQuaXMtc21hbGwgfiAuaWNvbixcXG4uY29udHJvbC5oYXMtaWNvbnMtcmlnaHQgLnNlbGVjdC5pcy1zbWFsbCB+IC5pY29uIHtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG59XFxuLmNvbnRyb2wuaGFzLWljb25zLWxlZnQgLmlucHV0LmlzLW1lZGl1bSB+IC5pY29uLFxcbi5jb250cm9sLmhhcy1pY29ucy1sZWZ0IC5zZWxlY3QuaXMtbWVkaXVtIH4gLmljb24sIC5jb250cm9sLmhhcy1pY29ucy1yaWdodCAuaW5wdXQuaXMtbWVkaXVtIH4gLmljb24sXFxuLmNvbnRyb2wuaGFzLWljb25zLXJpZ2h0IC5zZWxlY3QuaXMtbWVkaXVtIH4gLmljb24ge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG4uY29udHJvbC5oYXMtaWNvbnMtbGVmdCAuaW5wdXQuaXMtbGFyZ2UgfiAuaWNvbixcXG4uY29udHJvbC5oYXMtaWNvbnMtbGVmdCAuc2VsZWN0LmlzLWxhcmdlIH4gLmljb24sIC5jb250cm9sLmhhcy1pY29ucy1yaWdodCAuaW5wdXQuaXMtbGFyZ2UgfiAuaWNvbixcXG4uY29udHJvbC5oYXMtaWNvbnMtcmlnaHQgLnNlbGVjdC5pcy1sYXJnZSB+IC5pY29uIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG4uY29udHJvbC5oYXMtaWNvbnMtbGVmdCAuaWNvbiwgLmNvbnRyb2wuaGFzLWljb25zLXJpZ2h0IC5pY29uIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDg2JSk7XFxuICBoZWlnaHQ6IDIuNWVtO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICB3aWR0aDogMi41ZW07XFxuICB6LWluZGV4OiA0O1xcbn1cXG4uY29udHJvbC5oYXMtaWNvbnMtbGVmdCAuaW5wdXQsXFxuLmNvbnRyb2wuaGFzLWljb25zLWxlZnQgLnNlbGVjdCBzZWxlY3Qge1xcbiAgcGFkZGluZy1sZWZ0OiAyLjVlbTtcXG59XFxuLmNvbnRyb2wuaGFzLWljb25zLWxlZnQgLmljb24uaXMtbGVmdCB7XFxuICBsZWZ0OiAwO1xcbn1cXG4uY29udHJvbC5oYXMtaWNvbnMtcmlnaHQgLmlucHV0LFxcbi5jb250cm9sLmhhcy1pY29ucy1yaWdodCAuc2VsZWN0IHNlbGVjdCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyLjVlbTtcXG59XFxuLmNvbnRyb2wuaGFzLWljb25zLXJpZ2h0IC5pY29uLmlzLXJpZ2h0IHtcXG4gIHJpZ2h0OiAwO1xcbn1cXG4uY29udHJvbC5pcy1sb2FkaW5nOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDtcXG4gIHJpZ2h0OiAwLjYyNWVtO1xcbiAgdG9wOiAwLjYyNWVtO1xcbiAgei1pbmRleDogNDtcXG59XFxuLmNvbnRyb2wuaXMtbG9hZGluZy5pcy1zbWFsbDphZnRlciB7XFxuICBmb250LXNpemU6IDAuNzVyZW07XFxufVxcbi5jb250cm9sLmlzLWxvYWRpbmcuaXMtbWVkaXVtOmFmdGVyIHtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG59XFxuLmNvbnRyb2wuaXMtbG9hZGluZy5pcy1sYXJnZTphZnRlciB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuLyogQnVsbWEgQ29tcG9uZW50cyAqL1xcbi5icmVhZGNydW1iIHtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcbi5icmVhZGNydW1iIGEge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBwYWRkaW5nOiAwIDAuNzVlbTtcXG59XFxuLmJyZWFkY3J1bWIgYTpob3ZlciB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4uYnJlYWRjcnVtYiBsaSB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLmJyZWFkY3J1bWIgbGk6Zmlyc3QtY2hpbGQgYSB7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxufVxcbi5icmVhZGNydW1iIGxpLmlzLWFjdGl2ZSBhIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuLmJyZWFkY3J1bWIgbGkgKyBsaTo6YmVmb3JlIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDcxJSk7XFxuICBjb250ZW50OiBcXFwiL1xcXCI7XFxufVxcbi5icmVhZGNydW1iIHVsLFxcbi5icmVhZGNydW1iIG9sIHtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuLmJyZWFkY3J1bWIgLmljb246Zmlyc3QtY2hpbGQge1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjVlbTtcXG59XFxuLmJyZWFkY3J1bWIgLmljb246bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tbGVmdDogMC41ZW07XFxufVxcbi5icmVhZGNydW1iLmlzLWNlbnRlcmVkIG9sLFxcbi5icmVhZGNydW1iLmlzLWNlbnRlcmVkIHVsIHtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG4uYnJlYWRjcnVtYi5pcy1yaWdodCBvbCxcXG4uYnJlYWRjcnVtYi5pcy1yaWdodCB1bCB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbn1cXG4uYnJlYWRjcnVtYi5pcy1zbWFsbCB7XFxuICBmb250LXNpemU6IDAuNzVyZW07XFxufVxcbi5icmVhZGNydW1iLmlzLW1lZGl1bSB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcbi5icmVhZGNydW1iLmlzLWxhcmdlIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG4uYnJlYWRjcnVtYi5oYXMtYXJyb3ctc2VwYXJhdG9yIGxpICsgbGk6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwi4oaSXFxcIjtcXG59XFxuLmJyZWFkY3J1bWIuaGFzLWJ1bGxldC1zZXBhcmF0b3IgbGkgKyBsaTo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCLigKJcXFwiO1xcbn1cXG4uYnJlYWRjcnVtYi5oYXMtZG90LXNlcGFyYXRvciBsaSArIGxpOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIsK3XFxcIjtcXG59XFxuLmJyZWFkY3J1bWIuaGFzLXN1Y2NlZWRzLXNlcGFyYXRvciBsaSArIGxpOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIuKJu1xcXCI7XFxufVxcblxcbi5jYXJkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbiAgYm94LXNoYWRvdzogMCAwLjVlbSAxZW0gLTAuMTI1ZW0gcmdiYSgxMCwgMTAsIDEwLCAwLjEpLCAwIDBweCAwIDFweCByZ2JhKDEwLCAxMCwgMTAsIDAuMDIpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmNhcmQtZm9vdGVyOmZpcnN0LWNoaWxkLCAuY2FyZC1jb250ZW50OmZpcnN0LWNoaWxkLCAuY2FyZC1oZWFkZXI6Zmlyc3QtY2hpbGQge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4yNXJlbTtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG4uY2FyZC1mb290ZXI6bGFzdC1jaGlsZCwgLmNhcmQtY29udGVudDpsYXN0LWNoaWxkLCAuY2FyZC1oZWFkZXI6bGFzdC1jaGlsZCB7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5jYXJkLWhlYWRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xcbiAgYm94LXNoYWRvdzogMCAwLjEyNWVtIDAuMjVlbSByZ2JhKDEwLCAxMCwgMTAsIDAuMSk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uY2FyZC1oZWFkZXItdGl0bGUge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIHBhZGRpbmc6IDAuNzVyZW0gMXJlbTtcXG59XFxuLmNhcmQtaGVhZGVyLXRpdGxlLmlzLWNlbnRlcmVkIHtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4uY2FyZC1oZWFkZXItaWNvbiB7XFxuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGNvbG9yOiBjdXJyZW50Q29sb3I7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBwYWRkaW5nOiAwLjc1cmVtIDFyZW07XFxufVxcblxcbi5jYXJkLWltYWdlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uY2FyZC1pbWFnZTpmaXJzdC1jaGlsZCBpbWcge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4yNXJlbTtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtO1xcbn1cXG4uY2FyZC1pbWFnZTpsYXN0LWNoaWxkIGltZyB7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxufVxcblxcbi5jYXJkLWNvbnRlbnQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBwYWRkaW5nOiAxLjVyZW07XFxufVxcblxcbi5jYXJkLWZvb3RlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCBoc2woMCwgMCUsIDkzJSk7XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5jYXJkLWZvb3Rlci1pdGVtIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1iYXNpczogMDtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBwYWRkaW5nOiAwLjc1cmVtO1xcbn1cXG4uY2FyZC1mb290ZXItaXRlbTpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIGhzbCgwLCAwJSwgOTMlKTtcXG59XFxuXFxuLmNhcmQgLm1lZGlhOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMS41cmVtO1xcbn1cXG5cXG4uZHJvcGRvd24ge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG4uZHJvcGRvd24uaXMtYWN0aXZlIC5kcm9wZG93bi1tZW51LCAuZHJvcGRvd24uaXMtaG92ZXJhYmxlOmhvdmVyIC5kcm9wZG93bi1tZW51IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4uZHJvcGRvd24uaXMtcmlnaHQgLmRyb3Bkb3duLW1lbnUge1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiAwO1xcbn1cXG4uZHJvcGRvd24uaXMtdXAgLmRyb3Bkb3duLW1lbnUge1xcbiAgYm90dG9tOiAxMDAlO1xcbiAgcGFkZGluZy1ib3R0b206IDRweDtcXG4gIHBhZGRpbmctdG9wOiBpbml0aWFsO1xcbiAgdG9wOiBhdXRvO1xcbn1cXG5cXG4uZHJvcGRvd24tbWVudSB7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgbGVmdDogMDtcXG4gIG1pbi13aWR0aDogMTJyZW07XFxuICBwYWRkaW5nLXRvcDogNHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxMDAlO1xcbiAgei1pbmRleDogMjA7XFxufVxcblxcbi5kcm9wZG93bi1jb250ZW50IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3gtc2hhZG93OiAwIDAuNWVtIDFlbSAtMC4xMjVlbSByZ2JhKDEwLCAxMCwgMTAsIDAuMSksIDAgMHB4IDAgMXB4IHJnYmEoMTAsIDEwLCAxMCwgMC4wMik7XFxuICBwYWRkaW5nLWJvdHRvbTogMC41cmVtO1xcbiAgcGFkZGluZy10b3A6IDAuNXJlbTtcXG59XFxuXFxuLmRyb3Bkb3duLWl0ZW0ge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAxcmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG5hLmRyb3Bkb3duLWl0ZW0sXFxuYnV0dG9uLmRyb3Bkb3duLWl0ZW0ge1xcbiAgcGFkZGluZy1yaWdodDogM3JlbTtcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbmEuZHJvcGRvd24taXRlbTpob3ZlcixcXG5idXR0b24uZHJvcGRvd24taXRlbTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbmEuZHJvcGRvd24taXRlbS5pcy1hY3RpdmUsXFxuYnV0dG9uLmRyb3Bkb3duLWl0ZW0uaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4uZHJvcGRvd24tZGl2aWRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDkzJSk7XFxuICBib3JkZXI6IG5vbmU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogMXB4O1xcbiAgbWFyZ2luOiAwLjVyZW0gMDtcXG59XFxuXFxuLmxldmVsIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcbi5sZXZlbCBjb2RlIHtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuLmxldmVsIGltZyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG4ubGV2ZWwuaXMtbW9iaWxlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5sZXZlbC5pcy1tb2JpbGUgLmxldmVsLWxlZnQsXFxuLmxldmVsLmlzLW1vYmlsZSAubGV2ZWwtcmlnaHQge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLmxldmVsLmlzLW1vYmlsZSAubGV2ZWwtbGVmdCArIC5sZXZlbC1yaWdodCB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbn1cXG4ubGV2ZWwuaXMtbW9iaWxlIC5sZXZlbC1pdGVtOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIG1hcmdpbi1yaWdodDogMC43NXJlbTtcXG59XFxuLmxldmVsLmlzLW1vYmlsZSAubGV2ZWwtaXRlbTpub3QoLmlzLW5hcnJvdykge1xcbiAgZmxleC1ncm93OiAxO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5sZXZlbCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICB9XFxuICAubGV2ZWwgPiAubGV2ZWwtaXRlbTpub3QoLmlzLW5hcnJvdykge1xcbiAgICBmbGV4LWdyb3c6IDE7XFxuICB9XFxufVxcblxcbi5sZXZlbC1pdGVtIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1iYXNpczogYXV0bztcXG4gIGZsZXgtZ3JvdzogMDtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi5sZXZlbC1pdGVtIC50aXRsZSxcXG4ubGV2ZWwtaXRlbSAuc3VidGl0bGUge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5sZXZlbC1pdGVtOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtO1xcbiAgfVxcbn1cXG5cXG4ubGV2ZWwtbGVmdCxcXG4ubGV2ZWwtcmlnaHQge1xcbiAgZmxleC1iYXNpczogYXV0bztcXG4gIGZsZXgtZ3JvdzogMDtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbn1cXG4ubGV2ZWwtbGVmdCAubGV2ZWwtaXRlbS5pcy1mbGV4aWJsZSxcXG4ubGV2ZWwtcmlnaHQgLmxldmVsLWl0ZW0uaXMtZmxleGlibGUge1xcbiAgZmxleC1ncm93OiAxO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5sZXZlbC1sZWZ0IC5sZXZlbC1pdGVtOm5vdCg6bGFzdC1jaGlsZCksXFxuICAubGV2ZWwtcmlnaHQgLmxldmVsLWl0ZW06bm90KDpsYXN0LWNoaWxkKSB7XFxuICAgIG1hcmdpbi1yaWdodDogMC43NXJlbTtcXG4gIH1cXG59XFxuXFxuLmxldmVsLWxlZnQge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5sZXZlbC1sZWZ0ICsgLmxldmVsLXJpZ2h0IHtcXG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5sZXZlbC1sZWZ0IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gIH1cXG59XFxuXFxuLmxldmVsLXJpZ2h0IHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5sZXZlbC1yaWdodCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICB9XFxufVxcblxcbi5tZWRpYSB7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0O1xcbn1cXG4ubWVkaWEgLmNvbnRlbnQ6bm90KDpsYXN0LWNoaWxkKSB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtO1xcbn1cXG4ubWVkaWEgLm1lZGlhIHtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDIxOSwgMjE5LCAyMTksIDAuNSk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcGFkZGluZy10b3A6IDAuNzVyZW07XFxufVxcbi5tZWRpYSAubWVkaWEgLmNvbnRlbnQ6bm90KDpsYXN0LWNoaWxkKSxcXG4ubWVkaWEgLm1lZGlhIC5jb250cm9sOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbn1cXG4ubWVkaWEgLm1lZGlhIC5tZWRpYSB7XFxuICBwYWRkaW5nLXRvcDogMC41cmVtO1xcbn1cXG4ubWVkaWEgLm1lZGlhIC5tZWRpYSArIC5tZWRpYSB7XFxuICBtYXJnaW4tdG9wOiAwLjVyZW07XFxufVxcbi5tZWRpYSArIC5tZWRpYSB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgyMTksIDIxOSwgMjE5LCAwLjUpO1xcbiAgbWFyZ2luLXRvcDogMXJlbTtcXG4gIHBhZGRpbmctdG9wOiAxcmVtO1xcbn1cXG4ubWVkaWEuaXMtbGFyZ2UgKyAubWVkaWEge1xcbiAgbWFyZ2luLXRvcDogMS41cmVtO1xcbiAgcGFkZGluZy10b3A6IDEuNXJlbTtcXG59XFxuXFxuLm1lZGlhLWxlZnQsXFxuLm1lZGlhLXJpZ2h0IHtcXG4gIGZsZXgtYmFzaXM6IGF1dG87XFxuICBmbGV4LWdyb3c6IDA7XFxuICBmbGV4LXNocmluazogMDtcXG59XFxuXFxuLm1lZGlhLWxlZnQge1xcbiAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xcbn1cXG5cXG4ubWVkaWEtcmlnaHQge1xcbiAgbWFyZ2luLWxlZnQ6IDFyZW07XFxufVxcblxcbi5tZWRpYS1jb250ZW50IHtcXG4gIGZsZXgtYmFzaXM6IGF1dG87XFxuICBmbGV4LWdyb3c6IDE7XFxuICBmbGV4LXNocmluazogMTtcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAubWVkaWEtY29udGVudCB7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxuICB9XFxufVxcbi5tZW51IHtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuLm1lbnUuaXMtc21hbGwge1xcbiAgZm9udC1zaXplOiAwLjc1cmVtO1xcbn1cXG4ubWVudS5pcy1tZWRpdW0ge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG4ubWVudS5pcy1sYXJnZSB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuLm1lbnUtbGlzdCB7XFxuICBsaW5lLWhlaWdodDogMS4yNTtcXG59XFxuLm1lbnUtbGlzdCBhIHtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDI5JSk7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmc6IDAuNWVtIDAuNzVlbTtcXG59XFxuLm1lbnUtbGlzdCBhOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5tZW51LWxpc3QgYS5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5tZW51LWxpc3QgbGkgdWwge1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCBoc2woMCwgMCUsIDg2JSk7XFxuICBtYXJnaW46IDAuNzVlbTtcXG4gIHBhZGRpbmctbGVmdDogMC43NWVtO1xcbn1cXG5cXG4ubWVudS1sYWJlbCB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0OCUpO1xcbiAgZm9udC1zaXplOiAwLjc1ZW07XFxuICBsZXR0ZXItc3BhY2luZzogMC4xZW07XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbn1cXG4ubWVudS1sYWJlbDpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICBtYXJnaW4tdG9wOiAxZW07XFxufVxcbi5tZW51LWxhYmVsOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMWVtO1xcbn1cXG5cXG4ubWVzc2FnZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBmb250LXNpemU6IDFyZW07XFxufVxcbi5tZXNzYWdlIHN0cm9uZyB7XFxuICBjb2xvcjogY3VycmVudENvbG9yO1xcbn1cXG4ubWVzc2FnZSBhOm5vdCguYnV0dG9uKTpub3QoLnRhZyk6bm90KC5kcm9wZG93bi1pdGVtKSB7XFxuICBjb2xvcjogY3VycmVudENvbG9yO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcbi5tZXNzYWdlLmlzLXNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG59XFxuLm1lc3NhZ2UuaXMtbWVkaXVtIHtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG59XFxuLm1lc3NhZ2UuaXMtbGFyZ2Uge1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxufVxcbi5tZXNzYWdlLmlzLXdoaXRlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG4ubWVzc2FnZS5pcy13aGl0ZSAubWVzc2FnZS1oZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLm1lc3NhZ2UuaXMtd2hpdGUgLm1lc3NhZ2UtYm9keSB7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5tZXNzYWdlLmlzLWJsYWNrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7XFxufVxcbi5tZXNzYWdlLmlzLWJsYWNrIC5tZXNzYWdlLWhlYWRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4ubWVzc2FnZS5pcy1ibGFjayAubWVzc2FnZS1ib2R5IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5tZXNzYWdlLmlzLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7XFxufVxcbi5tZXNzYWdlLmlzLWxpZ2h0IC5tZXNzYWdlLWhlYWRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4ubWVzc2FnZS5pcy1saWdodCAubWVzc2FnZS1ib2R5IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4ubWVzc2FnZS5pcy1kYXJrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7XFxufVxcbi5tZXNzYWdlLmlzLWRhcmsgLm1lc3NhZ2UtaGVhZGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubWVzc2FnZS5pcy1kYXJrIC5tZXNzYWdlLWJvZHkge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5tZXNzYWdlLmlzLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ViZmZmYztcXG59XFxuLm1lc3NhZ2UuaXMtcHJpbWFyeSAubWVzc2FnZS1oZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubWVzc2FnZS5pcy1wcmltYXJ5IC5tZXNzYWdlLWJvZHkge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbiAgY29sb3I6ICMwMDk0N2U7XFxufVxcbi5tZXNzYWdlLmlzLWxpbmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VmZjFmYTtcXG59XFxuLm1lc3NhZ2UuaXMtbGluayAubWVzc2FnZS1oZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5tZXNzYWdlLmlzLWxpbmsgLm1lc3NhZ2UtYm9keSB7XFxuICBib3JkZXItY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGNvbG9yOiAjMzg1MGI3O1xcbn1cXG4ubWVzc2FnZS5pcy1pbmZvIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmY1ZmI7XFxufVxcbi5tZXNzYWdlLmlzLWluZm8gLm1lc3NhZ2UtaGVhZGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubWVzc2FnZS5pcy1pbmZvIC5tZXNzYWdlLWJvZHkge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSk7XFxuICBjb2xvcjogIzI5NmZhODtcXG59XFxuLm1lc3NhZ2UuaXMtc3VjY2VzcyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZmYWY1O1xcbn1cXG4ubWVzc2FnZS5pcy1zdWNjZXNzIC5tZXNzYWdlLWhlYWRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLm1lc3NhZ2UuaXMtc3VjY2VzcyAubWVzc2FnZS1ib2R5IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICMyNTc5NTM7XFxufVxcbi5tZXNzYWdlLmlzLXdhcm5pbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmFlYjtcXG59XFxuLm1lc3NhZ2UuaXMtd2FybmluZyAubWVzc2FnZS1oZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLm1lc3NhZ2UuaXMtd2FybmluZyAubWVzc2FnZS1ib2R5IHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbiAgY29sb3I6ICM5NDZjMDA7XFxufVxcbi5tZXNzYWdlLmlzLWRhbmdlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVlY2YwO1xcbn1cXG4ubWVzc2FnZS5pcy1kYW5nZXIgLm1lc3NhZ2UtaGVhZGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgzNDgsIDg2JSwgNjElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubWVzc2FnZS5pcy1kYW5nZXIgLm1lc3NhZ2UtYm9keSB7XFxuICBib3JkZXItY29sb3I6IGhzbCgzNDgsIDg2JSwgNjElKTtcXG4gIGNvbG9yOiAjY2MwZjM1O1xcbn1cXG5cXG4ubWVzc2FnZS1oZWFkZXIge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweCA0cHggMCAwO1xcbiAgY29sb3I6ICNmZmY7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI1O1xcbiAgcGFkZGluZzogMC43NWVtIDFlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLm1lc3NhZ2UtaGVhZGVyIC5kZWxldGUge1xcbiAgZmxleC1ncm93OiAwO1xcbiAgZmxleC1zaHJpbms6IDA7XFxuICBtYXJnaW4tbGVmdDogMC43NWVtO1xcbn1cXG4ubWVzc2FnZS1oZWFkZXIgKyAubWVzc2FnZS1ib2R5IHtcXG4gIGJvcmRlci13aWR0aDogMDtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG59XFxuXFxuLm1lc3NhZ2UtYm9keSB7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgODYlKTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICBib3JkZXItd2lkdGg6IDAgMCAwIDRweDtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDI5JSk7XFxuICBwYWRkaW5nOiAxLjI1ZW0gMS41ZW07XFxufVxcbi5tZXNzYWdlLWJvZHkgY29kZSxcXG4ubWVzc2FnZS1ib2R5IHByZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4ubWVzc2FnZS1ib2R5IHByZSBjb2RlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ubW9kYWwge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgei1pbmRleDogNDA7XFxufVxcbi5tb2RhbC5pcy1hY3RpdmUge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLm1vZGFsLWJhY2tncm91bmQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMCwgMTAsIDEwLCAwLjg2KTtcXG59XFxuXFxuLm1vZGFsLWNvbnRlbnQsXFxuLm1vZGFsLWNhcmQge1xcbiAgbWFyZ2luOiAwIDIwcHg7XFxuICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMTYwcHgpO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIHtcXG4gIC5tb2RhbC1jb250ZW50LFxcbiAgLm1vZGFsLWNhcmQge1xcbiAgICBtYXJnaW46IDAgYXV0bztcXG4gICAgbWF4LWhlaWdodDogY2FsYygxMDB2aCAtIDQwcHgpO1xcbiAgICB3aWR0aDogNjQwcHg7XFxuICB9XFxufVxcblxcbi5tb2RhbC1jbG9zZSB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgcmlnaHQ6IDIwcHg7XFxuICB0b3A6IDIwcHg7XFxuICB3aWR0aDogNDBweDtcXG59XFxuXFxuLm1vZGFsLWNhcmQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNDBweCk7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgLW1zLW92ZXJmbG93LXk6IHZpc2libGU7XFxufVxcblxcbi5tb2RhbC1jYXJkLWhlYWQsXFxuLm1vZGFsLWNhcmQtZm9vdCB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgcGFkZGluZzogMjBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLm1vZGFsLWNhcmQtaGVhZCB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgaHNsKDAsIDAlLCA4NiUpO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNnB4O1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDZweDtcXG59XFxuXFxuLm1vZGFsLWNhcmQtdGl0bGUge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxuICBsaW5lLWhlaWdodDogMTtcXG59XFxuXFxuLm1vZGFsLWNhcmQtZm9vdCB7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA2cHg7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNnB4O1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIGhzbCgwLCAwJSwgODYlKTtcXG59XFxuLm1vZGFsLWNhcmQtZm9vdCAuYnV0dG9uOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjVlbTtcXG59XFxuXFxuLm1vZGFsLWNhcmQtYm9keSB7XFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZmxleC1zaHJpbms6IDE7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIHBhZGRpbmc6IDIwcHg7XFxufVxcblxcbi5uYXZiYXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIG1pbi1oZWlnaHQ6IDMuMjVyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAzMDtcXG59XFxuLm5hdmJhci5pcy13aGl0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4ubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItYnJhbmQgPiAubmF2YmFyLWl0ZW0sXFxuLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluayB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsIC5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbi5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbms6Zm9jdXMsXFxuLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazpob3ZlcixcXG4ubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4ubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4ubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItYnVyZ2VyIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItc3RhcnQgPiAubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLWVuZCA+IC5uYXZiYXItaXRlbSxcXG4gIC5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rIHtcXG4gICAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgfVxcbiAgLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbTpmb2N1cywgLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbTpob3ZlciwgLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rOmZvY3VzLFxcbiAgLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpob3ZlcixcXG4gIC5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbmsuaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLWVuZCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsXFxuICAubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItZW5kID4gYS5uYXZiYXItaXRlbTpob3ZlcixcXG4gIC5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rOmZvY3VzLFxcbiAgLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6aG92ZXIsXFxuICAubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItZW5kIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO1xcbiAgICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICB9XFxuICAubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rOjphZnRlcixcXG4gIC5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rOjphZnRlciB7XFxuICAgIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICB9XFxuICAubmF2YmFyLmlzLXdoaXRlIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246Zm9jdXMgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmhvdmVyIC5uYXZiYXItbGluayxcXG4gIC5uYXZiYXIuaXMtd2hpdGUgLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bi5pcy1hY3RpdmUgLm5hdmJhci1saW5rIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcXG4gICAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgfVxcbiAgLm5hdmJhci5pcy13aGl0ZSAubmF2YmFyLWRyb3Bkb3duIGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gICAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgfVxcbn1cXG4ubmF2YmFyLmlzLWJsYWNrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1icmFuZCA+IC5uYXZiYXItaXRlbSxcXG4ubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4ubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLCAubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtOmhvdmVyLCAubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4ubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rOmZvY3VzLFxcbi5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbms6aG92ZXIsXFxuLm5hdmJhci5pcy1ibGFjayAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLm5hdmJhci5pcy1ibGFjayAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4ubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItYnVyZ2VyIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1zdGFydCA+IC5uYXZiYXItaXRlbSxcXG4gIC5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbmssXFxuICAubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItZW5kID4gLm5hdmJhci1pdGVtLFxcbiAgLm5hdmJhci5pcy1ibGFjayAubmF2YmFyLWVuZCAubmF2YmFyLWxpbmsge1xcbiAgICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsIC5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy1ibGFjayAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbms6aG92ZXIsXFxuICAubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLFxcbiAgLm5hdmJhci5pcy1ibGFjayAubmF2YmFyLWVuZCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsXFxuICAubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItZW5kID4gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rOmhvdmVyLFxcbiAgLm5hdmJhci5pcy1ibGFjayAubmF2YmFyLWVuZCAubmF2YmFyLWxpbmsuaXMtYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1ibGFjayAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazo6YWZ0ZXIsXFxuICAubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICB9XFxuICAubmF2YmFyLmlzLWJsYWNrIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246Zm9jdXMgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1ibGFjayAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmhvdmVyIC5uYXZiYXItbGluayxcXG4gIC5uYXZiYXIuaXMtYmxhY2sgLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bi5pcy1hY3RpdmUgLm5hdmJhci1saW5rIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1ibGFjayAubmF2YmFyLWRyb3Bkb3duIGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICAgIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgfVxcbn1cXG4ubmF2YmFyLmlzLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1icmFuZCA+IC5uYXZiYXItaXRlbSxcXG4ubmF2YmFyLmlzLWxpZ2h0IC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbi5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbms6Zm9jdXMsXFxuLm5hdmJhci5pcy1saWdodCAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazpob3ZlcixcXG4ubmF2YmFyLmlzLWxpZ2h0IC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZThlOGU4O1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLm5hdmJhci5pcy1saWdodCAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1idXJnZXIge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAubmF2YmFyLmlzLWxpZ2h0IC5uYXZiYXItc3RhcnQgPiAubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLmlzLWxpZ2h0IC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1saWdodCAubmF2YmFyLWVuZCA+IC5uYXZiYXItaXRlbSxcXG4gIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rIHtcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy1saWdodCAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbms6aG92ZXIsXFxuICAubmF2YmFyLmlzLWxpZ2h0IC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLFxcbiAgLm5hdmJhci5pcy1saWdodCAubmF2YmFyLWVuZCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsXFxuICAubmF2YmFyLmlzLWxpZ2h0IC5uYXZiYXItZW5kID4gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLWxpZ2h0IC5uYXZiYXItZW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rOmhvdmVyLFxcbiAgLm5hdmJhci5pcy1saWdodCAubmF2YmFyLWVuZCAubmF2YmFyLWxpbmsuaXMtYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U4ZThlODtcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbms6OmFmdGVyLFxcbiAgLm5hdmJhci5pcy1saWdodCAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6OmFmdGVyIHtcXG4gICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICB9XFxuICAubmF2YmFyLmlzLWxpZ2h0IC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246Zm9jdXMgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1saWdodCAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmhvdmVyIC5uYXZiYXItbGluayxcXG4gIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bi5pcy1hY3RpdmUgLm5hdmJhci1saW5rIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U4ZThlODtcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtbGlnaHQgLm5hdmJhci1kcm9wZG93biBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIH1cXG59XFxuLm5hdmJhci5pcy1kYXJrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1icmFuZCA+IC5uYXZiYXItaXRlbSxcXG4ubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5uYXZiYXIuaXMtZGFyayAubmF2YmFyLWJyYW5kID4gYS5uYXZiYXItaXRlbTpmb2N1cywgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtOmhvdmVyLCAubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbi5uYXZiYXIuaXMtZGFyayAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4ubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbms6aG92ZXIsXFxuLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjkyOTI5O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5uYXZiYXIuaXMtZGFyayAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1idXJnZXIge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItc3RhcnQgPiAubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbmssXFxuICAubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1lbmQgPiAubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxuICAubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtZGFyayAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbTpob3ZlciwgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItc3RhcnQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtZGFyayAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtZGFyayAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpob3ZlcixcXG4gIC5uYXZiYXIuaXMtZGFyayAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluay5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLFxcbiAgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItZW5kID4gYS5uYXZiYXItaXRlbTpob3ZlcixcXG4gIC5uYXZiYXIuaXMtZGFyayAubmF2YmFyLWVuZCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtZGFyayAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6aG92ZXIsXFxuICAubmF2YmFyLmlzLWRhcmsgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyOTI5Mjk7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rOjphZnRlcixcXG4gIC5uYXZiYXIuaXMtZGFyayAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6OmFmdGVyIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246Zm9jdXMgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246aG92ZXIgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd24uaXMtYWN0aXZlIC5uYXZiYXItbGluayB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyOTI5Mjk7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1kYXJrIC5uYXZiYXItZHJvcGRvd24gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbn1cXG4ubmF2YmFyLmlzLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1icmFuZCA+IC5uYXZiYXItaXRlbSxcXG4ubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLWJyYW5kID4gYS5uYXZiYXItaXRlbTpmb2N1cywgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtOmhvdmVyLCAubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbi5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4ubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbms6aG92ZXIsXFxuLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiODljO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1idXJnZXIge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItc3RhcnQgPiAubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbmssXFxuICAubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1lbmQgPiAubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxuICAubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbTpob3ZlciwgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItc3RhcnQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpob3ZlcixcXG4gIC5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluay5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLFxcbiAgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItZW5kID4gYS5uYXZiYXItaXRlbTpob3ZlcixcXG4gIC5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLWVuZCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItZW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6aG92ZXIsXFxuICAubmF2YmFyLmlzLXByaW1hcnkgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMGI4OWM7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rOjphZnRlcixcXG4gIC5uYXZiYXIuaXMtcHJpbWFyeSAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6OmFmdGVyIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246Zm9jdXMgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246aG92ZXIgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd24uaXMtYWN0aXZlIC5uYXZiYXItbGluayB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMGI4OWM7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1wcmltYXJ5IC5uYXZiYXItZHJvcGRvd24gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpO1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gIH1cXG59XFxuLm5hdmJhci5pcy1saW5rIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1icmFuZCA+IC5uYXZiYXItaXRlbSxcXG4ubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5uYXZiYXIuaXMtbGluayAubmF2YmFyLWJyYW5kID4gYS5uYXZiYXItaXRlbTpmb2N1cywgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtOmhvdmVyLCAubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbi5uYXZiYXIuaXMtbGluayAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4ubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbms6aG92ZXIsXFxuLm5hdmJhci5pcy1saW5rIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2E1MWJiO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5uYXZiYXIuaXMtbGluayAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1idXJnZXIge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItc3RhcnQgPiAubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbmssXFxuICAubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1lbmQgPiAubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxuICAubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtbGluayAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbTpob3ZlciwgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItc3RhcnQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtbGluayAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtbGluayAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpob3ZlcixcXG4gIC5uYXZiYXIuaXMtbGluayAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluay5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLFxcbiAgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItZW5kID4gYS5uYXZiYXItaXRlbTpob3ZlcixcXG4gIC5uYXZiYXIuaXMtbGluayAubmF2YmFyLWVuZCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtbGluayAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6aG92ZXIsXFxuICAubmF2YmFyLmlzLWxpbmsgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzYTUxYmI7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rOjphZnRlcixcXG4gIC5uYXZiYXIuaXMtbGluayAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6OmFmdGVyIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246Zm9jdXMgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246aG92ZXIgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd24uaXMtYWN0aXZlIC5uYXZiYXItbGluayB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzYTUxYmI7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1saW5rIC5uYXZiYXItZHJvcGRvd24gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbn1cXG4ubmF2YmFyLmlzLWluZm8ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLWJyYW5kID4gLm5hdmJhci1pdGVtLFxcbi5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluayB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLCAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsIC5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLWJyYW5kID4gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rOmZvY3VzLFxcbi5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazpob3ZlcixcXG4ubmF2YmFyLmlzLWluZm8gLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbmsuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMDgyYzU7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6ICNmZmY7XFxufVxcbi5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLWJ1cmdlciB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1zdGFydCA+IC5uYXZiYXItaXRlbSxcXG4gIC5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluayxcXG4gIC5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLWVuZCA+IC5uYXZiYXItaXRlbSxcXG4gIC5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLWVuZCAubmF2YmFyLWxpbmsge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbTpmb2N1cywgLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItc3RhcnQgPiBhLm5hdmJhci1pdGVtOmhvdmVyLCAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rOmZvY3VzLFxcbiAgLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rOmhvdmVyLFxcbiAgLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLWVuZCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsXFxuICAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtOmhvdmVyLFxcbiAgLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItZW5kID4gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1lbmQgLm5hdmJhci1saW5rOmZvY3VzLFxcbiAgLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazpob3ZlcixcXG4gIC5uYXZiYXIuaXMtaW5mbyAubmF2YmFyLWVuZCAubmF2YmFyLWxpbmsuaXMtYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMwODJjNTtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxuICAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbms6OmFmdGVyLFxcbiAgLm5hdmJhci5pcy1pbmZvIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgICBib3JkZXItY29sb3I6ICNmZmY7XFxuICB9XFxuICAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bjpmb2N1cyAubmF2YmFyLWxpbmssXFxuICAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bjpob3ZlciAubmF2YmFyLWxpbmssXFxuICAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bi5pcy1hY3RpdmUgLm5hdmJhci1saW5rIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMwODJjNTtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxuICAubmF2YmFyLmlzLWluZm8gLm5hdmJhci1kcm9wZG93biBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxufVxcbi5uYXZiYXIuaXMtc3VjY2VzcyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItYnJhbmQgPiAubmF2YmFyLWl0ZW0sXFxuLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLWJyYW5kID4gYS5uYXZiYXItaXRlbTpob3ZlciwgLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4ubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbms6Zm9jdXMsXFxuLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rOmhvdmVyLFxcbi5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNhYmI4MTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbms6OmFmdGVyIHtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZjtcXG59XFxuLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItYnVyZ2VyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLXN0YXJ0ID4gLm5hdmJhci1pdGVtLFxcbiAgLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItZW5kID4gLm5hdmJhci1pdGVtLFxcbiAgLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItZW5kIC5uYXZiYXItbGluayB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItc3RhcnQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLCAubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbms6Zm9jdXMsXFxuICAubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbms6aG92ZXIsXFxuICAubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbmsuaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItZW5kID4gYS5uYXZiYXItaXRlbTpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLWVuZCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsXFxuICAubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6Zm9jdXMsXFxuICAubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rOmhvdmVyLFxcbiAgLm5hdmJhci5pcy1zdWNjZXNzIC5uYXZiYXItZW5kIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2FiYjgxO1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazo6YWZ0ZXIsXFxuICAubmF2YmFyLmlzLXN1Y2Nlc3MgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rOjphZnRlciB7XFxuICAgIGJvcmRlci1jb2xvcjogI2ZmZjtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmZvY3VzIC5uYXZiYXItbGluayxcXG4gIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmhvdmVyIC5uYXZiYXItbGluayxcXG4gIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duLmlzLWFjdGl2ZSAubmF2YmFyLWxpbmsge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2FiYjgxO1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtc3VjY2VzcyAubmF2YmFyLWRyb3Bkb3duIGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gIH1cXG59XFxuLm5hdmJhci5pcy13YXJuaW5nIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCg0NCwgMTAwJSwgNzclKTtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWJyYW5kID4gLm5hdmJhci1pdGVtLFxcbi5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluayB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4ubmF2YmFyLmlzLXdhcm5pbmcgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWJyYW5kID4gYS5uYXZiYXItaXRlbTpob3ZlciwgLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4ubmF2YmFyLmlzLXdhcm5pbmcgLm5hdmJhci1icmFuZCAubmF2YmFyLWxpbms6Zm9jdXMsXFxuLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rOmhvdmVyLFxcbi5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZDk3MDtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWJ1cmdlciB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLXN0YXJ0ID4gLm5hdmJhci1pdGVtLFxcbiAgLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItZW5kID4gLm5hdmJhci1pdGVtLFxcbiAgLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItZW5kIC5uYXZiYXItbGluayB7XFxuICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICB9XFxuICAubmF2YmFyLmlzLXdhcm5pbmcgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbTpob3ZlciwgLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItc3RhcnQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpob3ZlcixcXG4gIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluay5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLXdhcm5pbmcgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLFxcbiAgLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItZW5kID4gYS5uYXZiYXItaXRlbTpob3ZlcixcXG4gIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWVuZCA+IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWVuZCAubmF2YmFyLWxpbms6aG92ZXIsXFxuICAubmF2YmFyLmlzLXdhcm5pbmcgLm5hdmJhci1lbmQgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmQ5NzA7XFxuICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICB9XFxuICAubmF2YmFyLmlzLXdhcm5pbmcgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbms6OmFmdGVyLFxcbiAgLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmZvY3VzIC5uYXZiYXItbGluayxcXG4gIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmhvdmVyIC5uYXZiYXItbGluayxcXG4gIC5uYXZiYXIuaXMtd2FybmluZyAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duLmlzLWFjdGl2ZSAubmF2YmFyLWxpbmsge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZkOTcwO1xcbiAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbiAgfVxcbiAgLm5hdmJhci5pcy13YXJuaW5nIC5uYXZiYXItZHJvcGRvd24gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxuICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICB9XFxufVxcbi5uYXZiYXIuaXMtZGFuZ2VyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgzNDgsIDg2JSwgNjElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWJyYW5kID4gLm5hdmJhci1pdGVtLFxcbi5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItYnJhbmQgLm5hdmJhci1saW5rIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWJyYW5kID4gYS5uYXZiYXItaXRlbTpmb2N1cywgLm5hdmJhci5pcy1kYW5nZXIgLm5hdmJhci1icmFuZCA+IGEubmF2YmFyLWl0ZW06aG92ZXIsIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItYnJhbmQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4ubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4ubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazpob3ZlcixcXG4ubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VmMmU1NTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWJyYW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbn1cXG4ubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWJ1cmdlciB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLXN0YXJ0ID4gLm5hdmJhci1pdGVtLFxcbiAgLm5hdmJhci5pcy1kYW5nZXIgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbmssXFxuICAubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWVuZCA+IC5uYXZiYXItaXRlbSxcXG4gIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItZW5kIC5uYXZiYXItbGluayB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1kYW5nZXIgLm5hdmJhci1zdGFydCA+IGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItc3RhcnQgPiBhLm5hdmJhci1pdGVtOmhvdmVyLCAubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLXN0YXJ0ID4gYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLXN0YXJ0IC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rOmhvdmVyLFxcbiAgLm5hdmJhci5pcy1kYW5nZXIgLm5hdmJhci1zdGFydCAubmF2YmFyLWxpbmsuaXMtYWN0aXZlLFxcbiAgLm5hdmJhci5pcy1kYW5nZXIgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtOmZvY3VzLFxcbiAgLm5hdmJhci5pcy1kYW5nZXIgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtOmhvdmVyLFxcbiAgLm5hdmJhci5pcy1kYW5nZXIgLm5hdmJhci1lbmQgPiBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazpob3ZlcixcXG4gIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItZW5kIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWYyZTU1O1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItc3RhcnQgLm5hdmJhci1saW5rOjphZnRlcixcXG4gIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItZW5kIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgICBib3JkZXItY29sb3I6ICNmZmY7XFxuICB9XFxuICAubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmZvY3VzIC5uYXZiYXItbGluayxcXG4gIC5uYXZiYXIuaXMtZGFuZ2VyIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246aG92ZXIgLm5hdmJhci1saW5rLFxcbiAgLm5hdmJhci5pcy1kYW5nZXIgLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bi5pcy1hY3RpdmUgLm5hdmJhci1saW5rIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VmMmU1NTtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxuICAubmF2YmFyLmlzLWRhbmdlciAubmF2YmFyLWRyb3Bkb3duIGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gIH1cXG59XFxuLm5hdmJhciA+IC5jb250YWluZXIge1xcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgbWluLWhlaWdodDogMy4yNXJlbTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubmF2YmFyLmhhcy1zaGFkb3cge1xcbiAgYm94LXNoYWRvdzogMCAycHggMCAwIGhzbCgwLCAwJSwgOTYlKTtcXG59XFxuLm5hdmJhci5pcy1maXhlZC1ib3R0b20sIC5uYXZiYXIuaXMtZml4ZWQtdG9wIHtcXG4gIGxlZnQ6IDA7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICByaWdodDogMDtcXG4gIHotaW5kZXg6IDMwO1xcbn1cXG4ubmF2YmFyLmlzLWZpeGVkLWJvdHRvbSB7XFxuICBib3R0b206IDA7XFxufVxcbi5uYXZiYXIuaXMtZml4ZWQtYm90dG9tLmhhcy1zaGFkb3cge1xcbiAgYm94LXNoYWRvdzogMCAtMnB4IDAgMCBoc2woMCwgMCUsIDk2JSk7XFxufVxcbi5uYXZiYXIuaXMtZml4ZWQtdG9wIHtcXG4gIHRvcDogMDtcXG59XFxuXFxuaHRtbC5oYXMtbmF2YmFyLWZpeGVkLXRvcCxcXG5ib2R5Lmhhcy1uYXZiYXItZml4ZWQtdG9wIHtcXG4gIHBhZGRpbmctdG9wOiAzLjI1cmVtO1xcbn1cXG5odG1sLmhhcy1uYXZiYXItZml4ZWQtYm90dG9tLFxcbmJvZHkuaGFzLW5hdmJhci1maXhlZC1ib3R0b20ge1xcbiAgcGFkZGluZy1ib3R0b206IDMuMjVyZW07XFxufVxcblxcbi5uYXZiYXItYnJhbmQsXFxuLm5hdmJhci10YWJzIHtcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgbWluLWhlaWdodDogMy4yNXJlbTtcXG59XFxuXFxuLm5hdmJhci1icmFuZCBhLm5hdmJhci1pdGVtOmZvY3VzLCAubmF2YmFyLWJyYW5kIGEubmF2YmFyLWl0ZW06aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5uYXZiYXItdGFicyB7XFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICBtYXgtd2lkdGg6IDEwMHZ3O1xcbiAgb3ZlcmZsb3cteDogYXV0bztcXG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcXG59XFxuXFxuLm5hdmJhci1idXJnZXIge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IDMuMjVyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMy4yNXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbn1cXG4ubmF2YmFyLWJ1cmdlciBzcGFuIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGN1cnJlbnRDb2xvcjtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBsZWZ0OiBjYWxjKDUwJSAtIDhweCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XFxuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiA4Nm1zO1xcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogYmFja2dyb3VuZC1jb2xvciwgb3BhY2l0eSwgdHJhbnNmb3JtO1xcbiAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xcbiAgd2lkdGg6IDE2cHg7XFxufVxcbi5uYXZiYXItYnVyZ2VyIHNwYW46bnRoLWNoaWxkKDEpIHtcXG4gIHRvcDogY2FsYyg1MCUgLSA2cHgpO1xcbn1cXG4ubmF2YmFyLWJ1cmdlciBzcGFuOm50aC1jaGlsZCgyKSB7XFxuICB0b3A6IGNhbGMoNTAlIC0gMXB4KTtcXG59XFxuLm5hdmJhci1idXJnZXIgc3BhbjpudGgtY2hpbGQoMykge1xcbiAgdG9wOiBjYWxjKDUwJSArIDRweCk7XFxufVxcbi5uYXZiYXItYnVyZ2VyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNSk7XFxufVxcbi5uYXZiYXItYnVyZ2VyLmlzLWFjdGl2ZSBzcGFuOm50aC1jaGlsZCgxKSB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoNXB4KSByb3RhdGUoNDVkZWcpO1xcbn1cXG4ubmF2YmFyLWJ1cmdlci5pcy1hY3RpdmUgc3BhbjpudGgtY2hpbGQoMikge1xcbiAgb3BhY2l0eTogMDtcXG59XFxuLm5hdmJhci1idXJnZXIuaXMtYWN0aXZlIHNwYW46bnRoLWNoaWxkKDMpIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNXB4KSByb3RhdGUoLTQ1ZGVnKTtcXG59XFxuXFxuLm5hdmJhci1tZW51IHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5uYXZiYXItaXRlbSxcXG4ubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIHBhZGRpbmc6IDAuNXJlbSAwLjc1cmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ubmF2YmFyLWl0ZW0gLmljb246b25seS1jaGlsZCxcXG4ubmF2YmFyLWxpbmsgLmljb246b25seS1jaGlsZCB7XFxuICBtYXJnaW4tbGVmdDogLTAuMjVyZW07XFxuICBtYXJnaW4tcmlnaHQ6IC0wLjI1cmVtO1xcbn1cXG5cXG5hLm5hdmJhci1pdGVtLFxcbi5uYXZiYXItbGluayB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbmEubmF2YmFyLWl0ZW06Zm9jdXMsIGEubmF2YmFyLWl0ZW06Zm9jdXMtd2l0aGluLCBhLm5hdmJhci1pdGVtOmhvdmVyLCBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4ubmF2YmFyLWxpbms6Zm9jdXMsXFxuLm5hdmJhci1saW5rOmZvY3VzLXdpdGhpbixcXG4ubmF2YmFyLWxpbms6aG92ZXIsXFxuLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk4JSk7XFxuICBjb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbn1cXG5cXG4ubmF2YmFyLWl0ZW0ge1xcbiAgZmxleC1ncm93OiAwO1xcbiAgZmxleC1zaHJpbms6IDA7XFxufVxcbi5uYXZiYXItaXRlbSBpbWcge1xcbiAgbWF4LWhlaWdodDogMS43NXJlbTtcXG59XFxuLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93biB7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4ubmF2YmFyLWl0ZW0uaXMtZXhwYW5kZWQge1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZmxleC1zaHJpbms6IDE7XFxufVxcbi5uYXZiYXItaXRlbS5pcy10YWIge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgbWluLWhlaWdodDogMy4yNXJlbTtcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDAuNXJlbSAtIDFweCk7XFxufVxcbi5uYXZiYXItaXRlbS5pcy10YWI6Zm9jdXMsIC5uYXZiYXItaXRlbS5pcy10YWI6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxufVxcbi5uYXZiYXItaXRlbS5pcy10YWIuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgYm9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQ7XFxuICBib3JkZXItYm90dG9tLXdpZHRoOiAzcHg7XFxuICBjb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgcGFkZGluZy1ib3R0b206IGNhbGMoMC41cmVtIC0gM3B4KTtcXG59XFxuXFxuLm5hdmJhci1jb250ZW50IHtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGZsZXgtc2hyaW5rOiAxO1xcbn1cXG5cXG4ubmF2YmFyLWxpbms6bm90KC5pcy1hcnJvd2xlc3MpIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDIuNWVtO1xcbn1cXG4ubmF2YmFyLWxpbms6bm90KC5pcy1hcnJvd2xlc3MpOjphZnRlciB7XFxuICBib3JkZXItY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIG1hcmdpbi10b3A6IC0wLjM3NWVtO1xcbiAgcmlnaHQ6IDEuMTI1ZW07XFxufVxcblxcbi5uYXZiYXItZHJvcGRvd24ge1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIHBhZGRpbmctYm90dG9tOiAwLjVyZW07XFxuICBwYWRkaW5nLXRvcDogMC41cmVtO1xcbn1cXG4ubmF2YmFyLWRyb3Bkb3duIC5uYXZiYXItaXRlbSB7XFxuICBwYWRkaW5nLWxlZnQ6IDEuNXJlbTtcXG4gIHBhZGRpbmctcmlnaHQ6IDEuNXJlbTtcXG59XFxuXFxuLm5hdmJhci1kaXZpZGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBoZWlnaHQ6IDJweDtcXG4gIG1hcmdpbjogMC41cmVtIDA7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLm5hdmJhciA+IC5jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG4gIC5uYXZiYXItYnJhbmQgLm5hdmJhci1pdGVtLFxcbiAgLm5hdmJhci10YWJzIC5uYXZiYXItaXRlbSB7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICB9XFxuICAubmF2YmFyLWxpbms6OmFmdGVyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG4gIC5uYXZiYXItbWVudSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxuICAgIGJveC1zaGFkb3c6IDAgOHB4IDE2cHggcmdiYSgxMCwgMTAsIDEwLCAwLjEpO1xcbiAgICBwYWRkaW5nOiAwLjVyZW0gMDtcXG4gIH1cXG4gIC5uYXZiYXItbWVudS5pcy1hY3RpdmUge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG4gIC5uYXZiYXIuaXMtZml4ZWQtYm90dG9tLXRvdWNoLCAubmF2YmFyLmlzLWZpeGVkLXRvcC10b3VjaCB7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIHotaW5kZXg6IDMwO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1maXhlZC1ib3R0b20tdG91Y2gge1xcbiAgICBib3R0b206IDA7XFxuICB9XFxuICAubmF2YmFyLmlzLWZpeGVkLWJvdHRvbS10b3VjaC5oYXMtc2hhZG93IHtcXG4gICAgYm94LXNoYWRvdzogMCAtMnB4IDNweCByZ2JhKDEwLCAxMCwgMTAsIDAuMSk7XFxuICB9XFxuICAubmF2YmFyLmlzLWZpeGVkLXRvcC10b3VjaCB7XFxuICAgIHRvcDogMDtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtZml4ZWQtdG9wIC5uYXZiYXItbWVudSwgLm5hdmJhci5pcy1maXhlZC10b3AtdG91Y2ggLm5hdmJhci1tZW51IHtcXG4gICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMy4yNXJlbSk7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgfVxcbiAgaHRtbC5oYXMtbmF2YmFyLWZpeGVkLXRvcC10b3VjaCxcXG4gIGJvZHkuaGFzLW5hdmJhci1maXhlZC10b3AtdG91Y2gge1xcbiAgICBwYWRkaW5nLXRvcDogMy4yNXJlbTtcXG4gIH1cXG4gIGh0bWwuaGFzLW5hdmJhci1maXhlZC1ib3R0b20tdG91Y2gsXFxuICBib2R5Lmhhcy1uYXZiYXItZml4ZWQtYm90dG9tLXRvdWNoIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDMuMjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLm5hdmJhcixcXG4gIC5uYXZiYXItbWVudSxcXG4gIC5uYXZiYXItc3RhcnQsXFxuICAubmF2YmFyLWVuZCB7XFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgfVxcbiAgLm5hdmJhciB7XFxuICAgIG1pbi1oZWlnaHQ6IDMuMjVyZW07XFxuICB9XFxuICAubmF2YmFyLmlzLXNwYWNlZCB7XFxuICAgIHBhZGRpbmc6IDFyZW0gMnJlbTtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtc3BhY2VkIC5uYXZiYXItc3RhcnQsXFxuICAubmF2YmFyLmlzLXNwYWNlZCAubmF2YmFyLWVuZCB7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB9XFxuICAubmF2YmFyLmlzLXNwYWNlZCBhLm5hdmJhci1pdGVtLFxcbiAgLm5hdmJhci5pcy1zcGFjZWQgLm5hdmJhci1saW5rIHtcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgfVxcbiAgLm5hdmJhci5pcy10cmFuc3BhcmVudCBhLm5hdmJhci1pdGVtOmZvY3VzLCAubmF2YmFyLmlzLXRyYW5zcGFyZW50IGEubmF2YmFyLWl0ZW06aG92ZXIsIC5uYXZiYXIuaXMtdHJhbnNwYXJlbnQgYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuICAubmF2YmFyLmlzLXRyYW5zcGFyZW50IC5uYXZiYXItbGluazpmb2N1cyxcXG4gIC5uYXZiYXIuaXMtdHJhbnNwYXJlbnQgLm5hdmJhci1saW5rOmhvdmVyLFxcbiAgLm5hdmJhci5pcy10cmFuc3BhcmVudCAubmF2YmFyLWxpbmsuaXMtYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtdHJhbnNwYXJlbnQgLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bi5pcy1hY3RpdmUgLm5hdmJhci1saW5rLCAubmF2YmFyLmlzLXRyYW5zcGFyZW50IC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd24uaXMtaG92ZXJhYmxlOmZvY3VzIC5uYXZiYXItbGluaywgLm5hdmJhci5pcy10cmFuc3BhcmVudCAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duLmlzLWhvdmVyYWJsZTpmb2N1cy13aXRoaW4gLm5hdmJhci1saW5rLCAubmF2YmFyLmlzLXRyYW5zcGFyZW50IC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd24uaXMtaG92ZXJhYmxlOmhvdmVyIC5uYXZiYXItbGluayB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAubmF2YmFyLmlzLXRyYW5zcGFyZW50IC5uYXZiYXItZHJvcGRvd24gYS5uYXZiYXItaXRlbTpmb2N1cywgLm5hdmJhci5pcy10cmFuc3BhcmVudCAubmF2YmFyLWRyb3Bkb3duIGEubmF2YmFyLWl0ZW06aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICAgIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtdHJhbnNwYXJlbnQgLm5hdmJhci1kcm9wZG93biBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gICAgY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIH1cXG4gIC5uYXZiYXItYnVyZ2VyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG4gIC5uYXZiYXItaXRlbSxcXG4gIC5uYXZiYXItbGluayB7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICB9XFxuICAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duIHtcXG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XFxuICB9XFxuICAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duLXVwIC5uYXZiYXItbGluazo6YWZ0ZXIge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMzVkZWcpIHRyYW5zbGF0ZSgwLjI1ZW0sIC0wLjI1ZW0pO1xcbiAgfVxcbiAgLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bi11cCAubmF2YmFyLWRyb3Bkb3duIHtcXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIGhzbCgwLCAwJSwgODYlKTtcXG4gICAgYm9yZGVyLXJhZGl1czogNnB4IDZweCAwIDA7XFxuICAgIGJvcmRlci10b3A6IG5vbmU7XFxuICAgIGJvdHRvbTogMTAwJTtcXG4gICAgYm94LXNoYWRvdzogMCAtOHB4IDhweCByZ2JhKDEwLCAxMCwgMTAsIDAuMSk7XFxuICAgIHRvcDogYXV0bztcXG4gIH1cXG4gIC5uYXZiYXItaXRlbS5pcy1hY3RpdmUgLm5hdmJhci1kcm9wZG93biwgLm5hdmJhci1pdGVtLmlzLWhvdmVyYWJsZTpmb2N1cyAubmF2YmFyLWRyb3Bkb3duLCAubmF2YmFyLWl0ZW0uaXMtaG92ZXJhYmxlOmZvY3VzLXdpdGhpbiAubmF2YmFyLWRyb3Bkb3duLCAubmF2YmFyLWl0ZW0uaXMtaG92ZXJhYmxlOmhvdmVyIC5uYXZiYXItZHJvcGRvd24ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG4gIC5uYXZiYXIuaXMtc3BhY2VkIC5uYXZiYXItaXRlbS5pcy1hY3RpdmUgLm5hdmJhci1kcm9wZG93biwgLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSAubmF2YmFyLWRyb3Bkb3duLmlzLWJveGVkLCAubmF2YmFyLmlzLXNwYWNlZCAubmF2YmFyLWl0ZW0uaXMtaG92ZXJhYmxlOmZvY3VzIC5uYXZiYXItZHJvcGRvd24sIC5uYXZiYXItaXRlbS5pcy1ob3ZlcmFibGU6Zm9jdXMgLm5hdmJhci1kcm9wZG93bi5pcy1ib3hlZCwgLm5hdmJhci5pcy1zcGFjZWQgLm5hdmJhci1pdGVtLmlzLWhvdmVyYWJsZTpmb2N1cy13aXRoaW4gLm5hdmJhci1kcm9wZG93biwgLm5hdmJhci1pdGVtLmlzLWhvdmVyYWJsZTpmb2N1cy13aXRoaW4gLm5hdmJhci1kcm9wZG93bi5pcy1ib3hlZCwgLm5hdmJhci5pcy1zcGFjZWQgLm5hdmJhci1pdGVtLmlzLWhvdmVyYWJsZTpob3ZlciAubmF2YmFyLWRyb3Bkb3duLCAubmF2YmFyLWl0ZW0uaXMtaG92ZXJhYmxlOmhvdmVyIC5uYXZiYXItZHJvcGRvd24uaXMtYm94ZWQge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICBwb2ludGVyLWV2ZW50czogYXV0bztcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbiAgLm5hdmJhci1tZW51IHtcXG4gICAgZmxleC1ncm93OiAxO1xcbiAgICBmbGV4LXNocmluazogMDtcXG4gIH1cXG4gIC5uYXZiYXItc3RhcnQge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICAgIG1hcmdpbi1yaWdodDogYXV0bztcXG4gIH1cXG4gIC5uYXZiYXItZW5kIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICB9XFxuICAubmF2YmFyLWRyb3Bkb3duIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNnB4O1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNnB4O1xcbiAgICBib3JkZXItdG9wOiAycHggc29saWQgaHNsKDAsIDAlLCA4NiUpO1xcbiAgICBib3gtc2hhZG93OiAwIDhweCA4cHggcmdiYSgxMCwgMTAsIDEwLCAwLjEpO1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgICBsZWZ0OiAwO1xcbiAgICBtaW4td2lkdGg6IDEwMCU7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAxMDAlO1xcbiAgICB6LWluZGV4OiAyMDtcXG4gIH1cXG4gIC5uYXZiYXItZHJvcGRvd24gLm5hdmJhci1pdGVtIHtcXG4gICAgcGFkZGluZzogMC4zNzVyZW0gMXJlbTtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIH1cXG4gIC5uYXZiYXItZHJvcGRvd24gYS5uYXZiYXItaXRlbSB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDNyZW07XFxuICB9XFxuICAubmF2YmFyLWRyb3Bkb3duIGEubmF2YmFyLWl0ZW06Zm9jdXMsIC5uYXZiYXItZHJvcGRvd24gYS5uYXZiYXItaXRlbTpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gICAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgfVxcbiAgLm5hdmJhci1kcm9wZG93biBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKTtcXG4gICAgY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtc3BhY2VkIC5uYXZiYXItZHJvcGRvd24sIC5uYXZiYXItZHJvcGRvd24uaXMtYm94ZWQge1xcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICAgIGJvcmRlci10b3A6IG5vbmU7XFxuICAgIGJveC1zaGFkb3c6IDAgOHB4IDhweCByZ2JhKDEwLCAxMCwgMTAsIDAuMSksIDAgMCAwIDFweCByZ2JhKDEwLCAxMCwgMTAsIDAuMSk7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgdG9wOiBjYWxjKDEwMCUgKyAoLTRweCkpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTVweCk7XFxuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDg2bXM7XFxuICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IG9wYWNpdHksIHRyYW5zZm9ybTtcXG4gIH1cXG4gIC5uYXZiYXItZHJvcGRvd24uaXMtcmlnaHQge1xcbiAgICBsZWZ0OiBhdXRvO1xcbiAgICByaWdodDogMDtcXG4gIH1cXG4gIC5uYXZiYXItZGl2aWRlciB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgfVxcbiAgLm5hdmJhciA+IC5jb250YWluZXIgLm5hdmJhci1icmFuZCxcXG4gIC5jb250YWluZXIgPiAubmF2YmFyIC5uYXZiYXItYnJhbmQge1xcbiAgICBtYXJnaW4tbGVmdDogLTAuNzVyZW07XFxuICB9XFxuICAubmF2YmFyID4gLmNvbnRhaW5lciAubmF2YmFyLW1lbnUsXFxuICAuY29udGFpbmVyID4gLm5hdmJhciAubmF2YmFyLW1lbnUge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0wLjc1cmVtO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1maXhlZC1ib3R0b20tZGVza3RvcCwgLm5hdmJhci5pcy1maXhlZC10b3AtZGVza3RvcCB7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIHotaW5kZXg6IDMwO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1maXhlZC1ib3R0b20tZGVza3RvcCB7XFxuICAgIGJvdHRvbTogMDtcXG4gIH1cXG4gIC5uYXZiYXIuaXMtZml4ZWQtYm90dG9tLWRlc2t0b3AuaGFzLXNoYWRvdyB7XFxuICAgIGJveC1zaGFkb3c6IDAgLTJweCAzcHggcmdiYSgxMCwgMTAsIDEwLCAwLjEpO1xcbiAgfVxcbiAgLm5hdmJhci5pcy1maXhlZC10b3AtZGVza3RvcCB7XFxuICAgIHRvcDogMDtcXG4gIH1cXG4gIGh0bWwuaGFzLW5hdmJhci1maXhlZC10b3AtZGVza3RvcCxcXG4gIGJvZHkuaGFzLW5hdmJhci1maXhlZC10b3AtZGVza3RvcCB7XFxuICAgIHBhZGRpbmctdG9wOiAzLjI1cmVtO1xcbiAgfVxcbiAgaHRtbC5oYXMtbmF2YmFyLWZpeGVkLWJvdHRvbS1kZXNrdG9wLFxcbiAgYm9keS5oYXMtbmF2YmFyLWZpeGVkLWJvdHRvbS1kZXNrdG9wIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDMuMjVyZW07XFxuICB9XFxuICBodG1sLmhhcy1zcGFjZWQtbmF2YmFyLWZpeGVkLXRvcCxcXG4gIGJvZHkuaGFzLXNwYWNlZC1uYXZiYXItZml4ZWQtdG9wIHtcXG4gICAgcGFkZGluZy10b3A6IDUuMjVyZW07XFxuICB9XFxuICBodG1sLmhhcy1zcGFjZWQtbmF2YmFyLWZpeGVkLWJvdHRvbSxcXG4gIGJvZHkuaGFzLXNwYWNlZC1uYXZiYXItZml4ZWQtYm90dG9tIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDUuMjVyZW07XFxuICB9XFxuICBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4gIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICB9XFxuICBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZTpub3QoOmZvY3VzKTpub3QoOmhvdmVyKSxcXG4gIC5uYXZiYXItbGluay5pcy1hY3RpdmU6bm90KDpmb2N1cyk6bm90KDpob3Zlcikge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIH1cXG4gIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd246Zm9jdXMgLm5hdmJhci1saW5rLCAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmhvdmVyIC5uYXZiYXItbGluaywgLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bi5pcy1hY3RpdmUgLm5hdmJhci1saW5rIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5OCUpO1xcbiAgfVxcbn1cXG4uaGVyby5pcy1mdWxsaGVpZ2h0LXdpdGgtbmF2YmFyIHtcXG4gIG1pbi1oZWlnaHQ6IGNhbGMoMTAwdmggLSAzLjI1cmVtKTtcXG59XFxuXFxuLnBhZ2luYXRpb24ge1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgbWFyZ2luOiAtMC4yNXJlbTtcXG59XFxuLnBhZ2luYXRpb24uaXMtc21hbGwge1xcbiAgZm9udC1zaXplOiAwLjc1cmVtO1xcbn1cXG4ucGFnaW5hdGlvbi5pcy1tZWRpdW0ge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG4ucGFnaW5hdGlvbi5pcy1sYXJnZSB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuLnBhZ2luYXRpb24uaXMtcm91bmRlZCAucGFnaW5hdGlvbi1wcmV2aW91cyxcXG4ucGFnaW5hdGlvbi5pcy1yb3VuZGVkIC5wYWdpbmF0aW9uLW5leHQge1xcbiAgcGFkZGluZy1sZWZ0OiAxZW07XFxuICBwYWRkaW5nLXJpZ2h0OiAxZW07XFxuICBib3JkZXItcmFkaXVzOiA5OTk5cHg7XFxufVxcbi5wYWdpbmF0aW9uLmlzLXJvdW5kZWQgLnBhZ2luYXRpb24tbGluayB7XFxuICBib3JkZXItcmFkaXVzOiA5OTk5cHg7XFxufVxcblxcbi5wYWdpbmF0aW9uLFxcbi5wYWdpbmF0aW9uLWxpc3Qge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnBhZ2luYXRpb24tcHJldmlvdXMsXFxuLnBhZ2luYXRpb24tbmV4dCxcXG4ucGFnaW5hdGlvbi1saW5rLFxcbi5wYWdpbmF0aW9uLWVsbGlwc2lzIHtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW46IDAuMjVyZW07XFxuICBwYWRkaW5nLWxlZnQ6IDAuNWVtO1xcbiAgcGFkZGluZy1yaWdodDogMC41ZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5wYWdpbmF0aW9uLXByZXZpb3VzLFxcbi5wYWdpbmF0aW9uLW5leHQsXFxuLnBhZ2luYXRpb24tbGluayB7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgODYlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBtaW4td2lkdGg6IDIuNWVtO1xcbn1cXG4ucGFnaW5hdGlvbi1wcmV2aW91czpob3ZlcixcXG4ucGFnaW5hdGlvbi1uZXh0OmhvdmVyLFxcbi5wYWdpbmF0aW9uLWxpbms6aG92ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDcxJSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4ucGFnaW5hdGlvbi1wcmV2aW91czpmb2N1cyxcXG4ucGFnaW5hdGlvbi1uZXh0OmZvY3VzLFxcbi5wYWdpbmF0aW9uLWxpbms6Zm9jdXMge1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxufVxcbi5wYWdpbmF0aW9uLXByZXZpb3VzOmFjdGl2ZSxcXG4ucGFnaW5hdGlvbi1uZXh0OmFjdGl2ZSxcXG4ucGFnaW5hdGlvbi1saW5rOmFjdGl2ZSB7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDFweCAycHggcmdiYSgxMCwgMTAsIDEwLCAwLjIpO1xcbn1cXG4ucGFnaW5hdGlvbi1wcmV2aW91c1tkaXNhYmxlZF0sIC5wYWdpbmF0aW9uLXByZXZpb3VzLmlzLWRpc2FibGVkLFxcbi5wYWdpbmF0aW9uLW5leHRbZGlzYWJsZWRdLFxcbi5wYWdpbmF0aW9uLW5leHQuaXMtZGlzYWJsZWQsXFxuLnBhZ2luYXRpb24tbGlua1tkaXNhYmxlZF0sXFxuLnBhZ2luYXRpb24tbGluay5pcy1kaXNhYmxlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDg2JSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgODYlKTtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0OCUpO1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG5cXG4ucGFnaW5hdGlvbi1wcmV2aW91cyxcXG4ucGFnaW5hdGlvbi1uZXh0IHtcXG4gIHBhZGRpbmctbGVmdDogMC43NWVtO1xcbiAgcGFkZGluZy1yaWdodDogMC43NWVtO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuXFxuLnBhZ2luYXRpb24tbGluay5pcy1jdXJyZW50IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcblxcbi5wYWdpbmF0aW9uLWVsbGlwc2lzIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDcxJSk7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLnBhZ2luYXRpb24tbGlzdCB7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcbi5wYWdpbmF0aW9uLWxpc3QgbGkge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5wYWdpbmF0aW9uIHtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgfVxcbiAgLnBhZ2luYXRpb24tcHJldmlvdXMsXFxuICAucGFnaW5hdGlvbi1uZXh0IHtcXG4gICAgZmxleC1ncm93OiAxO1xcbiAgICBmbGV4LXNocmluazogMTtcXG4gIH1cXG4gIC5wYWdpbmF0aW9uLWxpc3QgbGkge1xcbiAgICBmbGV4LWdyb3c6IDE7XFxuICAgIGZsZXgtc2hyaW5rOiAxO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5wYWdpbmF0aW9uLWxpc3Qge1xcbiAgICBmbGV4LWdyb3c6IDE7XFxuICAgIGZsZXgtc2hyaW5rOiAxO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICAgIG9yZGVyOiAxO1xcbiAgfVxcbiAgLnBhZ2luYXRpb24tcHJldmlvdXMsXFxuICAucGFnaW5hdGlvbi1uZXh0LFxcbiAgLnBhZ2luYXRpb24tbGluayxcXG4gIC5wYWdpbmF0aW9uLWVsbGlwc2lzIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcXG4gICAgbWFyZ2luLXRvcDogMDtcXG4gIH1cXG4gIC5wYWdpbmF0aW9uLXByZXZpb3VzIHtcXG4gICAgb3JkZXI6IDI7XFxuICB9XFxuICAucGFnaW5hdGlvbi1uZXh0IHtcXG4gICAgb3JkZXI6IDM7XFxuICB9XFxuICAucGFnaW5hdGlvbiB7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcXG4gICAgbWFyZ2luLXRvcDogMDtcXG4gIH1cXG4gIC5wYWdpbmF0aW9uLmlzLWNlbnRlcmVkIC5wYWdpbmF0aW9uLXByZXZpb3VzIHtcXG4gICAgb3JkZXI6IDE7XFxuICB9XFxuICAucGFnaW5hdGlvbi5pcy1jZW50ZXJlZCAucGFnaW5hdGlvbi1saXN0IHtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIG9yZGVyOiAyO1xcbiAgfVxcbiAgLnBhZ2luYXRpb24uaXMtY2VudGVyZWQgLnBhZ2luYXRpb24tbmV4dCB7XFxuICAgIG9yZGVyOiAzO1xcbiAgfVxcbiAgLnBhZ2luYXRpb24uaXMtcmlnaHQgLnBhZ2luYXRpb24tcHJldmlvdXMge1xcbiAgICBvcmRlcjogMTtcXG4gIH1cXG4gIC5wYWdpbmF0aW9uLmlzLXJpZ2h0IC5wYWdpbmF0aW9uLW5leHQge1xcbiAgICBvcmRlcjogMjtcXG4gIH1cXG4gIC5wYWdpbmF0aW9uLmlzLXJpZ2h0IC5wYWdpbmF0aW9uLWxpc3Qge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgICBvcmRlcjogMztcXG4gIH1cXG59XFxuLnBhbmVsIHtcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gIGJveC1zaGFkb3c6IDAgMC41ZW0gMWVtIC0wLjEyNWVtIHJnYmEoMTAsIDEwLCAxMCwgMC4xKSwgMCAwcHggMCAxcHggcmdiYSgxMCwgMTAsIDEwLCAwLjAyKTtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuLnBhbmVsOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMS41cmVtO1xcbn1cXG4ucGFuZWwuaXMtd2hpdGUgLnBhbmVsLWhlYWRpbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLnBhbmVsLmlzLXdoaXRlIC5wYW5lbC10YWJzIGEuaXMtYWN0aXZlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5wYW5lbC5pcy13aGl0ZSAucGFuZWwtYmxvY2suaXMtYWN0aXZlIC5wYW5lbC1pY29uIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4ucGFuZWwuaXMtYmxhY2sgLnBhbmVsLWhlYWRpbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLnBhbmVsLmlzLWJsYWNrIC5wYW5lbC10YWJzIGEuaXMtYWN0aXZlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4ucGFuZWwuaXMtYmxhY2sgLnBhbmVsLWJsb2NrLmlzLWFjdGl2ZSAucGFuZWwtaWNvbiB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5wYW5lbC5pcy1saWdodCAucGFuZWwtaGVhZGluZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4ucGFuZWwuaXMtbGlnaHQgLnBhbmVsLXRhYnMgYS5pcy1hY3RpdmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4ucGFuZWwuaXMtbGlnaHQgLnBhbmVsLWJsb2NrLmlzLWFjdGl2ZSAucGFuZWwtaWNvbiB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4ucGFuZWwuaXMtZGFyayAucGFuZWwtaGVhZGluZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnBhbmVsLmlzLWRhcmsgLnBhbmVsLXRhYnMgYS5pcy1hY3RpdmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG4ucGFuZWwuaXMtZGFyayAucGFuZWwtYmxvY2suaXMtYWN0aXZlIC5wYW5lbC1pY29uIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5wYW5lbC5pcy1wcmltYXJ5IC5wYW5lbC1oZWFkaW5nIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnBhbmVsLmlzLXByaW1hcnkgLnBhbmVsLXRhYnMgYS5pcy1hY3RpdmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG59XFxuLnBhbmVsLmlzLXByaW1hcnkgLnBhbmVsLWJsb2NrLmlzLWFjdGl2ZSAucGFuZWwtaWNvbiB7XFxuICBjb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG59XFxuLnBhbmVsLmlzLWxpbmsgLnBhbmVsLWhlYWRpbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5wYW5lbC5pcy1saW5rIC5wYW5lbC10YWJzIGEuaXMtYWN0aXZlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG59XFxuLnBhbmVsLmlzLWxpbmsgLnBhbmVsLWJsb2NrLmlzLWFjdGl2ZSAucGFuZWwtaWNvbiB7XFxuICBjb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbn1cXG4ucGFuZWwuaXMtaW5mbyAucGFuZWwtaGVhZGluZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnBhbmVsLmlzLWluZm8gLnBhbmVsLXRhYnMgYS5pcy1hY3RpdmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpO1xcbn1cXG4ucGFuZWwuaXMtaW5mbyAucGFuZWwtYmxvY2suaXMtYWN0aXZlIC5wYW5lbC1pY29uIHtcXG4gIGNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSk7XFxufVxcbi5wYW5lbC5pcy1zdWNjZXNzIC5wYW5lbC1oZWFkaW5nIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgxNTMsIDUzJSwgNTMlKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ucGFuZWwuaXMtc3VjY2VzcyAucGFuZWwtdGFicyBhLmlzLWFjdGl2ZSB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxufVxcbi5wYW5lbC5pcy1zdWNjZXNzIC5wYW5lbC1ibG9jay5pcy1hY3RpdmUgLnBhbmVsLWljb24ge1xcbiAgY29sb3I6IGhzbCgxNTMsIDUzJSwgNTMlKTtcXG59XFxuLnBhbmVsLmlzLXdhcm5pbmcgLnBhbmVsLWhlYWRpbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLnBhbmVsLmlzLXdhcm5pbmcgLnBhbmVsLXRhYnMgYS5pcy1hY3RpdmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbn1cXG4ucGFuZWwuaXMtd2FybmluZyAucGFuZWwtYmxvY2suaXMtYWN0aXZlIC5wYW5lbC1pY29uIHtcXG4gIGNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxufVxcbi5wYW5lbC5pcy1kYW5nZXIgLnBhbmVsLWhlYWRpbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5wYW5lbC5pcy1kYW5nZXIgLnBhbmVsLXRhYnMgYS5pcy1hY3RpdmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbn1cXG4ucGFuZWwuaXMtZGFuZ2VyIC5wYW5lbC1ibG9jay5pcy1hY3RpdmUgLnBhbmVsLWljb24ge1xcbiAgY29sb3I6IGhzbCgzNDgsIDg2JSwgNjElKTtcXG59XFxuXFxuLnBhbmVsLXRhYnM6bm90KDpsYXN0LWNoaWxkKSxcXG4ucGFuZWwtYmxvY2s6bm90KDpsYXN0LWNoaWxkKSB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgaHNsKDAsIDAlLCA5MyUpO1xcbn1cXG5cXG4ucGFuZWwtaGVhZGluZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDkzJSk7XFxuICBib3JkZXItcmFkaXVzOiA2cHggNnB4IDAgMDtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBmb250LXNpemU6IDEuMjVlbTtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBsaW5lLWhlaWdodDogMS4yNTtcXG4gIHBhZGRpbmc6IDAuNzVlbSAxZW07XFxufVxcblxcbi5wYW5lbC10YWJzIHtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmb250LXNpemU6IDAuODc1ZW07XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuLnBhbmVsLXRhYnMgYSB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgaHNsKDAsIDAlLCA4NiUpO1xcbiAgbWFyZ2luLWJvdHRvbTogLTFweDtcXG4gIHBhZGRpbmc6IDAuNWVtO1xcbn1cXG4ucGFuZWwtdGFicyBhLmlzLWFjdGl2ZSB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiBoc2woMCwgMCUsIDI5JSk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbn1cXG5cXG4ucGFuZWwtbGlzdCBhIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDI5JSk7XFxufVxcbi5wYW5lbC1saXN0IGE6aG92ZXIge1xcbiAgY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG59XFxuXFxuLnBhbmVsLWJsb2NrIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIHBhZGRpbmc6IDAuNWVtIDAuNzVlbTtcXG59XFxuLnBhbmVsLWJsb2NrIGlucHV0W3R5cGU9Y2hlY2tib3hdIHtcXG4gIG1hcmdpbi1yaWdodDogMC43NWVtO1xcbn1cXG4ucGFuZWwtYmxvY2sgPiAuY29udHJvbCB7XFxuICBmbGV4LWdyb3c6IDE7XFxuICBmbGV4LXNocmluazogMTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ucGFuZWwtYmxvY2suaXMtd3JhcHBlZCB7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcbi5wYW5lbC1ibG9jay5pcy1hY3RpdmUge1xcbiAgYm9yZGVyLWxlZnQtY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5wYW5lbC1ibG9jay5pcy1hY3RpdmUgLnBhbmVsLWljb24ge1xcbiAgY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG59XFxuLnBhbmVsLWJsb2NrOmxhc3QtY2hpbGQge1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNnB4O1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDZweDtcXG59XFxuXFxuYS5wYW5lbC1ibG9jayxcXG5sYWJlbC5wYW5lbC1ibG9jayB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbmEucGFuZWwtYmxvY2s6aG92ZXIsXFxubGFiZWwucGFuZWwtYmxvY2s6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG5cXG4ucGFuZWwtaWNvbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBoZWlnaHQ6IDFlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxZW07XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbiAgd2lkdGg6IDFlbTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQ4JSk7XFxuICBtYXJnaW4tcmlnaHQ6IDAuNzVlbTtcXG59XFxuLnBhbmVsLWljb24gLmZhIHtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbn1cXG5cXG4udGFicyB7XFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgb3ZlcmZsb3cteDogYXV0bztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcbi50YWJzIGEge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6IGhzbCgwLCAwJSwgODYlKTtcXG4gIGJvcmRlci1ib3R0b20tc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4O1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjklKTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG1hcmdpbi1ib3R0b206IC0xcHg7XFxuICBwYWRkaW5nOiAwLjVlbSAxZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG4udGFicyBhOmhvdmVyIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi50YWJzIGxpIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4udGFicyBsaS5pcy1hY3RpdmUgYSB7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxuICBjb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbn1cXG4udGFicyB1bCB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsKDAsIDAlLCA4NiUpO1xcbiAgYm9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQ7XFxuICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZmxleC1zaHJpbms6IDA7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcbi50YWJzIHVsLmlzLWxlZnQge1xcbiAgcGFkZGluZy1yaWdodDogMC43NWVtO1xcbn1cXG4udGFicyB1bC5pcy1jZW50ZXIge1xcbiAgZmxleDogbm9uZTtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgcGFkZGluZy1sZWZ0OiAwLjc1ZW07XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjc1ZW07XFxufVxcbi50YWJzIHVsLmlzLXJpZ2h0IHtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxuICBwYWRkaW5nLWxlZnQ6IDAuNzVlbTtcXG59XFxuLnRhYnMgLmljb246Zmlyc3QtY2hpbGQge1xcbiAgbWFyZ2luLXJpZ2h0OiAwLjVlbTtcXG59XFxuLnRhYnMgLmljb246bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tbGVmdDogMC41ZW07XFxufVxcbi50YWJzLmlzLWNlbnRlcmVkIHVsIHtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG4udGFicy5pcy1yaWdodCB1bCB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbn1cXG4udGFicy5pcy1ib3hlZCBhIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4IDRweCAwIDA7XFxufVxcbi50YWJzLmlzLWJveGVkIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsKDAsIDAlLCA4NiUpO1xcbn1cXG4udGFicy5pcy1ib3hlZCBsaS5pcy1hY3RpdmUgYSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDg2JSk7XFxuICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xcbn1cXG4udGFicy5pcy1mdWxsd2lkdGggbGkge1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZmxleC1zaHJpbms6IDA7XFxufVxcbi50YWJzLmlzLXRvZ2dsZSBhIHtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCA4NiUpO1xcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gIGJvcmRlci13aWR0aDogMXB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnRhYnMuaXMtdG9nZ2xlIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMCwgMCUsIDcxJSk7XFxuICB6LWluZGV4OiAyO1xcbn1cXG4udGFicy5pcy10b2dnbGUgbGkgKyBsaSB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuLnRhYnMuaXMtdG9nZ2xlIGxpOmZpcnN0LWNoaWxkIGEge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNHB4O1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNHB4O1xcbn1cXG4udGFicy5pcy10b2dnbGUgbGk6bGFzdC1jaGlsZCBhIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4O1xcbn1cXG4udGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgYm9yZGVyLWNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSk7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi50YWJzLmlzLXRvZ2dsZSB1bCB7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbn1cXG4udGFicy5pcy10b2dnbGUuaXMtdG9nZ2xlLXJvdW5kZWQgbGk6Zmlyc3QtY2hpbGQgYSB7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA5OTk5cHg7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA5OTk5cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDEuMjVlbTtcXG59XFxuLnRhYnMuaXMtdG9nZ2xlLmlzLXRvZ2dsZS1yb3VuZGVkIGxpOmxhc3QtY2hpbGQgYSB7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogOTk5OXB4O1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDk5OTlweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDEuMjVlbTtcXG59XFxuLnRhYnMuaXMtc21hbGwge1xcbiAgZm9udC1zaXplOiAwLjc1cmVtO1xcbn1cXG4udGFicy5pcy1tZWRpdW0ge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG4udGFicy5pcy1sYXJnZSB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuLyogQnVsbWEgR3JpZCAqL1xcbi5jb2x1bW4ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmbGV4LWJhc2lzOiAwO1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZmxleC1zaHJpbms6IDE7XFxuICBwYWRkaW5nOiAwLjc1cmVtO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLW5hcnJvdyB7XFxuICBmbGV4OiBub25lO1xcbiAgd2lkdGg6IHVuc2V0O1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLWZ1bGwge1xcbiAgZmxleDogbm9uZTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLXRocmVlLXF1YXJ0ZXJzIHtcXG4gIGZsZXg6IG5vbmU7XFxuICB3aWR0aDogNzUlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLXR3by10aGlyZHMge1xcbiAgZmxleDogbm9uZTtcXG4gIHdpZHRoOiA2Ni42NjY2JTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1oYWxmIHtcXG4gIGZsZXg6IG5vbmU7XFxuICB3aWR0aDogNTAlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLW9uZS10aGlyZCB7XFxuICBmbGV4OiBub25lO1xcbiAgd2lkdGg6IDMzLjMzMzMlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLW9uZS1xdWFydGVyIHtcXG4gIGZsZXg6IG5vbmU7XFxuICB3aWR0aDogMjUlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLW9uZS1maWZ0aCB7XFxuICBmbGV4OiBub25lO1xcbiAgd2lkdGg6IDIwJTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy10d28tZmlmdGhzIHtcXG4gIGZsZXg6IG5vbmU7XFxuICB3aWR0aDogNDAlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLXRocmVlLWZpZnRocyB7XFxuICBmbGV4OiBub25lO1xcbiAgd2lkdGg6IDYwJTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1mb3VyLWZpZnRocyB7XFxuICBmbGV4OiBub25lO1xcbiAgd2lkdGg6IDgwJTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1vZmZzZXQtdGhyZWUtcXVhcnRlcnMge1xcbiAgbWFyZ2luLWxlZnQ6IDc1JTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1vZmZzZXQtdHdvLXRoaXJkcyB7XFxuICBtYXJnaW4tbGVmdDogNjYuNjY2NiU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtb2Zmc2V0LWhhbGYge1xcbiAgbWFyZ2luLWxlZnQ6IDUwJTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1vZmZzZXQtb25lLXRoaXJkIHtcXG4gIG1hcmdpbi1sZWZ0OiAzMy4zMzMzJTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1vZmZzZXQtb25lLXF1YXJ0ZXIge1xcbiAgbWFyZ2luLWxlZnQ6IDI1JTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1vZmZzZXQtb25lLWZpZnRoIHtcXG4gIG1hcmdpbi1sZWZ0OiAyMCU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtb2Zmc2V0LXR3by1maWZ0aHMge1xcbiAgbWFyZ2luLWxlZnQ6IDQwJTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1vZmZzZXQtdGhyZWUtZmlmdGhzIHtcXG4gIG1hcmdpbi1sZWZ0OiA2MCU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtb2Zmc2V0LWZvdXItZmlmdGhzIHtcXG4gIG1hcmdpbi1sZWZ0OiA4MCU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtMCB7XFxuICBmbGV4OiBub25lO1xcbiAgd2lkdGg6IDAlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLW9mZnNldC0wIHtcXG4gIG1hcmdpbi1sZWZ0OiAwJTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy0xIHtcXG4gIGZsZXg6IG5vbmU7XFxuICB3aWR0aDogOC4zMzMzMzMzNyU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtb2Zmc2V0LTEge1xcbiAgbWFyZ2luLWxlZnQ6IDguMzMzMzMzMzclO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLTIge1xcbiAgZmxleDogbm9uZTtcXG4gIHdpZHRoOiAxNi42NjY2NjY3NCU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtb2Zmc2V0LTIge1xcbiAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY2Njc0JTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy0zIHtcXG4gIGZsZXg6IG5vbmU7XFxuICB3aWR0aDogMjUlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLW9mZnNldC0zIHtcXG4gIG1hcmdpbi1sZWZ0OiAyNSU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtNCB7XFxuICBmbGV4OiBub25lO1xcbiAgd2lkdGg6IDMzLjMzMzMzMzM3JTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1vZmZzZXQtNCB7XFxuICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzMzclO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLTUge1xcbiAgZmxleDogbm9uZTtcXG4gIHdpZHRoOiA0MS42NjY2NjY3NCU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtb2Zmc2V0LTUge1xcbiAgbWFyZ2luLWxlZnQ6IDQxLjY2NjY2Njc0JTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy02IHtcXG4gIGZsZXg6IG5vbmU7XFxuICB3aWR0aDogNTAlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLW9mZnNldC02IHtcXG4gIG1hcmdpbi1sZWZ0OiA1MCU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtNyB7XFxuICBmbGV4OiBub25lO1xcbiAgd2lkdGg6IDU4LjMzMzMzMzM3JTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy1vZmZzZXQtNyB7XFxuICBtYXJnaW4tbGVmdDogNTguMzMzMzMzMzclO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLTgge1xcbiAgZmxleDogbm9uZTtcXG4gIHdpZHRoOiA2Ni42NjY2NjY3NCU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtb2Zmc2V0LTgge1xcbiAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2Njc0JTtcXG59XFxuLmNvbHVtbnMuaXMtbW9iaWxlID4gLmNvbHVtbi5pcy05IHtcXG4gIGZsZXg6IG5vbmU7XFxuICB3aWR0aDogNzUlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLW9mZnNldC05IHtcXG4gIG1hcmdpbi1sZWZ0OiA3NSU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtMTAge1xcbiAgZmxleDogbm9uZTtcXG4gIHdpZHRoOiA4My4zMzMzMzMzNyU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtb2Zmc2V0LTEwIHtcXG4gIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMzNyU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtMTEge1xcbiAgZmxleDogbm9uZTtcXG4gIHdpZHRoOiA5MS42NjY2NjY3NCU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtb2Zmc2V0LTExIHtcXG4gIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjY3NCU7XFxufVxcbi5jb2x1bW5zLmlzLW1vYmlsZSA+IC5jb2x1bW4uaXMtMTIge1xcbiAgZmxleDogbm9uZTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUgPiAuY29sdW1uLmlzLW9mZnNldC0xMiB7XFxuICBtYXJnaW4tbGVmdDogMTAwJTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5jb2x1bW4uaXMtbmFycm93LW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiB1bnNldDtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtZnVsbC1tb2JpbGUge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdGhyZWUtcXVhcnRlcnMtbW9iaWxlIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdHdvLXRoaXJkcy1tb2JpbGUge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNjYuNjY2NiU7XFxuICB9XFxuICAuY29sdW1uLmlzLWhhbGYtbW9iaWxlIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb25lLXRoaXJkLW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAzMy4zMzMzJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb25lLXF1YXJ0ZXItbW9iaWxlIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb25lLWZpZnRoLW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAyMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLXR3by1maWZ0aHMtbW9iaWxlIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDQwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdGhyZWUtZmlmdGhzLW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLWZvdXItZmlmdGhzLW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC10aHJlZS1xdWFydGVycy1tb2JpbGUge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdHdvLXRoaXJkcy1tb2JpbGUge1xcbiAgICBtYXJnaW4tbGVmdDogNjYuNjY2NiU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1oYWxmLW1vYmlsZSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1vbmUtdGhpcmQtbW9iaWxlIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtb25lLXF1YXJ0ZXItbW9iaWxlIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LW9uZS1maWZ0aC1tb2JpbGUge1xcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdHdvLWZpZnRocy1tb2JpbGUge1xcbiAgICBtYXJnaW4tbGVmdDogNDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdGhyZWUtZmlmdGhzLW1vYmlsZSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1mb3VyLWZpZnRocy1tb2JpbGUge1xcbiAgICBtYXJnaW4tbGVmdDogODAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0wLW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTAtbW9iaWxlIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xLW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEtbW9iaWxlIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDguMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0yLW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAxNi42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0yLW1vYmlsZSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxNi42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTMtbW9iaWxlIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTMtbW9iaWxlIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtNC1tb2JpbGUge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMzMuMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNC1tb2JpbGUge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy01LW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA0MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC01LW1vYmlsZSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTYtbW9iaWxlIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTYtbW9iaWxlIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtNy1tb2JpbGUge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNTguMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNy1tb2JpbGUge1xcbiAgICBtYXJnaW4tbGVmdDogNTguMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy04LW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2Ni42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC04LW1vYmlsZSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTktbW9iaWxlIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTktbW9iaWxlIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMTAtbW9iaWxlIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDgzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEwLW1vYmlsZSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLTExLW1vYmlsZSB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA5MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0xMS1tb2JpbGUge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xMi1tb2JpbGUge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEyLW1vYmlsZSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxMDAlO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5jb2x1bW4uaXMtbmFycm93LCAuY29sdW1uLmlzLW5hcnJvdy10YWJsZXQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogdW5zZXQ7XFxuICB9XFxuICAuY29sdW1uLmlzLWZ1bGwsIC5jb2x1bW4uaXMtZnVsbC10YWJsZXQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdGhyZWUtcXVhcnRlcnMsIC5jb2x1bW4uaXMtdGhyZWUtcXVhcnRlcnMtdGFibGV0IHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdHdvLXRoaXJkcywgLmNvbHVtbi5pcy10d28tdGhpcmRzLXRhYmxldCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2Ni42NjY2JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtaGFsZiwgLmNvbHVtbi5pcy1oYWxmLXRhYmxldCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA1MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9uZS10aGlyZCwgLmNvbHVtbi5pcy1vbmUtdGhpcmQtdGFibGV0IHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDMzLjMzMzMlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vbmUtcXVhcnRlciwgLmNvbHVtbi5pcy1vbmUtcXVhcnRlci10YWJsZXQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMjUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vbmUtZmlmdGgsIC5jb2x1bW4uaXMtb25lLWZpZnRoLXRhYmxldCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAyMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLXR3by1maWZ0aHMsIC5jb2x1bW4uaXMtdHdvLWZpZnRocy10YWJsZXQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy10aHJlZS1maWZ0aHMsIC5jb2x1bW4uaXMtdGhyZWUtZmlmdGhzLXRhYmxldCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLWZvdXItZmlmdGhzLCAuY29sdW1uLmlzLWZvdXItZmlmdGhzLXRhYmxldCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC10aHJlZS1xdWFydGVycywgLmNvbHVtbi5pcy1vZmZzZXQtdGhyZWUtcXVhcnRlcnMtdGFibGV0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LXR3by10aGlyZHMsIC5jb2x1bW4uaXMtb2Zmc2V0LXR3by10aGlyZHMtdGFibGV0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjYlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtaGFsZiwgLmNvbHVtbi5pcy1vZmZzZXQtaGFsZi10YWJsZXQge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtb25lLXRoaXJkLCAuY29sdW1uLmlzLW9mZnNldC1vbmUtdGhpcmQtdGFibGV0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtb25lLXF1YXJ0ZXIsIC5jb2x1bW4uaXMtb2Zmc2V0LW9uZS1xdWFydGVyLXRhYmxldCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1vbmUtZmlmdGgsIC5jb2x1bW4uaXMtb2Zmc2V0LW9uZS1maWZ0aC10YWJsZXQge1xcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdHdvLWZpZnRocywgLmNvbHVtbi5pcy1vZmZzZXQtdHdvLWZpZnRocy10YWJsZXQge1xcbiAgICBtYXJnaW4tbGVmdDogNDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdGhyZWUtZmlmdGhzLCAuY29sdW1uLmlzLW9mZnNldC10aHJlZS1maWZ0aHMtdGFibGV0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDYwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LWZvdXItZmlmdGhzLCAuY29sdW1uLmlzLW9mZnNldC1mb3VyLWZpZnRocy10YWJsZXQge1xcbiAgICBtYXJnaW4tbGVmdDogODAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0wLCAuY29sdW1uLmlzLTAtdGFibGV0IHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMCwgLmNvbHVtbi5pcy1vZmZzZXQtMC10YWJsZXQge1xcbiAgICBtYXJnaW4tbGVmdDogMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTEsIC5jb2x1bW4uaXMtMS10YWJsZXQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogOC4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0xLCAuY29sdW1uLmlzLW9mZnNldC0xLXRhYmxldCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMiwgLmNvbHVtbi5pcy0yLXRhYmxldCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAxNi42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0yLCAuY29sdW1uLmlzLW9mZnNldC0yLXRhYmxldCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxNi42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTMsIC5jb2x1bW4uaXMtMy10YWJsZXQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMjUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMywgLmNvbHVtbi5pcy1vZmZzZXQtMy10YWJsZXQge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy00LCAuY29sdW1uLmlzLTQtdGFibGV0IHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDMzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTQsIC5jb2x1bW4uaXMtb2Zmc2V0LTQtdGFibGV0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtNSwgLmNvbHVtbi5pcy01LXRhYmxldCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA0MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC01LCAuY29sdW1uLmlzLW9mZnNldC01LXRhYmxldCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTYsIC5jb2x1bW4uaXMtNi10YWJsZXQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNTAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNiwgLmNvbHVtbi5pcy1vZmZzZXQtNi10YWJsZXQge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy03LCAuY29sdW1uLmlzLTctdGFibGV0IHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDU4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTcsIC5jb2x1bW4uaXMtb2Zmc2V0LTctdGFibGV0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDU4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtOCwgLmNvbHVtbi5pcy04LXRhYmxldCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2Ni42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC04LCAuY29sdW1uLmlzLW9mZnNldC04LXRhYmxldCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTksIC5jb2x1bW4uaXMtOS10YWJsZXQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNzUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtOSwgLmNvbHVtbi5pcy1vZmZzZXQtOS10YWJsZXQge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xMCwgLmNvbHVtbi5pcy0xMC10YWJsZXQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogODMuMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMTAsIC5jb2x1bW4uaXMtb2Zmc2V0LTEwLXRhYmxldCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLTExLCAuY29sdW1uLmlzLTExLXRhYmxldCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA5MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0xMSwgLmNvbHVtbi5pcy1vZmZzZXQtMTEtdGFibGV0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDkxLjY2NjY2Njc0JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMTIsIC5jb2x1bW4uaXMtMTItdGFibGV0IHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0xMiwgLmNvbHVtbi5pcy1vZmZzZXQtMTItdGFibGV0IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDEwMCU7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmNvbHVtbi5pcy1uYXJyb3ctdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogdW5zZXQ7XFxuICB9XFxuICAuY29sdW1uLmlzLWZ1bGwtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdGhyZWUtcXVhcnRlcnMtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNzUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy10d28tdGhpcmRzLXRvdWNoIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDY2LjY2NjYlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1oYWxmLXRvdWNoIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb25lLXRoaXJkLXRvdWNoIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDMzLjMzMzMlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vbmUtcXVhcnRlci10b3VjaCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAyNSU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9uZS1maWZ0aC10b3VjaCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAyMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLXR3by1maWZ0aHMtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy10aHJlZS1maWZ0aHMtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNjAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1mb3VyLWZpZnRocy10b3VjaCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC10aHJlZS1xdWFydGVycy10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA3NSU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC10d28tdGhpcmRzLXRvdWNoIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjYlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtaGFsZi10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1vbmUtdGhpcmQtdG91Y2gge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMyU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1vbmUtcXVhcnRlci10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1vbmUtZmlmdGgtdG91Y2gge1xcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdHdvLWZpZnRocy10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC10aHJlZS1maWZ0aHMtdG91Y2gge1xcbiAgICBtYXJnaW4tbGVmdDogNjAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtZm91ci1maWZ0aHMtdG91Y2gge1xcbiAgICBtYXJnaW4tbGVmdDogODAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0wLXRvdWNoIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMC10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMS10b3VjaCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEtdG91Y2gge1xcbiAgICBtYXJnaW4tbGVmdDogOC4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLTItdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMTYuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMi10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxNi42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTMtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMjUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMy10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7XFxuICB9XFxuICAuY29sdW1uLmlzLTQtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMzMuMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNC10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzMy4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLTUtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNDEuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNS10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTYtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNTAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNi10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTctdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNTguMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNy10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLTgtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNjYuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtOC10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTktdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNzUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtOS10b3VjaCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA3NSU7XFxuICB9XFxuICAuY29sdW1uLmlzLTEwLXRvdWNoIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDgzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEwLXRvdWNoIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDgzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMTEtdG91Y2gge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogOTEuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMTEtdG91Y2gge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xMi10b3VjaCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMTItdG91Y2gge1xcbiAgICBtYXJnaW4tbGVmdDogMTAwJTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuY29sdW1uLmlzLW5hcnJvdy1kZXNrdG9wIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IHVuc2V0O1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1mdWxsLWRlc2t0b3Age1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdGhyZWUtcXVhcnRlcnMtZGVza3RvcCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA3NSU7XFxuICB9XFxuICAuY29sdW1uLmlzLXR3by10aGlyZHMtZGVza3RvcCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2Ni42NjY2JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtaGFsZi1kZXNrdG9wIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb25lLXRoaXJkLWRlc2t0b3Age1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMzMuMzMzMyU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9uZS1xdWFydGVyLWRlc2t0b3Age1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMjUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vbmUtZmlmdGgtZGVza3RvcCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAyMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLXR3by1maWZ0aHMtZGVza3RvcCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA0MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLXRocmVlLWZpZnRocy1kZXNrdG9wIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDYwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtZm91ci1maWZ0aHMtZGVza3RvcCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC10aHJlZS1xdWFydGVycy1kZXNrdG9wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LXR3by10aGlyZHMtZGVza3RvcCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LWhhbGYtZGVza3RvcCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1vbmUtdGhpcmQtZGVza3RvcCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzMy4zMzMzJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LW9uZS1xdWFydGVyLWRlc2t0b3Age1xcbiAgICBtYXJnaW4tbGVmdDogMjUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtb25lLWZpZnRoLWRlc2t0b3Age1xcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdHdvLWZpZnRocy1kZXNrdG9wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDQwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LXRocmVlLWZpZnRocy1kZXNrdG9wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDYwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LWZvdXItZmlmdGhzLWRlc2t0b3Age1xcbiAgICBtYXJnaW4tbGVmdDogODAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0wLWRlc2t0b3Age1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0wLWRlc2t0b3Age1xcbiAgICBtYXJnaW4tbGVmdDogMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTEtZGVza3RvcCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEtZGVza3RvcCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMi1kZXNrdG9wIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDE2LjY2NjY2Njc0JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTItZGVza3RvcCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxNi42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTMtZGVza3RvcCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAyNSU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0zLWRlc2t0b3Age1xcbiAgICBtYXJnaW4tbGVmdDogMjUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy00LWRlc2t0b3Age1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMzMuMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNC1kZXNrdG9wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtNS1kZXNrdG9wIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDQxLjY2NjY2Njc0JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTUtZGVza3RvcCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTYtZGVza3RvcCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA1MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC02LWRlc2t0b3Age1xcbiAgICBtYXJnaW4tbGVmdDogNTAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy03LWRlc2t0b3Age1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNTguMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNy1kZXNrdG9wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDU4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtOC1kZXNrdG9wIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDY2LjY2NjY2Njc0JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTgtZGVza3RvcCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTktZGVza3RvcCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA3NSU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC05LWRlc2t0b3Age1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xMC1kZXNrdG9wIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDgzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEwLWRlc2t0b3Age1xcbiAgICBtYXJnaW4tbGVmdDogODMuMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xMS1kZXNrdG9wIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDkxLjY2NjY2Njc0JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTExLWRlc2t0b3Age1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xMi1kZXNrdG9wIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0xMi1kZXNrdG9wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDEwMCU7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkge1xcbiAgLmNvbHVtbi5pcy1uYXJyb3ctd2lkZXNjcmVlbiB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiB1bnNldDtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtZnVsbC13aWRlc2NyZWVuIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLXRocmVlLXF1YXJ0ZXJzLXdpZGVzY3JlZW4ge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNzUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy10d28tdGhpcmRzLXdpZGVzY3JlZW4ge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNjYuNjY2NiU7XFxuICB9XFxuICAuY29sdW1uLmlzLWhhbGYtd2lkZXNjcmVlbiB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA1MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9uZS10aGlyZC13aWRlc2NyZWVuIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDMzLjMzMzMlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vbmUtcXVhcnRlci13aWRlc2NyZWVuIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb25lLWZpZnRoLXdpZGVzY3JlZW4ge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMjAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy10d28tZmlmdGhzLXdpZGVzY3JlZW4ge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy10aHJlZS1maWZ0aHMtd2lkZXNjcmVlbiB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLWZvdXItZmlmdGhzLXdpZGVzY3JlZW4ge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogODAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdGhyZWUtcXVhcnRlcnMtd2lkZXNjcmVlbiB7XFxuICAgIG1hcmdpbi1sZWZ0OiA3NSU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC10d28tdGhpcmRzLXdpZGVzY3JlZW4ge1xcbiAgICBtYXJnaW4tbGVmdDogNjYuNjY2NiU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1oYWxmLXdpZGVzY3JlZW4ge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtb25lLXRoaXJkLXdpZGVzY3JlZW4ge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMyU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1vbmUtcXVhcnRlci13aWRlc2NyZWVuIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LW9uZS1maWZ0aC13aWRlc2NyZWVuIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDIwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LXR3by1maWZ0aHMtd2lkZXNjcmVlbiB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC10aHJlZS1maWZ0aHMtd2lkZXNjcmVlbiB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1mb3VyLWZpZnRocy13aWRlc2NyZWVuIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDgwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMC13aWRlc2NyZWVuIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMC13aWRlc2NyZWVuIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xLXdpZGVzY3JlZW4ge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogOC4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0xLXdpZGVzY3JlZW4ge1xcbiAgICBtYXJnaW4tbGVmdDogOC4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLTItd2lkZXNjcmVlbiB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAxNi42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0yLXdpZGVzY3JlZW4ge1xcbiAgICBtYXJnaW4tbGVmdDogMTYuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0zLXdpZGVzY3JlZW4ge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMjUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMy13aWRlc2NyZWVuIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtNC13aWRlc2NyZWVuIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDMzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTQtd2lkZXNjcmVlbiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzMy4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLTUtd2lkZXNjcmVlbiB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA0MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC01LXdpZGVzY3JlZW4ge1xcbiAgICBtYXJnaW4tbGVmdDogNDEuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy02LXdpZGVzY3JlZW4ge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNTAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNi13aWRlc2NyZWVuIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtNy13aWRlc2NyZWVuIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDU4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTctd2lkZXNjcmVlbiB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLTgtd2lkZXNjcmVlbiB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2Ni42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC04LXdpZGVzY3JlZW4ge1xcbiAgICBtYXJnaW4tbGVmdDogNjYuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy05LXdpZGVzY3JlZW4ge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNzUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtOS13aWRlc2NyZWVuIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMTAtd2lkZXNjcmVlbiB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4My4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0xMC13aWRlc2NyZWVuIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDgzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMTEtd2lkZXNjcmVlbiB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA5MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0xMS13aWRlc2NyZWVuIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDkxLjY2NjY2Njc0JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMTItd2lkZXNjcmVlbiB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtMTItd2lkZXNjcmVlbiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxMDAlO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNDA4cHgpIHtcXG4gIC5jb2x1bW4uaXMtbmFycm93LWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiB1bnNldDtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtZnVsbC1mdWxsaGQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdGhyZWUtcXVhcnRlcnMtZnVsbGhkIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdHdvLXRoaXJkcy1mdWxsaGQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNjYuNjY2NiU7XFxuICB9XFxuICAuY29sdW1uLmlzLWhhbGYtZnVsbGhkIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb25lLXRoaXJkLWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAzMy4zMzMzJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb25lLXF1YXJ0ZXItZnVsbGhkIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb25lLWZpZnRoLWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAyMCU7XFxuICB9XFxuICAuY29sdW1uLmlzLXR3by1maWZ0aHMtZnVsbGhkIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDQwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtdGhyZWUtZmlmdGhzLWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLWZvdXItZmlmdGhzLWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC10aHJlZS1xdWFydGVycy1mdWxsaGQge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdHdvLXRoaXJkcy1mdWxsaGQge1xcbiAgICBtYXJnaW4tbGVmdDogNjYuNjY2NiU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1oYWxmLWZ1bGxoZCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1vbmUtdGhpcmQtZnVsbGhkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtb25lLXF1YXJ0ZXItZnVsbGhkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LW9uZS1maWZ0aC1mdWxsaGQge1xcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdHdvLWZpZnRocy1mdWxsaGQge1xcbiAgICBtYXJnaW4tbGVmdDogNDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtdGhyZWUtZmlmdGhzLWZ1bGxoZCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2MCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC1mb3VyLWZpZnRocy1mdWxsaGQge1xcbiAgICBtYXJnaW4tbGVmdDogODAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0wLWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTAtZnVsbGhkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xLWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA4LjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEtZnVsbGhkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDguMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0yLWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAxNi42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0yLWZ1bGxoZCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxNi42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTMtZnVsbGhkIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTMtZnVsbGhkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDI1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtNC1mdWxsaGQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMzMuMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNC1mdWxsaGQge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy01LWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA0MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC01LWZ1bGxoZCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTYtZnVsbGhkIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDUwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTYtZnVsbGhkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtNy1mdWxsaGQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNTguMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy1vZmZzZXQtNy1mdWxsaGQge1xcbiAgICBtYXJnaW4tbGVmdDogNTguMzMzMzMzMzclO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy04LWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA2Ni42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC04LWZ1bGxoZCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLTktZnVsbGhkIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTktZnVsbGhkIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDc1JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtMTAtZnVsbGhkIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDgzLjMzMzMzMzM3JTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEwLWZ1bGxoZCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMzNyU7XFxuICB9XFxuICAuY29sdW1uLmlzLTExLWZ1bGxoZCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA5MS42NjY2NjY3NCU7XFxuICB9XFxuICAuY29sdW1uLmlzLW9mZnNldC0xMS1mdWxsaGQge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLmNvbHVtbi5pcy0xMi1mdWxsaGQge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5jb2x1bW4uaXMtb2Zmc2V0LTEyLWZ1bGxoZCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxMDAlO1xcbiAgfVxcbn1cXG5cXG4uY29sdW1ucyB7XFxuICBtYXJnaW4tbGVmdDogLTAuNzVyZW07XFxuICBtYXJnaW4tcmlnaHQ6IC0wLjc1cmVtO1xcbiAgbWFyZ2luLXRvcDogLTAuNzVyZW07XFxufVxcbi5jb2x1bW5zOmxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLWJvdHRvbTogLTAuNzVyZW07XFxufVxcbi5jb2x1bW5zOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogY2FsYygxLjVyZW0gLSAwLjc1cmVtKTtcXG59XFxuLmNvbHVtbnMuaXMtY2VudGVyZWQge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi5jb2x1bW5zLmlzLWdhcGxlc3Mge1xcbiAgbWFyZ2luLWxlZnQ6IDA7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxuICBtYXJnaW4tdG9wOiAwO1xcbn1cXG4uY29sdW1ucy5pcy1nYXBsZXNzID4gLmNvbHVtbiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XFxufVxcbi5jb2x1bW5zLmlzLWdhcGxlc3M6bm90KDpsYXN0LWNoaWxkKSB7XFxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XFxufVxcbi5jb2x1bW5zLmlzLWdhcGxlc3M6bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbn1cXG4uY29sdW1ucy5pcy1tb2JpbGUge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLmNvbHVtbnMuaXMtbXVsdGlsaW5lIHtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuLmNvbHVtbnMuaXMtdmNlbnRlcmVkIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSwgcHJpbnQge1xcbiAgLmNvbHVtbnM6bm90KC5pcy1kZXNrdG9wKSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLmNvbHVtbnMuaXMtZGVza3RvcCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICB9XFxufVxcblxcbi5jb2x1bW5zLmlzLXZhcmlhYmxlIHtcXG4gIC0tY29sdW1uR2FwOiAwLjc1cmVtO1xcbiAgbWFyZ2luLWxlZnQ6IGNhbGMoLTEgKiB2YXIoLS1jb2x1bW5HYXApKTtcXG4gIG1hcmdpbi1yaWdodDogY2FsYygtMSAqIHZhcigtLWNvbHVtbkdhcCkpO1xcbn1cXG4uY29sdW1ucy5pcy12YXJpYWJsZSA+IC5jb2x1bW4ge1xcbiAgcGFkZGluZy1sZWZ0OiB2YXIoLS1jb2x1bW5HYXApO1xcbiAgcGFkZGluZy1yaWdodDogdmFyKC0tY29sdW1uR2FwKTtcXG59XFxuLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMCB7XFxuICAtLWNvbHVtbkdhcDogMHJlbTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTAtbW9iaWxlIHtcXG4gICAgLS1jb2x1bW5HYXA6IDByZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSwgcHJpbnQge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMC10YWJsZXQge1xcbiAgICAtLWNvbHVtbkdhcDogMHJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTAtdGFibGV0LW9ubHkge1xcbiAgICAtLWNvbHVtbkdhcDogMHJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0wLXRvdWNoIHtcXG4gICAgLS1jb2x1bW5HYXA6IDByZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMC1kZXNrdG9wIHtcXG4gICAgLS1jb2x1bW5HYXA6IDByZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkgYW5kIChtYXgtd2lkdGg6IDEyMTVweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMC1kZXNrdG9wLW9ubHkge1xcbiAgICAtLWNvbHVtbkdhcDogMHJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0wLXdpZGVzY3JlZW4ge1xcbiAgICAtLWNvbHVtbkdhcDogMHJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSBhbmQgKG1heC13aWR0aDogMTQwN3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0wLXdpZGVzY3JlZW4tb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAwcmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNDA4cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTAtZnVsbGhkIHtcXG4gICAgLS1jb2x1bW5HYXA6IDByZW07XFxuICB9XFxufVxcbi5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTEge1xcbiAgLS1jb2x1bW5HYXA6IDAuMjVyZW07XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0xLW1vYmlsZSB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjI1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTEtdGFibGV0IHtcXG4gICAgLS1jb2x1bW5HYXA6IDAuMjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0xLXRhYmxldC1vbmx5IHtcXG4gICAgLS1jb2x1bW5HYXA6IDAuMjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMS10b3VjaCB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjI1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTEtZGVza3RvcCB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjI1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIGFuZCAobWF4LXdpZHRoOiAxMjE1cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTEtZGVza3RvcC1vbmx5IHtcXG4gICAgLS1jb2x1bW5HYXA6IDAuMjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMS13aWRlc2NyZWVuIHtcXG4gICAgLS1jb2x1bW5HYXA6IDAuMjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkgYW5kIChtYXgtd2lkdGg6IDE0MDdweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMS13aWRlc2NyZWVuLW9ubHkge1xcbiAgICAtLWNvbHVtbkdhcDogMC4yNXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQwOHB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0xLWZ1bGxoZCB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjI1cmVtO1xcbiAgfVxcbn1cXG4uY29sdW1ucy5pcy12YXJpYWJsZS5pcy0yIHtcXG4gIC0tY29sdW1uR2FwOiAwLjVyZW07XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0yLW1vYmlsZSB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSwgcHJpbnQge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMi10YWJsZXQge1xcbiAgICAtLWNvbHVtbkdhcDogMC41cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMi10YWJsZXQtb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMi10b3VjaCB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMi1kZXNrdG9wIHtcXG4gICAgLS1jb2x1bW5HYXA6IDAuNXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSBhbmQgKG1heC13aWR0aDogMTIxNXB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0yLWRlc2t0b3Atb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMi13aWRlc2NyZWVuIHtcXG4gICAgLS1jb2x1bW5HYXA6IDAuNXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSBhbmQgKG1heC13aWR0aDogMTQwN3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0yLXdpZGVzY3JlZW4tb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDhweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMi1mdWxsaGQge1xcbiAgICAtLWNvbHVtbkdhcDogMC41cmVtO1xcbiAgfVxcbn1cXG4uY29sdW1ucy5pcy12YXJpYWJsZS5pcy0zIHtcXG4gIC0tY29sdW1uR2FwOiAwLjc1cmVtO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMy1tb2JpbGUge1xcbiAgICAtLWNvbHVtbkdhcDogMC43NXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0zLXRhYmxldCB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjc1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMy10YWJsZXQtb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjc1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTMtdG91Y2gge1xcbiAgICAtLWNvbHVtbkdhcDogMC43NXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0zLWRlc2t0b3Age1xcbiAgICAtLWNvbHVtbkdhcDogMC43NXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSBhbmQgKG1heC13aWR0aDogMTIxNXB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy0zLWRlc2t0b3Atb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjc1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTMtd2lkZXNjcmVlbiB7XFxuICAgIC0tY29sdW1uR2FwOiAwLjc1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIGFuZCAobWF4LXdpZHRoOiAxNDA3cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTMtd2lkZXNjcmVlbi1vbmx5IHtcXG4gICAgLS1jb2x1bW5HYXA6IDAuNzVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDhweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtMy1mdWxsaGQge1xcbiAgICAtLWNvbHVtbkdhcDogMC43NXJlbTtcXG4gIH1cXG59XFxuLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNCB7XFxuICAtLWNvbHVtbkdhcDogMXJlbTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTQtbW9iaWxlIHtcXG4gICAgLS1jb2x1bW5HYXA6IDFyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSwgcHJpbnQge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNC10YWJsZXQge1xcbiAgICAtLWNvbHVtbkdhcDogMXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTQtdGFibGV0LW9ubHkge1xcbiAgICAtLWNvbHVtbkdhcDogMXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy00LXRvdWNoIHtcXG4gICAgLS1jb2x1bW5HYXA6IDFyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNC1kZXNrdG9wIHtcXG4gICAgLS1jb2x1bW5HYXA6IDFyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkgYW5kIChtYXgtd2lkdGg6IDEyMTVweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNC1kZXNrdG9wLW9ubHkge1xcbiAgICAtLWNvbHVtbkdhcDogMXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy00LXdpZGVzY3JlZW4ge1xcbiAgICAtLWNvbHVtbkdhcDogMXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSBhbmQgKG1heC13aWR0aDogMTQwN3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy00LXdpZGVzY3JlZW4tb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAxcmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNDA4cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTQtZnVsbGhkIHtcXG4gICAgLS1jb2x1bW5HYXA6IDFyZW07XFxuICB9XFxufVxcbi5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTUge1xcbiAgLS1jb2x1bW5HYXA6IDEuMjVyZW07XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy01LW1vYmlsZSB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjI1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTUtdGFibGV0IHtcXG4gICAgLS1jb2x1bW5HYXA6IDEuMjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy01LXRhYmxldC1vbmx5IHtcXG4gICAgLS1jb2x1bW5HYXA6IDEuMjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNS10b3VjaCB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjI1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTUtZGVza3RvcCB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjI1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIGFuZCAobWF4LXdpZHRoOiAxMjE1cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTUtZGVza3RvcC1vbmx5IHtcXG4gICAgLS1jb2x1bW5HYXA6IDEuMjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNS13aWRlc2NyZWVuIHtcXG4gICAgLS1jb2x1bW5HYXA6IDEuMjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkgYW5kIChtYXgtd2lkdGg6IDE0MDdweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNS13aWRlc2NyZWVuLW9ubHkge1xcbiAgICAtLWNvbHVtbkdhcDogMS4yNXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQwOHB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy01LWZ1bGxoZCB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjI1cmVtO1xcbiAgfVxcbn1cXG4uY29sdW1ucy5pcy12YXJpYWJsZS5pcy02IHtcXG4gIC0tY29sdW1uR2FwOiAxLjVyZW07XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy02LW1vYmlsZSB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSwgcHJpbnQge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNi10YWJsZXQge1xcbiAgICAtLWNvbHVtbkdhcDogMS41cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNi10YWJsZXQtb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNi10b3VjaCB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNi1kZXNrdG9wIHtcXG4gICAgLS1jb2x1bW5HYXA6IDEuNXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSBhbmQgKG1heC13aWR0aDogMTIxNXB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy02LWRlc2t0b3Atb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNi13aWRlc2NyZWVuIHtcXG4gICAgLS1jb2x1bW5HYXA6IDEuNXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSBhbmQgKG1heC13aWR0aDogMTQwN3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy02LXdpZGVzY3JlZW4tb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDhweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNi1mdWxsaGQge1xcbiAgICAtLWNvbHVtbkdhcDogMS41cmVtO1xcbiAgfVxcbn1cXG4uY29sdW1ucy5pcy12YXJpYWJsZS5pcy03IHtcXG4gIC0tY29sdW1uR2FwOiAxLjc1cmVtO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNy1tb2JpbGUge1xcbiAgICAtLWNvbHVtbkdhcDogMS43NXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy03LXRhYmxldCB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjc1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNy10YWJsZXQtb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjc1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTctdG91Y2gge1xcbiAgICAtLWNvbHVtbkdhcDogMS43NXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy03LWRlc2t0b3Age1xcbiAgICAtLWNvbHVtbkdhcDogMS43NXJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSBhbmQgKG1heC13aWR0aDogMTIxNXB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy03LWRlc2t0b3Atb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjc1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTctd2lkZXNjcmVlbiB7XFxuICAgIC0tY29sdW1uR2FwOiAxLjc1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIGFuZCAobWF4LXdpZHRoOiAxNDA3cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTctd2lkZXNjcmVlbi1vbmx5IHtcXG4gICAgLS1jb2x1bW5HYXA6IDEuNzVyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDhweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtNy1mdWxsaGQge1xcbiAgICAtLWNvbHVtbkdhcDogMS43NXJlbTtcXG4gIH1cXG59XFxuLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtOCB7XFxuICAtLWNvbHVtbkdhcDogMnJlbTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTgtbW9iaWxlIHtcXG4gICAgLS1jb2x1bW5HYXA6IDJyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSwgcHJpbnQge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtOC10YWJsZXQge1xcbiAgICAtLWNvbHVtbkdhcDogMnJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTgtdGFibGV0LW9ubHkge1xcbiAgICAtLWNvbHVtbkdhcDogMnJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy04LXRvdWNoIHtcXG4gICAgLS1jb2x1bW5HYXA6IDJyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtOC1kZXNrdG9wIHtcXG4gICAgLS1jb2x1bW5HYXA6IDJyZW07XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkgYW5kIChtYXgtd2lkdGg6IDEyMTVweCkge1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGUuaXMtOC1kZXNrdG9wLW9ubHkge1xcbiAgICAtLWNvbHVtbkdhcDogMnJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy04LXdpZGVzY3JlZW4ge1xcbiAgICAtLWNvbHVtbkdhcDogMnJlbTtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSBhbmQgKG1heC13aWR0aDogMTQwN3B4KSB7XFxuICAuY29sdW1ucy5pcy12YXJpYWJsZS5pcy04LXdpZGVzY3JlZW4tb25seSB7XFxuICAgIC0tY29sdW1uR2FwOiAycmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNDA4cHgpIHtcXG4gIC5jb2x1bW5zLmlzLXZhcmlhYmxlLmlzLTgtZnVsbGhkIHtcXG4gICAgLS1jb2x1bW5HYXA6IDJyZW07XFxuICB9XFxufVxcblxcbi50aWxlIHtcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmbGV4LWJhc2lzOiAwO1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZmxleC1zaHJpbms6IDE7XFxuICBtaW4taGVpZ2h0OiBtaW4tY29udGVudDtcXG59XFxuLnRpbGUuaXMtYW5jZXN0b3Ige1xcbiAgbWFyZ2luLWxlZnQ6IC0wLjc1cmVtO1xcbiAgbWFyZ2luLXJpZ2h0OiAtMC43NXJlbTtcXG4gIG1hcmdpbi10b3A6IC0wLjc1cmVtO1xcbn1cXG4udGlsZS5pcy1hbmNlc3RvcjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IC0wLjc1cmVtO1xcbn1cXG4udGlsZS5pcy1hbmNlc3Rvcjpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNzVyZW07XFxufVxcbi50aWxlLmlzLWNoaWxkIHtcXG4gIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbn1cXG4udGlsZS5pcy1wYXJlbnQge1xcbiAgcGFkZGluZzogMC43NXJlbTtcXG59XFxuLnRpbGUuaXMtdmVydGljYWwge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuLnRpbGUuaXMtdmVydGljYWwgPiAudGlsZS5pcy1jaGlsZDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC50aWxlOm5vdCguaXMtY2hpbGQpIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gIH1cXG4gIC50aWxlLmlzLTEge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogOC4zMzMzMzMzNyU7XFxuICB9XFxuICAudGlsZS5pcy0yIHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDE2LjY2NjY2Njc0JTtcXG4gIH1cXG4gIC50aWxlLmlzLTMge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMjUlO1xcbiAgfVxcbiAgLnRpbGUuaXMtNCB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiAzMy4zMzMzMzMzNyU7XFxuICB9XFxuICAudGlsZS5pcy01IHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDQxLjY2NjY2Njc0JTtcXG4gIH1cXG4gIC50aWxlLmlzLTYge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNTAlO1xcbiAgfVxcbiAgLnRpbGUuaXMtNyB7XFxuICAgIGZsZXg6IG5vbmU7XFxuICAgIHdpZHRoOiA1OC4zMzMzMzMzNyU7XFxuICB9XFxuICAudGlsZS5pcy04IHtcXG4gICAgZmxleDogbm9uZTtcXG4gICAgd2lkdGg6IDY2LjY2NjY2Njc0JTtcXG4gIH1cXG4gIC50aWxlLmlzLTkge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogNzUlO1xcbiAgfVxcbiAgLnRpbGUuaXMtMTAge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogODMuMzMzMzMzMzclO1xcbiAgfVxcbiAgLnRpbGUuaXMtMTEge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogOTEuNjY2NjY2NzQlO1xcbiAgfVxcbiAgLnRpbGUuaXMtMTIge1xcbiAgICBmbGV4OiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG59XFxuXFxuLyogQnVsbWEgSGVscGVycyAqL1xcbi5oYXMtdGV4dC13aGl0ZSB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKSAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LXdoaXRlOmhvdmVyLCBhLmhhcy10ZXh0LXdoaXRlOmZvY3VzIHtcXG4gIGNvbG9yOiAjZTZlNmU2ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC13aGl0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1ibGFjayB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSkgIWltcG9ydGFudDtcXG59XFxuXFxuYS5oYXMtdGV4dC1ibGFjazpob3ZlciwgYS5oYXMtdGV4dC1ibGFjazpmb2N1cyB7XFxuICBjb2xvcjogYmxhY2sgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWJsYWNrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgNCUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1saWdodCB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA5NiUpICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuaGFzLXRleHQtbGlnaHQ6aG92ZXIsIGEuaGFzLXRleHQtbGlnaHQ6Zm9jdXMge1xcbiAgY29sb3I6ICNkYmRiZGIgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgOTYlKSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaGFzLXRleHQtZGFyayB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuaGFzLXRleHQtZGFyazpob3ZlciwgYS5oYXMtdGV4dC1kYXJrOmZvY3VzIHtcXG4gIGNvbG9yOiAjMWMxYzFjICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1kYXJrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMjElKSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaGFzLXRleHQtcHJpbWFyeSB7XFxuICBjb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKSAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LXByaW1hcnk6aG92ZXIsIGEuaGFzLXRleHQtcHJpbWFyeTpmb2N1cyB7XFxuICBjb2xvcjogIzAwOWU4NiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaGFzLWJhY2tncm91bmQtcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTcxLCAxMDAlLCA0MSUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1wcmltYXJ5LWxpZ2h0IHtcXG4gIGNvbG9yOiAjZWJmZmZjICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuaGFzLXRleHQtcHJpbWFyeS1saWdodDpob3ZlciwgYS5oYXMtdGV4dC1wcmltYXJ5LWxpZ2h0OmZvY3VzIHtcXG4gIGNvbG9yOiAjYjhmZmY0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1wcmltYXJ5LWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlYmZmZmMgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LXByaW1hcnktZGFyayB7XFxuICBjb2xvcjogIzAwOTQ3ZSAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LXByaW1hcnktZGFyazpob3ZlciwgYS5oYXMtdGV4dC1wcmltYXJ5LWRhcms6Zm9jdXMge1xcbiAgY29sb3I6ICMwMGM3YTkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLXByaW1hcnktZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA5NDdlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1saW5rIHtcXG4gIGNvbG9yOiBoc2woMjI5LCA1MyUsIDUzJSkgIWltcG9ydGFudDtcXG59XFxuXFxuYS5oYXMtdGV4dC1saW5rOmhvdmVyLCBhLmhhcy10ZXh0LWxpbms6Zm9jdXMge1xcbiAgY29sb3I6ICMzNDQ5YTggIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWxpbmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1saW5rLWxpZ2h0IHtcXG4gIGNvbG9yOiAjZWZmMWZhICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuaGFzLXRleHQtbGluay1saWdodDpob3ZlciwgYS5oYXMtdGV4dC1saW5rLWxpZ2h0OmZvY3VzIHtcXG4gIGNvbG9yOiAjYzhjZmVlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1saW5rLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmYxZmEgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LWxpbmstZGFyayB7XFxuICBjb2xvcjogIzM4NTBiNyAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LWxpbmstZGFyazpob3ZlciwgYS5oYXMtdGV4dC1saW5rLWRhcms6Zm9jdXMge1xcbiAgY29sb3I6ICM1NzZkY2IgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWxpbmstZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzg1MGI3ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1pbmZvIHtcXG4gIGNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSkgIWltcG9ydGFudDtcXG59XFxuXFxuYS5oYXMtdGV4dC1pbmZvOmhvdmVyLCBhLmhhcy10ZXh0LWluZm86Zm9jdXMge1xcbiAgY29sb3I6ICMyYjc0YjEgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWluZm8ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIwNywgNjElLCA1MyUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1pbmZvLWxpZ2h0IHtcXG4gIGNvbG9yOiAjZWZmNWZiICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuaGFzLXRleHQtaW5mby1saWdodDpob3ZlciwgYS5oYXMtdGV4dC1pbmZvLWxpZ2h0OmZvY3VzIHtcXG4gIGNvbG9yOiAjYzZkZGYxICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1pbmZvLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmY1ZmIgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LWluZm8tZGFyayB7XFxuICBjb2xvcjogIzI5NmZhOCAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LWluZm8tZGFyazpob3ZlciwgYS5oYXMtdGV4dC1pbmZvLWRhcms6Zm9jdXMge1xcbiAgY29sb3I6ICMzNjhhY2UgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWluZm8tZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjk2ZmE4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1zdWNjZXNzIHtcXG4gIGNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSkgIWltcG9ydGFudDtcXG59XFxuXFxuYS5oYXMtdGV4dC1zdWNjZXNzOmhvdmVyLCBhLmhhcy10ZXh0LXN1Y2Nlc3M6Zm9jdXMge1xcbiAgY29sb3I6ICMzNGE4NzMgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLXN1Y2Nlc3Mge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1zdWNjZXNzLWxpZ2h0IHtcXG4gIGNvbG9yOiAjZWZmYWY1ICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuaGFzLXRleHQtc3VjY2Vzcy1saWdodDpob3ZlciwgYS5oYXMtdGV4dC1zdWNjZXNzLWxpZ2h0OmZvY3VzIHtcXG4gIGNvbG9yOiAjYzhlZWRkICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1zdWNjZXNzLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZmZhZjUgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LXN1Y2Nlc3MtZGFyayB7XFxuICBjb2xvcjogIzI1Nzk1MyAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LXN1Y2Nlc3MtZGFyazpob3ZlciwgYS5oYXMtdGV4dC1zdWNjZXNzLWRhcms6Zm9jdXMge1xcbiAgY29sb3I6ICMzMWEwNmUgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLXN1Y2Nlc3MtZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjU3OTUzICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC13YXJuaW5nIHtcXG4gIGNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSkgIWltcG9ydGFudDtcXG59XFxuXFxuYS5oYXMtdGV4dC13YXJuaW5nOmhvdmVyLCBhLmhhcy10ZXh0LXdhcm5pbmc6Zm9jdXMge1xcbiAgY29sb3I6ICNmZmQyNTcgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLXdhcm5pbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC13YXJuaW5nLWxpZ2h0IHtcXG4gIGNvbG9yOiAjZmZmYWViICFpbXBvcnRhbnQ7XFxufVxcblxcbmEuaGFzLXRleHQtd2FybmluZy1saWdodDpob3ZlciwgYS5oYXMtdGV4dC13YXJuaW5nLWxpZ2h0OmZvY3VzIHtcXG4gIGNvbG9yOiAjZmZlY2I4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC13YXJuaW5nLWxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZhZWIgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LXdhcm5pbmctZGFyayB7XFxuICBjb2xvcjogIzk0NmMwMCAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LXdhcm5pbmctZGFyazpob3ZlciwgYS5oYXMtdGV4dC13YXJuaW5nLWRhcms6Zm9jdXMge1xcbiAgY29sb3I6ICNjNzkyMDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLXdhcm5pbmctZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTQ2YzAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1kYW5nZXIge1xcbiAgY29sb3I6IGhzbCgzNDgsIDg2JSwgNjElKSAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LWRhbmdlcjpob3ZlciwgYS5oYXMtdGV4dC1kYW5nZXI6Zm9jdXMge1xcbiAgY29sb3I6ICNlZTE3NDIgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWRhbmdlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LWRhbmdlci1saWdodCB7XFxuICBjb2xvcjogI2ZlZWNmMCAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LWRhbmdlci1saWdodDpob3ZlciwgYS5oYXMtdGV4dC1kYW5nZXItbGlnaHQ6Zm9jdXMge1xcbiAgY29sb3I6ICNmYWJkYzkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWRhbmdlci1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVlY2YwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1kYW5nZXItZGFyayB7XFxuICBjb2xvcjogI2NjMGYzNSAhaW1wb3J0YW50O1xcbn1cXG5cXG5hLmhhcy10ZXh0LWRhbmdlci1kYXJrOmhvdmVyLCBhLmhhcy10ZXh0LWRhbmdlci1kYXJrOmZvY3VzIHtcXG4gIGNvbG9yOiAjZWUyMDQ5ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1kYW5nZXItZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2MwZjM1ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1ibGFjay1iaXMge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNyUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1ibGFjay1iaXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA3JSkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LWJsYWNrLXRlciB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxNCUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1ibGFjay10ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxNCUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1ncmV5LWRhcmtlciB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyMSUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1ncmV5LWRhcmtlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDIxJSkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LWdyZXktZGFyayB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAyOSUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC1ncmV5LWRhcmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAyOSUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1ncmV5IHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQ4JSkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWdyZXkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0OCUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1ncmV5LWxpZ2h0IHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDcxJSkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLWdyZXktbGlnaHQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA3MSUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC1ncmV5LWxpZ2h0ZXIge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgODYlKSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaGFzLWJhY2tncm91bmQtZ3JleS1saWdodGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgODYlKSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaGFzLXRleHQtd2hpdGUtdGVyIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDk2JSkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy1iYWNrZ3JvdW5kLXdoaXRlLXRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LXdoaXRlLWJpcyB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA5OCUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtYmFja2dyb3VuZC13aGl0ZS1iaXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5OCUpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1mbGV4LWRpcmVjdGlvbi1yb3cge1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1kaXJlY3Rpb24tcm93LXJldmVyc2Uge1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1mbGV4LWRpcmVjdGlvbi1jb2x1bW4ge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1kaXJlY3Rpb24tY29sdW1uLXJldmVyc2Uge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1mbGV4LXdyYXAtbm93cmFwIHtcXG4gIGZsZXgtd3JhcDogbm93cmFwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1mbGV4LXdyYXAtd3JhcCB7XFxuICBmbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWZsZXgtd3JhcC13cmFwLXJldmVyc2Uge1xcbiAgZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWp1c3RpZnktY29udGVudC1mbGV4LXN0YXJ0IHtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtanVzdGlmeS1jb250ZW50LWZsZXgtZW5kIHtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWp1c3RpZnktY29udGVudC1jZW50ZXIge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWp1c3RpZnktY29udGVudC1zcGFjZS1iZXR3ZWVuIHtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtanVzdGlmeS1jb250ZW50LXNwYWNlLWFyb3VuZCB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtanVzdGlmeS1jb250ZW50LXNwYWNlLWV2ZW5seSB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtanVzdGlmeS1jb250ZW50LXN0YXJ0IHtcXG4gIGp1c3RpZnktY29udGVudDogc3RhcnQgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWp1c3RpZnktY29udGVudC1lbmQge1xcbiAganVzdGlmeS1jb250ZW50OiBlbmQgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWp1c3RpZnktY29udGVudC1sZWZ0IHtcXG4gIGp1c3RpZnktY29udGVudDogbGVmdCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtanVzdGlmeS1jb250ZW50LXJpZ2h0IHtcXG4gIGp1c3RpZnktY29udGVudDogcmlnaHQgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWFsaWduLWNvbnRlbnQtZmxleC1zdGFydCB7XFxuICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1jb250ZW50LWZsZXgtZW5kIHtcXG4gIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1jb250ZW50LWNlbnRlciB7XFxuICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWFsaWduLWNvbnRlbnQtc3BhY2UtYmV0d2VlbiB7XFxuICBhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1jb250ZW50LXNwYWNlLWFyb3VuZCB7XFxuICBhbGlnbi1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWFsaWduLWNvbnRlbnQtc3BhY2UtZXZlbmx5IHtcXG4gIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWV2ZW5seSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtYWxpZ24tY29udGVudC1zdHJldGNoIHtcXG4gIGFsaWduLWNvbnRlbnQ6IHN0cmV0Y2ggIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWFsaWduLWNvbnRlbnQtc3RhcnQge1xcbiAgYWxpZ24tY29udGVudDogc3RhcnQgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWFsaWduLWNvbnRlbnQtZW5kIHtcXG4gIGFsaWduLWNvbnRlbnQ6IGVuZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtYWxpZ24tY29udGVudC1iYXNlbGluZSB7XFxuICBhbGlnbi1jb250ZW50OiBiYXNlbGluZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtYWxpZ24taXRlbXMtc3RyZXRjaCB7XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtYWxpZ24taXRlbXMtZmxleC1zdGFydCB7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtYWxpZ24taXRlbXMtZmxleC1lbmQge1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1pdGVtcy1jZW50ZXIge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlciAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtYWxpZ24taXRlbXMtYmFzZWxpbmUge1xcbiAgYWxpZ24taXRlbXM6IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1pdGVtcy1zdGFydCB7XFxuICBhbGlnbi1pdGVtczogc3RhcnQgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWFsaWduLWl0ZW1zLWVuZCB7XFxuICBhbGlnbi1pdGVtczogZW5kICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1pdGVtcy1zZWxmLXN0YXJ0IHtcXG4gIGFsaWduLWl0ZW1zOiBzZWxmLXN0YXJ0ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1pdGVtcy1zZWxmLWVuZCB7XFxuICBhbGlnbi1pdGVtczogc2VsZi1lbmQgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWFsaWduLXNlbGYtYXV0byB7XFxuICBhbGlnbi1zZWxmOiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1zZWxmLWZsZXgtc3RhcnQge1xcbiAgYWxpZ24tc2VsZjogZmxleC1zdGFydCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtYWxpZ24tc2VsZi1mbGV4LWVuZCB7XFxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtYWxpZ24tc2VsZi1jZW50ZXIge1xcbiAgYWxpZ24tc2VsZjogY2VudGVyICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1zZWxmLWJhc2VsaW5lIHtcXG4gIGFsaWduLXNlbGY6IGJhc2VsaW5lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1hbGlnbi1zZWxmLXN0cmV0Y2gge1xcbiAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1ncm93LTAge1xcbiAgZmxleC1ncm93OiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1mbGV4LWdyb3ctMSB7XFxuICBmbGV4LWdyb3c6IDEgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWZsZXgtZ3Jvdy0yIHtcXG4gIGZsZXgtZ3JvdzogMiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1ncm93LTMge1xcbiAgZmxleC1ncm93OiAzICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1mbGV4LWdyb3ctNCB7XFxuICBmbGV4LWdyb3c6IDQgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWZsZXgtZ3Jvdy01IHtcXG4gIGZsZXgtZ3JvdzogNSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1zaHJpbmstMCB7XFxuICBmbGV4LXNocmluazogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1zaHJpbmstMSB7XFxuICBmbGV4LXNocmluazogMSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1zaHJpbmstMiB7XFxuICBmbGV4LXNocmluazogMiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1zaHJpbmstMyB7XFxuICBmbGV4LXNocmluazogMyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1zaHJpbmstNCB7XFxuICBmbGV4LXNocmluazogNCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmxleC1zaHJpbmstNSB7XFxuICBmbGV4LXNocmluazogNSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtY2xlYXJmaXg6OmFmdGVyIHtcXG4gIGNsZWFyOiBib3RoO1xcbiAgY29udGVudDogXFxcIiBcXFwiO1xcbiAgZGlzcGxheTogdGFibGU7XFxufVxcblxcbi5pcy1wdWxsZWQtbGVmdCB7XFxuICBmbG9hdDogbGVmdCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtcHVsbGVkLXJpZ2h0IHtcXG4gIGZsb2F0OiByaWdodCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtcmFkaXVzbGVzcyB7XFxuICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1zaGFkb3dsZXNzIHtcXG4gIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWNsaWNrYWJsZSB7XFxuICBjdXJzb3I6IHBvaW50ZXIgIWltcG9ydGFudDtcXG4gIHBvaW50ZXItZXZlbnRzOiBhbGwgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWNsaXBwZWQge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtcmVsYXRpdmUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1tYXJnaW5sZXNzIHtcXG4gIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtcGFkZGluZ2xlc3Mge1xcbiAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS0wIHtcXG4gIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtMCB7XFxuICBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci0wIHtcXG4gIG1hcmdpbi1yaWdodDogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItMCB7XFxuICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC0wIHtcXG4gIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5teC0wIHtcXG4gIG1hcmdpbi1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxuICBtYXJnaW4tcmlnaHQ6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLm15LTAge1xcbiAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xcbiAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS0xIHtcXG4gIG1hcmdpbjogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtMSB7XFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci0xIHtcXG4gIG1hcmdpbi1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItMSB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC0xIHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5teC0xIHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm15LTEge1xcbiAgbWFyZ2luLXRvcDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgbWFyZ2luLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS0yIHtcXG4gIG1hcmdpbjogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tdC0yIHtcXG4gIG1hcmdpbi10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXItMiB7XFxuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItMiB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1sLTIge1xcbiAgbWFyZ2luLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXgtMiB7XFxuICBtYXJnaW4tbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXktMiB7XFxuICBtYXJnaW4tdG9wOiAwLjVyZW0gIWltcG9ydGFudDtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS0zIHtcXG4gIG1hcmdpbjogMC43NXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtMyB7XFxuICBtYXJnaW4tdG9wOiAwLjc1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci0zIHtcXG4gIG1hcmdpbi1yaWdodDogMC43NXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItMyB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC0zIHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjc1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5teC0zIHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjc1cmVtICFpbXBvcnRhbnQ7XFxuICBtYXJnaW4tcmlnaHQ6IDAuNzVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm15LTMge1xcbiAgbWFyZ2luLXRvcDogMC43NXJlbSAhaW1wb3J0YW50O1xcbiAgbWFyZ2luLWJvdHRvbTogMC43NXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS00IHtcXG4gIG1hcmdpbjogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtNCB7XFxuICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci00IHtcXG4gIG1hcmdpbi1yaWdodDogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItNCB7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC00IHtcXG4gIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5teC00IHtcXG4gIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICBtYXJnaW4tcmlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm15LTQge1xcbiAgbWFyZ2luLXRvcDogMXJlbSAhaW1wb3J0YW50O1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS01IHtcXG4gIG1hcmdpbjogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tdC01IHtcXG4gIG1hcmdpbi10b3A6IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXItNSB7XFxuICBtYXJnaW4tcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItNSB7XFxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm1sLTUge1xcbiAgbWFyZ2luLWxlZnQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXgtNSB7XFxuICBtYXJnaW4tbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICBtYXJnaW4tcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXktNSB7XFxuICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS02IHtcXG4gIG1hcmdpbjogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtNiB7XFxuICBtYXJnaW4tdG9wOiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci02IHtcXG4gIG1hcmdpbi1yaWdodDogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItNiB7XFxuICBtYXJnaW4tYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC02IHtcXG4gIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5teC02IHtcXG4gIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICBtYXJnaW4tcmlnaHQ6IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLm15LTYge1xcbiAgbWFyZ2luLXRvcDogM3JlbSAhaW1wb3J0YW50O1xcbiAgbWFyZ2luLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubS1hdXRvIHtcXG4gIG1hcmdpbjogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubXQtYXV0byB7XFxuICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tci1hdXRvIHtcXG4gIG1hcmdpbi1yaWdodDogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWItYXV0byB7XFxuICBtYXJnaW4tYm90dG9tOiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5tbC1hdXRvIHtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5teC1hdXRvIHtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDtcXG59XFxuXFxuLm15LWF1dG8ge1xcbiAgbWFyZ2luLXRvcDogYXV0byAhaW1wb3J0YW50O1xcbiAgbWFyZ2luLWJvdHRvbTogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC0wIHtcXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnB0LTAge1xcbiAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnByLTAge1xcbiAgcGFkZGluZy1yaWdodDogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItMCB7XFxuICBwYWRkaW5nLWJvdHRvbTogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGwtMCB7XFxuICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLnB4LTAge1xcbiAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5weS0wIHtcXG4gIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLWJvdHRvbTogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC0xIHtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB0LTEge1xcbiAgcGFkZGluZy10b3A6IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnByLTEge1xcbiAgcGFkZGluZy1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItMSB7XFxuICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGwtMSB7XFxuICBwYWRkaW5nLWxlZnQ6IDAuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB4LTEge1xcbiAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5weS0xIHtcXG4gIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC0yIHtcXG4gIHBhZGRpbmc6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHQtMiB7XFxuICBwYWRkaW5nLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wci0yIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItMiB7XFxuICBwYWRkaW5nLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wbC0yIHtcXG4gIHBhZGRpbmctbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5weC0yIHtcXG4gIHBhZGRpbmctbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB5LTIge1xcbiAgcGFkZGluZy10b3A6IDAuNXJlbSAhaW1wb3J0YW50O1xcbiAgcGFkZGluZy1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC0zIHtcXG4gIHBhZGRpbmc6IDAuNzVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB0LTMge1xcbiAgcGFkZGluZy10b3A6IDAuNzVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnByLTMge1xcbiAgcGFkZGluZy1yaWdodDogMC43NXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItMyB7XFxuICBwYWRkaW5nLWJvdHRvbTogMC43NXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGwtMyB7XFxuICBwYWRkaW5nLWxlZnQ6IDAuNzVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB4LTMge1xcbiAgcGFkZGluZy1sZWZ0OiAwLjc1cmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjc1cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5weS0zIHtcXG4gIHBhZGRpbmctdG9wOiAwLjc1cmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLWJvdHRvbTogMC43NXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC00IHtcXG4gIHBhZGRpbmc6IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB0LTQge1xcbiAgcGFkZGluZy10b3A6IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnByLTQge1xcbiAgcGFkZGluZy1yaWdodDogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItNCB7XFxuICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGwtNCB7XFxuICBwYWRkaW5nLWxlZnQ6IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB4LTQge1xcbiAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5weS00IHtcXG4gIHBhZGRpbmctdG9wOiAxcmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC01IHtcXG4gIHBhZGRpbmc6IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHQtNSB7XFxuICBwYWRkaW5nLXRvcDogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wci01IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItNSB7XFxuICBwYWRkaW5nLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wbC01IHtcXG4gIHBhZGRpbmctbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5weC01IHtcXG4gIHBhZGRpbmctbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB5LTUge1xcbiAgcGFkZGluZy10b3A6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgcGFkZGluZy1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC02IHtcXG4gIHBhZGRpbmc6IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB0LTYge1xcbiAgcGFkZGluZy10b3A6IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnByLTYge1xcbiAgcGFkZGluZy1yaWdodDogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItNiB7XFxuICBwYWRkaW5nLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGwtNiB7XFxuICBwYWRkaW5nLWxlZnQ6IDNyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLnB4LTYge1xcbiAgcGFkZGluZy1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5weS02IHtcXG4gIHBhZGRpbmctdG9wOiAzcmVtICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucC1hdXRvIHtcXG4gIHBhZGRpbmc6IGF1dG8gIWltcG9ydGFudDtcXG59XFxuXFxuLnB0LWF1dG8ge1xcbiAgcGFkZGluZy10b3A6IGF1dG8gIWltcG9ydGFudDtcXG59XFxuXFxuLnByLWF1dG8ge1xcbiAgcGFkZGluZy1yaWdodDogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGItYXV0byB7XFxuICBwYWRkaW5nLWJvdHRvbTogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucGwtYXV0byB7XFxuICBwYWRkaW5nLWxlZnQ6IGF1dG8gIWltcG9ydGFudDtcXG59XFxuXFxuLnB4LWF1dG8ge1xcbiAgcGFkZGluZy1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XFxufVxcblxcbi5weS1hdXRvIHtcXG4gIHBhZGRpbmctdG9wOiBhdXRvICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nLWJvdHRvbTogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtc2l6ZS0xIHtcXG4gIGZvbnQtc2l6ZTogM3JlbSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtc2l6ZS0yIHtcXG4gIGZvbnQtc2l6ZTogMi41cmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1zaXplLTMge1xcbiAgZm9udC1zaXplOiAycmVtICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1zaXplLTQge1xcbiAgZm9udC1zaXplOiAxLjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLXNpemUtNSB7XFxuICBmb250LXNpemU6IDEuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLXNpemUtNiB7XFxuICBmb250LXNpemU6IDFyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLXNpemUtNyB7XFxuICBmb250LXNpemU6IDAuNzVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5pcy1zaXplLTEtbW9iaWxlIHtcXG4gICAgZm9udC1zaXplOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS0yLW1vYmlsZSB7XFxuICAgIGZvbnQtc2l6ZTogMi41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS0zLW1vYmlsZSB7XFxuICAgIGZvbnQtc2l6ZTogMnJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtNC1tb2JpbGUge1xcbiAgICBmb250LXNpemU6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtNS1tb2JpbGUge1xcbiAgICBmb250LXNpemU6IDEuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5pcy1zaXplLTYtbW9iaWxlIHtcXG4gICAgZm9udC1zaXplOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS03LW1vYmlsZSB7XFxuICAgIGZvbnQtc2l6ZTogMC43NXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5pcy1zaXplLTEtdGFibGV0IHtcXG4gICAgZm9udC1zaXplOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS0yLXRhYmxldCB7XFxuICAgIGZvbnQtc2l6ZTogMi41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS0zLXRhYmxldCB7XFxuICAgIGZvbnQtc2l6ZTogMnJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtNC10YWJsZXQge1xcbiAgICBmb250LXNpemU6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtNS10YWJsZXQge1xcbiAgICBmb250LXNpemU6IDEuMjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5pcy1zaXplLTYtdGFibGV0IHtcXG4gICAgZm9udC1zaXplOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS03LXRhYmxldCB7XFxuICAgIGZvbnQtc2l6ZTogMC43NXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5pcy1zaXplLTEtdG91Y2gge1xcbiAgICBmb250LXNpemU6IDNyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5pcy1zaXplLTItdG91Y2gge1xcbiAgICBmb250LXNpemU6IDIuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtMy10b3VjaCB7XFxuICAgIGZvbnQtc2l6ZTogMnJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtNC10b3VjaCB7XFxuICAgIGZvbnQtc2l6ZTogMS41cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS01LXRvdWNoIHtcXG4gICAgZm9udC1zaXplOiAxLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS02LXRvdWNoIHtcXG4gICAgZm9udC1zaXplOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS03LXRvdWNoIHtcXG4gICAgZm9udC1zaXplOiAwLjc1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xcbiAgLmlzLXNpemUtMS1kZXNrdG9wIHtcXG4gICAgZm9udC1zaXplOiAzcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS0yLWRlc2t0b3Age1xcbiAgICBmb250LXNpemU6IDIuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtMy1kZXNrdG9wIHtcXG4gICAgZm9udC1zaXplOiAycmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS00LWRlc2t0b3Age1xcbiAgICBmb250LXNpemU6IDEuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtNS1kZXNrdG9wIHtcXG4gICAgZm9udC1zaXplOiAxLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS02LWRlc2t0b3Age1xcbiAgICBmb250LXNpemU6IDFyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5pcy1zaXplLTctZGVza3RvcCB7XFxuICAgIGZvbnQtc2l6ZTogMC43NXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIHtcXG4gIC5pcy1zaXplLTEtd2lkZXNjcmVlbiB7XFxuICAgIGZvbnQtc2l6ZTogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtMi13aWRlc2NyZWVuIHtcXG4gICAgZm9udC1zaXplOiAyLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5pcy1zaXplLTMtd2lkZXNjcmVlbiB7XFxuICAgIGZvbnQtc2l6ZTogMnJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtNC13aWRlc2NyZWVuIHtcXG4gICAgZm9udC1zaXplOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5pcy1zaXplLTUtd2lkZXNjcmVlbiB7XFxuICAgIGZvbnQtc2l6ZTogMS4yNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtNi13aWRlc2NyZWVuIHtcXG4gICAgZm9udC1zaXplOiAxcmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS03LXdpZGVzY3JlZW4ge1xcbiAgICBmb250LXNpemU6IDAuNzVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQwOHB4KSB7XFxuICAuaXMtc2l6ZS0xLWZ1bGxoZCB7XFxuICAgIGZvbnQtc2l6ZTogM3JlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtMi1mdWxsaGQge1xcbiAgICBmb250LXNpemU6IDIuNXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtMy1mdWxsaGQge1xcbiAgICBmb250LXNpemU6IDJyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5pcy1zaXplLTQtZnVsbGhkIHtcXG4gICAgZm9udC1zaXplOiAxLjVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG4gIC5pcy1zaXplLTUtZnVsbGhkIHtcXG4gICAgZm9udC1zaXplOiAxLjI1cmVtICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuaXMtc2l6ZS02LWZ1bGxoZCB7XFxuICAgIGZvbnQtc2l6ZTogMXJlbSAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmlzLXNpemUtNy1mdWxsaGQge1xcbiAgICBmb250LXNpemU6IDAuNzVyZW0gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuLmhhcy10ZXh0LWNlbnRlcmVkIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaGFzLXRleHQtanVzdGlmaWVkIHtcXG4gIHRleHQtYWxpZ246IGp1c3RpZnkgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LWxlZnQge1xcbiAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaGFzLXRleHQtcmlnaHQge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5oYXMtdGV4dC1jZW50ZXJlZC1tb2JpbGUge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuaGFzLXRleHQtY2VudGVyZWQtdGFibGV0IHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaGFzLXRleHQtY2VudGVyZWQtdGFibGV0LW9ubHkge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaGFzLXRleHQtY2VudGVyZWQtdG91Y2gge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuaGFzLXRleHQtY2VudGVyZWQtZGVza3RvcCB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIGFuZCAobWF4LXdpZHRoOiAxMjE1cHgpIHtcXG4gIC5oYXMtdGV4dC1jZW50ZXJlZC1kZXNrdG9wLW9ubHkge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSB7XFxuICAuaGFzLXRleHQtY2VudGVyZWQtd2lkZXNjcmVlbiB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIGFuZCAobWF4LXdpZHRoOiAxNDA3cHgpIHtcXG4gIC5oYXMtdGV4dC1jZW50ZXJlZC13aWRlc2NyZWVuLW9ubHkge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQwOHB4KSB7XFxuICAuaGFzLXRleHQtY2VudGVyZWQtZnVsbGhkIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuaGFzLXRleHQtanVzdGlmaWVkLW1vYmlsZSB7XFxuICAgIHRleHQtYWxpZ246IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuaGFzLXRleHQtanVzdGlmaWVkLXRhYmxldCB7XFxuICAgIHRleHQtYWxpZ246IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5oYXMtdGV4dC1qdXN0aWZpZWQtdGFibGV0LW9ubHkge1xcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmhhcy10ZXh0LWp1c3RpZmllZC10b3VjaCB7XFxuICAgIHRleHQtYWxpZ246IGp1c3RpZnkgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuaGFzLXRleHQtanVzdGlmaWVkLWRlc2t0b3Age1xcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkgYW5kIChtYXgtd2lkdGg6IDEyMTVweCkge1xcbiAgLmhhcy10ZXh0LWp1c3RpZmllZC1kZXNrdG9wLW9ubHkge1xcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkge1xcbiAgLmhhcy10ZXh0LWp1c3RpZmllZC13aWRlc2NyZWVuIHtcXG4gICAgdGV4dC1hbGlnbjoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIGFuZCAobWF4LXdpZHRoOiAxNDA3cHgpIHtcXG4gIC5oYXMtdGV4dC1qdXN0aWZpZWQtd2lkZXNjcmVlbi1vbmx5IHtcXG4gICAgdGV4dC1hbGlnbjoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNDA4cHgpIHtcXG4gIC5oYXMtdGV4dC1qdXN0aWZpZWQtZnVsbGhkIHtcXG4gICAgdGV4dC1hbGlnbjoganVzdGlmeSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmhhcy10ZXh0LWxlZnQtbW9iaWxlIHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5oYXMtdGV4dC1sZWZ0LXRhYmxldCB7XFxuICAgIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5oYXMtdGV4dC1sZWZ0LXRhYmxldC1vbmx5IHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5oYXMtdGV4dC1sZWZ0LXRvdWNoIHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5oYXMtdGV4dC1sZWZ0LWRlc2t0b3Age1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkgYW5kIChtYXgtd2lkdGg6IDEyMTVweCkge1xcbiAgLmhhcy10ZXh0LWxlZnQtZGVza3RvcC1vbmx5IHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIHtcXG4gIC5oYXMtdGV4dC1sZWZ0LXdpZGVzY3JlZW4ge1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkgYW5kIChtYXgtd2lkdGg6IDE0MDdweCkge1xcbiAgLmhhcy10ZXh0LWxlZnQtd2lkZXNjcmVlbi1vbmx5IHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNDA4cHgpIHtcXG4gIC5oYXMtdGV4dC1sZWZ0LWZ1bGxoZCB7XFxuICAgIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5oYXMtdGV4dC1yaWdodC1tb2JpbGUge1xcbiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5oYXMtdGV4dC1yaWdodC10YWJsZXQge1xcbiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmhhcy10ZXh0LXJpZ2h0LXRhYmxldC1vbmx5IHtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaGFzLXRleHQtcmlnaHQtdG91Y2gge1xcbiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5oYXMtdGV4dC1yaWdodC1kZXNrdG9wIHtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSBhbmQgKG1heC13aWR0aDogMTIxNXB4KSB7XFxuICAuaGFzLXRleHQtcmlnaHQtZGVza3RvcC1vbmx5IHtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSB7XFxuICAuaGFzLXRleHQtcmlnaHQtd2lkZXNjcmVlbiB7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkgYW5kIChtYXgtd2lkdGg6IDE0MDdweCkge1xcbiAgLmhhcy10ZXh0LXJpZ2h0LXdpZGVzY3JlZW4tb25seSB7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDhweCkge1xcbiAgLmhhcy10ZXh0LXJpZ2h0LWZ1bGxoZCB7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbi5pcy1jYXBpdGFsaXplZCB7XFxuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtbG93ZXJjYXNlIHtcXG4gIHRleHQtdHJhbnNmb3JtOiBsb3dlcmNhc2UgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLXVwcGVyY2FzZSB7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1pdGFsaWMge1xcbiAgZm9udC1zdHlsZTogaXRhbGljICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy11bmRlcmxpbmVkIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC13ZWlnaHQtbGlnaHQge1xcbiAgZm9udC13ZWlnaHQ6IDMwMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaGFzLXRleHQtd2VpZ2h0LW5vcm1hbCB7XFxuICBmb250LXdlaWdodDogNDAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC13ZWlnaHQtbWVkaXVtIHtcXG4gIGZvbnQtd2VpZ2h0OiA1MDAgIWltcG9ydGFudDtcXG59XFxuXFxuLmhhcy10ZXh0LXdlaWdodC1zZW1pYm9sZCB7XFxuICBmb250LXdlaWdodDogNjAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oYXMtdGV4dC13ZWlnaHQtYm9sZCB7XFxuICBmb250LXdlaWdodDogNzAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1mYW1pbHktcHJpbWFyeSB7XFxuICBmb250LWZhbWlseTogQmxpbmtNYWNTeXN0ZW1Gb250LCAtYXBwbGUtc3lzdGVtLCBcXFwiU2Vnb2UgVUlcXFwiLCBcXFwiUm9ib3RvXFxcIiwgXFxcIk94eWdlblxcXCIsIFxcXCJVYnVudHVcXFwiLCBcXFwiQ2FudGFyZWxsXFxcIiwgXFxcIkZpcmEgU2Fuc1xcXCIsIFxcXCJEcm9pZCBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgXFxcIkhlbHZldGljYVxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWYgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWZhbWlseS1zZWNvbmRhcnkge1xcbiAgZm9udC1mYW1pbHk6IEJsaW5rTWFjU3lzdGVtRm9udCwgLWFwcGxlLXN5c3RlbSwgXFxcIlNlZ29lIFVJXFxcIiwgXFxcIlJvYm90b1xcXCIsIFxcXCJPeHlnZW5cXFwiLCBcXFwiVWJ1bnR1XFxcIiwgXFxcIkNhbnRhcmVsbFxcXCIsIFxcXCJGaXJhIFNhbnNcXFwiLCBcXFwiRHJvaWQgU2Fuc1xcXCIsIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIFxcXCJIZWx2ZXRpY2FcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pcy1mYW1pbHktc2Fucy1zZXJpZiB7XFxuICBmb250LWZhbWlseTogQmxpbmtNYWNTeXN0ZW1Gb250LCAtYXBwbGUtc3lzdGVtLCBcXFwiU2Vnb2UgVUlcXFwiLCBcXFwiUm9ib3RvXFxcIiwgXFxcIk94eWdlblxcXCIsIFxcXCJVYnVudHVcXFwiLCBcXFwiQ2FudGFyZWxsXFxcIiwgXFxcIkZpcmEgU2Fuc1xcXCIsIFxcXCJEcm9pZCBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgXFxcIkhlbHZldGljYVxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWYgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLWZhbWlseS1tb25vc3BhY2Uge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtZmFtaWx5LWNvZGUge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXMtYmxvY2sge1xcbiAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5pcy1ibG9jay1tb2JpbGUge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5pcy1ibG9jay10YWJsZXQge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmlzLWJsb2NrLXRhYmxldC1vbmx5IHtcXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaXMtYmxvY2stdG91Y2gge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5pcy1ibG9jay1kZXNrdG9wIHtcXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSBhbmQgKG1heC13aWR0aDogMTIxNXB4KSB7XFxuICAuaXMtYmxvY2stZGVza3RvcC1vbmx5IHtcXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSB7XFxuICAuaXMtYmxvY2std2lkZXNjcmVlbiB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkgYW5kIChtYXgtd2lkdGg6IDE0MDdweCkge1xcbiAgLmlzLWJsb2NrLXdpZGVzY3JlZW4tb25seSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDhweCkge1xcbiAgLmlzLWJsb2NrLWZ1bGxoZCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbi5pcy1mbGV4IHtcXG4gIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5pcy1mbGV4LW1vYmlsZSB7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuaXMtZmxleC10YWJsZXQge1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaXMtZmxleC10YWJsZXQtb25seSB7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaXMtZmxleC10b3VjaCB7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuaXMtZmxleC1kZXNrdG9wIHtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIGFuZCAobWF4LXdpZHRoOiAxMjE1cHgpIHtcXG4gIC5pcy1mbGV4LWRlc2t0b3Atb25seSB7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIxNnB4KSB7XFxuICAuaXMtZmxleC13aWRlc2NyZWVuIHtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIGFuZCAobWF4LXdpZHRoOiAxNDA3cHgpIHtcXG4gIC5pcy1mbGV4LXdpZGVzY3JlZW4tb25seSB7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQwOHB4KSB7XFxuICAuaXMtZmxleC1mdWxsaGQge1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbi5pcy1pbmxpbmUge1xcbiAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuaXMtaW5saW5lLW1vYmlsZSB7XFxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5pcy1pbmxpbmUtdGFibGV0IHtcXG4gICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaXMtaW5saW5lLXRhYmxldC1vbmx5IHtcXG4gICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmlzLWlubGluZS10b3VjaCB7XFxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5pcy1pbmxpbmUtZGVza3RvcCB7XFxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIGFuZCAobWF4LXdpZHRoOiAxMjE1cHgpIHtcXG4gIC5pcy1pbmxpbmUtZGVza3RvcC1vbmx5IHtcXG4gICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkge1xcbiAgLmlzLWlubGluZS13aWRlc2NyZWVuIHtcXG4gICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkgYW5kIChtYXgtd2lkdGg6IDE0MDdweCkge1xcbiAgLmlzLWlubGluZS13aWRlc2NyZWVuLW9ubHkge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTQwOHB4KSB7XFxuICAuaXMtaW5saW5lLWZ1bGxoZCB7XFxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG4uaXMtaW5saW5lLWJsb2NrIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmlzLWlubGluZS1ibG9jay1tb2JpbGUge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuaXMtaW5saW5lLWJsb2NrLXRhYmxldCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmlzLWlubGluZS1ibG9jay10YWJsZXQtb25seSB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5pcy1pbmxpbmUtYmxvY2stdG91Y2gge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuaXMtaW5saW5lLWJsb2NrLWRlc2t0b3Age1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSBhbmQgKG1heC13aWR0aDogMTIxNXB4KSB7XFxuICAuaXMtaW5saW5lLWJsb2NrLWRlc2t0b3Atb25seSB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIHtcXG4gIC5pcy1pbmxpbmUtYmxvY2std2lkZXNjcmVlbiB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIGFuZCAobWF4LXdpZHRoOiAxNDA3cHgpIHtcXG4gIC5pcy1pbmxpbmUtYmxvY2std2lkZXNjcmVlbi1vbmx5IHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDhweCkge1xcbiAgLmlzLWlubGluZS1ibG9jay1mdWxsaGQge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuLmlzLWlubGluZS1mbGV4IHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4ICFpbXBvcnRhbnQ7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuaXMtaW5saW5lLWZsZXgtbW9iaWxlIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuaXMtaW5saW5lLWZsZXgtdGFibGV0IHtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5pcy1pbmxpbmUtZmxleC10YWJsZXQtb25seSB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmlzLWlubGluZS1mbGV4LXRvdWNoIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuaXMtaW5saW5lLWZsZXgtZGVza3RvcCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkgYW5kIChtYXgtd2lkdGg6IDEyMTVweCkge1xcbiAgLmlzLWlubGluZS1mbGV4LWRlc2t0b3Atb25seSB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4ICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkge1xcbiAgLmlzLWlubGluZS1mbGV4LXdpZGVzY3JlZW4ge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIGFuZCAobWF4LXdpZHRoOiAxNDA3cHgpIHtcXG4gIC5pcy1pbmxpbmUtZmxleC13aWRlc2NyZWVuLW9ubHkge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNDA4cHgpIHtcXG4gIC5pcy1pbmxpbmUtZmxleC1mdWxsaGQge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG4uaXMtaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLmlzLXNyLW9ubHkge1xcbiAgYm9yZGVyOiBub25lICFpbXBvcnRhbnQ7XFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApICFpbXBvcnRhbnQ7XFxuICBoZWlnaHQ6IDAuMDFlbSAhaW1wb3J0YW50O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbiAhaW1wb3J0YW50O1xcbiAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xcbiAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwICFpbXBvcnRhbnQ7XFxuICB3aWR0aDogMC4wMWVtICFpbXBvcnRhbnQ7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuaXMtaGlkZGVuLW1vYmlsZSB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuaXMtaGlkZGVuLXRhYmxldCB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5pcy1oaWRkZW4tdGFibGV0LW9ubHkge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmlzLWhpZGRlbi10b3VjaCB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuaXMtaGlkZGVuLWRlc2t0b3Age1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkgYW5kIChtYXgtd2lkdGg6IDEyMTVweCkge1xcbiAgLmlzLWhpZGRlbi1kZXNrdG9wLW9ubHkge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMTZweCkge1xcbiAgLmlzLWhpZGRlbi13aWRlc2NyZWVuIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIGFuZCAobWF4LXdpZHRoOiAxNDA3cHgpIHtcXG4gIC5pcy1oaWRkZW4td2lkZXNjcmVlbi1vbmx5IHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNDA4cHgpIHtcXG4gIC5pcy1oaWRkZW4tZnVsbGhkIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG4uaXMtaW52aXNpYmxlIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50O1xcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmlzLWludmlzaWJsZS1tb2JpbGUge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuaXMtaW52aXNpYmxlLXRhYmxldCB7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmlzLWludmlzaWJsZS10YWJsZXQtb25seSB7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5pcy1pbnZpc2libGUtdG91Y2gge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSB7XFxuICAuaXMtaW52aXNpYmxlLWRlc2t0b3Age1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAyNHB4KSBhbmQgKG1heC13aWR0aDogMTIxNXB4KSB7XFxuICAuaXMtaW52aXNpYmxlLWRlc2t0b3Atb25seSB7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIHtcXG4gIC5pcy1pbnZpc2libGUtd2lkZXNjcmVlbiB7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMjE2cHgpIGFuZCAobWF4LXdpZHRoOiAxNDA3cHgpIHtcXG4gIC5pcy1pbnZpc2libGUtd2lkZXNjcmVlbi1vbmx5IHtcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDhweCkge1xcbiAgLmlzLWludmlzaWJsZS1mdWxsaGQge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuLyogQnVsbWEgTGF5b3V0ICovXFxuLmhlcm8ge1xcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuLmhlcm8gLm5hdmJhciB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbn1cXG4uaGVybyAudGFicyB1bCB7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbn1cXG4uaGVyby5pcy13aGl0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4uaGVyby5pcy13aGl0ZSBhOm5vdCguYnV0dG9uKTpub3QoLmRyb3Bkb3duLWl0ZW0pOm5vdCgudGFnKTpub3QoLnBhZ2luYXRpb24tbGluay5pcy1jdXJyZW50KSxcXG4uaGVyby5pcy13aGl0ZSBzdHJvbmcge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcbi5oZXJvLmlzLXdoaXRlIC50aXRsZSB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbi5oZXJvLmlzLXdoaXRlIC5zdWJ0aXRsZSB7XFxuICBjb2xvcjogcmdiYSgxMCwgMTAsIDEwLCAwLjkpO1xcbn1cXG4uaGVyby5pcy13aGl0ZSAuc3VidGl0bGUgYTpub3QoLmJ1dHRvbiksXFxuLmhlcm8uaXMtd2hpdGUgLnN1YnRpdGxlIHN0cm9uZyB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmhlcm8uaXMtd2hpdGUgLm5hdmJhci1tZW51IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIH1cXG59XFxuLmhlcm8uaXMtd2hpdGUgLm5hdmJhci1pdGVtLFxcbi5oZXJvLmlzLXdoaXRlIC5uYXZiYXItbGluayB7XFxuICBjb2xvcjogcmdiYSgxMCwgMTAsIDEwLCAwLjcpO1xcbn1cXG4uaGVyby5pcy13aGl0ZSBhLm5hdmJhci1pdGVtOmhvdmVyLCAuaGVyby5pcy13aGl0ZSBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4uaGVyby5pcy13aGl0ZSAubmF2YmFyLWxpbms6aG92ZXIsXFxuLmhlcm8uaXMtd2hpdGUgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4uaGVyby5pcy13aGl0ZSAudGFicyBhIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLmhlcm8uaXMtd2hpdGUgLnRhYnMgYTpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uaGVyby5pcy13aGl0ZSAudGFicyBsaS5pcy1hY3RpdmUgYSB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKSAhaW1wb3J0YW50O1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmhlcm8uaXMtd2hpdGUgLnRhYnMuaXMtYm94ZWQgYSwgLmhlcm8uaXMtd2hpdGUgLnRhYnMuaXMtdG9nZ2xlIGEge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbn1cXG4uaGVyby5pcy13aGl0ZSAudGFicy5pcy1ib3hlZCBhOmhvdmVyLCAuaGVyby5pcy13aGl0ZSAudGFicy5pcy10b2dnbGUgYTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwLCAxMCwgMTAsIDAuMSk7XFxufVxcbi5oZXJvLmlzLXdoaXRlIC50YWJzLmlzLWJveGVkIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy13aGl0ZSAudGFicy5pcy1ib3hlZCBsaS5pcy1hY3RpdmUgYTpob3ZlciwgLmhlcm8uaXMtd2hpdGUgLnRhYnMuaXMtdG9nZ2xlIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy13aGl0ZSAudGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICBib3JkZXItY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5oZXJvLmlzLXdoaXRlLmlzLWJvbGQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDE0MWRlZywgI2U4ZTNlNCAwJSwgaHNsKDAsIDAlLCAxMDAlKSA3MSUsIHdoaXRlIDEwMCUpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmhlcm8uaXMtd2hpdGUuaXMtYm9sZCAubmF2YmFyLW1lbnUge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCAjZThlM2U0IDAlLCBoc2woMCwgMCUsIDEwMCUpIDcxJSwgd2hpdGUgMTAwJSk7XFxuICB9XFxufVxcbi5oZXJvLmlzLWJsYWNrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgNCUpO1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbi5oZXJvLmlzLWJsYWNrIGE6bm90KC5idXR0b24pOm5vdCguZHJvcGRvd24taXRlbSk6bm90KC50YWcpOm5vdCgucGFnaW5hdGlvbi1saW5rLmlzLWN1cnJlbnQpLFxcbi5oZXJvLmlzLWJsYWNrIHN0cm9uZyB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG59XFxuLmhlcm8uaXMtYmxhY2sgLnRpdGxlIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uaGVyby5pcy1ibGFjayAuc3VidGl0bGUge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45KTtcXG59XFxuLmhlcm8uaXMtYmxhY2sgLnN1YnRpdGxlIGE6bm90KC5idXR0b24pLFxcbi5oZXJvLmlzLWJsYWNrIC5zdWJ0aXRsZSBzdHJvbmcge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMTAwJSk7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmhlcm8uaXMtYmxhY2sgLm5hdmJhci1tZW51IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA0JSk7XFxuICB9XFxufVxcbi5oZXJvLmlzLWJsYWNrIC5uYXZiYXItaXRlbSxcXG4uaGVyby5pcy1ibGFjayAubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG59XFxuLmhlcm8uaXMtYmxhY2sgYS5uYXZiYXItaXRlbTpob3ZlciwgLmhlcm8uaXMtYmxhY2sgYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuLmhlcm8uaXMtYmxhY2sgLm5hdmJhci1saW5rOmhvdmVyLFxcbi5oZXJvLmlzLWJsYWNrIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG59XFxuLmhlcm8uaXMtYmxhY2sgLnRhYnMgYSB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLmhlcm8uaXMtYmxhY2sgLnRhYnMgYTpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uaGVyby5pcy1ibGFjayAudGFicyBsaS5pcy1hY3RpdmUgYSB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA0JSkgIWltcG9ydGFudDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5oZXJvLmlzLWJsYWNrIC50YWJzLmlzLWJveGVkIGEsIC5oZXJvLmlzLWJsYWNrIC50YWJzLmlzLXRvZ2dsZSBhIHtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDEwMCUpO1xcbn1cXG4uaGVyby5pcy1ibGFjayAudGFicy5pcy1ib3hlZCBhOmhvdmVyLCAuaGVyby5pcy1ibGFjayAudGFicy5pcy10b2dnbGUgYTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwLCAxMCwgMTAsIDAuMSk7XFxufVxcbi5oZXJvLmlzLWJsYWNrIC50YWJzLmlzLWJveGVkIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy1ibGFjayAudGFicy5pcy1ib3hlZCBsaS5pcy1hY3RpdmUgYTpob3ZlciwgLmhlcm8uaXMtYmxhY2sgLnRhYnMuaXMtdG9nZ2xlIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy1ibGFjayAudGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGJvcmRlci1jb2xvcjogaHNsKDAsIDAlLCAxMDAlKTtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDQlKTtcXG59XFxuLmhlcm8uaXMtYmxhY2suaXMtYm9sZCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCBibGFjayAwJSwgaHNsKDAsIDAlLCA0JSkgNzElLCAjMTgxNjE2IDEwMCUpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmhlcm8uaXMtYmxhY2suaXMtYm9sZCAubmF2YmFyLW1lbnUge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCBibGFjayAwJSwgaHNsKDAsIDAlLCA0JSkgNzElLCAjMTgxNjE2IDEwMCUpO1xcbiAgfVxcbn1cXG4uaGVyby5pcy1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uaGVyby5pcy1saWdodCBhOm5vdCguYnV0dG9uKTpub3QoLmRyb3Bkb3duLWl0ZW0pOm5vdCgudGFnKTpub3QoLnBhZ2luYXRpb24tbGluay5pcy1jdXJyZW50KSxcXG4uaGVyby5pcy1saWdodCBzdHJvbmcge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcbi5oZXJvLmlzLWxpZ2h0IC50aXRsZSB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uaGVyby5pcy1saWdodCAuc3VidGl0bGUge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTtcXG59XFxuLmhlcm8uaXMtbGlnaHQgLnN1YnRpdGxlIGE6bm90KC5idXR0b24pLFxcbi5oZXJvLmlzLWxpZ2h0IC5zdWJ0aXRsZSBzdHJvbmcge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaGVyby5pcy1saWdodCAubmF2YmFyLW1lbnUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDk2JSk7XFxuICB9XFxufVxcbi5oZXJvLmlzLWxpZ2h0IC5uYXZiYXItaXRlbSxcXG4uaGVyby5pcy1saWdodCAubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuLmhlcm8uaXMtbGlnaHQgYS5uYXZiYXItaXRlbTpob3ZlciwgLmhlcm8uaXMtbGlnaHQgYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuLmhlcm8uaXMtbGlnaHQgLm5hdmJhci1saW5rOmhvdmVyLFxcbi5oZXJvLmlzLWxpZ2h0IC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U4ZThlODtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5oZXJvLmlzLWxpZ2h0IC50YWJzIGEge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLmhlcm8uaXMtbGlnaHQgLnRhYnMgYTpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uaGVyby5pcy1saWdodCAudGFicyBsaS5pcy1hY3RpdmUgYSB7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA5NiUpICFpbXBvcnRhbnQ7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uaGVyby5pcy1saWdodCAudGFicy5pcy1ib3hlZCBhLCAuaGVyby5pcy1saWdodCAudGFicy5pcy10b2dnbGUgYSB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uaGVyby5pcy1saWdodCAudGFicy5pcy1ib3hlZCBhOmhvdmVyLCAuaGVyby5pcy1saWdodCAudGFicy5pcy10b2dnbGUgYTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwLCAxMCwgMTAsIDAuMSk7XFxufVxcbi5oZXJvLmlzLWxpZ2h0IC50YWJzLmlzLWJveGVkIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy1saWdodCAudGFicy5pcy1ib3hlZCBsaS5pcy1hY3RpdmUgYTpob3ZlciwgLmhlcm8uaXMtbGlnaHQgLnRhYnMuaXMtdG9nZ2xlIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy1saWdodCAudGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICBjb2xvcjogaHNsKDAsIDAlLCA5NiUpO1xcbn1cXG4uaGVyby5pcy1saWdodC5pcy1ib2xkIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxNDFkZWcsICNkZmQ4ZDkgMCUsIGhzbCgwLCAwJSwgOTYlKSA3MSUsIHdoaXRlIDEwMCUpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmhlcm8uaXMtbGlnaHQuaXMtYm9sZCAubmF2YmFyLW1lbnUge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCAjZGZkOGQ5IDAlLCBoc2woMCwgMCUsIDk2JSkgNzElLCB3aGl0ZSAxMDAlKTtcXG4gIH1cXG59XFxuLmhlcm8uaXMtZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmhlcm8uaXMtZGFyayBhOm5vdCguYnV0dG9uKTpub3QoLmRyb3Bkb3duLWl0ZW0pOm5vdCgudGFnKTpub3QoLnBhZ2luYXRpb24tbGluay5pcy1jdXJyZW50KSxcXG4uaGVyby5pcy1kYXJrIHN0cm9uZyB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG59XFxuLmhlcm8uaXMtZGFyayAudGl0bGUge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5oZXJvLmlzLWRhcmsgLnN1YnRpdGxlIHtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOSk7XFxufVxcbi5oZXJvLmlzLWRhcmsgLnN1YnRpdGxlIGE6bm90KC5idXR0b24pLFxcbi5oZXJvLmlzLWRhcmsgLnN1YnRpdGxlIHN0cm9uZyB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaGVyby5pcy1kYXJrIC5uYXZiYXItbWVudSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgwLCAwJSwgMjElKTtcXG4gIH1cXG59XFxuLmhlcm8uaXMtZGFyayAubmF2YmFyLWl0ZW0sXFxuLmhlcm8uaXMtZGFyayAubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG59XFxuLmhlcm8uaXMtZGFyayBhLm5hdmJhci1pdGVtOmhvdmVyLCAuaGVyby5pcy1kYXJrIGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbi5oZXJvLmlzLWRhcmsgLm5hdmJhci1saW5rOmhvdmVyLFxcbi5oZXJvLmlzLWRhcmsgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjkyOTI5O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5oZXJvLmlzLWRhcmsgLnRhYnMgYSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLmhlcm8uaXMtZGFyayAudGFicyBhOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5oZXJvLmlzLWRhcmsgLnRhYnMgbGkuaXMtYWN0aXZlIGEge1xcbiAgY29sb3I6IGhzbCgwLCAwJSwgMjElKSAhaW1wb3J0YW50O1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmhlcm8uaXMtZGFyayAudGFicy5pcy1ib3hlZCBhLCAuaGVyby5pcy1kYXJrIC50YWJzLmlzLXRvZ2dsZSBhIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uaGVyby5pcy1kYXJrIC50YWJzLmlzLWJveGVkIGE6aG92ZXIsIC5oZXJvLmlzLWRhcmsgLnRhYnMuaXMtdG9nZ2xlIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMCwgMTAsIDEwLCAwLjEpO1xcbn1cXG4uaGVyby5pcy1kYXJrIC50YWJzLmlzLWJveGVkIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy1kYXJrIC50YWJzLmlzLWJveGVkIGxpLmlzLWFjdGl2ZSBhOmhvdmVyLCAuaGVyby5pcy1kYXJrIC50YWJzLmlzLXRvZ2dsZSBsaS5pcy1hY3RpdmUgYSwgLmhlcm8uaXMtZGFyayAudGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiBoc2woMCwgMCUsIDIxJSk7XFxufVxcbi5oZXJvLmlzLWRhcmsuaXMtYm9sZCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCAjMWYxOTFhIDAlLCBoc2woMCwgMCUsIDIxJSkgNzElLCAjNDY0MDNmIDEwMCUpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmhlcm8uaXMtZGFyay5pcy1ib2xkIC5uYXZiYXItbWVudSB7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxNDFkZWcsICMxZjE5MWEgMCUsIGhzbCgwLCAwJSwgMjElKSA3MSUsICM0NjQwM2YgMTAwJSk7XFxuICB9XFxufVxcbi5oZXJvLmlzLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uaGVyby5pcy1wcmltYXJ5IGE6bm90KC5idXR0b24pOm5vdCguZHJvcGRvd24taXRlbSk6bm90KC50YWcpOm5vdCgucGFnaW5hdGlvbi1saW5rLmlzLWN1cnJlbnQpLFxcbi5oZXJvLmlzLXByaW1hcnkgc3Ryb25nIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG4uaGVyby5pcy1wcmltYXJ5IC50aXRsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmhlcm8uaXMtcHJpbWFyeSAuc3VidGl0bGUge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45KTtcXG59XFxuLmhlcm8uaXMtcHJpbWFyeSAuc3VidGl0bGUgYTpub3QoLmJ1dHRvbiksXFxuLmhlcm8uaXMtcHJpbWFyeSAuc3VidGl0bGUgc3Ryb25nIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5oZXJvLmlzLXByaW1hcnkgLm5hdmJhci1tZW51IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG4gIH1cXG59XFxuLmhlcm8uaXMtcHJpbWFyeSAubmF2YmFyLWl0ZW0sXFxuLmhlcm8uaXMtcHJpbWFyeSAubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG59XFxuLmhlcm8uaXMtcHJpbWFyeSBhLm5hdmJhci1pdGVtOmhvdmVyLCAuaGVyby5pcy1wcmltYXJ5IGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbi5oZXJvLmlzLXByaW1hcnkgLm5hdmJhci1saW5rOmhvdmVyLFxcbi5oZXJvLmlzLXByaW1hcnkgLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBiODljO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5oZXJvLmlzLXByaW1hcnkgLnRhYnMgYSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLmhlcm8uaXMtcHJpbWFyeSAudGFicyBhOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5oZXJvLmlzLXByaW1hcnkgLnRhYnMgbGkuaXMtYWN0aXZlIGEge1xcbiAgY29sb3I6IGhzbCgxNzEsIDEwMCUsIDQxJSkgIWltcG9ydGFudDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5oZXJvLmlzLXByaW1hcnkgLnRhYnMuaXMtYm94ZWQgYSwgLmhlcm8uaXMtcHJpbWFyeSAudGFicy5pcy10b2dnbGUgYSB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmhlcm8uaXMtcHJpbWFyeSAudGFicy5pcy1ib3hlZCBhOmhvdmVyLCAuaGVyby5pcy1wcmltYXJ5IC50YWJzLmlzLXRvZ2dsZSBhOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTAsIDEwLCAxMCwgMC4xKTtcXG59XFxuLmhlcm8uaXMtcHJpbWFyeSAudGFicy5pcy1ib3hlZCBsaS5pcy1hY3RpdmUgYSwgLmhlcm8uaXMtcHJpbWFyeSAudGFicy5pcy1ib3hlZCBsaS5pcy1hY3RpdmUgYTpob3ZlciwgLmhlcm8uaXMtcHJpbWFyeSAudGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGEsIC5oZXJvLmlzLXByaW1hcnkgLnRhYnMuaXMtdG9nZ2xlIGxpLmlzLWFjdGl2ZSBhOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItY29sb3I6ICNmZmY7XFxuICBjb2xvcjogaHNsKDE3MSwgMTAwJSwgNDElKTtcXG59XFxuLmhlcm8uaXMtcHJpbWFyeS5pcy1ib2xkIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxNDFkZWcsICMwMDllNmMgMCUsIGhzbCgxNzEsIDEwMCUsIDQxJSkgNzElLCAjMDBlN2ViIDEwMCUpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmhlcm8uaXMtcHJpbWFyeS5pcy1ib2xkIC5uYXZiYXItbWVudSB7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxNDFkZWcsICMwMDllNmMgMCUsIGhzbCgxNzEsIDEwMCUsIDQxJSkgNzElLCAjMDBlN2ViIDEwMCUpO1xcbiAgfVxcbn1cXG4uaGVyby5pcy1saW5rIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uaGVyby5pcy1saW5rIGE6bm90KC5idXR0b24pOm5vdCguZHJvcGRvd24taXRlbSk6bm90KC50YWcpOm5vdCgucGFnaW5hdGlvbi1saW5rLmlzLWN1cnJlbnQpLFxcbi5oZXJvLmlzLWxpbmsgc3Ryb25nIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG4uaGVyby5pcy1saW5rIC50aXRsZSB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmhlcm8uaXMtbGluayAuc3VidGl0bGUge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45KTtcXG59XFxuLmhlcm8uaXMtbGluayAuc3VidGl0bGUgYTpub3QoLmJ1dHRvbiksXFxuLmhlcm8uaXMtbGluayAuc3VidGl0bGUgc3Ryb25nIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5oZXJvLmlzLWxpbmsgLm5hdmJhci1tZW51IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpO1xcbiAgfVxcbn1cXG4uaGVyby5pcy1saW5rIC5uYXZiYXItaXRlbSxcXG4uaGVyby5pcy1saW5rIC5uYXZiYXItbGluayB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpO1xcbn1cXG4uaGVyby5pcy1saW5rIGEubmF2YmFyLWl0ZW06aG92ZXIsIC5oZXJvLmlzLWxpbmsgYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuLmhlcm8uaXMtbGluayAubmF2YmFyLWxpbms6aG92ZXIsXFxuLmhlcm8uaXMtbGluayAubmF2YmFyLWxpbmsuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzYTUxYmI7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmhlcm8uaXMtbGluayAudGFicyBhIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgb3BhY2l0eTogMC45O1xcbn1cXG4uaGVyby5pcy1saW5rIC50YWJzIGE6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmhlcm8uaXMtbGluayAudGFicyBsaS5pcy1hY3RpdmUgYSB7XFxuICBjb2xvcjogaHNsKDIyOSwgNTMlLCA1MyUpICFpbXBvcnRhbnQ7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uaGVyby5pcy1saW5rIC50YWJzLmlzLWJveGVkIGEsIC5oZXJvLmlzLWxpbmsgLnRhYnMuaXMtdG9nZ2xlIGEge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5oZXJvLmlzLWxpbmsgLnRhYnMuaXMtYm94ZWQgYTpob3ZlciwgLmhlcm8uaXMtbGluayAudGFicy5pcy10b2dnbGUgYTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwLCAxMCwgMTAsIDAuMSk7XFxufVxcbi5oZXJvLmlzLWxpbmsgLnRhYnMuaXMtYm94ZWQgbGkuaXMtYWN0aXZlIGEsIC5oZXJvLmlzLWxpbmsgLnRhYnMuaXMtYm94ZWQgbGkuaXMtYWN0aXZlIGE6aG92ZXIsIC5oZXJvLmlzLWxpbmsgLnRhYnMuaXMtdG9nZ2xlIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy1saW5rIC50YWJzLmlzLXRvZ2dsZSBsaS5pcy1hY3RpdmUgYTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmO1xcbiAgY29sb3I6IGhzbCgyMjksIDUzJSwgNTMlKTtcXG59XFxuLmhlcm8uaXMtbGluay5pcy1ib2xkIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxNDFkZWcsICMyOTU5YjMgMCUsIGhzbCgyMjksIDUzJSwgNTMlKSA3MSUsICM1NjU4ZDIgMTAwJSk7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuaGVyby5pcy1saW5rLmlzLWJvbGQgLm5hdmJhci1tZW51IHtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDE0MWRlZywgIzI5NTliMyAwJSwgaHNsKDIyOSwgNTMlLCA1MyUpIDcxJSwgIzU2NThkMiAxMDAlKTtcXG4gIH1cXG59XFxuLmhlcm8uaXMtaW5mbyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmhlcm8uaXMtaW5mbyBhOm5vdCguYnV0dG9uKTpub3QoLmRyb3Bkb3duLWl0ZW0pOm5vdCgudGFnKTpub3QoLnBhZ2luYXRpb24tbGluay5pcy1jdXJyZW50KSxcXG4uaGVyby5pcy1pbmZvIHN0cm9uZyB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG59XFxuLmhlcm8uaXMtaW5mbyAudGl0bGUge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5oZXJvLmlzLWluZm8gLnN1YnRpdGxlIHtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOSk7XFxufVxcbi5oZXJvLmlzLWluZm8gLnN1YnRpdGxlIGE6bm90KC5idXR0b24pLFxcbi5oZXJvLmlzLWluZm8gLnN1YnRpdGxlIHN0cm9uZyB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaGVyby5pcy1pbmZvIC5uYXZiYXItbWVudSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKTtcXG4gIH1cXG59XFxuLmhlcm8uaXMtaW5mbyAubmF2YmFyLWl0ZW0sXFxuLmhlcm8uaXMtaW5mbyAubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG59XFxuLmhlcm8uaXMtaW5mbyBhLm5hdmJhci1pdGVtOmhvdmVyLCAuaGVyby5pcy1pbmZvIGEubmF2YmFyLWl0ZW0uaXMtYWN0aXZlLFxcbi5oZXJvLmlzLWluZm8gLm5hdmJhci1saW5rOmhvdmVyLFxcbi5oZXJvLmlzLWluZm8gLm5hdmJhci1saW5rLmlzLWFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzA4MmM1O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5oZXJvLmlzLWluZm8gLnRhYnMgYSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLmhlcm8uaXMtaW5mbyAudGFicyBhOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5oZXJvLmlzLWluZm8gLnRhYnMgbGkuaXMtYWN0aXZlIGEge1xcbiAgY29sb3I6IGhzbCgyMDcsIDYxJSwgNTMlKSAhaW1wb3J0YW50O1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmhlcm8uaXMtaW5mbyAudGFicy5pcy1ib3hlZCBhLCAuaGVyby5pcy1pbmZvIC50YWJzLmlzLXRvZ2dsZSBhIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uaGVyby5pcy1pbmZvIC50YWJzLmlzLWJveGVkIGE6aG92ZXIsIC5oZXJvLmlzLWluZm8gLnRhYnMuaXMtdG9nZ2xlIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMCwgMTAsIDEwLCAwLjEpO1xcbn1cXG4uaGVyby5pcy1pbmZvIC50YWJzLmlzLWJveGVkIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy1pbmZvIC50YWJzLmlzLWJveGVkIGxpLmlzLWFjdGl2ZSBhOmhvdmVyLCAuaGVyby5pcy1pbmZvIC50YWJzLmlzLXRvZ2dsZSBsaS5pcy1hY3RpdmUgYSwgLmhlcm8uaXMtaW5mbyAudGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiBoc2woMjA3LCA2MSUsIDUzJSk7XFxufVxcbi5oZXJvLmlzLWluZm8uaXMtYm9sZCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCAjMjA4ZmJjIDAlLCBoc2woMjA3LCA2MSUsIDUzJSkgNzElLCAjNGQ4M2RiIDEwMCUpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmhlcm8uaXMtaW5mby5pcy1ib2xkIC5uYXZiYXItbWVudSB7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxNDFkZWcsICMyMDhmYmMgMCUsIGhzbCgyMDcsIDYxJSwgNTMlKSA3MSUsICM0ZDgzZGIgMTAwJSk7XFxuICB9XFxufVxcbi5oZXJvLmlzLXN1Y2Nlc3Mge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5oZXJvLmlzLXN1Y2Nlc3MgYTpub3QoLmJ1dHRvbik6bm90KC5kcm9wZG93bi1pdGVtKTpub3QoLnRhZyk6bm90KC5wYWdpbmF0aW9uLWxpbmsuaXMtY3VycmVudCksXFxuLmhlcm8uaXMtc3VjY2VzcyBzdHJvbmcge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcbi5oZXJvLmlzLXN1Y2Nlc3MgLnRpdGxlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uaGVyby5pcy1zdWNjZXNzIC5zdWJ0aXRsZSB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjkpO1xcbn1cXG4uaGVyby5pcy1zdWNjZXNzIC5zdWJ0aXRsZSBhOm5vdCguYnV0dG9uKSxcXG4uaGVyby5pcy1zdWNjZXNzIC5zdWJ0aXRsZSBzdHJvbmcge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjNweCkge1xcbiAgLmhlcm8uaXMtc3VjY2VzcyAubmF2YmFyLW1lbnUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSk7XFxuICB9XFxufVxcbi5oZXJvLmlzLXN1Y2Nlc3MgLm5hdmJhci1pdGVtLFxcbi5oZXJvLmlzLXN1Y2Nlc3MgLm5hdmJhci1saW5rIHtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7XFxufVxcbi5oZXJvLmlzLXN1Y2Nlc3MgYS5uYXZiYXItaXRlbTpob3ZlciwgLmhlcm8uaXMtc3VjY2VzcyBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4uaGVyby5pcy1zdWNjZXNzIC5uYXZiYXItbGluazpob3ZlcixcXG4uaGVyby5pcy1zdWNjZXNzIC5uYXZiYXItbGluay5pcy1hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNhYmI4MTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uaGVyby5pcy1zdWNjZXNzIC50YWJzIGEge1xcbiAgY29sb3I6ICNmZmY7XFxuICBvcGFjaXR5OiAwLjk7XFxufVxcbi5oZXJvLmlzLXN1Y2Nlc3MgLnRhYnMgYTpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uaGVyby5pcy1zdWNjZXNzIC50YWJzIGxpLmlzLWFjdGl2ZSBhIHtcXG4gIGNvbG9yOiBoc2woMTUzLCA1MyUsIDUzJSkgIWltcG9ydGFudDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5oZXJvLmlzLXN1Y2Nlc3MgLnRhYnMuaXMtYm94ZWQgYSwgLmhlcm8uaXMtc3VjY2VzcyAudGFicy5pcy10b2dnbGUgYSB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmhlcm8uaXMtc3VjY2VzcyAudGFicy5pcy1ib3hlZCBhOmhvdmVyLCAuaGVyby5pcy1zdWNjZXNzIC50YWJzLmlzLXRvZ2dsZSBhOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTAsIDEwLCAxMCwgMC4xKTtcXG59XFxuLmhlcm8uaXMtc3VjY2VzcyAudGFicy5pcy1ib3hlZCBsaS5pcy1hY3RpdmUgYSwgLmhlcm8uaXMtc3VjY2VzcyAudGFicy5pcy1ib3hlZCBsaS5pcy1hY3RpdmUgYTpob3ZlciwgLmhlcm8uaXMtc3VjY2VzcyAudGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGEsIC5oZXJvLmlzLXN1Y2Nlc3MgLnRhYnMuaXMtdG9nZ2xlIGxpLmlzLWFjdGl2ZSBhOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItY29sb3I6ICNmZmY7XFxuICBjb2xvcjogaHNsKDE1MywgNTMlLCA1MyUpO1xcbn1cXG4uaGVyby5pcy1zdWNjZXNzLmlzLWJvbGQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDE0MWRlZywgIzI5YjM1ZSAwJSwgaHNsKDE1MywgNTMlLCA1MyUpIDcxJSwgIzU2ZDJhZiAxMDAlKTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5oZXJvLmlzLXN1Y2Nlc3MuaXMtYm9sZCAubmF2YmFyLW1lbnUge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCAjMjliMzVlIDAlLCBoc2woMTUzLCA1MyUsIDUzJSkgNzElLCAjNTZkMmFmIDEwMCUpO1xcbiAgfVxcbn1cXG4uaGVyby5pcy13YXJuaW5nIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbCg0NCwgMTAwJSwgNzclKTtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5oZXJvLmlzLXdhcm5pbmcgYTpub3QoLmJ1dHRvbik6bm90KC5kcm9wZG93bi1pdGVtKTpub3QoLnRhZyk6bm90KC5wYWdpbmF0aW9uLWxpbmsuaXMtY3VycmVudCksXFxuLmhlcm8uaXMtd2FybmluZyBzdHJvbmcge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcbi5oZXJvLmlzLXdhcm5pbmcgLnRpdGxlIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5oZXJvLmlzLXdhcm5pbmcgLnN1YnRpdGxlIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOSk7XFxufVxcbi5oZXJvLmlzLXdhcm5pbmcgLnN1YnRpdGxlIGE6bm90KC5idXR0b24pLFxcbi5oZXJvLmlzLXdhcm5pbmcgLnN1YnRpdGxlIHN0cm9uZyB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDIzcHgpIHtcXG4gIC5oZXJvLmlzLXdhcm5pbmcgLm5hdmJhci1tZW51IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDQ0LCAxMDAlLCA3NyUpO1xcbiAgfVxcbn1cXG4uaGVyby5pcy13YXJuaW5nIC5uYXZiYXItaXRlbSxcXG4uaGVyby5pcy13YXJuaW5nIC5uYXZiYXItbGluayB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uaGVyby5pcy13YXJuaW5nIGEubmF2YmFyLWl0ZW06aG92ZXIsIC5oZXJvLmlzLXdhcm5pbmcgYS5uYXZiYXItaXRlbS5pcy1hY3RpdmUsXFxuLmhlcm8uaXMtd2FybmluZyAubmF2YmFyLWxpbms6aG92ZXIsXFxuLmhlcm8uaXMtd2FybmluZyAubmF2YmFyLWxpbmsuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmQ5NzA7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpO1xcbn1cXG4uaGVyby5pcy13YXJuaW5nIC50YWJzIGEge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIG9wYWNpdHk6IDAuOTtcXG59XFxuLmhlcm8uaXMtd2FybmluZyAudGFicyBhOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5oZXJvLmlzLXdhcm5pbmcgLnRhYnMgbGkuaXMtYWN0aXZlIGEge1xcbiAgY29sb3I6IGhzbCg0NCwgMTAwJSwgNzclKSAhaW1wb3J0YW50O1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmhlcm8uaXMtd2FybmluZyAudGFicy5pcy1ib3hlZCBhLCAuaGVyby5pcy13YXJuaW5nIC50YWJzLmlzLXRvZ2dsZSBhIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxufVxcbi5oZXJvLmlzLXdhcm5pbmcgLnRhYnMuaXMtYm94ZWQgYTpob3ZlciwgLmhlcm8uaXMtd2FybmluZyAudGFicy5pcy10b2dnbGUgYTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwLCAxMCwgMTAsIDAuMSk7XFxufVxcbi5oZXJvLmlzLXdhcm5pbmcgLnRhYnMuaXMtYm94ZWQgbGkuaXMtYWN0aXZlIGEsIC5oZXJvLmlzLXdhcm5pbmcgLnRhYnMuaXMtYm94ZWQgbGkuaXMtYWN0aXZlIGE6aG92ZXIsIC5oZXJvLmlzLXdhcm5pbmcgLnRhYnMuaXMtdG9nZ2xlIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy13YXJuaW5nIC50YWJzLmlzLXRvZ2dsZSBsaS5pcy1hY3RpdmUgYTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XFxuICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIGNvbG9yOiBoc2woNDQsIDEwMCUsIDc3JSk7XFxufVxcbi5oZXJvLmlzLXdhcm5pbmcuaXMtYm9sZCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCAjZmZiNjU3IDAlLCBoc2woNDQsIDEwMCUsIDc3JSkgNzElLCAjZmZmNmEzIDEwMCUpO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLmhlcm8uaXMtd2FybmluZy5pcy1ib2xkIC5uYXZiYXItbWVudSB7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxNDFkZWcsICNmZmI2NTcgMCUsIGhzbCg0NCwgMTAwJSwgNzclKSA3MSUsICNmZmY2YTMgMTAwJSk7XFxuICB9XFxufVxcbi5oZXJvLmlzLWRhbmdlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmhlcm8uaXMtZGFuZ2VyIGE6bm90KC5idXR0b24pOm5vdCguZHJvcGRvd24taXRlbSk6bm90KC50YWcpOm5vdCgucGFnaW5hdGlvbi1saW5rLmlzLWN1cnJlbnQpLFxcbi5oZXJvLmlzLWRhbmdlciBzdHJvbmcge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcbi5oZXJvLmlzLWRhbmdlciAudGl0bGUge1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5oZXJvLmlzLWRhbmdlciAuc3VidGl0bGUge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45KTtcXG59XFxuLmhlcm8uaXMtZGFuZ2VyIC5zdWJ0aXRsZSBhOm5vdCguYnV0dG9uKSxcXG4uaGVyby5pcy1kYW5nZXIgLnN1YnRpdGxlIHN0cm9uZyB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyM3B4KSB7XFxuICAuaGVyby5pcy1kYW5nZXIgLm5hdmJhci1tZW51IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpO1xcbiAgfVxcbn1cXG4uaGVyby5pcy1kYW5nZXIgLm5hdmJhci1pdGVtLFxcbi5oZXJvLmlzLWRhbmdlciAubmF2YmFyLWxpbmsge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG59XFxuLmhlcm8uaXMtZGFuZ2VyIGEubmF2YmFyLWl0ZW06aG92ZXIsIC5oZXJvLmlzLWRhbmdlciBhLm5hdmJhci1pdGVtLmlzLWFjdGl2ZSxcXG4uaGVyby5pcy1kYW5nZXIgLm5hdmJhci1saW5rOmhvdmVyLFxcbi5oZXJvLmlzLWRhbmdlciAubmF2YmFyLWxpbmsuaXMtYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZjJlNTU7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmhlcm8uaXMtZGFuZ2VyIC50YWJzIGEge1xcbiAgY29sb3I6ICNmZmY7XFxuICBvcGFjaXR5OiAwLjk7XFxufVxcbi5oZXJvLmlzLWRhbmdlciAudGFicyBhOmhvdmVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5oZXJvLmlzLWRhbmdlciAudGFicyBsaS5pcy1hY3RpdmUgYSB7XFxuICBjb2xvcjogaHNsKDM0OCwgODYlLCA2MSUpICFpbXBvcnRhbnQ7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uaGVyby5pcy1kYW5nZXIgLnRhYnMuaXMtYm94ZWQgYSwgLmhlcm8uaXMtZGFuZ2VyIC50YWJzLmlzLXRvZ2dsZSBhIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uaGVyby5pcy1kYW5nZXIgLnRhYnMuaXMtYm94ZWQgYTpob3ZlciwgLmhlcm8uaXMtZGFuZ2VyIC50YWJzLmlzLXRvZ2dsZSBhOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTAsIDEwLCAxMCwgMC4xKTtcXG59XFxuLmhlcm8uaXMtZGFuZ2VyIC50YWJzLmlzLWJveGVkIGxpLmlzLWFjdGl2ZSBhLCAuaGVyby5pcy1kYW5nZXIgLnRhYnMuaXMtYm94ZWQgbGkuaXMtYWN0aXZlIGE6aG92ZXIsIC5oZXJvLmlzLWRhbmdlciAudGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGEsIC5oZXJvLmlzLWRhbmdlciAudGFicy5pcy10b2dnbGUgbGkuaXMtYWN0aXZlIGE6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZjtcXG4gIGNvbG9yOiBoc2woMzQ4LCA4NiUsIDYxJSk7XFxufVxcbi5oZXJvLmlzLWRhbmdlci5pcy1ib2xkIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxNDFkZWcsICNmYTBhNjIgMCUsIGhzbCgzNDgsIDg2JSwgNjElKSA3MSUsICNmNzU5NWYgMTAwJSk7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuaGVyby5pcy1kYW5nZXIuaXMtYm9sZCAubmF2YmFyLW1lbnUge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCAjZmEwYTYyIDAlLCBoc2woMzQ4LCA4NiUsIDYxJSkgNzElLCAjZjc1OTVmIDEwMCUpO1xcbiAgfVxcbn1cXG4uaGVyby5pcy1zbWFsbCAuaGVyby1ib2R5IHtcXG4gIHBhZGRpbmc6IDEuNXJlbTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpLCBwcmludCB7XFxuICAuaGVyby5pcy1tZWRpdW0gLmhlcm8tYm9keSB7XFxuICAgIHBhZGRpbmc6IDlyZW0gNC41cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5oZXJvLmlzLWxhcmdlIC5oZXJvLWJvZHkge1xcbiAgICBwYWRkaW5nOiAxOHJlbSA2cmVtO1xcbiAgfVxcbn1cXG4uaGVyby5pcy1oYWxmaGVpZ2h0IC5oZXJvLWJvZHksIC5oZXJvLmlzLWZ1bGxoZWlnaHQgLmhlcm8tYm9keSwgLmhlcm8uaXMtZnVsbGhlaWdodC13aXRoLW5hdmJhciAuaGVyby1ib2R5IHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uaGVyby5pcy1oYWxmaGVpZ2h0IC5oZXJvLWJvZHkgPiAuY29udGFpbmVyLCAuaGVyby5pcy1mdWxsaGVpZ2h0IC5oZXJvLWJvZHkgPiAuY29udGFpbmVyLCAuaGVyby5pcy1mdWxsaGVpZ2h0LXdpdGgtbmF2YmFyIC5oZXJvLWJvZHkgPiAuY29udGFpbmVyIHtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGZsZXgtc2hyaW5rOiAxO1xcbn1cXG4uaGVyby5pcy1oYWxmaGVpZ2h0IHtcXG4gIG1pbi1oZWlnaHQ6IDUwdmg7XFxufVxcbi5oZXJvLmlzLWZ1bGxoZWlnaHQge1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxufVxcblxcbi5oZXJvLXZpZGVvIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi5oZXJvLXZpZGVvIHZpZGVvIHtcXG4gIGxlZnQ6IDUwJTtcXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICBtaW4td2lkdGg6IDEwMCU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTUwJSwgLTUwJSwgMCk7XFxufVxcbi5oZXJvLXZpZGVvLmlzLXRyYW5zcGFyZW50IHtcXG4gIG9wYWNpdHk6IDAuMztcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIC5oZXJvLXZpZGVvIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG59XFxuXFxuLmhlcm8tYnV0dG9ucyB7XFxuICBtYXJnaW4tdG9wOiAxLjVyZW07XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XFxuICAuaGVyby1idXR0b25zIC5idXR0b24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgfVxcbiAgLmhlcm8tYnV0dG9ucyAuYnV0dG9uOm5vdCg6bGFzdC1jaGlsZCkge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5oZXJvLWJ1dHRvbnMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIH1cXG4gIC5oZXJvLWJ1dHRvbnMgLmJ1dHRvbjpub3QoOmxhc3QtY2hpbGQpIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxLjVyZW07XFxuICB9XFxufVxcblxcbi5oZXJvLWhlYWQsXFxuLmhlcm8tZm9vdCB7XFxuICBmbGV4LWdyb3c6IDA7XFxuICBmbGV4LXNocmluazogMDtcXG59XFxuXFxuLmhlcm8tYm9keSB7XFxuICBmbGV4LWdyb3c6IDE7XFxuICBmbGV4LXNocmluazogMDtcXG4gIHBhZGRpbmc6IDNyZW0gMS41cmVtO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCksIHByaW50IHtcXG4gIC5oZXJvLWJvZHkge1xcbiAgICBwYWRkaW5nOiAzcmVtIDNyZW07XFxuICB9XFxufVxcblxcbi5zZWN0aW9uIHtcXG4gIHBhZGRpbmc6IDNyZW0gMS41cmVtO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHtcXG4gIC5zZWN0aW9uIHtcXG4gICAgcGFkZGluZzogM3JlbSAzcmVtO1xcbiAgfVxcbiAgLnNlY3Rpb24uaXMtbWVkaXVtIHtcXG4gICAgcGFkZGluZzogOXJlbSA0LjVyZW07XFxuICB9XFxuICAuc2VjdGlvbi5pcy1sYXJnZSB7XFxuICAgIHBhZGRpbmc6IDE4cmVtIDZyZW07XFxuICB9XFxufVxcblxcbi5mb290ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsKDAsIDAlLCA5OCUpO1xcbiAgcGFkZGluZzogM3JlbSAxLjVyZW0gNnJlbTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL2J1bG1hLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL3V0aWxpdGllcy9fYWxsLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL3V0aWxpdGllcy9leHRlbmRzLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL3V0aWxpdGllcy9jb250cm9scy5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy91dGlsaXRpZXMvaW5pdGlhbC12YXJpYWJsZXMuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvdXRpbGl0aWVzL21peGlucy5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9iYXNlL19hbGwuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvYmFzZS9taW5pcmVzZXQuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvYmFzZS9nZW5lcmljLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL3V0aWxpdGllcy9kZXJpdmVkLXZhcmlhYmxlcy5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9iYXNlL2FuaW1hdGlvbnMuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvZWxlbWVudHMvX2FsbC5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9lbGVtZW50cy9ib3guc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvZWxlbWVudHMvYnV0dG9uLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2VsZW1lbnRzL2NvbnRhaW5lci5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9lbGVtZW50cy9jb250ZW50LnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2VsZW1lbnRzL2ljb24uc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvZWxlbWVudHMvaW1hZ2Uuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvZWxlbWVudHMvbm90aWZpY2F0aW9uLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2VsZW1lbnRzL3Byb2dyZXNzLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2VsZW1lbnRzL3RhYmxlLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2VsZW1lbnRzL3RhZy5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9lbGVtZW50cy90aXRsZS5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9lbGVtZW50cy9vdGhlci5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9mb3JtL19hbGwuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvZm9ybS9zaGFyZWQuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvZm9ybS9pbnB1dC10ZXh0YXJlYS5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9mb3JtL2NoZWNrYm94LXJhZGlvLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2Zvcm0vc2VsZWN0LnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2Zvcm0vZmlsZS5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9mb3JtL3Rvb2xzLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2NvbXBvbmVudHMvX2FsbC5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9jb21wb25lbnRzL2JyZWFkY3J1bWIuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvY29tcG9uZW50cy9jYXJkLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2NvbXBvbmVudHMvZHJvcGRvd24uc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvY29tcG9uZW50cy9sZXZlbC5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9jb21wb25lbnRzL21lZGlhLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2NvbXBvbmVudHMvbWVudS5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9jb21wb25lbnRzL21lc3NhZ2Uuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvY29tcG9uZW50cy9tb2RhbC5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9jb21wb25lbnRzL25hdmJhci5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9jb21wb25lbnRzL3BhZ2luYXRpb24uc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvY29tcG9uZW50cy9wYW5lbC5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9jb21wb25lbnRzL3RhYnMuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvZ3JpZC9fYWxsLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2dyaWQvY29sdW1ucy5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9ncmlkL3RpbGVzLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2hlbHBlcnMvX2FsbC5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9oZWxwZXJzL2NvbG9yLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2hlbHBlcnMvZmxleGJveC5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9oZWxwZXJzL2Zsb2F0LnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2hlbHBlcnMvb3RoZXIuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvaGVscGVycy9vdmVyZmxvdy5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9oZWxwZXJzL3Bvc2l0aW9uLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2hlbHBlcnMvc3BhY2luZy5zYXNzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy9oZWxwZXJzL3R5cG9ncmFwaHkuc2Fzc1wiLFwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2J1bG1hL3Nhc3MvaGVscGVycy92aXNpYmlsaXR5LnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2xheW91dC9fYWxsLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2xheW91dC9oZXJvLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2xheW91dC9zZWN0aW9uLnNhc3NcIixcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL2xheW91dC9mb290ZXIuc2Fzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxnQkFBZ0I7QUFDaEIsNkRBQUE7QUNEQSxvQkFBQTtBQ0VBOzs7OztFQ1lFLHFCQUFBO0VBQ0Esd0JBQUE7RUFD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QUFBO0VBQ0EsdUJBbEdZO0VBbUdaLGdCQUFBO0VBQ0EsaUJBQUE7QVJxUkY7QVFwUkU7RUFDRSw2QkFBQTtFQUNBLG1CQUFBO0VBQ0EsY0F2R2lCO0VBd0dqQixVQUFBO0FSc1JKOztBUW5SRTs7RUFFRSxtQkFBQTtBUnNSSjtBUXJSSTs7RUFDRSxtQkFBQTtBUndSTjtBUXZSRTtFQUNFLHNCSjFJVztBSm1hZjs7QVV6YUE7RUFDRTtJQUNFLHVCQUFBO0VWNGFGO0VVM2FBO0lBQ0UseUJBQUE7RVY2YUY7QUFDRjtBV2xiQSxtQkFBQTtBQ1dBO0VBRUUsa0NSRWE7RVFEYixrQlJ5RGE7RVF4RGIsMEZId0ZPO0VHdkZQLHNCUlRhO0VRVWIsY0FBQTtFQUNBLGdCQVpZO0FacWJkOztBWXRhRTtFQUVFLG9GQWZvQjtBWnVieEI7QVl2YUU7RUFDRSwrRUFoQnFCO0FaeWJ6Qjs7QWF0WUE7RUFHRSxrQ1RoRGE7RVNpRGIsNkJUdERhO0VTdURiLGlCVjVEcUI7RVU2RHJCLHNCVDVEYTtFUzZEYixlQUFBO0VBR0EsdUJBQUE7RUFDQSxpQ0E3RHdCO0VBOER4QixpQkE3RDBCO0VBOEQxQixrQkE5RDBCO0VBK0QxQiw4QkFoRXdCO0VBaUV4QixrQkFBQTtFQUNBLG1CQUFBO0FicVlGO0FhcFlFO0VBQ0UsY0FBQTtBYnNZSjtBYXBZSTtFQUlFLGFBQUE7RUFDQSxZQUFBO0FibVlOO0FhbFlJO0VSOEZBLCtCUTdGMEI7RVI2RjFCLG9CUTVGMEI7QWJvWTlCO0FhbllJO0VSMkZBLG1CUTFGMEI7RVIwRjFCLGdDUXpGMEI7QWJxWTlCO0FhcFlJO0VBQ0UsK0JBQUE7RUFDQSxnQ0FBQTtBYnNZTjtBYXBZRTtFQUVFLDZCVHpGVztFUzBGWCxzQlQ3Rlc7QUprZWY7QWFwWUU7RUFFRSxnQ1RoRlc7RVNpRlgsc0JUakdXO0FKc2VmO0FhcFlJO0VBQ0UsaURBQUE7QWJzWU47QWFyWUU7RUFFRSw2QlRyR1c7RVNzR1gsc0JUdkdXO0FKNmVmO0FhcFlFO0VBQ0UsNkJBQUE7RUFDQSx5QkFBQTtFQUNBLHNCVDNHVztFUzRHWCww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VDtBYTlxQ0U7RUF0TUEsaUJUdkJPO0FKODRDVDtBYTlxQ0U7RUFFRSxrQ1R0UFc7RVN1UFgsNkJUNVBXO0VTNlBYLGdCQWpPcUI7RUFrT3JCLFlBak9zQjtBYmc1QzFCO0FhOXFDRTtFQUNFLGFBQUE7RUFDQSxXQUFBO0FiZ3JDSjtBYS9xQ0U7RUFDRSw2QkFBQTtFQUNBLG9CQUFBO0FiaXJDSjtBYWhyQ0k7RVJ0UUYsa0JBQUE7RUFLRSw2QkFBQTtFQUNBLDRCQUFBO0VRbVFFLDZCQUFBO0FibXJDTjtBYWxyQ0U7RUFDRSxpQ1R2UVc7RVN3UVgsNkJUM1FXO0VTNFFYLHNCVDlRVztFUytRWCxnQkFBQTtFQUNBLG9CQUFBO0Fib3JDSjtBYW5yQ0U7RUFDRSxxQlRsTmE7RVNtTmIsZ0NBQUE7RUFDQSxpQ0FBQTtBYnFyQ0o7O0FhbnJDQTtFQUNFLG1CQUFBO0VBQ0EsYUFBQTtFQUNBLGVBQUE7RUFDQSwyQkFBQTtBYnNyQ0Y7QWFyckNFO0VBQ0UscUJBQUE7QWJ1ckNKO0FhdHJDSTtFUmpIQSxvQlFrSDBCO0Fid3JDOUI7QWF2ckNFO0VBQ0Usc0JBQUE7QWJ5ckNKO0FheHJDRTtFQUNFLG1CQUFBO0FiMHJDSjtBYXZyQ0k7RUF6UEYsa0JUZE87QUppOENUO0FhcjdDRTtFQUNFLGtCVGtCVztBSnE2Q2Y7QWExckNJO0VBeFBGLGtCVHBCTztBSnk4Q1Q7QWExckNJO0VBelBGLGlCVHZCTztBSjY4Q1Q7QWF6ckNNO0VBQ0UsNEJBQUE7RUFDQSx5QkFBQTtBYjJyQ1I7QWExckNNO0VBQ0UsNkJBQUE7RUFDQSwwQkFBQTtFUnhJSixrQlF5STRCO0FiNHJDaEM7QWEzckNNO0VSMUlGLGVRMkk0QjtBYjZyQ2hDO0FhNXJDTTtFQUVFLFVBQUE7QWI2ckNSO0FhNXJDTTtFQUtFLFVBQUE7QWIwckNSO0FhenJDUTtFQUNFLFVBQUE7QWIyckNWO0FhMXJDTTtFQUNFLFlBQUE7RUFDQSxjQUFBO0FiNHJDUjtBYTNyQ0U7RUFDRSx1QkFBQTtBYjZyQ0o7QWEzckNNO0VBQ0Usb0JBQUE7RUFDQSxxQkFBQTtBYjZyQ1I7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QW5CbWdFWjtBbUIvL0RNO0VBQ0UsZ0NBTEk7QW5Cc2dFWjtBbUJoZ0VNO0VBQ0UsZ0NBUEk7QW5CeWdFWjtBbUJqZ0VNO0VBQ0Usb0ZBQUE7QW5CbWdFUjtBbUIxZ0VNO0VBQ0UsaUNBSEk7QW5CK2dFWjtBbUIzZ0VNO0VBQ0UsaUNBTEk7QW5Ca2hFWjtBbUI1Z0VNO0VBQ0UsaUNBUEk7QW5CcWhFWjtBbUI3Z0VNO0VBQ0UscUZBQUE7QW5CK2dFUjtBbUJ0aEVNO0VBQ0UsaUNBSEk7QW5CMmhFWjtBbUJ2aEVNO0VBQ0UsaUNBTEk7QW5COGhFWjtBbUJ4aEVNO0VBQ0UsaUNBUEk7QW5CaWlFWjtBbUJ6aEVNO0VBQ0UscUZBQUE7QW5CMmhFUjtBbUJsaUVNO0VBQ0UscUNBSEk7QW5CdWlFWjtBbUJuaUVNO0VBQ0UscUNBTEk7QW5CMGlFWjtBbUJwaUVNO0VBQ0UscUNBUEk7QW5CNmlFWjtBbUJyaUVNO0VBQ0UseUZBQUE7QW5CdWlFUjtBbUI5aUVNO0VBQ0Usb0NBSEk7QW5CbWpFWjtBbUIvaUVNO0VBQ0Usb0NBTEk7QW5Cc2pFWjtBbUJoakVNO0VBQ0Usb0NBUEk7QW5CeWpFWjtBbUJqakVNO0VBQ0Usd0ZBQUE7QW5CbWpFUjtBbUIxakVNO0VBQ0Usb0NBSEk7QW5CK2pFWjtBbUIzakVNO0VBQ0Usb0NBTEk7QW5Ca2tFWjtBbUI1akVNO0VBQ0Usb0NBUEk7QW5CcWtFWjtBbUI3akVNO0VBQ0Usd0ZBQUE7QW5CK2pFUjtBbUJ0a0VNO0VBQ0Usb0NBSEk7QW5CMmtFWjtBbUJ2a0VNO0VBQ0Usb0NBTEk7QW5COGtFWjtBbUJ4a0VNO0VBQ0Usb0NBUEk7QW5CaWxFWjtBbUJ6a0VNO0VBQ0Usd0ZBQUE7QW5CMmtFUjtBbUJsbEVNO0VBQ0Usb0NBSEk7QW5CdWxFWjtBbUJubEVNO0VBQ0Usb0NBTEk7QW5CMGxFWjtBbUJwbEVNO0VBQ0Usb0NBUEk7QW5CNmxFWjtBbUJybEVNO0VBQ0Usd0ZBQUE7QW5CdWxFUjtBbUI5bEVNO0VBQ0Usb0NBSEk7QW5CbW1FWjtBbUIvbEVNO0VBQ0Usb0NBTEk7QW5Cc21FWjtBbUJobUVNO0VBQ0Usb0NBUEk7QW5CeW1FWjtBbUJqbUVNO0VBQ0Usd0ZBQUE7QW5CbW1FUjtBbUJqbUVFO0VBQ0Usd0JBdEM4QjtFQXVDOUIsbUNBQUE7RUFDQSxpQ0FBQTtFQUNBLGlDQUFBO0VBQ0EsaUNmckNZO0Vlc0NaLHFGQUFBO0VBQ0EsNkJBQUE7RUFDQSw0QkFBQTtFQUNBLDBCQUFBO0FuQm1tRUo7QW1CbG1FSTtFQUNFLDZCQUFBO0FuQm9tRU47QW1Cbm1FSTtFQUNFLDZCQUFBO0FuQnFtRU47QW1CcG1FSTtFQUNFLG9CQUFBO0FuQnNtRU47QW1Cbm1FRTtFQUNFLGVmeEJLO0FKNm5FVDtBbUJwbUVFO0VBQ0UsZWY1Qks7QUprb0VUO0FtQnJtRUU7RUFDRSxjZi9CSztBSnNvRVQ7O0FtQnJtRUE7RUFDRTtJQUNFLDJCQUFBO0VuQndtRUY7RW1Cdm1FQTtJQUNFLDRCQUFBO0VuQnltRUY7QUFDRjtBb0JwcEVBO0VBRUUsa0NoQmpCYTtFZ0JrQmIsc0JoQjNCYTtBSmdyRWY7QW9CcHBFRTs7RUFFRSxpQ0EvQmdCO0VBZ0NoQixxQkEvQnNCO0VBZ0N0QixxQkEvQmlCO0VBZ0NqQixtQkFBQTtBcEJzcEVKO0FvQmpwRU07O0VBQ0Usa0NBSE07RUFJTiw4QkFKTTtFQUtOLHFCQUphO0FwQndwRXJCO0FvQnZwRU07O0VBQ0UsZ0NBSE07RUFJTiw0QkFKTTtFQUtOLHVCQUphO0FwQjhwRXJCO0FvQjdwRU07O0VBQ0UsaUNBSE07RUFJTiw2QkFKTTtFQUtOLHlCQUphO0FwQm9xRXJCO0FvQm5xRU07O0VBQ0UsaUNBSE07RUFJTiw2QkFKTTtFQUtOLFdBSmE7QXBCMHFFckI7QW9CenFFTTs7RUFDRSxxQ0FITTtFQUlOLGlDQUpNO0VBS04sV0FKYTtBcEJnckVyQjtBb0IvcUVNOztFQUNFLG9DQUhNO0VBSU4sZ0NBSk07RUFLTixXQUphO0FwQnNyRXJCO0FvQnJyRU07O0VBQ0Usb0NBSE07RUFJTixnQ0FKTTtFQUtOLFdBSmE7QXBCNHJFckI7QW9CM3JFTTs7RUFDRSxvQ0FITTtFQUlOLGdDQUpNO0VBS04sV0FKYTtBcEJrc0VyQjtBb0Jqc0VNOztFQUNFLG9DQUhNO0VBSU4sZ0NBSk07RUFLTix5QkFKYTtBcEJ3c0VyQjtBb0J2c0VNOztFQUNFLG9DQUhNO0VBSU4sZ0NBSk07RUFLTixXQUphO0FwQjhzRXJCO0FvQnhzRUk7O0VBQ0UsbUJBQUE7RUFDQSxTQUFBO0FwQjJzRU47QW9CMXNFSTs7RUFDRSxxQ2hCakNTO0VnQmtDVCxXWDlCVztBVDJ1RWpCO0FvQjVzRU07Ozs7RUFFRSxtQkFBQTtBcEJndEVSO0FvQi9zRUk7O0VBQ0Usc0JBQUE7QXBCa3RFTjtBb0JqdEVFO0VBQ0Usc0JoQnZEVztBSjB3RWY7QW9CbHRFSTtFQUNFLGdCQXREa0I7QXBCMHdFeEI7QW9CbHRFSTtFQUNFLHFDaEI5Q1M7RWdCK0NULFdYM0NXO0FUK3ZFakI7QW9CbnRFTTs7RUFFRSxtQkFBQTtBcEJxdEVSO0FvQnB0RU07O0VBRUUsa0JYakRTO0VXa0RULG1CQUFBO0FwQnN0RVI7QW9CcnRFRTtFQUNFLDZCQTVEMEI7QXBCbXhFOUI7QW9CdHRFSTs7RUFFRSxxQkFwRXlCO0VBcUV6QixzQmhCMUVTO0FKa3lFZjtBb0J2dEVFO0VBQ0UsNkJBaEUwQjtBcEJ5eEU5QjtBb0J4dEVJOztFQUVFLHFCQXhFeUI7RUF5RXpCLHNCaEJoRlM7QUoweUVmO0FvQnp0RUU7RUFDRSw2QkF2RTBCO0FwQmt5RTlCO0FvQnh0RVE7O0VBRUUsc0JBQUE7QXBCMHRFVjtBb0J2dEVJOztFQUVFLGlCQUFBO0FwQnl0RU47QW9CdHRFUTs7RUFFRSx3QkFBQTtBcEJ3dEVWO0FvQnZ0RUU7RUFDRSxXQUFBO0FwQnl0RUo7QW9CcnRFUTtFQUNFLGlDaEJoR0s7QUp1ekVmO0FvQm50RVU7RUFDRSxpQ2hCckdHO0FKMHpFZjtBb0JwdEVZO0VBQ0UsaUNoQnhHQztBSjh6RWY7QW9CcHRFSTs7RUFFRSxxQkFBQTtBcEJzdEVOO0FvQmx0RVE7RUFDRSxpQ2hCaEhLO0FKbzBFZjs7QW9CbHRFQTtFZjdERSxpQ0FBQTtFZWdFQSxjQUFBO0VBQ0Esa0JBQUE7RUFD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NEVOO0FxQjc0RUk7RUFFRSx5QkFBQTtBckI4NEVOO0FxQjc0RUk7RUFDRSx5QkFBQTtBckIrNEVOO0FxQjk0RUU7RUFDRSxxQmpCL0RhO0FKKzhFakI7O0FxQjc0RUU7RUFDRSwwQkFBQTtBckJnNUVKOztBc0J0Z0ZBOztFQUdFLHNCQUFBO0F0QndnRkY7QXNCdmdGRTs7OztFQUVFLG9CQUFBO0F0QjJnRko7QXNCMWdGRTs7RUFDRSxpQkFwQmE7QXRCaWlGakI7QXNCNWdGRTs7RUFDRSxpQkFyQmE7QXRCb2lGakI7QXNCOWdGRTs7RUFDRSxzQkFBQTtBdEJpaEZKOztBc0IvZ0ZBO0VBQ0Usc0JsQjlCYTtFa0JpQ2IsZWxCTE87RWtCTVAsZ0JsQkdnQjtFa0JGaEIsa0JBbkNrQjtBdEJtakZwQjtBc0IvZ0ZFO0VBQ0UsY0FwQ2lCO0VBcUNqQixvQkFwQ2tCO0F0QnFqRnRCO0FzQmhoRkU7RUFDRSxvQkEzQnVCO0F0QjZpRjNCO0FzQjlnRkk7RUFDRSxlYjhERTtBVGs5RVI7QXNCamhGSTtFQUNFLGlCYjhERTtBVHE5RVI7QXNCcGhGSTtFQUNFLGViOERFO0FUdzlFUjtBc0J2aEZJO0VBQ0UsaUJiOERFO0FUMjlFUjtBc0IxaEZJO0VBQ0Usa0JiOERFO0FUODlFUjtBc0I3aEZJO0VBQ0UsZWI4REU7QVRpK0VSO0FzQmhpRkk7RUFDRSxrQmI4REU7QVRvK0VSOztBc0JoaUZBO0VBQ0Usc0JsQi9DYTtFa0JrRGIsa0JsQnJCTztFa0JzQlAsZ0JsQmpCYztFa0JrQmQsaUJBM0NxQjtBdEI0a0Z2QjtBc0JoaUZFO0VBQ0Usc0JsQnZEVztFa0J3RFgsZ0JsQm5CYztBSnFqRmxCO0FzQmppRkU7RUFDRSxvQkE3Q3VCO0F0QmdsRjNCO0FzQi9oRkk7RUFDRSxlYjRDRTtBVHEvRVI7QXNCbGlGSTtFQUNFLGlCYjRDRTtBVHcvRVI7QXNCcmlGSTtFQUNFLGViNENFO0FUMi9FUjtBc0J4aUZJO0VBQ0UsaUJiNENFO0FUOC9FUjtBc0IzaUZJO0VBQ0Usa0JiNENFO0FUaWdGUjtBc0I5aUZJO0VBQ0UsZWI0Q0U7QVRvZ0ZSO0FzQmpqRkk7RUFDRSxrQmI0Q0U7QVR1Z0ZSOztBdUJobkZBO0VBQ0UsY0FBQTtFQUNBLGVBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0VBQ0EseUJBQUE7QXZCbW5GRjs7QXVCOW1GQTtFQUNFLG1CQUFBO0VBQ0EsaUNuQlBhO0VtQlFiLHFCbkJtRGU7RW1CbERmLG9CQUFBO0VBQ0Esa0JuQmFPO0VtQlpQLFdBQUE7RUFDQSx1QkFBQTtFQUNBLG9CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx1QkFBQTtFQUNBLGtCQUFBO0VBQ0EsbUJBQUE7QXZCaW5GRjs7QXdCL29GQSxlQUFBO0FDMERBO0VBeEJFLGtDckJuQmE7RXFCb0JiLDZCckJ6QmE7RXFCMEJiLGtCckJrQ087RXFCakNQLHNCckIvQmE7QUppcEZmO0FLL2tGSTtFb0JqQ0EsNEJBN0JzQjtBekJncEYxQjtBS2xsRkk7RW9CakNBLDRCQTdCc0I7QXpCbXBGMUI7QUtybEZJO0VvQmpDQSw0QkE3QnNCO0F6QnNwRjFCO0FLeGxGSTtFb0JqQ0EsNEJBN0JzQjtBekJ5cEYxQjtBeUIzbkZFO0VBRUUsNkJyQmpDVztBSjZwRmY7QXlCM25GRTtFQUlFLGdDckJ6Qlc7RXFCMEJYLGlEQUFBO0F6QjBuRko7QXlCem5GRTtFQUVFLGlDckJ0Q1c7RXFCdUNYLDZCckJ2Q1c7RXFCd0NYLGdCQUFBO0VBQ0Esc0JyQjlDVztBSndxRmY7QUt4bUZJO0VvQmhCRSwrQkFqQzZCO0F6QjRwRm5DO0FLM21GSTtFb0JoQkUsK0JBakM2QjtBekIrcEZuQztBSzltRkk7RW9CaEJFLCtCQWpDNkI7QXpCa3FGbkM7QUtqbkZJO0VvQmhCRSwrQkFqQzZCO0F6QnFxRm5DOztBMEJ0ckZBO0VBRUUsMkREQ2E7RUNBYixlQUFBO0VBQ0EsV0FBQTtBMUJ3ckZGO0EwQnZyRkU7RUFDRSxnQkFBQTtBMUJ5ckZKO0EwQnJyRkk7RUFDRSw4QkFGTTtBMUJ5ckZaO0EwQnRyRk07RUFJRSxtREFBQTtBMUJxckZSO0EwQjNyRkk7RUFDRSw0QkFGTTtBMUIrckZaO0EwQjVyRk07RUFJRSxnREFBQTtBMUIyckZSO0EwQmpzRkk7RUFDRSw2QkFGTTtBMUJxc0ZaO0EwQmxzRk07RUFJRSxtREFBQTtBMUJpc0ZSO0EwQnZzRkk7RUFDRSw2QkFGTTtBMUIyc0ZaO0EwQnhzRk07RUFJRSxnREFBQTtBMUJ1c0ZSO0EwQjdzRkk7RUFDRSxpQ0FGTTtBMUJpdEZaO0EwQjlzRk07RUFJRSxpREFBQTtBMUI2c0ZSO0EwQm50Rkk7RUFDRSxnQ0FGTTtBMUJ1dEZaO0EwQnB0Rk07RUFJRSxpREFBQTtBMUJtdEZSO0EwQnp0Rkk7RUFDRSxnQ0FGTTtBMUI2dEZaO0EwQjF0Rk07RUFJRSxrREFBQTtBMUJ5dEZSO0EwQi90Rkk7RUFDRSxnQ0FGTTtBMUJtdUZaO0EwQmh1Rk07RUFJRSxrREFBQTtBMUIrdEZSO0EwQnJ1Rkk7RUFDRSxnQ0FGTTtBMUJ5dUZaO0EwQnR1Rk07RUFJRSxtREFBQTtBMUJxdUZSO0EwQjN1Rkk7RUFDRSxnQ0FGTTtBMUIrdUZaO0EwQjV1Rk07RUFJRSxrREFBQTtBMUIydUZSO0EwQnp1RkU7RXZCbUJBLGtCQzBCYTtFRHpCYixrQkNOTztBSit0RlQ7QTBCM3VGRTtFdkJvQkEsa0JDVk87QUpvdUZUO0EwQjV1RkU7RXZCb0JBLGlCQ2JPO0FKd3VGVDtBMEI1dUZFO0VBQ0UsY0FBQTtFQUNBLFdBQUE7QTFCOHVGSjtBMEI3dUZFO0VBQ0UsZUFBQTtFQUNBLFdBQUE7QTFCK3VGSjs7QTBCM3VGRTtFQUNFLHFCdEIrQmE7RXNCOUJiLGdEQUFBO0VBQ0EsaURBQUE7QTFCOHVGSjtBMEI3dUZFO0VBQ0UsNkJBQUE7RUFDQSx5QkFBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0ExQit1Rko7O0EwQjd1RkE7RUFFRSxjQUFBO0VBQ0EsZUFBQTtFQUNBLGVBQUE7RUFDQSwyQnZCN0MyQjtFdUI4QzNCLGdCQUFBO0ExQit1RkY7QTBCOXVGRTtFQUNFLGdCQTFEa0I7RUEyRGxCLGVBMURrQjtBMUIweUZ0QjtBMEIvdUZFO0VBQ0UsZUFBQTtBMUJpdkZKO0EwQi91RkU7RUFDRSxZQUFBO0ExQml2Rko7O0EyQmx6RkE7RUFDRSxlQUFBO0VBQ0EscUJBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0EzQnF6RkY7QTJCcHpGRTtFQUNFLGVBQUE7QTNCc3pGSjtBMkJyekZFO0VBQ0Usc0J2QkZXO0FKeXpGZjtBMkJ0ekZFOzs7RUFHRSxzQnZCSlc7RXVCS1gsbUJBQUE7QTNCd3pGSjs7QTJCanpGRTtFdEJnS0Usa0JzQi9Kd0I7QTNCb3pGNUI7O0E0QnYwRkE7RUFDRSxxQkFBQTtFQUNBLGVBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0E1QjAwRkY7QTRCejBGRTtFQUNFLGF6QkRhO0FINDBGakI7QTRCejBGSTtFQUVFLGdDeEJVUztFQ3NLWCxjdUIvS2dCO0VBQ2QsVUFBQTtBNUIwMEZOO0E0QngwRkk7RUFDRSxxQnhCdURXO0VDNEdiLGlCdUJsSzJCO0E1QjAwRi9CO0E0QnowRkU7RUFFRSxlQUFBO0VBQ0EsY0FBQTtFQUNBLGNBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtBNUIwMEZKO0E0QnowRkk7RUFDRSxhQUFBO0E1QjIwRk47QTRCMTBGSTtFQUVFLDZCeEJqQlM7QUo0MUZmO0E0QjEwRkk7RXZCcUpBLG9CdUJwSjJCO0E1QjQwRi9CO0E0QjMwRkk7RUFDRSxZQUFBO0VBQ0EsVUFBQTtBNUI2MEZOO0E0QjUwRk07RUFDRSxrQkFBQTtBNUI4MEZSO0E0QjMwRkk7RUFDRSw2QnhCbkNTO0FKZzNGZjtBNEJ4MEZNO0VBQ0UsOEJBSEk7QTVCNjBGWjtBNEJ6MEZNO0VBQ0UsOEJBTEk7QTVCZzFGWjtBNEIxMEZRO0VBRUUscUJBQUE7QTVCMjBGVjtBNEIxMEZRO0VBSUUsbURBQUE7QTVCeTBGVjtBNEJwMUZNO0VBQ0UsNEJBSEk7QTVCeTFGWjtBNEJyMUZNO0VBQ0UsNEJBTEk7QTVCNDFGWjtBNEJ0MUZRO0VBRUUsbUJBQUE7QTVCdTFGVjtBNEJ0MUZRO0VBSUUsZ0RBQUE7QTVCcTFGVjtBNEJoMkZNO0VBQ0UsNkJBSEk7QTVCcTJGWjtBNEJqMkZNO0VBQ0UsNkJBTEk7QTVCdzJGWjtBNEJsMkZRO0VBRUUscUJBQUE7QTVCbTJGVjtBNEJsMkZRO0VBSUUsbURBQUE7QTVCaTJGVjtBNEI1MkZNO0VBQ0UsNkJBSEk7QTVCaTNGWjtBNEI3MkZNO0VBQ0UsNkJBTEk7QTVCbzNGWjtBNEI5MkZRO0VBRUUscUJBQUE7QTVCKzJGVjtBNEI5MkZRO0VBSUUsZ0RBQUE7QTVCNjJGVjtBNEJ4M0ZNO0VBQ0UsaUNBSEk7QTVCNjNGWjtBNEJ6M0ZNO0VBQ0UsaUNBTEk7QTVCZzRGWjtBNEIxM0ZRO0VBRUUscUJBQUE7QTVCMjNGVjtBNEIxM0ZRO0VBSUUsaURBQUE7QTVCeTNGVjtBNEJwNEZNO0VBQ0UsZ0NBSEk7QTVCeTRGWjtBNEJyNEZNO0VBQ0UsZ0NBTEk7QTVCNDRGWjtBNEJ0NEZRO0VBRUUscUJBQUE7QTVCdTRGVjtBNEJ0NEZRO0VBSUUsaURBQUE7QTVCcTRGVjtBNEJoNUZNO0VBQ0UsZ0NBSEk7QTVCcTVGWjtBNEJqNUZNO0VBQ0UsZ0NBTEk7QTVCdzVGWjtBNEJsNUZRO0VBRUUscUJBQUE7QTVCbTVGVjtBNEJsNUZRO0VBSUUsa0RBQUE7QTVCaTVGVjtBNEI1NUZNO0VBQ0UsZ0NBSEk7QTVCaTZGWjtBNEI3NUZNO0VBQ0UsZ0NBTEk7QTVCbzZGWjtBNEI5NUZRO0VBRUUscUJBQUE7QTVCKzVGVjtBNEI5NUZRO0VBSUUsa0RBQUE7QTVCNjVGVjtBNEJ4NkZNO0VBQ0UsZ0NBSEk7QTVCNjZGWjtBNEJ6NkZNO0VBQ0UsZ0NBTEk7QTVCZzdGWjtBNEIxNkZRO0VBRUUscUJBQUE7QTVCMjZGVjtBNEIxNkZRO0VBSUUsbURBQUE7QTVCeTZGVjtBNEJwN0ZNO0VBQ0UsZ0NBSEk7QTVCeTdGWjtBNEJyN0ZNO0VBQ0UsZ0NBTEk7QTVCNDdGWjtBNEJ0N0ZRO0VBRUUscUJBQUE7QTVCdTdGVjtBNEJ0N0ZRO0VBSUUsa0RBQUE7QTVCcTdGVjtBNEJuN0ZFO0V6QmhCQSxrQkMwQmE7RUR6QmIsa0JDTk87QUo0OEZUO0E0QnI3RkU7RXpCZkEsa0JDVk87QUppOUZUO0E0QnQ3RkU7RXpCZkEsaUJDYk87QUpxOUZUO0E0QnI3Rkk7RUFDRSx3Q0FBQTtFQUNBLFlBQUE7QTVCdTdGTjtBNEJ0N0ZFO0VBQ0UsV0FBQTtBNUJ3N0ZKO0E0QnY3Rkk7RUFDRSxXQUFBO0E1Qnk3Rk47QTRCdjdGSTtFQUVFLGFBQUE7RUFDQSxrQkFBQTtFdkI4R0YsY3VCN0dnQjtFQUNkLFlBQUE7RUFDQSxlQUFBO0E1Qnc3Rk47QTRCdjdGSTtFQUNFLGtCeEI3Q0c7QUpzK0ZUO0E0Qng3Rkk7RUFDRSxrQnhCakRHO0FKMitGVDtBNEJ6N0ZJO0VBQ0UsaUJ4QnBERztBSisrRlQ7O0E2Qm5nR0E7RUFFRSxvQkFBQTtFQUNBLGFBQUE7RUFDQSwyQkFBQTtFQUNBLGtCQUFBO0E3QnFnR0Y7QTZCLy9GTTtFQUNFLGtDQUpJO0VBS0oseUJBQUE7RUFDQSxxQkFMVztBN0JzZ0duQjtBNkI5L0ZRO0VBQ0UseUJBQUE7RUFDQSx5QkFBQTtFQUNBLHFCQVhTO0E3QjJnR25CO0E2QjcvRlE7RUFDRSx5QkFBQTtFQUNBLCtDQUFBO0VBQ0EscUJBakJTO0E3QmdoR25CO0E2QjUvRlE7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EscUJBdkJTO0E3QnFoR25CO0E2Qm5oR007RUFDRSxnQ0FKSTtFQUtKLHlCQUFBO0VBQ0EsdUJBTFc7QTdCMGhHbkI7QTZCbGhHUTtFQUNFLHlCQUFBO0VBQ0EseUJBQUE7RUFDQSx1QkFYUztBN0IraEduQjtBNkJqaEdRO0VBQ0UseUJBQUE7RUFDQSw0Q0FBQTtFQUNBLHVCQWpCUztBN0JvaUduQjtBNkJoaEdRO0VBQ0UsdUJBQUE7RUFDQSx5QkFBQTtFQUNBLHVCQXZCUztBN0J5aUduQjtBNkJ2aUdNO0VBQ0UsaUNBSkk7RUFLSix5QkFBQTtFQUNBLHlCQUxXO0E3QjhpR25CO0E2QnRpR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EseUJBWFM7QTdCbWpHbkI7QTZCcmlHUTtFQUNFLHlCQUFBO0VBQ0EsK0NBQUE7RUFDQSx5QkFqQlM7QTdCd2pHbkI7QTZCcGlHUTtFQUNFLHlCQUFBO0VBQ0EseUJBQUE7RUFDQSx5QkF2QlM7QTdCNmpHbkI7QTZCM2pHTTtFQUNFLGlDQUpJO0VBS0oseUJBQUE7RUFDQSxXQUxXO0E3QmtrR25CO0E2QjFqR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0FYUztBN0J1a0duQjtBNkJ6akdRO0VBQ0UseUJBQUE7RUFDQSw0Q0FBQTtFQUNBLFdBakJTO0E3QjRrR25CO0E2QnhqR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0F2QlM7QTdCaWxHbkI7QTZCL2tHTTtFQUNFLHFDQUpJO0VBS0oseUJBQUE7RUFDQSxXQUxXO0E3QnNsR25CO0E2QjlrR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0FYUztBN0IybEduQjtBNkI3a0dRO0VBQ0UseUJBQUE7RUFDQSw2Q0FBQTtFQUNBLFdBakJTO0E3QmdtR25CO0E2QjVrR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0F2QlM7QTdCcW1HbkI7QTZCbm1HTTtFQUNFLG9DQUpJO0VBS0oseUJBQUE7RUFDQSxXQUxXO0E3QjBtR25CO0E2QmxtR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0FYUztBN0IrbUduQjtBNkJqbUdRO0VBQ0UseUJBQUE7RUFDQSw2Q0FBQTtFQUNBLFdBakJTO0E3Qm9uR25CO0E2QmhtR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0F2QlM7QTdCeW5HbkI7QTZCdm5HTTtFQUNFLG9DQUpJO0VBS0oseUJBQUE7RUFDQSxXQUxXO0E3QjhuR25CO0E2QnRuR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0FYUztBN0Jtb0duQjtBNkJybkdRO0VBQ0UseUJBQUE7RUFDQSw4Q0FBQTtFQUNBLFdBakJTO0E3QndvR25CO0E2QnBuR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0F2QlM7QTdCNm9HbkI7QTZCM29HTTtFQUNFLG9DQUpJO0VBS0oseUJBQUE7RUFDQSxXQUxXO0E3QmtwR25CO0E2QjFvR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0FYUztBN0J1cEduQjtBNkJ6b0dRO0VBQ0UseUJBQUE7RUFDQSw4Q0FBQTtFQUNBLFdBakJTO0E3QjRwR25CO0E2QnhvR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EsV0F2QlM7QTdCaXFHbkI7QTZCL3BHTTtFQUNFLG9DQUpJO0VBS0oseUJBQUE7RUFDQSx5QkFMVztBN0JzcUduQjtBNkI5cEdRO0VBQ0UseUJBQUE7RUFDQSx5QkFBQTtFQUNBLHlCQVhTO0E3QjJxR25CO0E2QjdwR1E7RUFDRSx5QkFBQTtFQUNBLCtDQUFBO0VBQ0EseUJBakJTO0E3QmdyR25CO0E2QjVwR1E7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0EseUJBdkJTO0E3QnFyR25CO0E2Qm5yR007RUFDRSxvQ0FKSTtFQUtKLHlCQUFBO0VBQ0EsV0FMVztBN0IwckduQjtBNkJsckdRO0VBQ0UseUJBQUE7RUFDQSx5QkFBQTtFQUNBLFdBWFM7QTdCK3JHbkI7QTZCanJHUTtFQUNFLHlCQUFBO0VBQ0EsOENBQUE7RUFDQSxXQWpCUztBN0Jvc0duQjtBNkJockdRO0VBQ0UseUJBQUE7RUFDQSx5QkFBQTtFQUNBLFdBdkJTO0E3QnlzR25CO0E2QmhyR0U7RUFDRSxrQnpCWks7QUo4ckdUO0E2QmpyR0U7RUFDRSxlekJmSztBSmtzR1Q7QTZCbHJHRTtFQUNFLGtCekJsQks7QUpzc0dUO0E2QmxyR007RUFDRSxlQUFBO0E3Qm9yR1I7QTZCbnJHRTtFQUNFLGlCekJ4Qks7QUo2c0dUO0E2Qm5yR007RUFDRSxlQUFBO0E3QnFyR1I7QTZCbHJHSTtFQUNFLDZCQUFBO0VBQ0EsMEJBQUE7QTdCb3JHTjtBNkJuckdJO0VBQ0UsNEJBQUE7RUFDQSx5QkFBQTtBN0JxckdOO0E2Qm5yR007RUFDRSxrQnpCSEM7QUp3ckdUO0E2QnByR007RUFDRSxhQUFBO0E3QnNyR1I7QTZCcHJHSTtFQUNFLHNCQUFBO0E3QnNyR047QTZCcnJHSTtFQUNFLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0E3QnVyR047QTZCdHJHSTtFQUNFLHVCQUFBO0E3QndyR047QTZCdnJHSTtFQUNFLGFBQUE7RUFDQSxZQUFBO0E3QnlyR047QTZCeHJHTTtFQUNFLGVBQUE7QTdCMHJHUjtBNkJ4ckdNO0VBQ0UsZUFBQTtBN0IwckdSO0E2QnhyR007RUFDRSxlQUFBO0E3QjByR1I7QTZCeHJHTTtFQUNFLGVBQUE7QTdCMHJHUjtBNkJ4ckdNO0VBQ0UsMEJBQUE7QTdCMHJHUjtBNkJ6ckdNO0VBQ0UsMEJBQUE7RUFDQSx1QkFBQTtBN0IyckdSO0E2QjFyR0U7RUFDRSx1QkFBQTtBN0I0ckdKO0E2QjFyR0k7RUFDRSxXQUFBO0E3QjRyR047QTZCM3JHSTtFQUNFLFlBQUE7RUFDQSxlQUFBO0E3QjZyR047QTZCNXJHRTtFQUNFLHlCQUFBO0E3QjhyR0o7QTZCN3JHSTtFQUNFLDBCQUFBO0E3QityR047QTZCOXJHSTtFQUNFLDBCQUFBO0VBQ0EsMkJBQUE7RUFDQSxTQUFBO0E3QmdzR047O0E2QjlyR0E7RUFDRSxvQkFBQTtFQUNBLGFBQUE7RUFDQSxlQUFBO0VBQ0EsMkJBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0E3QmlzR0Y7QTZCL3JHSTtFQUNFLHlCQUFBO0VBQ0Esc0J6QjlIUztBSit6R2Y7QTZCaHNHSTtFQUNFLHFCQUFBO0E3QmtzR047QTZCaHNHSTtFQUNFLHlCQUFBO0VBQ0Esc0J6QnBJUztBSnMwR2Y7QTZCanNHSTtFQUNFLHFCQUFBO0E3Qm1zR047O0E2QmpzR0E7RUFDRSxZQUFBO0VBQ0EsT0FBQTtFQUNBLFVBQUE7RUFDQSxhQUFBO0VBQ0Esa0JBQUE7RUFDQSxNQUFBO0VBQ0EsV0FBQTtBN0Jvc0dGOztBNkJsc0dBOztFQUdFLDZCekJoSmE7RXlCaUpiLGtCekJyRk87RXlCc0ZQLGNBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0EsbUJBQUE7QTdCb3NHRjs7QTZCbHNHQTtFQUNFLGlDekJySmE7RXlCc0piLHNCekI1SmE7QUppMkdmOztBNkJuc0dBO0VBQ0UsNkJ6QjVKYTtFeUI2SmIsbUJBOUp1QjtFQStKdkIsMkJBOUp1QjtFQStKdkIsY0FBQTtFQUNBLGVBL0pvQjtFQWdLcEIsZ0JBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0E3QnNzR0Y7O0E2QnBzR0E7RUFDRSxtQkFBQTtFQUNBLGFBQUE7RUFDQSxXQUFBO0VBQ0EsdUJBQUE7RXhCQ0UsbUJBQUE7RXdCQ0YsVUFBQTtBN0J1c0dGO0E2QnRzR0U7RUFDRSxlQUFBO0E3QndzR0o7O0E4QngzR0E7RUFDRSxzQjFCRmE7RTBCR2IsY0FBQTtFQUNBLGUxQjJCTztFMEIxQlAsZ0IxQmlDWTtBSjAxR2Q7QThCMTNHRTtFQUNFLG9CQUFBO0E5QjQzR0o7QThCMTNHRTtFQUNFLGtCMUJzQks7QUpzMkdUO0E4QjMzR0U7RUFDRSxrQjFCa0JLO0FKMjJHVDtBOEI1M0dFO0VBQ0UsaUIxQmVLO0FKKzJHVDs7QThCNTNHQTtFQUNFLGNBQUE7RUFDQSxrQjFCY087RTBCYlAsbUJBQUE7QTlCKzNHRjtBOEI1M0dJO0VBQ0UsdUJBRk07QTlCZzRHWjtBOEIvM0dJO0VBQ0UscUJBRk07QTlCbTRHWjtBOEJsNEdJO0VBQ0Usc0JBRk07QTlCczRHWjtBOEJyNEdJO0VBQ0Usc0JBRk07QTlCeTRHWjtBOEJ4NEdJO0VBQ0UsMEJBRk07QTlCNDRHWjtBOEIzNEdJO0VBQ0UseUJBRk07QTlCKzRHWjtBOEI5NEdJO0VBQ0UseUJBRk07QTlCazVHWjtBOEJqNUdJO0VBQ0UseUJBRk07QTlCcTVHWjtBOEJwNUdJO0VBQ0UseUJBRk07QTlCdzVHWjtBOEJ2NUdJO0VBQ0UseUJBRk07QTlCMjVHWjs7QThCcDVHRTtFQUNFLHNCQUFBO0E5QnU1R0o7QThCcjVHRTtFQUNFLGFBQUE7RUFDQSwyQkFBQTtBOUJ1NUdKO0E4QnI1R007RXpCMklGLGtCeUIxSTRCO0E5QnU1R2hDO0E4QnI1R1E7OztFQUdFLGdCQUFBO0E5QnU1R1Y7QThCcjVHUTs7O0VBSUksNkJBQUE7RUFDQSwwQkFBQTtBOUJzNUdaO0E4Qmo1R1E7OztFQUlJLDRCQUFBO0VBQ0EseUJBQUE7QTlCazVHWjtBOEIxNEdVOzs7OztFQUVFLFVBQUE7QTlCKzRHWjtBOEI5NEdVOzs7Ozs7Ozs7RUFJRSxVQUFBO0E5QnE1R1o7QThCcDVHWTs7Ozs7Ozs7O0VBQ0UsVUFBQTtBOUI4NUdkO0E4Qjc1R007RUFDRSxZQUFBO0VBQ0EsY0FBQTtBOUIrNUdSO0E4Qjk1R0k7RUFDRSx1QkFBQTtBOUJnNkdOO0E4Qi81R0k7RUFDRSx5QkFBQTtBOUJpNkdOO0E4Qi81R007RUFDRSxZQUFBO0VBQ0EsY0FBQTtBOUJpNkdSO0E4Qmg2R0U7RUFDRSxhQUFBO0VBQ0EsMkJBQUE7QTlCazZHSjtBOEJqNkdJO0VBQ0UsY0FBQTtBOUJtNkdOO0E4Qmw2R007RUFDRSxnQkFBQTtFekJpRkoscUJ5QmhGNEI7QTlCbzZHaEM7QThCbjZHTTtFQUNFLFlBQUE7RUFDQSxjQUFBO0E5QnE2R1I7QThCcDZHSTtFQUNFLHVCQUFBO0E5QnM2R047QThCcjZHSTtFQUNFLHlCQUFBO0E5QnU2R047QThCdDZHSTtFQUNFLGVBQUE7QTlCdzZHTjtBOEJ0NkdRO0VBRUUsc0JBQUE7QTlCdTZHVjtBOEJ0NkdNO0VBQ0UsdUJBQUE7QTlCdzZHUjtBOEJ2NkdNO0VBQ0UsZ0JBQUE7QTlCeTZHUjtBS3A3R0U7RXlCWUE7SUFFSSxhQUFBO0U5QjA2R0o7QUFDRjs7QThCeDZHRTtFQUNFLGtCQUFBO0E5QjI2R0o7QUtqOEdFO0V5Qm9CRjtJQUlJLHFCQUFBO0U5QjY2R0Y7QUFDRjtBS2w4R0U7RXlCZ0JGO0lBTUksYUFBQTtJQUNBLFlBQUE7SUFDQSxjQUFBO0l6QmtEQSxvQnlCakR3QjtJQUN4QixpQkFBQTtFOUJnN0dGO0U4Qi82R0U7SUFDRSxrQjFCaEdHO0kwQmlHSCxvQkFBQTtFOUJpN0dKO0U4Qmg3R0U7SUFDRSxvQkFBQTtFOUJrN0dKO0U4Qmo3R0U7SUFDRSxrQjFCdkdHO0kwQndHSCxvQkFBQTtFOUJtN0dKO0U4Qmw3R0U7SUFDRSxpQjFCM0dHO0kwQjRHSCxvQkFBQTtFOUJvN0dKO0FBQ0Y7O0E4Qmw3R0U7RUFDRSxnQkFBQTtBOUJxN0dKO0FLOTlHRTtFeUJ1Q0Y7SUFJSSxhQUFBO0lBQ0EsYUFBQTtJQUNBLFlBQUE7SUFDQSxjQUFBO0U5QnU3R0Y7RThCdDdHRTtJQUNFLGdCQUFBO0U5Qnc3R0o7RThCdjdHRTtJQUNFLGNBQUE7RTlCeTdHSjtFOEJ4N0dJO0lBQ0UsWUFBQTtFOUIwN0dOO0U4Qno3R0k7SXpCcUJGLHFCeUJwQjRCO0U5QjI3RzlCO0FBQ0Y7O0E4QjE3R0E7RUFDRSxzQkFBQTtFQUNBLFdBQUE7RUFDQSxlMUJoSU87RTBCaUlQLGtCQUFBO0VBQ0EsbUJBQUE7QTlCNjdHRjtBOEJ0N0dROzs7RUFDRSxzQjFCeEtLO0FKa21IZjtBOEJ6N0dNOzs7RUFDRSxrQjFCM0lDO0FKd2tIVDtBOEI1N0dNOzs7RUFDRSxrQjFCL0lDO0FKK2tIVDtBOEIvN0dNOzs7RUFDRSxpQjFCbEpDO0FKcWxIVDtBOEJsOEdJO0VBQ0Usc0IxQjdLUztFMEI4S1QsYTNCakxXO0UyQmtMWCxvQkFBQTtFQUNBLGtCQUFBO0VBQ0EsTUFBQTtFQUNBLFkzQnJMVztFMkJzTFgsVUFBQTtBOUJvOEdOO0E4Qmw4R0k7O0VBRUUsbUIzQjFMVztBSDhuSGpCO0E4Qm44R0k7RUFDRSxPQUFBO0E5QnE4R047QThCbjhHSTs7RUFFRSxvQjNCaE1XO0FIcW9IakI7QThCcDhHSTtFQUNFLFFBQUE7QTlCczhHTjtBOEJwOEdJO0VBRUUsNkJBQUE7RXpCakJGLGN5QmtCZ0I7RUFDZCxZQUFBO0VBQ0EsVUFBQTtBOUJxOEdOO0E4QnA4R0k7RUFDRSxrQjFCNUtHO0FKa25IVDtBOEJyOEdJO0VBQ0Usa0IxQmhMRztBSnVuSFQ7QThCdDhHSTtFQUNFLGlCMUJuTEc7QUoybkhUOztBK0I5cEhBLHFCQUFBO0FDV0E7RUFHRSxlNUJ1Qk87RTRCdEJQLG1CQUFBO0FoQ3FwSEY7QWdDcHBIRTtFQUNFLG1CQUFBO0VBQ0EseUI1QklXO0U0QkhYLGFBQUE7RUFDQSx1QkFBQTtFQUNBLGlCQUFBO0FoQ3NwSEo7QWdDcnBISTtFQUNFLHNCNUJqQlM7QUp3cUhmO0FnQ3RwSEU7RUFDRSxtQkFBQTtFQUNBLGFBQUE7QWhDd3BISjtBZ0N2cEhJO0UzQnlKQSxlMkJ4SjJCO0Fo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QXFDaGlJSTtFQUNFLGlDakN6QlM7RWlDMEJULHNCakNqQ1M7QUpta0lmO0FxQ2hpSUk7RUFDRSxvQ2pDcEJTO0VpQ3FCVCxXNUJpQ1E7QVRpZ0lkO0FxQ2hpSUk7RWhDdUlBLHNDZ0MzS29CO0VBc0NsQixjQW5Db0I7RWhDd0t0QixvQmdDdks0QjtBckNxa0loQzs7QXFDaGlJQTtFQUNFLHNCakMzQ2E7RWlDNENiLGlCQXBDcUI7RUFxQ3JCLHFCQXBDMEI7RUFxQzFCLHlCQUFBO0FyQ21pSUY7QXFDbGlJRTtFQUNFLGVBdENpQjtBckMwa0lyQjtBcUNuaUlFO0VBQ0Usa0JBeENpQjtBckM2a0lyQjs7QXNDeGtJQTtFQUVFLGlDbENaYTtFa0NhYixrQmxDNENPO0VrQzNDUCxlbENVTztBSmdrSVQ7QXNDemtJRTtFQUNFLG1CQUFBO0F0QzJrSUo7QXNDMWtJRTtFQUNFLG1CQUFBO0VBQ0EsMEJBQUE7QXRDNGtJSjtBc0Mxa0lFO0VBQ0Usa0JsQ0dLO0FKeWtJVDtBc0Mza0lFO0VBQ0Usa0JsQ0RLO0FKOGtJVDtBc0M1a0lFO0VBQ0UsaUJsQ0pLO0FKa2xJVDtBc0N6aklJO0VBQ0UsdUJBSGM7QXRDOGpJcEI7QXNDMWpJTTtFQUNFLGtDQXJCSTtFQXNCSixxQkFyQlc7QXRDaWxJbkI7QXNDM2pJTTtFQUNFLDhCQXhCSTtBdENxbElaO0FzQ25rSUk7RUFDRSx5QkFIYztBdEN3a0lwQjtBc0Nwa0lNO0VBQ0UsZ0NBckJJO0VBc0JKLHVCQXJCVztBdEMybEluQjtBc0Nya0lNO0VBQ0UsNEJBeEJJO0F0QytsSVo7QXNDN2tJSTtFQUNFLHlCQUhjO0F0Q2tsSXBCO0FzQzlrSU07RUFDRSxpQ0FyQkk7RUFzQkoseUJBckJXO0F0Q3FtSW5CO0FzQy9rSU07RUFDRSw2QkF4Qkk7QXRDeW1JWjtBc0N2bElJO0VBQ0UseUJBSGM7QXRDNGxJcEI7QXNDeGxJTTtFQUNFLGlDQXJCSTtFQXNCSixXQXJCVztBdEMrbUluQjtBc0N6bElNO0VBQ0UsNkJBeEJJO0F0Q21uSVo7QXNDam1JSTtFQUNFLHlCQWJjO0F0Q2duSXBC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QUNBLFFBQUE7RXhDaTRKSjtFd0NoNEpBO0lBQ0UsY0FBQTtFeENrNEpGO0V3Qy8zSkU7O0luQzlOQSxxQm1DK04wQjtFeENrNEo1QjtFd0NqNEpFOztJbkNoT0Esc0JtQ2lPMEI7RXhDbzRKNUI7RXdDajRKRTtJQW5XRixPQUFBO0lBQ0EsZUFBQTtJQUNBLFFBQUE7SUFDQSxXQS9DZTtFeENzeEtmO0V3Q3A0SkU7SUFDRSxTQUFBO0V4Q3M0Sko7RXdDcjRKSTtJQUNFLDRDQUFBO0V4Q3U0Sk47RXdDdDRKRTtJQUNFLE1BQUE7RXhDdzRKSjtFd0NyNEpFOztJQUNFLG9CQS9aVTtFeEN1eUtkO0V3Q3Y0SkU7O0lBQ0UsdUJBamFVO0V4QzJ5S2Q7RXdDejRKRTs7SUFDRSxvQkFBQTtFeEM0NEpKO0V3QzM0SkU7O0lBQ0UsdUJBQUE7RXhDODRKSjtFd0MxNEpFOztJQUNFLHFCcEM3YVM7RUowektiO0V3QzU0SkU7O0lBQ0UsNkJBbGFnQztFeENpektwQztFd0MxNEpJO0lBQ0UsaUNwQ3phTztFSnF6S2I7QUFDRjtBd0N4NEpFO0VBQ0UsaUNBQUE7QXhDMDRKSjs7QXlDbHlLQTtFQUVFLGVyQ0ZPO0VxQ0dQLGdCQW5Da0I7QXpDdTBLcEI7QXlDbHlLRTtFQUNFLGtCckNMSztBSnl5S1Q7QXlDbnlLRTtFQUNFLGtCckNUSztBSjh5S1Q7QXlDcHlLRTtFQUNFLGlCckNaSztBSmt6S1Q7QXlDcHlLSTs7RUFFRSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0EscUJyQ21CVztBSm14S2pCO0F5Q3J5S0k7RUFDRSxxQnJDaUJXO0FKc3hLakI7O0F5Q3J5S0E7O0VBRUUsbUJBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxrQkFBQTtBekN3eUtGOztBeUN0eUtBOzs7O0VBTUUsY0E5RDBCO0VBK0QxQix1QkFBQTtFQUNBLGVBL0R1QjtFQWdFdkIsbUJBL0Q2QjtFQWdFN0Isb0JBL0Q4QjtFQWdFOUIsa0JBQUE7QXpDdXlLRjs7QXlDcnlLQTs7O0VBR0UsNkJyQ3RFYTtFcUN1RWIsc0JyQzNFYTtFcUM0RWIsZ0J0QzNF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TFo7QTBDMWhMTTtFQUNFLHlCQVRJO0ExQ3FpTFo7QTBDbGlMTTtFQUNFLG9DQUpJO0VBS0osV0FKVztBMUN3aUxuQjtBMENuaUxNO0VBQ0UsdUNBUEk7QTFDNGlMWjtBMENwaUxNO0VBQ0UseUJBVEk7QTFDK2lMWjs7QTBDbGlMRTs7RUFDRSx3Q0FuRGdCO0ExQ3lsTHBCOztBMENwaUxBO0VBQ0UsaUN0QzlDYztFc0MrQ2QsMEJBQUE7RUFDQSxzQnRDckRhO0VzQ3NEYixpQkFoRG1CO0VBaURuQixnQnRDakJZO0VzQ2tCWixpQkFyRDBCO0VBc0QxQixtQkFyRHNCO0ExQzRsTHhCOztBMENyaUxBO0VBQ0UscUJBQUE7RUFDQSxhQUFBO0VBQ0Esa0JBckRxQjtFQXNEckIsdUJBQUE7QTFDd2lMRjtBMEN2aUxFO0VBQ0Usd0NBdkRzQjtFQXdEdEIsbUJBQUE7RUFDQSxjQUFBO0ExQ3lpTEo7QTBDdmlMSTtFQUNFLG9DdENyRVM7RXNDc0VULHNCdEN2RVM7QUpnbkxmOztBMEN0aUxFO0VBQ0Usc0J0QzFFVztBSm1uTGY7QTBDeGlMSTtFQUNFLHlCdEM3RFM7QUp1bUxmOztBMEN4aUxBO0VBQ0UsbUJBQUE7RUFDQSxzQnRDakZhO0VzQ2tGYixhQUFBO0VBQ0EsMkJBQUE7RUFDQSxxQkFBQTtBMUMyaUxGO0EwQzFpTEU7RXJDeUZFLG9CcUN4RndCO0ExQzRpTDVCO0EwQzNpTEU7RUFDRSxZQUFBO0VBQ0EsY0FBQTtFQUNBLFdBQUE7QTFDNmlMSjtBMEM1aUxFO0VBQ0UsZUFBQTtBMUM4aUxKO0EwQzdpTEU7RUFDRSxxQ3RDOUVXO0VzQytFWCxzQnRDL0ZXO0FKOG9MZjtBMEM5aUxJO0VBQ0UseUJ0Q2pGUztBSmlvTGY7QTBDL2lMRTtFQUNFLDhCdENsQ1c7RXNDbUNYLCtCdENuQ1c7QUpvbExmOztBMEMvaUxBOztFQUVFLGVBQUE7QTFDa2pMRjtBMENqakxFOztFQUNFLGlDdENuR1c7QUp1cExmOztBMENsakxBO0VyQ2hHRSxxQkFBQTtFQUNBLGVxQ2dHSTtFckMvRkosV3FDK0ZVO0VyQzlGVixnQnFDOEZVO0VyQzdGVixrQkFBQTtFQUNBLG1CQUFBO0VBQ0EsVXFDMkZVO0VBQ1Ysc0J0QzVHYTtFQzRLWCxvQnFDL0RzQjtBMUMyakwxQjtBMEMxakxFO0VBQ0Usa0JBQUE7RUFDQSxvQkFBQTtBMUM0akxKOztBMkN0cExBO0V0Q3FDRSxpQ0FBQTtFc0NqQ0Esb0JBQUE7RUFDQSxhQUFBO0VBQ0EsZXZDQ087RXVDQVAsOEJBQUE7RUFDQSxnQkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7QTNDdXBMRjtBMkN0cExFO0VBQ0UsbUJBQUE7RUFDQSxvQ3ZDakNXO0V1Q2tDWCwwQkF6Q3VCO0VBMEN2Qix3QkF6Q3VCO0VBMEN2QixzQnZDdkNXO0V1Q3dDWCxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQXhDZ0I7RUF5Q2hCLG1CQUFBO0EzQ3dwTEo7QTJDdnBMSTtFQUNFLG9DdkMvQ1M7RXVDZ0RULHNCdkNoRFM7QUp5c0xmO0EyQ3hwTEU7RUFDRSxjQUFBO0EzQzBwTEo7QTJDeHBMTTtFQUNFLHVDdkNyQ087RXVDc0NQLHlCdkN0Q087QUpnc0xmO0EyQ3pwTEU7RUFDRSxtQkFBQTtFQUNBLG9DdkNyRFc7RXVDc0RYLDBCQTdEdUI7RUE4RHZCLHdCQTdEdUI7RUE4RHZCLGFBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtFQUNBLDJCQUFBO0EzQzJwTEo7QTJDMXBMSTtFQUNFLHFCQUFBO0EzQzRwTE47QTJDM3BMSTtFQUNFLFVBQUE7RUFDQSx1QkFBQTtFQUNBLG9CQUFBO0VBQ0EscUJBQUE7QTNDNnBMTjtBMkM1cExJO0VBQ0UseUJBQUE7RUFDQSxvQkFBQTtBM0M4cExOO0EyQzVwTEk7RXRDbUdBLG1Cc0NsRzBCO0EzQzhwTDlCO0EyQzdwTEk7RXRDaUdBLGtCc0NoRzBCO0EzQytwTDlCO0EyQzVwTEk7RUFDRSx1QkFBQTtBM0M4cExOO0EyQzVwTEk7RUFDRSx5QkFBQTtBM0M4cExOO0EyQzNwTEk7RUFDRSw2QkFBQTtFQUVFLDBCQUFBO0EzQzRwTFI7QTJDenBMTTtFQUNFLGlDdkN4Rk87RXVDeUZQLG9DdkM1Rk87QUp1dkxmO0EyQ3hwTFE7RUFDRSxrQ3ZDM0ZLO0V1QzRGTCw2QnZDakdLO0V1Q2tHTCwyQ0FBQTtBM0MwcExWO0EyQ3hwTEk7RUFDRSxZQUFBO0VBQ0EsY0FBQTtBM0MwcExOO0EyQ3hwTEk7RUFDRSw2QnZDekdTO0V1QzBHVCxtQkEvRjBCO0VBZ0cxQixpQkEvRjBCO0VBZ0cxQixnQkFBQTtFQUNBLGtCQUFBO0EzQzBwTE47QTJDenBMTTtFQUNFLGlDdkM1R087RXVDNkdQLDZCdkNqSE87RXVDa0hQLFVBQUE7QTNDMnBMUjtBMkN6cExNO0V0Q3VERixpQnNDdEQ0QjtBM0MycExoQztBMkMxcExNO0VBRUksMkJ2QzNERDtFdUM0REMsOEJ2QzVERDtBSnV0TFQ7QTJDdnBMTTtFQUVJLDRCdkNsRUQ7RXVDbUVDLCtCdkNuRUQ7QUoydExUO0EyQ25wTFE7RUFDRSxvQ3ZDekhLO0V1QzBITCxnQ3ZDMUhLO0V1QzJITCxXbENyRUk7RWtDc0VKLFVBQUE7QTNDcXBMVjtBMkNwcExJO0VBQ0UsbUJBQUE7QTNDc3BMTjtBMkNucExRO0VBRUksaUN2Q2pGSztFdUNrRkwsOEJ2Q2xGSztFdUNtRkwsb0JBQUE7QTNDb3BMWjtBMkMvb0xRO0VBRUksa0N2QzFGSztFdUMyRkwsK0J2QzNGSztFdUM0RkwscUJBQUE7QTNDZ3BMWjtBMkMxb0xFO0VBQ0Usa0J2Q3JJSztBSml4TFQ7QTJDM29MRTtFQUNFLGtCdkN6SUs7QUpzeExUO0EyQzVvTEU7RUFDRSxpQnZDNUlLO0FKMHhMVDs7QTRDN3pMQSxlQUFBO0FDSUE7RUFDRSxjQUFBO0VBQ0EsYUFBQTtFQUNBLFlBQUE7RUFDQSxjQUFBO0VBQ0EsZ0JBUFc7QTdDbzBMYjtBNkM1ekxFO0VBQ0UsVUFBQTtFQUNBLFlBQUE7QTdDOHpMSjtBNkM3ekxFO0VBQ0UsVUFBQTtFQUNBLFdBQUE7QTdDK3pMSjtBNkM5ekxFO0VBQ0UsVUFBQTtFQUNBLFVBQUE7QTdDZzBMSjtBNkMvekxFO0VBQ0UsVUFBQTtFQUNBLGVBQUE7QTdDaTBMSjtBNkNoMExFO0VBQ0UsVUFBQTtFQUNBLFVBQUE7QTdDazBMSjtBNkNqMExFO0VBQ0UsVUFBQTtFQUNBLGVBQUE7QTdDbTBMSjtBNkNsMExFO0VBQ0UsVUFBQTtFQUNBLFVBQUE7QTdDbzBMSjtBNkNuMExFO0VBQ0UsVUFBQTtFQUNBLFVBQUE7QTdDcTBMSjtBNkNwMExFO0VBQ0UsVUFBQTtFQUNBLFVBQUE7QTdDczBMSjtBNkNyMExFO0VBQ0UsVUFBQTtFQUNBLFVBQUE7QTdDdTBMSjtBNkN0MExFO0VBQ0UsVUFBQTtFQUNBLFVBQUE7QTdDdzBMSjtBNkN2MExFO0V4Q3lJRSxnQndDeEl3QjtBN0N5MEw1QjtBNkN4MExFO0V4Q3VJRSxxQndDdEl3QjtBN0MwMEw1QjtBNkN6MExFO0V4Q3FJRSxnQndDcEl3QjtBN0MyMEw1QjtBNkMxMExFO0V4Q21JRSxxQndDbEl3QjtBN0M0MEw1QjtBNkMzMExFO0V4Q2lJRSxnQndDaEl3QjtBN0M2MEw1QjtBNkM1MExFO0V4QytIRSxnQndDOUh3QjtBN0M4MEw1QjtBNkM3MExFO0V4QzZIRSxnQndDNUh3QjtBN0MrMEw1QjtBNkM5MExFO0V4QzJIRSxnQndDMUh3QjtBN0NnMUw1QjtBNkMvMExFO0V4Q3lIRSxnQndDeEh3QjtBN0NpMUw1QjtBNkMvMExJO0VBQ0UsVUFBQTtFQUNBLFNBQUE7QTdDaTFMTjtBNkNoMUxJO0V4Q21IQSxld0NsSDBCO0E3Q2sxTDlCO0E2Q3QxTEk7RUFDRSxVQUFBO0VBQ0Esa0JBQUE7QTdDdzFMTjtBNkN2MUxJO0V4Q21IQSx3QndDbEgwQjtBN0N5MUw5QjtBNkM3MUxJO0VBQ0UsVUFBQTtFQUNBLG1CQUFBO0E3QysxTE47QTZDOTFMSTtFeENtSEEseUJ3Q2xIMEI7QTdDZzJMOUI7QTZDcDJMSTtFQUNFLFVBQUE7RUFDQSxVQUFBO0E3Q3MyTE47QTZDcjJMSTtFeENtSEEsZ0J3Q2xIMEI7QTdDdTJMOUI7QTZDMzJMSTtFQUNFLFVBQUE7RUFDQSxtQkFBQTtBN0M2MkxOO0E2QzUyTEk7RXhDbUhBLHlCd0NsSDBCO0E3QzgyTDlCO0E2Q2wzTEk7RUFDRSxVQUFBO0VBQ0EsbUJBQUE7QTdDbzNMTjtBNkNuM0xJO0V4Q21IQSx5QndDbEgwQjtBN0NxM0w5QjtBNkN6M0xJO0VBQ0UsVUFBQTtFQUNBLFVBQUE7QTdDMjNMTjtBNkMxM0xJO0V4Q21IQSxnQndDbEgwQjtBN0M0M0w5QjtBNkNoNExJO0VBQ0UsVUFBQTtFQUNBLG1CQUFBO0E3Q2s0TE47QTZDajRMSTtFeENtSEEseUJ3Q2xIMEI7QTdDbTRMOUI7QTZDdjRMSTtFQUNFLFVBQUE7RUFDQSxtQkFBQTtBN0N5NExOO0E2Q3g0TEk7RXhDbUhBLHlCd0NsSDBCO0E3QzA0TDlCO0E2Qzk0TEk7RUFDRSxVQUFBO0VBQ0EsVUFBQTtBN0NnNUxOO0E2Qy80TEk7RXhDbUhBLGdCd0NsSDBCO0E3Q2k1TDlCO0E2Q3I1TEk7RUFDRSxVQUFBO0VBQ0EsbUJBQUE7QTdDdTVMTjtBNkN0NUxJO0V4Q21IQSx5QndDbEgwQjtBN0N3NUw5QjtBNkM1NUxJO0VBQ0UsVUFBQTtFQUNBLG1CQUFBO0E3Qzg1TE47QTZDNzVMSTtFeENtSEEseUJ3Q2xIMEI7QTdDKzVMOUI7QTZDbjZMSTtFQUNFLFVBQUE7RUFDQSxXQUFBO0E3Q3E2TE47QTZDcDZMSTtFeENtSEEsaUJ3Q2xIMEI7QTdDczZMOUI7QUtsNExFO0V3Q2xDRTtJQUNFLFVBQUE7SUFDQSxZQUFBO0U3Q3U2TEo7RTZDdDZMRTtJQUNFLFVBQUE7SUFDQSxXQUFBO0U3Q3c2TEo7RTZDdjZMRTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3Q3k2TEo7RTZDeDZMRTtJQUNFLFVBQUE7SUFDQSxlQUFBO0U3QzA2TEo7RTZDejZMRTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3QzI2TEo7RTZDMTZMRTtJQUNFLFVBQUE7SUFDQSxlQUFBO0U3QzQ2TEo7RTZDMzZMRTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3QzY2TEo7RTZDNTZMRTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3Qzg2TEo7RTZDNzZMRTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3Qys2TEo7RTZDOTZMRTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3Q2c3TEo7RTZDLzZMRTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3Q2k3TEo7RTZDaDdMRTtJeEMrRUEsZ0J3QzlFMEI7RTdDazdMNUI7RTZDajdMRTtJeEM2RUEscUJ3QzVFMEI7RTdDbTdMNUI7RTZDbDdMRTtJeEMyRUEsZ0J3QzFFMEI7RTdDbzdMNUI7RTZDbjdMRTtJeEN5RUEscUJ3Q3hFMEI7RTdDcTdMNUI7RTZDcDdMRTtJeEN1RUEsZ0J3Q3RFMEI7RTdDczdMNUI7RTZDcjdMRTtJeENxRUEsZ0J3Q3BFMEI7RTdDdTdMNUI7RTZDdDdMRTtJeENtRUEsZ0J3Q2xFMEI7RTdDdzdMNUI7RTZDdjdMRTtJeENpRUEsZ0J3Q2hFMEI7RTdDeTdMNUI7RTZDeDdMRTtJeEMrREEsZ0J3QzlEMEI7RTdDMDdMNUI7RTZDeDdMSTtJQUNFLFVBQUE7SUFDQSxTQUFBO0U3QzA3TE47RTZDejdMSTtJeEN5REYsZXdDeEQ0QjtFN0MyN0w5QjtFNkMvN0xJO0lBQ0UsVUFBQTtJQUNBLGtCQUFBO0U3Q2k4TE47RTZDaDhMSTtJeEN5REYsd0J3Q3hENEI7RTdDazhMOUI7RTZDdDhMSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0N3OExOO0U2Q3Y4TEk7SXhDeURGLHlCd0N4RDRCO0U3Q3k4TDlCO0U2Qzc4TEk7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0MrOExOO0U2Qzk4TEk7SXhDeURGLGdCd0N4RDRCO0U3Q2c5TDlCO0U2Q3A5TEk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDczlMTjtFNkNyOUxJO0l4Q3lERix5QndDeEQ0QjtFN0N1OUw5QjtFNkMzOUxJO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3QzY5TE47RTZDNTlMSTtJeEN5REYseUJ3Q3hENEI7RTdDODlMOUI7RTZDbCtMSTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3Q28rTE47RTZDbitMSTtJeEN5REYsZ0J3Q3hENEI7RTdDcStMOUI7RTZDeitMSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0MyK0xOO0U2QzErTEk7SXhDeURGLHlCd0N4RDRCO0U3QzQrTDlCO0U2Q2gvTEk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDay9MTjtFNkNqL0xJO0l4Q3lERix5QndDeEQ0QjtFN0NtL0w5QjtFNkN2L0xJO0lBQ0UsVUFBQTtJQUNBLFVBQUE7RTdDeS9MTjtFNkN4L0xJO0l4Q3lERixnQndDeEQ0QjtFN0MwL0w5QjtFNkM5L0xJO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3Q2dnTU47RTZDLy9MSTtJeEN5REYseUJ3Q3hENEI7RTdDaWdNOUI7RTZDcmdNSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0N1Z01OO0U2Q3RnTUk7SXhDeURGLHlCd0N4RDRCO0U3Q3dnTTlCO0U2QzVnTUk7SUFDRSxVQUFBO0lBQ0EsV0FBQTtFN0M4Z01OO0U2QzdnTUk7SXhDeURGLGlCd0N4RDRCO0U3QytnTTlCO0FBQ0Y7QUtsaU1FO0V3Q29CRTtJQUVFLFVBQUE7SUFDQSxZQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxXQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxVQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxlQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxVQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxlQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxVQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxVQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxVQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxVQUFBO0U3Q2doTUo7RTZDL2dNRTtJQUVFLFVBQUE7SUFDQSxVQUFBO0U3Q2doTUo7RTZDL2dNRTtJeENVQSxnQndDUjBCO0U3Q2doTTVCO0U2Qy9nTUU7SXhDT0EscUJ3Q0wwQjtFN0NnaE01QjtFNkMvZ01FO0l4Q0lBLGdCd0NGMEI7RTdDZ2hNNUI7RTZDL2dNRTtJeENDQSxxQndDQzBCO0U3Q2doTTVCO0U2Qy9nTUU7SXhDRkEsZ0J3Q0kwQjtFN0NnaE01QjtFNkMvZ01FO0l4Q0xBLGdCd0NPMEI7RTdDZ2hNNUI7RTZDL2dNRTtJeENSQSxnQndDVTBCO0U3Q2doTTVCO0U2Qy9nTUU7SXhDWEEsZ0J3Q2EwQjtFN0NnaE01QjtFNkMvZ01FO0l4Q2RBLGdCd0NnQjBCO0U3Q2doTTVCO0U2QzlnTUk7SUFFRSxVQUFBO0lBQ0EsU0FBQTtFN0MrZ01OO0U2QzlnTUk7SXhDdEJGLGV3Q3dCNEI7RTdDK2dNOUI7RTZDcmhNSTtJQUVFLFVBQUE7SUFDQSxrQkFBQTtFN0NzaE1OO0U2Q3JoTUk7SXhDdEJGLHdCd0N3QjRCO0U3Q3NoTTlCO0U2QzVoTUk7SUFFRSxVQUFBO0lBQ0EsbUJBQUE7RTdDNmhNTjtFNkM1aE1JO0l4Q3RCRix5QndDd0I0QjtFN0M2aE05QjtFNkNuaU1JO0lBRUUsVUFBQTtJQUNBLFVBQUE7RTdDb2lNTjtFNkNuaU1JO0l4Q3RCRixnQndDd0I0QjtFN0NvaU05QjtFNkMxaU1JO0lBRUUsVUFBQTtJQUNBLG1CQUFBO0U3QzJpTU47RTZDMWlNSTtJeEN0QkYseUJ3Q3dCNEI7RTdDMmlNOUI7RTZDampNSTtJQUVFLFVBQUE7SUFDQSxtQkFBQTtFN0Nrak1OO0U2Q2pqTUk7SXhDdEJGLHlCd0N3QjRCO0U3Q2tqTTlCO0U2Q3hqTUk7SUFFRSxVQUFBO0lBQ0EsVUFBQTtFN0N5ak1OO0U2Q3hqTUk7SXhDdEJGLGdCd0N3QjRCO0U3Q3lqTTlCO0U2Qy9qTUk7SUFFRSxVQUFBO0lBQ0EsbUJBQUE7RTdDZ2tNTjtFNkMvak1JO0l4Q3RCRix5QndDd0I0QjtFN0Nna005QjtFNkN0a01JO0lBRUUsVUFBQTtJQUNBLG1CQUFBO0U3Q3VrTU47RTZDdGtNSTtJeEN0QkYseUJ3Q3dCNEI7RTdDdWtNOUI7RTZDN2tNSTtJQUVFLFVBQUE7SUFDQSxVQUFBO0U3QzhrTU47RTZDN2tNSTtJeEN0QkYsZ0J3Q3dCNEI7RTdDOGtNOUI7RTZDcGxNSTtJQUVFLFVBQUE7SUFDQSxtQkFBQTtFN0NxbE1OO0U2Q3BsTUk7SXhDdEJGLHlCd0N3QjRCO0U3Q3FsTTlCO0U2QzNsTUk7SUFFRSxVQUFBO0lBQ0EsbUJBQUE7RTdDNGxNTjtFNkMzbE1JO0l4Q3RCRix5QndDd0I0QjtFN0M0bE05QjtFNkNsbU1JO0lBRUUsVUFBQTtJQUNBLFdBQUE7RTdDbW1NTjtFNkNsbU1JO0l4Q3RCRixpQndDd0I0QjtFN0NtbU05QjtBQUNGO0FLOXJNRTtFd0M0RkU7SUFDRSxVQUFBO0lBQ0EsWUFBQTtFN0NxbU1KO0U2Q3BtTUU7SUFDRSxVQUFBO0lBQ0EsV0FBQTtFN0NzbU1KO0U2Q3JtTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0N1bU1KO0U2Q3RtTUU7SUFDRSxVQUFBO0lBQ0EsZUFBQTtFN0N3bU1KO0U2Q3ZtTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0N5bU1KO0U2Q3htTUU7SUFDRSxVQUFBO0lBQ0EsZUFBQTtFN0MwbU1KO0U2Q3ptTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0MybU1KO0U2QzFtTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0M0bU1KO0U2QzNtTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0M2bU1KO0U2QzVtTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0M4bU1KO0U2QzdtTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0MrbU1KO0U2QzltTUU7SXhDM0RBLGdCd0M0RDBCO0U3Q2duTTVCO0U2Qy9tTUU7SXhDN0RBLHFCd0M4RDBCO0U3Q2luTTVCO0U2Q2huTUU7SXhDL0RBLGdCd0NnRTBCO0U3Q2tuTTVCO0U2Q2puTUU7SXhDakVBLHFCd0NrRTBCO0U3Q21uTTVCO0U2Q2xuTUU7SXhDbkVBLGdCd0NvRTBCO0U3Q29uTTVCO0U2Q25uTUU7SXhDckVBLGdCd0NzRTBCO0U3Q3FuTTVCO0U2Q3BuTUU7SXhDdkVBLGdCd0N3RTBCO0U3Q3NuTTVCO0U2Q3JuTUU7SXhDekVBLGdCd0MwRTBCO0U3Q3VuTTVCO0U2Q3RuTUU7SXhDM0VBLGdCd0M0RTBCO0U3Q3duTTVCO0U2Q3RuTUk7SUFDRSxVQUFBO0lBQ0EsU0FBQTtFN0N3bk1OO0U2Q3ZuTUk7SXhDakZGLGV3Q2tGNEI7RTdDeW5NOUI7RTZDN25NSTtJQUNFLFVBQUE7SUFDQSxrQkFBQTtFN0Mrbk1OO0U2QzluTUk7SXhDakZGLHdCd0NrRjRCO0U3Q2dvTTlCO0U2Q3BvTUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDc29NTjtFNkNyb01JO0l4Q2pGRix5QndDa0Y0QjtFN0N1b005QjtFNkMzb01JO0lBQ0UsVUFBQTtJQUNBLFVBQUE7RTdDNm9NTjtFNkM1b01JO0l4Q2pGRixnQndDa0Y0QjtFN0M4b005QjtFNkNscE1JO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3Q29wTU47RTZDbnBNSTtJeENqRkYseUJ3Q2tGNEI7RTdDcXBNOUI7RTZDenBNSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0MycE1OO0U2QzFwTUk7SXhDakZGLHlCd0NrRjRCO0U3QzRwTTlCO0U2Q2hxTUk7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NrcU1OO0U2Q2pxTUk7SXhDakZGLGdCd0NrRjRCO0U3Q21xTTlCO0U2Q3ZxTUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDeXFNTjtFNkN4cU1JO0l4Q2pGRix5QndDa0Y0QjtFN0MwcU05QjtFNkM5cU1JO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3Q2dyTU47RTZDL3FNSTtJeENqRkYseUJ3Q2tGNEI7RTdDaXJNOUI7RTZDcnJNSTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3Q3VyTU47RTZDdHJNSTtJeENqRkYsZ0J3Q2tGNEI7RTdDd3JNOUI7RTZDNXJNSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0M4ck1OO0U2QzdyTUk7SXhDakZGLHlCd0NrRjRCO0U3QytyTTlCO0U2Q25zTUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDcXNNTjtFNkNwc01JO0l4Q2pGRix5QndDa0Y0QjtFN0Nzc005QjtFNkMxc01JO0lBQ0UsVUFBQTtJQUNBLFdBQUE7RTdDNHNNTjtFNkMzc01JO0l4Q2pGRixpQndDa0Y0QjtFN0M2c005QjtBQUNGO0FLOTFNRTtFd0NrSkU7SUFDRSxVQUFBO0lBQ0EsWUFBQTtFN0Mrc01KO0U2QzlzTUU7SUFDRSxVQUFBO0lBQ0EsV0FBQTtFN0NndE1KO0U2Qy9zTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NpdE1KO0U2Q2h0TUU7SUFDRSxVQUFBO0lBQ0EsZUFBQTtFN0NrdE1KO0U2Q2p0TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NtdE1KO0U2Q2x0TUU7SUFDRSxVQUFBO0lBQ0EsZUFBQTtFN0NvdE1KO0U2Q250TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NxdE1KO0U2Q3B0TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NzdE1KO0U2Q3J0TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0N1dE1KO0U2Q3R0TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0N3dE1KO0U2Q3Z0TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0N5dE1KO0U2Q3h0TUU7SXhDckhBLGdCd0NzSDBCO0U3QzB0TTVCO0U2Q3p0TUU7SXhDdkhBLHFCd0N3SDBCO0U3QzJ0TTVCO0U2QzF0TUU7SXhDekhBLGdCd0MwSDBCO0U3QzR0TTVCO0U2QzN0TUU7SXhDM0hBLHFCd0M0SDBCO0U3QzZ0TTVCO0U2QzV0TUU7SXhDN0hBLGdCd0M4SDBCO0U3Qzh0TTVCO0U2Qzd0TUU7SXhDL0hBLGdCd0NnSTBCO0U3Qyt0TTVCO0U2Qzl0TUU7SXhDaklBLGdCd0NrSTBCO0U3Q2d1TTVCO0U2Qy90TUU7SXhDbklBLGdCd0NvSTBCO0U3Q2l1TTVCO0U2Q2h1TUU7SXhDcklBLGdCd0NzSTBCO0U3Q2t1TTVCO0U2Q2h1TUk7SUFDRSxVQUFBO0lBQ0EsU0FBQTtFN0NrdU1OO0U2Q2p1TUk7SXhDM0lGLGV3QzRJNEI7RTdDbXVNOUI7RTZDdnVNSTtJQUNFLFVBQUE7SUFDQSxrQkFBQTtFN0N5dU1OO0U2Q3h1TUk7SXhDM0lGLHdCd0M0STRCO0U3QzB1TTlCO0U2Qzl1TUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDZ3ZNTjtFNkMvdU1JO0l4QzNJRix5QndDNEk0QjtFN0Npdk05QjtFNkNydk1JO0lBQ0UsVUFBQTtJQUNBLFVBQUE7RTdDdXZNTjtFNkN0dk1JO0l4QzNJRixnQndDNEk0QjtFN0N3dk05QjtFNkM1dk1JO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3Qzh2TU47RTZDN3ZNSTtJeEMzSUYseUJ3QzRJNEI7RTdDK3ZNOUI7RTZDbndNSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0Nxd01OO0U2Q3B3TUk7SXhDM0lGLHlCd0M0STRCO0U3Q3N3TTlCO0U2QzF3TUk7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0M0d01OO0U2QzN3TUk7SXhDM0lGLGdCd0M0STRCO0U3QzZ3TTlCO0U2Q2p4TUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDbXhNTjtFNkNseE1JO0l4QzNJRix5QndDNEk0QjtFN0NveE05QjtFNkN4eE1JO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3QzB4TU47RTZDenhNSTtJeEMzSUYseUJ3QzRJNEI7RTdDMnhNOUI7RTZDL3hNSTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3Q2l5TU47RTZDaHlNSTtJeEMzSUYsZ0J3QzRJNEI7RTdDa3lNOUI7RTZDdHlNSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0N3eU1OO0U2Q3Z5TUk7SXhDM0lGLHlCd0M0STRCO0U3Q3l5TTlCO0U2Qzd5TUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDK3lNTjtFNkM5eU1JO0l4QzNJRix5QndDNEk0QjtFN0Nnek05QjtFNkNwek1JO0lBQ0UsVUFBQTtJQUNBLFdBQUE7RTdDc3pNTjtFNkNyek1JO0l4QzNJRixpQndDNEk0QjtFN0N1ek05QjtBQUNGO0FLbi9NSTtFd0M2TEE7SUFDRSxVQUFBO0lBQ0EsWUFBQTtFN0N5ek1KO0U2Q3h6TUU7SUFDRSxVQUFBO0lBQ0EsV0FBQTtFN0Mwek1KO0U2Q3p6TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0Myek1KO0U2QzF6TUU7SUFDRSxVQUFBO0lBQ0EsZUFBQTtFN0M0ek1KO0U2QzN6TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0M2ek1KO0U2QzV6TUU7SUFDRSxVQUFBO0lBQ0EsZUFBQTtFN0M4ek1KO0U2Qzd6TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0Mrek1KO0U2Qzl6TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NnME1KO0U2Qy96TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NpME1KO0U2Q2gwTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NrME1KO0U2Q2owTUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NtME1KO0U2Q2wwTUU7SXhDL0tBLGdCd0NnTDBCO0U3Q28wTTVCO0U2Q24wTUU7SXhDakxBLHFCd0NrTDBCO0U3Q3EwTTVCO0U2Q3AwTUU7SXhDbkxBLGdCd0NvTDBCO0U3Q3MwTTVCO0U2Q3IwTUU7SXhDckxBLHFCd0NzTDBCO0U3Q3UwTTVCO0U2Q3QwTUU7SXhDdkxBLGdCd0N3TDBCO0U3Q3cwTTVCO0U2Q3YwTUU7SXhDekxBLGdCd0MwTDBCO0U3Q3kwTTVCO0U2Q3gwTUU7SXhDM0xBLGdCd0M0TDBCO0U3QzAwTTVCO0U2Q3owTUU7SXhDN0xBLGdCd0M4TDBCO0U3QzIwTTVCO0U2QzEwTUU7SXhDL0xBLGdCd0NnTTBCO0U3QzQwTTVCO0U2QzEwTUk7SUFDRSxVQUFBO0lBQ0EsU0FBQTtFN0M0ME1OO0U2QzMwTUk7SXhDck1GLGV3Q3NNNEI7RTdDNjBNOUI7RTZDajFNSTtJQUNFLFVBQUE7SUFDQSxrQkFBQTtFN0NtMU1OO0U2Q2wxTUk7SXhDck1GLHdCd0NzTTRCO0U3Q28xTTlCO0U2Q3gxTUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDMDFNTjtFNkN6MU1JO0l4Q3JNRix5QndDc000QjtFN0MyMU05QjtFNkMvMU1JO0lBQ0UsVUFBQTtJQUNBLFVBQUE7RTdDaTJNTjtFNkNoMk1JO0l4Q3JNRixnQndDc000QjtFN0NrMk05QjtFNkN0Mk1JO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3Q3cyTU47RTZDdjJNSTtJeENyTUYseUJ3Q3NNNEI7RTdDeTJNOUI7RTZDNzJNSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0MrMk1OO0U2QzkyTUk7SXhDck1GLHlCd0NzTTRCO0U3Q2czTTlCO0U2Q3AzTUk7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NzM01OO0U2Q3IzTUk7SXhDck1GLGdCd0NzTTRCO0U3Q3UzTTlCO0U2QzMzTUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDNjNNTjtFNkM1M01JO0l4Q3JNRix5QndDc000QjtFN0M4M005QjtFNkNsNE1JO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3Q280TU47RTZDbjRNSTtJeENyTUYseUJ3Q3NNNEI7RTdDcTRNOUI7RTZDejRNSTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3QzI0TU47RTZDMTRNSTtJeENyTUYsZ0J3Q3NNNEI7RTdDNDRNOUI7RTZDaDVNSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0NrNU1OO0U2Q2o1TUk7SXhDck1GLHlCd0NzTTRCO0U3Q201TTlCO0U2Q3Y1TUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDeTVNTjtFNkN4NU1JO0l4Q3JNRix5QndDc000QjtFN0MwNU05QjtFNkM5NU1JO0lBQ0UsVUFBQTtJQUNBLFdBQUE7RTdDZzZNTjtFNkMvNU1JO0l4Q3JNRixpQndDc000QjtFN0NpNk05QjtBQUNGO0FLeG9OSTtFd0N3T0E7SUFDRSxVQUFBO0lBQ0EsWUFBQTtFN0NtNk1KO0U2Q2w2TUU7SUFDRSxVQUFBO0lBQ0EsV0FBQTtFN0NvNk1KO0U2Q242TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NxNk1KO0U2Q3A2TUU7SUFDRSxVQUFBO0lBQ0EsZUFBQTtFN0NzNk1KO0U2Q3I2TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0N1Nk1KO0U2Q3Q2TUU7SUFDRSxVQUFBO0lBQ0EsZUFBQTtFN0N3Nk1KO0U2Q3Y2TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0N5Nk1KO0U2Q3g2TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0MwNk1KO0U2Q3o2TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0MyNk1KO0U2QzE2TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0M0Nk1KO0U2QzM2TUU7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0M2Nk1KO0U2QzU2TUU7SXhDek9BLGdCd0MwTzBCO0U3Qzg2TTVCO0U2Qzc2TUU7SXhDM09BLHFCd0M0TzBCO0U3Qys2TTVCO0U2Qzk2TUU7SXhDN09BLGdCd0M4TzBCO0U3Q2c3TTVCO0U2Qy82TUU7SXhDL09BLHFCd0NnUDBCO0U3Q2k3TTVCO0U2Q2g3TUU7SXhDalBBLGdCd0NrUDBCO0U3Q2s3TTVCO0U2Q2o3TUU7SXhDblBBLGdCd0NvUDBCO0U3Q203TTVCO0U2Q2w3TUU7SXhDclBBLGdCd0NzUDBCO0U3Q283TTVCO0U2Q243TUU7SXhDdlBBLGdCd0N3UDBCO0U3Q3E3TTVCO0U2Q3A3TUU7SXhDelBBLGdCd0MwUDBCO0U3Q3M3TTVCO0U2Q3A3TUk7SUFDRSxVQUFBO0lBQ0EsU0FBQTtFN0NzN01OO0U2Q3I3TUk7SXhDL1BGLGV3Q2dRNEI7RTdDdTdNOUI7RTZDMzdNSTtJQUNFLFVBQUE7SUFDQSxrQkFBQTtFN0M2N01OO0U2QzU3TUk7SXhDL1BGLHdCd0NnUTRCO0U3Qzg3TTlCO0U2Q2w4TUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDbzhNTjtFNkNuOE1JO0l4Qy9QRix5QndDZ1E0QjtFN0NxOE05QjtFNkN6OE1JO0lBQ0UsVUFBQTtJQUNBLFVBQUE7RTdDMjhNTjtFNkMxOE1JO0l4Qy9QRixnQndDZ1E0QjtFN0M0OE05QjtFNkNoOU1JO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3Q2s5TU47RTZDajlNSTtJeEMvUEYseUJ3Q2dRNEI7RTdDbTlNOUI7RTZDdjlNSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0N5OU1OO0U2Q3g5TUk7SXhDL1BGLHlCd0NnUTRCO0U3QzA5TTlCO0U2Qzk5TUk7SUFDRSxVQUFBO0lBQ0EsVUFBQTtFN0NnK01OO0U2Qy85TUk7SXhDL1BGLGdCd0NnUTRCO0U3Q2krTTlCO0U2Q3IrTUk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDdStNTjtFNkN0K01JO0l4Qy9QRix5QndDZ1E0QjtFN0N3K005QjtFNkM1K01JO0lBQ0UsVUFBQTtJQUNBLG1CQUFBO0U3QzgrTU47RTZDNytNSTtJeEMvUEYseUJ3Q2dRNEI7RTdDKytNOUI7RTZDbi9NSTtJQUNFLFVBQUE7SUFDQSxVQUFBO0U3Q3EvTU47RTZDcC9NSTtJeEMvUEYsZ0J3Q2dRNEI7RTdDcy9NOUI7RTZDMS9NSTtJQUNFLFVBQUE7SUFDQSxtQkFBQTtFN0M0L01OO0U2QzMvTUk7SXhDL1BGLHlCd0NnUTRCO0U3QzYvTTlCO0U2Q2pnTkk7SUFDRSxVQUFBO0lBQ0EsbUJBQUE7RTdDbWdOTjtFNkNsZ05JO0l4Qy9QRix5QndDZ1E0QjtFN0NvZ045QjtFNkN4Z05JO0lBQ0UsVUFBQTtJQUNBLFdBQUE7RTdDMGdOTjtFNkN6Z05JO0l4Qy9QRixpQndDZ1E0QjtFN0MyZ045QjtBQUNGOztBNkMxZ05BO0V4Q2xRSSxxQndDbVFzQjtFeENuUXRCLHNCd0NvUXNCO0VBQ3hCLG9CQUFBO0E3QzZnTkY7QTZDNWdORTtFQUNFLHVCQUFBO0E3QzhnTko7QTZDN2dORTtFQUNFLHFDQUFBO0E3QytnTko7QTZDN2dORTtFQUNFLHVCQUFBO0E3QytnTko7QTZDOWdORTtFeEM3UUUsY3dDOFF3QjtFeEM5UXhCLGV3QytRd0I7RUFDeEIsYUFBQTtBN0NnaE5KO0E2Qy9nTkk7RUFDRSxTQUFBO0VBQ0EscUJBQUE7QTdDaWhOTjtBNkNoaE5JO0VBQ0UscUJBQUE7QTdDa2hOTjtBNkNqaE5JO0VBQ0UsZ0JBQUE7QTdDbWhOTjtBNkNsaE5FO0VBQ0UsYUFBQTtBN0NvaE5KO0E2Q25oTkU7RUFDRSxlQUFBO0E3Q3FoTko7QTZDcGhORTtFQUNFLG1CQUFBO0E3Q3NoTko7QUs3M05FO0V3QzBXRTtJQUNFLGFBQUE7RTdDc2hOSjtBQUNGO0FLdDNORTtFd0NrV0U7SUFDRSxhQUFBO0U3Q3VoTko7QUFDRjs7QTZDcmhORTtFQUNFLG9CQUFBO0V4Q3pTQSx3Q3dDMFN3QjtFeEMxU3hCLHlDd0MyU3dCO0E3Q3doTjVCO0E2Q3ZoTkk7RUFDRSw4QkFBQTtFQUNBLCtCQUFBO0E3Q3loTk47QTZDdmhOTTtFQUNFLGlCQUFBO0E3Q3loTlI7QUt4NU5FO0V3Q2lZTTtJQUNFLGlCQUFBO0U3QzBoTlI7QUFDRjtBS3o1TkU7RXdDZ1lNO0lBQ0UsaUJBQUE7RTdDNGhOUjtBQUNGO0FLMTVORTtFd0MrWE07SUFDRSxpQkFBQTtFN0M4aE5SO0FBQ0Y7QUszNU5FO0V3QzhYTTtJQUNFLGlCQUFBO0U3Q2dpTlI7QUFDRjtBSzU1TkU7RXdDNlhNO0lBQ0UsaUJBQUE7RTdDa2lOUjtBQUNGO0FLNTVOSTtFd0MyWEk7SUFDRSxpQkFBQTtFN0NvaU5SO0FBQ0Y7QUt2NU5JO0V3Q29YSTtJQUNFLGlCQUFBO0U3Q3NpTlI7QUFDRjtBS3Y1Tkk7RXdDa1hJO0lBQ0UsaUJBQUE7RTdDd2lOUjtBQUNGO0FLbDVOSTtFd0MyV0k7SUFDRSxpQkFBQTtFN0MwaU5SO0FBQ0Y7QTZDdmtOTTtFQUNFLG9CQUFBO0E3Q3lrTlI7QUt4OE5FO0V3Q2lZTTtJQUNFLG9CQUFBO0U3QzBrTlI7QUFDRjtBS3o4TkU7RXdDZ1lNO0lBQ0Usb0JBQUE7RTdDNGtOUjtBQUNGO0FLMThORTtFd0MrWE07SUFDRSxvQkFBQTtFN0M4a05SO0FBQ0Y7QUszOE5FO0V3QzhYTTtJQUNFLG9CQUFBO0U3Q2dsTlI7QUFDRjtBSzU4TkU7RXdDNlhNO0lBQ0Usb0JBQUE7RTdDa2xOUjtBQUNGO0FLNThOSTtFd0MyWEk7SUFDRSxvQkFBQTtFN0NvbE5SO0FBQ0Y7QUt2OE5JO0V3Q29YSTtJQUNFLG9CQUFBO0U3Q3NsTlI7QUFDRjtBS3Y4Tkk7RXdDa1hJO0lBQ0Usb0JBQUE7RTdDd2xOUjtBQUNGO0FLbDhOSTtFd0MyV0k7SUFDRSxvQkFBQTtFN0MwbE5SO0FBQ0Y7QTZDdm5OTTtFQUNFLG1CQUFBO0E3Q3luTlI7QUt4L05FO0V3Q2lZTTtJQUNFLG1CQUFBO0U3QzBuTlI7QUFDRjtBS3ovTkU7RXdDZ1lNO0lBQ0UsbUJBQUE7RTdDNG5OUjtBQUNGO0FLMS9ORTtFd0MrWE07SUFDRSxtQkFBQTtFN0M4bk5SO0FBQ0Y7QUszL05FO0V3QzhYTTtJQUNFLG1CQUFBO0U3Q2dvTlI7QUFDRjtBSzUvTkU7RXdDNlhNO0lBQ0UsbUJBQUE7RTdDa29OUjtBQUNGO0FLNS9OSTtFd0MyWEk7SUFDRSxtQkFBQTtFN0Nvb05SO0FBQ0Y7QUt2L05JO0V3Q29YSTtJQUNFLG1CQUFBO0U3Q3NvTlI7QUFDRjtBS3YvTkk7RXdDa1hJO0lBQ0UsbUJBQUE7RTdDd29OUjtBQUNGO0FLbC9OSTtFd0MyV0k7SUFDRSxtQkFBQTtFN0Mwb05SO0FBQ0Y7QTZDdnFOTTtFQUNFLG9CQUFBO0E3Q3lxTlI7QUt4aU9FO0V3Q2lZTTtJQUNFLG9CQUFBO0U3QzBxTlI7QUFDRjtBS3ppT0U7RXdDZ1lNO0lBQ0Usb0JBQUE7RTdDNHFOUjtBQUNGO0FLMWlPRTtFd0MrWE07SUFDRSxvQkFBQTtFN0M4cU5SO0FBQ0Y7QUszaU9FO0V3QzhYTTtJQUNFLG9CQUFBO0U3Q2dyTlI7QUFDRjtBSzVpT0U7RXdDNlhNO0lBQ0Usb0JBQUE7RTdDa3JOUjtBQUNGO0FLNWlPSTtFd0MyWEk7SUFDRSxvQkFBQTtFN0Nvck5SO0FBQ0Y7QUt2aU9JO0V3Q29YSTtJQUNFLG9CQUFBO0U3Q3NyTlI7QUFDRjtBS3ZpT0k7RXdDa1hJO0lBQ0Usb0JBQUE7RTdDd3JOUjtBQUNGO0FLbGlPSTtFd0MyV0k7SUFDRSxvQkFBQTtFN0Mwck5SO0FBQ0Y7QTZDdnROTTtFQUNFLGlCQUFBO0E3Q3l0TlI7QUt4bE9FO0V3Q2lZTTtJQUNFLGlCQUFBO0U3QzB0TlI7QUFDRjtBS3psT0U7RXdDZ1lNO0lBQ0UsaUJBQUE7RTdDNHROUjtBQUNGO0FLMWxPRTtFd0MrWE07SUFDRSxpQkFBQTtFN0M4dE5SO0FBQ0Y7QUszbE9FO0V3QzhYTTtJQUNFLGlCQUFBO0U3Q2d1TlI7QUFDRjtBSzVsT0U7RXdDNlhNO0lBQ0UsaUJBQUE7RTdDa3VOUjtBQUNGO0FLNWxPSTtFd0MyWEk7SUFDRSxpQkFBQTtFN0NvdU5SO0FBQ0Y7QUt2bE9JO0V3Q29YSTtJQUNFLGlCQUFBO0U3Q3N1TlI7QUFDRjtBS3ZsT0k7RXdDa1hJO0lBQ0UsaUJBQUE7RTdDd3VOUjtBQUNGO0FLbGxPSTtFd0MyV0k7SUFDRSxpQkFBQTtFN0MwdU5SO0FBQ0Y7QTZDdndOTTtFQUNFLG9CQUFBO0E3Q3l3TlI7QUt4b09FO0V3Q2lZTTtJQUNFLG9CQUFBO0U3QzB3TlI7QUFDRjtBS3pvT0U7RXdDZ1lNO0lBQ0Usb0JBQUE7RTdDNHdOUjtBQUNGO0FLMW9PRTtFd0MrWE07SUFDRSxvQkFBQTtFN0M4d05SO0FBQ0Y7QUszb09FO0V3QzhYTTtJQUNFLG9CQUFBO0U3Q2d4TlI7QUFDRjtBSzVvT0U7RXdDNlhNO0lBQ0Usb0JBQUE7RTdDa3hOUjtBQUNGO0FLNW9PSTtFd0MyWEk7SUFDRSxvQkFBQTtFN0NveE5SO0FBQ0Y7QUt2b09JO0V3Q29YSTtJQUNFLG9CQUFBO0U3Q3N4TlI7QUFDRjtBS3ZvT0k7RXdDa1hJO0lBQ0Usb0JBQUE7RTdDd3hOUjtBQUNGO0FLbG9PSTtFd0MyV0k7SUFDRSxvQkFBQTtFN0MweE5SO0FBQ0Y7QTZDdnpOTTtFQUNFLG1CQUFBO0E3Q3l6TlI7QUt4ck9FO0V3Q2lZTTtJQUNFLG1CQUFBO0U3QzB6TlI7QUFDRjtBS3pyT0U7RXdDZ1lNO0lBQ0UsbUJBQUE7RTdDNHpOUjtBQUNGO0FLMXJPRTtFd0MrWE07SUFDRSxtQkFBQTtFN0M4ek5SO0FBQ0Y7QUszck9FO0V3QzhYTTtJQUNFLG1CQUFBO0U3Q2cwTlI7QUFDRjtBSzVyT0U7RXdDNlhNO0lBQ0UsbUJBQUE7RTdDazBOUjtBQUNGO0FLNXJPSTtFd0MyWEk7SUFDRSxtQkFBQTtFN0NvME5SO0FBQ0Y7QUt2ck9JO0V3Q29YSTtJQUNFLG1CQUFBO0U3Q3MwTlI7QUFDRjtBS3ZyT0k7RXdDa1hJO0lBQ0UsbUJBQUE7RTdDdzBOUjtBQUNGO0FLbHJPSTtFd0MyV0k7SUFDRSxtQkFBQTtFN0MwME5SO0FBQ0Y7QTZDdjJOTTtFQUNFLG9CQUFBO0E3Q3kyTlI7QUt4dU9FO0V3Q2lZTTtJQUNFLG9CQUFBO0U3QzAyTlI7QUFDRjtBS3p1T0U7RXdDZ1lNO0lBQ0Usb0JBQUE7RTdDNDJOUjtBQUNGO0FLMXVPRTtFd0MrWE07SUFDRSxvQkFBQTtFN0M4Mk5SO0FBQ0Y7QUszdU9FO0V3QzhYTTtJQUNFLG9CQUFBO0U3Q2czTlI7QUFDRjtBSzV1T0U7RXdDNlhNO0lBQ0Usb0JBQUE7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QUNFLG9DQUFBO0FoRGtqUE47O0FnRGhqUEk7RUFDRSx5QkFBQTtBaERtalBOOztBZ0RqalBNO0VBRUUseUJBQUE7QWhEbWpQUjs7QWdEbGpQSTtFQUNFLG9DQUFBO0FoRHFqUE47O0FnRGpsUEU7RUFDRSxvQ0FBQTtBaERvbFBKOztBZ0RsbFBJO0VBRUUseUJBQUE7QWhEb2xQTjs7QWdEbmxQRTtFQUNFLCtDQUFBO0FoRHNsUEo7O0FnRGpsUEk7RUFDRSx5QkFBQTtBaERvbFBOOztBZ0RsbFBNO0VBRUUseUJBQUE7QWhEb2xQUjs7QWdEbmxQSTtFQUNFLG9DQUFBO0FoRHNsUE47O0FnRHBsUEk7RUFDRSx5QkFBQTtBaER1bFBOOztBZ0RybFBNO0VBRUUseUJBQUE7QWhEdWxQUjs7QWdEdGxQSTtFQUNFLG9DQUFBO0FoRHlsUE47O0FnRHJuUEU7RUFDRSxvQ0FBQTtBaER3blBKOztBZ0R0blBJO0VBRUUseUJBQUE7QWhEd25QTjs7QWdEdm5QRTtFQUNFLCtDQUFBO0FoRDBuUEo7O0FnRHJuUEk7RUFDRSx5QkFBQTtBaER3blBOOztBZ0R0blBNO0VBRUUseUJBQUE7QWhEd25QUjs7QWdEdm5QSTtFQUNFLG9DQUFBO0FoRDBuUE47O0FnRHhuUEk7RUFDRSx5QkFBQTtBaEQyblBOOztBZ0R6blBNO0VBRUUseUJBQUE7QWhEMm5QUjs7QWdEMW5QSTtFQUNFLG9DQUFBO0FoRDZuUE47O0FnRHpwUEU7RUFDRSxvQ0FBQTtBaEQ0cFBKOztBZ0QxcFBJO0VBRUUseUJBQUE7QWhENHBQTjs7QWdEM3BQRTtFQUNFLCtDQUFBO0FoRDhwUEo7O0FnRHpwUEk7RUFDRSx5QkFBQTtBaEQ0cFBOOztBZ0QxcFBNO0VBRUUseUJBQUE7QWhENHBQUjs7QWdEM3BQSTtFQUNFLG9DQUFBO0FoRDhwUE47O0FnRDVwUEk7RUFDRSx5QkFBQTtBaEQrcFBOOztBZ0Q3cFBNO0VBRUUseUJBQUE7QWhEK3BQUjs7QWdEOXBQSTtFQUNFLG9DQUFBO0FoRGlxUE47O0FnRDdyUEU7RUFDRSxvQ0FBQTtBaERnc1BKOztBZ0Q5clBJO0VBRUUseUJBQUE7QWhEZ3NQTjs7QWdEL3JQRTtFQUNFLCtDQUFBO0FoRGtzUEo7O0FnRDdyUEk7RUFDRSx5QkFBQTtBaERnc1BOOztBZ0Q5clBNO0VBRUUseUJBQUE7QWhEZ3NQUjs7QWdEL3JQSTtFQUNFLG9DQUFBO0FoRGtzUE47O0FnRGhzUEk7RUFDRSx5QkFBQTtBaERtc1BOOztBZ0Rqc1BNO0VBRUUseUJBQUE7QWhEbXNQUjs7QWdEbHNQSTtFQUNFLG9DQUFBO0FoRHFzUE47O0FnRGp1UEU7RUFDRSxvQ0FBQTtBaERvdVBKOztBZ0RsdVBJO0VBRUUseUJBQUE7QWhEb3VQTjs7QWdEbnVQRTtFQUNFLCtDQUFBO0FoRHN1UEo7O0FnRGp1UEk7RUFDRSx5QkFBQTtBaERvdVBOOztBZ0RsdVBNO0VBRUUseUJBQUE7QWhEb3VQUjs7QWdEbnVQSTtFQUNFLG9DQUFBO0FoRHN1UE47O0FnRHB1UEk7RUFDRSx5QkFBQTtBaER1dVBOOztBZ0RydVBNO0VBRUUseUJBQUE7QWhEdXVQUjs7QWdEdHVQSTtFQUNFLG9DQUFBO0FoRHl1UE47O0FnRHR1UEU7RUFDRSxnQ0FBQTtBaER5dVBKOztBZ0R4dVBFO0VBQ0UsMkNBQUE7QWhEMnVQSjs7QWdEOXVQRTtFQUNFLGlDQUFBO0FoRGl2UEo7O0FnRGh2UEU7RUFDRSw0Q0FBQTtBaERtdlBKOztBZ0R0dlBFO0VBQ0UsaUNBQUE7QWhEeXZQSjs7QWdEeHZQRTtFQUNFLDRDQUFBO0FoRDJ2UEo7O0FnRDl2UEU7RUFDRSxpQ0FBQTtBaERpd1BKOztBZ0Rod1BFO0VBQ0UsNENBQUE7QWhEbXdQSjs7QWdEdHdQRTtFQUNFLGlDQUFBO0FoRHl3UEo7O0FnRHh3UEU7RUFDRSw0Q0FBQTtBaEQyd1BKOztBZ0Q5d1BFO0VBQ0UsaUNBQUE7QWhEaXhQSjs7QWdEaHhQRTtFQUNFLDRDQUFBO0FoRG14UEo7O0FnRHR4UEU7RUFDRSxpQ0FBQTtBaER5eFBKOztBZ0R4eFBFO0VBQ0UsNENBQUE7QWhEMnhQSjs7QWdEOXhQRTtFQUNFLGlDQUFBO0FoRGl5UEo7O0FnRGh5UEU7RUFDRSw0Q0FBQTtBaERteVBKOztBZ0R0eVBFO0VBQ0UsaUNBQUE7QWhEeXlQSjs7QWdEeHlQRTtFQUNFLDRDQUFBO0FoRDJ5UEo7O0FpRC8wUEU7RUFDRSw4QkFBQTtBakRrMVBKOztBaURuMVBFO0VBQ0Usc0NBQUE7QWpEczFQSjs7QWlEdjFQRTtFQUNFLGlDQUFBO0FqRDAxUEo7O0FpRDMxUEU7RUFDRSx5Q0FBQTtBakQ4MVBKOztBaUQxMVBFO0VBQ0UsNEJBQUE7QWpENjFQSjs7QWlEOTFQRTtFQUNFLDBCQUFBO0FqRGkyUEo7O0FpRGwyUEU7RUFDRSxrQ0FBQTtBakRxMlBKOztBaURqMlBFO0VBQ0Usc0NBQUE7QWpEbzJQSjs7QWlEcjJQRTtFQUNFLG9DQUFBO0FqRHcyUEo7O0FpRHoyUEU7RUFDRSxrQ0FBQTtBakQ0MlBKOztBaUQ3MlBFO0VBQ0UseUNBQUE7QWpEZzNQSjs7QWlEajNQRTtFQUNFLHdDQUFBO0FqRG8zUEo7O0FpRHIzUEU7RUFDRSx3Q0FBQTtBakR3M1BKOztBaUR6M1BFO0VBQ0UsaUNBQUE7QWpENDNQSjs7QWlENzNQRTtFQUNFLCtCQUFBO0FqRGc0UEo7O0FpRGo0UEU7RUFDRSxnQ0FBQTtBakRvNFBKOztBaURyNFBFO0VBQ0UsaUNBQUE7QWpEdzRQSjs7QWlEcDRQRTtFQUNFLG9DQUFBO0FqRHU0UEo7O0FpRHg0UEU7RUFDRSxrQ0FBQTtBakQyNFBKOztBaUQ1NFBFO0VBQ0UsZ0NBQUE7QWpEKzRQSjs7QWlEaDVQRTtFQUNFLHVDQUFBO0FqRG01UEo7O0FpRHA1UEU7RUFDRSxzQ0FBQTtBakR1NVBKOztBaUR4NVBFO0VBQ0Usc0NBQUE7QWpEMjVQSjs7QWlENTVQRTtFQUNFLGlDQUFBO0FqRCs1UEo7O0FpRGg2UEU7RUFDRSwrQkFBQTtBakRtNlBKOztBaURwNlBFO0VBQ0UsNkJBQUE7QWpEdTZQSjs7QWlEeDZQRTtFQUNFLGtDQUFBO0FqRDI2UEo7O0FpRHY2UEU7RUFDRSwrQkFBQTtBakQwNlBKOztBaUQzNlBFO0VBQ0Usa0NBQUE7QWpEODZQSjs7QWlELzZQRTtFQUNFLGdDQUFBO0Fq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Tjs7QXVEbmpSSTtFQUNFLDRCQUFBO0F2RHNqUk47O0F1RHZqUkk7RUFDRSwwQkFBQTtBdkQwalJOOztBdUQzalJJO0VBQ0UsNEJBQUE7QXZEOGpSTjs7QXVEL2pSSTtFQUNFLDZCQUFBO0F2RGtrUk47O0F1RG5rUkk7RUFDRSwwQkFBQTtBdkRza1JOOztBdUR2a1JJO0VBQ0UsNkJBQUE7QXZEMGtSTjs7QUsxK1FFO0VrRGpHRTtJQUNFLDBCQUFBO0V2RCtrUko7RXVEaGxSRTtJQUNFLDRCQUFBO0V2RGtsUko7RXVEbmxSRTtJQUNFLDBCQUFBO0V2RHFsUko7RXVEdGxSRTtJQUNFLDRCQUFBO0V2RHdsUko7RXVEemxSRTtJQUNFLDZCQUFBO0V2RDJsUko7RXVENWxSRTtJQUNFLDBCQUFBO0V2RDhsUko7RXVEL2xSRTtJQUNFLDZCQUFBO0V2RGltUko7QUFDRjtBSzkvUUU7RWtEckdFO0lBQ0UsMEJBQUE7RXZEc21SSjtFdUR2bVJFO0lBQ0UsNEJBQUE7RXZEeW1SSjtFdUQxbVJFO0lBQ0UsMEJBQUE7RXZENG1SSjtFdUQ3bVJFO0lBQ0UsNEJBQUE7RXZEK21SSjtFdURoblJFO0lBQ0UsNkJBQUE7RXZEa25SSjtFdURublJFO0lBQ0UsMEJBQUE7RXZEcW5SSjtFdUR0blJFO0lBQ0UsNkJBQUE7RXZEd25SSjtBQUNGO0FLN2dSRTtFa0Q3R0U7SUFDRSwwQkFBQTtFdkQ2blJKO0V1RDluUkU7SUFDRSw0QkFBQTtFdkRnb1JKO0V1RGpvUkU7SUFDRSwwQkFBQTtFdkRtb1JKO0V1RHBvUkU7SUFDRSw0QkFBQTtFdkRzb1JKO0V1RHZvUkU7SUFDRSw2QkFBQTtFdkR5b1JKO0V1RDFvUkU7SUFDRSwwQkFBQTtFdkQ0b1JKO0V1RDdvUkU7SUFDRSw2QkFBQTtFdkQrb1JKO0FBQ0Y7QUtoaVJFO0VrRGpIRTtJQUNFLDBCQUFBO0V2RG9wUko7RXVEcnBSRTtJQUNFLDRCQUFBO0V2RHVwUko7RXVEeHBSRTtJQUNFLDBCQUFBO0V2RDBwUko7RXVEM3BSRTtJQUNFLDRCQUFBO0V2RDZwUko7RXVEOXBSRTtJQUNFLDZCQUFBO0V2RGdxUko7RXVEanFSRTtJQUNFLDBCQUFBO0V2RG1xUko7RXVEcHFSRTtJQUNFLDZCQUFBO0V2RHNxUko7QUFDRjtBS3hpUkk7RWtEaElBO0lBQ0UsMEJBQUE7RXZEMnFSSjtFdUQ1cVJFO0lBQ0UsNEJBQUE7RXZEOHFSSjtFdUQvcVJFO0lBQ0UsMEJBQUE7RXZEaXJSSjtFdURsclJFO0lBQ0UsNEJBQUE7RXZEb3JSSjtFdURyclJFO0lBQ0UsNkJBQUE7RXZEdXJSSjtFdUR4clJFO0lBQ0UsMEJBQUE7RXZEMHJSSjtFdUQzclJFO0lBQ0UsNkJBQUE7RXZENnJSSjtBQUNGO0FLaGpSSTtFa0QvSUE7SUFDRSwwQkFBQTtFdkRrc1JKO0V1RG5zUkU7SUFDRSw0QkFBQTtFdkRxc1JKO0V1RHRzUkU7SUFDRSwwQkFBQTtFdkR3c1JKO0V1RHpzUkU7SUFDRSw0QkFBQTtFdkQyc1JKO0V1RDVzUkU7SUFDRSw2QkFBQTtFdkQ4c1JKO0V1RC9zUkU7SUFDRSwwQkFBQTtFdkRpdFJKO0V1RGx0UkU7SUFDRSw2QkFBQTtFdkRvdFJKO0FBQ0Y7QXVENXJSRTtFQUNFLDZCQUFBO0F2RDhyUko7O0F1RC9yUkU7RUFDRSw4QkFBQTtBdkRrc1JKOztBdURuc1JFO0VBQ0UsMkJBQUE7QXZEc3NSSjs7QXVEdnNSRTtFQUNFLDRCQUFBO0F2RDBzUko7O0FLcG9SRTtFa0RsRUU7SUFDRSw2QkFBQTtFdkQwc1JKO0FBQ0Y7QUt0b1JFO0VrRG5FRTtJQUNFLDZCQUFBO0V2RDRzUko7QUFDRjtBS3ZvUkU7RWtEcEVFO0lBQ0UsNkJBQUE7RXZEOHNSSjtBQUNGO0FLeG9SRTtFa0RyRUU7SUFDRSw2QkFBQTtFdkRndFJKO0FBQ0Y7QUt6b1JFO0VrRHRFRTtJQUNFLDZCQUFBO0V2RGt0Uko7QUFDRjtBS3pvUkk7RWtEeEVBO0lBQ0UsNkJBQUE7RXZEb3RSSjtBQUNGO0FLcG9SSTtFa0QvRUE7SUFDRSw2QkFBQTtFdkRzdFJKO0FBQ0Y7QUtwb1JJO0VrRGpGQTtJQUNFLDZCQUFBO0V2RHd0Uko7QUFDRjtBSy9uUkk7RWtEeEZBO0lBQ0UsNkJBQUE7RXZEMHRSSjtBQUNGO0FLbHJSRTtFa0RsRUU7SUFDRSw4QkFBQTtFdkR1dlJKO0FBQ0Y7QUtuclJFO0VrRG5FRTtJQUNFLDhCQUFBO0V2RHl2Uko7QUFDRjtBS3ByUkU7RWtEcEVFO0lBQ0UsOEJBQUE7RXZEMnZSSjtBQUNGO0FLcnJSRTtFa0RyRUU7SUFDRSw4QkFBQTtFdkQ2dlJKO0FBQ0Y7QUt0clJFO0VrRHRFRTtJQUNFLDhCQUFBO0V2RCt2Uko7QUFDRjtBS3RyUkk7RWtEeEVBO0lBQ0UsOEJBQUE7RXZEaXdSSjtBQUNGO0FLanJSSTtFa0QvRUE7SUFDRSw4QkFBQTtFdkRtd1JKO0FBQ0Y7QUtqclJJO0VrRGpGQTtJQUNFLDhCQUFBO0V2RHF3Uko7QUFDRjtBSzVxUkk7RWtEeEZBO0lBQ0UsOEJBQUE7RXZEdXdSSjtBQUNGO0FLL3RSRTtFa0RsRUU7SUFDRSwyQkFBQTtFdkRveVJKO0FBQ0Y7QUtodVJFO0VrRG5FRTtJQUNFLDJCQUFBO0V2RHN5Uko7QUFDRjtBS2p1UkU7RWtEcEVFO0lBQ0UsMkJBQUE7RXZEd3lSSjtBQUNGO0FLbHVSRTtFa0RyRUU7SUFDRSwyQkFBQTtFdkQweVJKO0FBQ0Y7QUtudVJFO0VrRHRFRTtJQUNFLDJCQUFBO0V2RDR5Uko7QUFDRjtBS251Ukk7RWtEeEVBO0lBQ0UsMkJBQUE7RXZEOHlSSjtBQUNGO0FLOXRSSTtFa0QvRUE7SUFDRSwyQkFBQTtFdkRnelJKO0FBQ0Y7QUs5dFJJO0VrRGpGQTtJQUNFLDJCQUFBO0V2RGt6Uko7QUFDRjtBS3p0Ukk7RWtEeEZBO0lBQ0UsMkJBQUE7RXZEb3pSSjtBQUNGO0FLNXdSRTtFa0RsRUU7SUFDRSw0QkFBQTtFdkRpMVJKO0FBQ0Y7QUs3d1JFO0VrRG5FRTtJQUNFLDRCQUFBO0V2RG0xUko7QUFDRjtBSzl3UkU7RWtEcEVFO0lBQ0UsNEJBQUE7RXZEcTFSSjtBQUNGO0FLL3dSRTtFa0RyRUU7SUFDRSw0QkFBQTtFdkR1MVJKO0FBQ0Y7QUtoeFJFO0VrRHRFRTtJQUNFLDRCQUFBO0V2RHkxUko7QUFDRjtBS2h4Ukk7RWtEeEVBO0lBQ0UsNEJBQUE7RXZEMjFSSjtBQUNGO0FLM3dSSTtFa0QvRUE7SUFDRSw0QkFBQTtFdkQ2MVJKO0FBQ0Y7QUszd1JJO0VrRGpGQTtJQUNFLDRCQUFBO0V2RCsxUko7QUFDRjtBS3R3Ukk7RWtEeEZBO0lBQ0UsNEJBQUE7RXZEaTJSSjtBQUNGO0F1RGgyUkE7RUFDRSxxQ0FBQTtBdkRrMlJGOztBdURoMlJBO0VBQ0Usb0NBQUE7QXZEbTJSRjs7QXVEajJSQTtFQUNFLG9DQUFBO0F2RG8yUkY7O0F1RGwyUkE7RUFDRSw2QkFBQTtBdkRxMlJGOztBdURuMlJBO0VBQ0UscUNBQUE7QXZEczJSRjs7QXVEcDJSQTtFQUNFLDJCQUFBO0F2RHUyUkY7O0F1RHQyUkE7RUFDRSwyQkFBQTtBdkR5MlJGOztBdUR4MlJBO0VBQ0UsMkJBQUE7QXZEMjJSRjs7QXVEMTJSQTtFQUNFLDJCQUFBO0F2RDYyUkY7O0F1RDUyUkE7RUFDRSwyQkFBQTtBdkQrMlJGOztBdUQ3MlJBO0VBQ0UsK0xBQUE7QXZEZzNSRjs7QXVEOTJSQTtFQUNFLCtMQUFBO0F2RGkzUkY7O0F1RC8yUkE7RUFDRSwrTEFBQTtBdkRrM1JGOztBdURoM1JBO0VBQ0UsaUNBQUE7QXZEbTNSRjs7QXVEajNSQTtFQUNFLGlDQUFBO0F2RG8zUkY7O0F3RHI5UkU7RUFDRSx5QkFBQTtBeER3OVJKOztBS3gzUkU7RW1EOUZFO0lBQ0UseUJBQUE7RXhEMDlSSjtBQUNGO0FLMTNSRTtFbUQvRkU7SUFDRSx5QkFBQTtFeEQ0OVJKO0FBQ0Y7QUszM1JFO0VtRGhHRTtJQUNFLHlCQUFBO0V4RDg5Uko7QUFDRjtBSzUzUkU7RW1EakdFO0lBQ0UseUJBQUE7RXhEZytSSjtBQUNGO0FLNzNSRTtFbURsR0U7SUFDRSx5QkFBQTtFeERrK1JKO0FBQ0Y7QUs3M1JJO0VtRHBHQTtJQUNFLHlCQUFBO0V4RG8rUko7QUFDRjtBS3gzUkk7RW1EM0dBO0lBQ0UseUJBQUE7RXhEcytSSjtBQUNGO0FLeDNSSTtFbUQ3R0E7SUFDRSx5QkFBQTtFeER3K1JKO0FBQ0Y7QUtuM1JJO0VtRHBIQTtJQUNFLHlCQUFBO0V4RDArUko7QUFDRjtBd0R2Z1NFO0VBQ0Usd0JBQUE7QXhEeWdTSjs7QUt6NlJFO0VtRDlGRTtJQUNFLHdCQUFBO0V4RDJnU0o7QUFDRjtBSzM2UkU7RW1EL0ZFO0lBQ0Usd0JBQUE7RXhENmdTSjtBQUNGO0FLNTZSRTtFbURoR0U7SUFDRSx3QkFBQTtFeEQrZ1NKO0FBQ0Y7QUs3NlJFO0VtRGpHRTtJQUNFLHdCQUFBO0V4RGloU0o7QUFDRjtBSzk2UkU7RW1EbEdFO0lBQ0Usd0JBQUE7RXhEbWhTSjtBQUNGO0FLOTZSSTtFbURwR0E7SUFDRSx3QkFBQTtFeERxaFNKO0FBQ0Y7QUt6NlJJO0VtRDNHQTtJQUNFLHdCQUFBO0V4RHVoU0o7QUFDRjtBS3o2Ukk7RW1EN0dBO0lBQ0Usd0JBQUE7RXhEeWhTSjtBQUNGO0FLcDZSSTtFbURwSEE7SUFDRSx3QkFBQTtFeEQyaFNKO0FBQ0Y7QXdEeGpTRTtFQUNFLDBCQUFBO0F4RDBqU0o7O0FLMTlSRTtFbUQ5RkU7SUFDRSwwQkFBQTtFeEQ0alNKO0FBQ0Y7QUs1OVJFO0VtRC9GRTtJQUNFLDBCQUFBO0V4RDhqU0o7QUFDRjtBSzc5UkU7RW1EaEdFO0lBQ0UsMEJBQUE7RXhEZ2tTSjtBQUNGO0FLOTlSRTtFbURqR0U7SUFDRSwwQkFBQTtFeERra1NKO0FBQ0Y7QUsvOVJFO0VtRGxHRTtJQUNFLDBCQUFBO0V4RG9rU0o7QUFDRjtBSy85Ukk7RW1EcEdBO0lBQ0UsMEJBQUE7RXhEc2tTSjtBQUNGO0FLMTlSSTtFbUQzR0E7SUFDRSwwQkFBQTtFeER3a1NKO0FBQ0Y7QUsxOVJJO0VtRDdHQTtJQUNFLDBCQUFBO0V4RDBrU0o7QUFDRjtBS3I5Ukk7RW1EcEhBO0lBQ0UsMEJBQUE7RXhENGtTSjtBQUNGO0F3RHptU0U7RUFDRSxnQ0FBQTtBeEQybVNKOztBSzNnU0U7RW1EOUZFO0lBQ0UsZ0NBQUE7RXhENm1TSjtBQUNGO0FLN2dTRTtFbUQvRkU7SUFDRSxnQ0FBQTtFeEQrbVNKO0FBQ0Y7QUs5Z1NFO0VtRGhHRTtJQUNFLGdDQUFBO0V4RGluU0o7QUFDRjtBSy9nU0U7RW1EakdFO0lBQ0UsZ0NBQUE7RXhEbW5TSjtBQUNGO0FLaGhTRTtFbURsR0U7SUFDRSxnQ0FBQTtFeERxblNKO0FBQ0Y7QUtoaFNJO0VtRHBHQTtJQUNFLGdDQUFBO0V4RHVuU0o7QUFDRjtBSzNnU0k7RW1EM0dBO0lBQ0UsZ0NBQUE7RXhEeW5TSjtBQUNGO0FLM2dTSTtFbUQ3R0E7SUFDRSxnQ0FBQTtFeEQyblNKO0FBQ0Y7QUt0Z1NJO0VtRHBIQTtJQUNFLGdDQUFBO0V4RDZuU0o7QUFDRjtBd0QxcFNFO0VBQ0UsK0JBQUE7QXhENHBTSjs7QUs1alNFO0VtRDlGRTtJQUNFLCtCQUFBO0V4RDhwU0o7QUFDRjtBSzlqU0U7RW1EL0ZFO0lBQ0UsK0JBQUE7RXhEZ3FTSjtBQUNGO0FLL2pTRTtFbURoR0U7SUFDRSwrQkFBQTtFeERrcVNKO0FBQ0Y7QUtoa1NFO0VtRGpHRTtJQUNFLCtCQUFBO0V4RG9xU0o7QUFDRjtBS2prU0U7RW1EbEdFO0lBQ0UsK0JBQUE7RXhEc3FTSjtBQUNGO0FLamtTSTtFbURwR0E7SUFDRSwrQkFBQTtFeER3cVNKO0FBQ0Y7QUs1alNJO0VtRDNHQTtJQUNFLCtCQUFBO0V4RDBxU0o7QUFDRjtBSzVqU0k7RW1EN0dBO0lBQ0UsK0JBQUE7RXhENHFTSjtBQUNGO0FLdmpTSTtFbURwSEE7SUFDRSwrQkFBQTtFeEQ4cVNKO0FBQ0Y7QXdEN3FTQTtFQUNFLHdCQUFBO0F4RCtxU0Y7O0F3RDdxU0E7RUFDRSx1QkFBQTtFQUNBLGlDQUFBO0VBQ0EseUJBQUE7RUFDQSwyQkFBQTtFQUNBLHFCQUFBO0VBQ0EsNkJBQUE7RUFDQSw4QkFBQTtFQUNBLHdCQUFBO0F4RGdyU0Y7O0FLeG5TRTtFbURyREE7SUFDRSx3QkFBQTtFeERpclNGO0FBQ0Y7QUsxblNFO0VtRHJEQTtJQUNFLHdCQUFBO0V4RGtyU0Y7QUFDRjtBSzNuU0U7RW1EckRBO0lBQ0Usd0JBQUE7RXhEbXJTRjtBQUNGO0FLNW5TRTtFbURyREE7SUFDRSx3QkFBQTtFeERvclNGO0FBQ0Y7QUs3blNFO0VtRHJEQTtJQUNFLHdCQUFBO0V4RHFyU0Y7QUFDRjtBSzduU0k7RW1EdERGO0lBQ0Usd0JBQUE7RXhEc3JTRjtBQUNGO0FLeG5TSTtFbUQ1REY7SUFDRSx3QkFBQTtFeER1clNGO0FBQ0Y7QUt4blNJO0VtRDdERjtJQUNFLHdCQUFBO0V4RHdyU0Y7QUFDRjtBS25uU0k7RW1EbkVGO0lBQ0Usd0JBQUE7RXhEeXJTRjtBQUNGO0F3RHhyU0E7RUFDRSw2QkFBQTtBeEQwclNGOztBS3pxU0U7RW1EZEE7SUFDRSw2QkFBQTtFeEQyclNGO0FBQ0Y7QUszcVNFO0VtRGRBO0lBQ0UsNkJBQUE7RXhENHJTRjtBQUNGO0FLNXFTRTtFbURkQTtJQUNFLDZCQUFBO0V4RDZyU0Y7QUFDRjtBSzdxU0U7RW1EZEE7SUFDRSw2QkFBQTtFeEQ4clNGO0FBQ0Y7QUs5cVNFO0VtRGRBO0lBQ0UsNkJBQUE7RXhEK3JTRjtBQUNGO0FLOXFTSTtFbURmRjtJQUNFLDZCQUFBO0V4RGdzU0Y7QUFDRjtBS3pxU0k7RW1EckJGO0lBQ0UsNkJBQUE7RXhEaXNTRjtBQUNGO0FLenFTSTtFbUR0QkY7SUFDRSw2QkFBQTtFeERrc1NGO0FBQ0Y7QUtwcVNJO0VtRDVCRjtJQUNFLDZCQUFBO0V4RG1zU0Y7QUFDRjtBeUQ3elNBLGlCQUFBO0FDV0E7RUFDRSxvQkFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLDhCQUFBO0ExRHF6U0Y7QTBEcHpTRTtFQUNFLGdCQUFBO0ExRHN6U0o7QTBEcHpTSTtFQUNFLG1CQUFBO0ExRHN6U047QTBEanpTSTtFQUNFLGtDQUhNO0VBSU4scUJBSGE7QTFEc3pTbkI7QTBEbHpTTTs7RUFFRSxjQUFBO0ExRG96U1I7QTBEbnpTTTtFQUNFLHFCQVJXO0ExRDZ6U25CO0EwRHB6U007RUFDRSw0QkFBQTtBMURzelNSO0EwRHJ6U1E7O0VBRUUscUJBYlM7QTFEbzBTbkI7QUsxdVNFO0VxRDVFSTtJQUVJLGtDQWpCRTtFMUR5MFNWO0FBQ0Y7QTBEeHpTTTs7RUFFRSw0QkFBQTtBMUQwelNSO0EwRHZ6U1E7OztFQUVFLHlCQUFBO0VBQ0EscUJBekJTO0ExRG0xU25CO0EwRHh6U1E7RUFDRSxxQkE1QlM7RUE2QlQsWUFBQTtBMUQwelNWO0EwRHp6U1U7RUFDRSxVQUFBO0ExRDJ6U1o7QTBEenpTVTtFQUNFLGtDQUFBO0VBQ0EsVUFBQTtBMUQyelNaO0EwRHh6U1U7RUFDRSxxQkF2Q087QTFEaTJTbkI7QTBEenpTWTtFQUNFLHVDQUFBO0ExRDJ6U2Q7QTBEenpTWTtFQUVFLGdDQTdDSztFQThDTCw0QkE5Q0s7RUErQ0wsdUJBaERGO0ExRDAyU1o7QTBEdnpTUTtFQUdFLHVGQUFBO0ExRHV6U1Y7QUs5eFNFO0VxRHZCVTtJQUNFLHVGQUFBO0UxRHd6U1o7QUFDRjtBMERoM1NJO0VBQ0UsZ0NBSE07RUFJTix1QkFIYTtBMURxM1NuQjtBMERqM1NNOztFQUVFLGNBQUE7QTFEbTNTUjtBMERsM1NNO0VBQ0UsdUJBUlc7QTFENDNTbkI7QTBEbjNTTTtFQUNFLCtCQUFBO0ExRHEzU1I7QTBEcDNTUTs7RUFFRSx1QkFiUztBMURtNFNuQjtBS3p5U0U7RXFENUVJO0lBRUksZ0NBakJFO0UxRHc0U1Y7QUFDRjtBMER2M1NNOztFQUVFLCtCQUFBO0ExRHkzU1I7QTBEdDNTUTs7O0VBRUUsdUJBQUE7RUFDQSx1QkF6QlM7QTFEazVTbkI7QTBEdjNTUTtFQUNFLHVCQTVCUztFQTZCVCxZQUFBO0ExRHkzU1Y7QTBEeDNTVTtFQUNFLFVBQUE7QTFEMDNTWjtBMER4M1NVO0VBQ0UsZ0NBQUE7RUFDQSxVQUFBO0ExRDAzU1o7QTBEdjNTVTtFQUNFLHVCQXZDTztBMURnNlNuQjtBMER4M1NZO0VBQ0UsdUNBQUE7QTFEMDNTZDtBMER4M1NZO0VBRUUsa0NBN0NLO0VBOENMLDhCQTlDSztFQStDTCxxQkFoREY7QTFEeTZTWjtBMER0M1NRO0VBR0UscUZBQUE7QTFEczNTVjtBSzcxU0U7RXFEdkJVO0lBQ0UscUZBQUE7RTFEdTNTWjtBQUNGO0EwRC82U0k7RUFDRSxpQ0FITTtFQUlOLHlCQUhhO0ExRG83U25CO0EwRGg3U007O0VBRUUsY0FBQTtBMURrN1NSO0EwRGo3U007RUFDRSx5QkFSVztBMUQyN1NuQjtBMERsN1NNO0VBQ0UseUJBQUE7QTFEbzdTUjtBMERuN1NROztFQUVFLHlCQWJTO0ExRGs4U25CO0FLeDJTRTtFcUQ1RUk7SUFFSSxpQ0FqQkU7RTFEdThTVjtBQUNGO0EwRHQ3U007O0VBRUUseUJBQUE7QTFEdzdTUjtBMERyN1NROzs7RUFFRSx5QkFBQTtFQUNBLHlCQXpCUztBMURpOVNuQjtBMER0N1NRO0VBQ0UseUJBNUJTO0VBNkJULFlBQUE7QTFEdzdTVjtBMER2N1NVO0VBQ0UsVUFBQTtBMUR5N1NaO0EwRHY3U1U7RUFDRSxpQ0FBQTtFQUNBLFVBQUE7QTFEeTdTWjtBMER0N1NVO0VBQ0UseUJBdkNPO0ExRCs5U25CO0EwRHY3U1k7RUFDRSx1Q0FBQTtBMUR5N1NkO0EwRHY3U1k7RUFFRSxvQ0E3Q0s7RUE4Q0wsZ0NBOUNLO0VBK0NMLHNCQWhERjtBMUR3K1NaO0EwRHI3U1E7RUFHRSxzRkFBQTtBMURxN1NWO0FLNTVTRTtFcUR2QlU7SUFDRSxzRkFBQTtFMURzN1NaO0FBQ0Y7QTBEOStTSTtFQUNFLGlDQUhNO0VBSU4sV0FIYTtBMURtL1NuQjtBMEQvK1NNOztFQUVFLGNBQUE7QTFEaS9TUjtBMERoL1NNO0VBQ0UsV0FSVztBMUQwL1NuQjtBMERqL1NNO0VBQ0UsK0JBQUE7QTFEbS9TUjtBMERsL1NROztFQUVFLFdBYlM7QTFEaWdUbkI7QUt2NlNFO0VxRDVFSTtJQUVJLGlDQWpCRTtFMURzZ1RWO0FBQ0Y7QTBEci9TTTs7RUFFRSwrQkFBQTtBMUR1L1NSO0EwRHAvU1E7OztFQUVFLHlCQUFBO0VBQ0EsV0F6QlM7QTFEZ2hUbkI7QTBEci9TUTtFQUNFLFdBNUJTO0VBNkJULFlBQUE7QTFEdS9TVjtBMER0L1NVO0VBQ0UsVUFBQTtBMUR3L1NaO0EwRHQvU1U7RUFDRSxpQ0FBQTtFQUNBLFVBQUE7QTFEdy9TWjtBMERyL1NVO0VBQ0UsV0F2Q087QTFEOGhUbkI7QTBEdC9TWTtFQUNFLHVDQUFBO0ExRHcvU2Q7QTBEdC9TWTtFQUVFLHNCQTdDSztFQThDTCxrQkE5Q0s7RUErQ0wsc0JBaERGO0ExRHVpVFo7QTBEcC9TUTtFQUdFLHdGQUFBO0ExRG8vU1Y7QUszOVNFO0VxRHZCVTtJQUNFLHdGQUFBO0UxRHEvU1o7QUFDRjtBMEQ3aVRJO0VBQ0UscUNBSE07RUFJTixXQUhhO0ExRGtqVG5CO0EwRDlpVE07O0VBRUUsY0FBQTtBMURnalRSO0EwRC9pVE07RUFDRSxXQVJXO0ExRHlqVG5CO0EwRGhqVE07RUFDRSwrQkFBQTtBMURralRSO0EwRGpqVFE7O0VBRUUsV0FiUztBMURna1RuQjtBS3QrU0U7RXFENUVJO0lBRUkscUNBakJFO0UxRHFrVFY7QUFDRjtBMERwalRNOztFQUVFLCtCQUFBO0ExRHNqVFI7QTBEbmpUUTs7O0VBRUUseUJBQUE7RUFDQSxXQXpCUztBMUQra1RuQjtBMERwalRRO0VBQ0UsV0E1QlM7RUE2QlQsWUFBQTtBMURzalRWO0EwRHJqVFU7RUFDRSxVQUFBO0ExRHVqVFo7QTBEcmpUVTtFQUNFLHFDQUFBO0VBQ0EsVUFBQTtBMUR1alRaO0EwRHBqVFU7RUFDRSxXQXZDTztBMUQ2bFRuQjtBMERyalRZO0VBQ0UsdUNBQUE7QTFEdWpUZDtBMERyalRZO0VBRUUsc0JBN0NLO0VBOENMLGtCQTlDSztFQStDTCwwQkFoREY7QTFEc21UWjtBMERualRRO0VBR0UsNEZBQUE7QTFEbWpUVjtBSzFoVEU7RXFEdkJVO0lBQ0UsNEZBQUE7RTFEb2pUWjtBQUNGO0EwRDVtVEk7RUFDRSxvQ0FITTtFQUlOLFdBSGE7QTFEaW5UbkI7QTBEN21UTTs7RUFFRSxjQUFBO0ExRCttVFI7QTBEOW1UTTtFQUNFLFdBUlc7QTFEd25UbkI7QTBEL21UTTtFQUNFLCtCQUFBO0ExRGluVFI7QTBEaG5UUTs7RUFFRSxXQWJTO0ExRCtuVG5CO0FLcmlURTtFcUQ1RUk7SUFFSSxvQ0FqQkU7RTFEb29UVjtBQUNGO0EwRG5uVE07O0VBRUUsK0JBQUE7QTFEcW5UUjtBMERsblRROzs7RUFFRSx5QkFBQTtFQUNBLFdBekJTO0ExRDhvVG5CO0EwRG5uVFE7RUFDRSxXQTVCUztFQTZCVCxZQUFBO0ExRHFuVFY7QTBEcG5UVTtFQUNFLFVBQUE7QTFEc25UWjtBMERwblRVO0VBQ0Usb0NBQUE7RUFDQSxVQUFBO0ExRHNuVFo7QTBEbm5UVTtFQUNFLFdBdkNPO0ExRDRwVG5CO0EwRHBuVFk7RUFDRSx1Q0FBQTtBMURzblRkO0EwRHBuVFk7RUFFRSxzQkE3Q0s7RUE4Q0wsa0JBOUNLO0VBK0NMLHlCQWhERjtBMURxcVRaO0EwRGxuVFE7RUFHRSwyRkFBQTtBMURrblRWO0FLemxURTtFcUR2QlU7SUFDRSwyRkFBQTtFMURtblRaO0FBQ0Y7QTBEM3FUSTtFQUNFLG9DQUhNO0VBSU4sV0FIYTtBMURnclRuQjtBMEQ1cVRNOztFQUVFLGNBQUE7QTFEOHFUUjtBMEQ3cVRNO0VBQ0UsV0FSVztBMUR1clRuQjtBMEQ5cVRNO0VBQ0UsK0JBQUE7QTFEZ3JUUjtBMEQvcVRROztFQUVFLFdBYlM7QTFEOHJUbkI7QUtwbVRFO0VxRDVFSTtJQUVJLG9DQWpCRTtFMURtc1RWO0FBQ0Y7QTBEbHJUTTs7RUFFRSwrQkFBQTtBMURvclRSO0EwRGpyVFE7OztFQUVFLHlCQUFBO0VBQ0EsV0F6QlM7QTFENnNUbkI7QTBEbHJUUTtFQUNFLFdBNUJTO0VBNkJULFlBQUE7QTFEb3JUVjtBMERuclRVO0VBQ0UsVUFBQTtBMURxclRaO0EwRG5yVFU7RUFDRSxvQ0FBQTtFQUNBLFVBQUE7QTFEcXJUWjtBMERsclRVO0VBQ0UsV0F2Q087QTFEMnRUbkI7QTBEbnJUWTtFQUNFLHVDQUFBO0ExRHFyVGQ7QTBEbnJUWTtFQUVFLHNCQTdDSztFQThDTCxrQkE5Q0s7RUErQ0wseUJBaERGO0ExRG91VFo7QTBEanJUUTtFQUdFLDJGQUFBO0ExRGlyVFY7QUt4cFRFO0VxRHZCVTtJQUNFLDJGQUFBO0UxRGtyVFo7QUFDRjtBMEQxdVRJO0VBQ0Usb0NBSE07RUFJTixXQUhhO0ExRCt1VG5CO0EwRDN1VE07O0VBRUUsY0FBQTtBMUQ2dVRSO0EwRDV1VE07RUFDRSxXQVJXO0ExRHN2VG5CO0EwRDd1VE07RUFDRSwrQkFBQTtBMUQrdVRSO0EwRDl1VFE7O0VBRUUsV0FiUztBMUQ2dlRuQjtBS25xVEU7RXFENUVJO0lBRUksb0NBakJFO0UxRGt3VFY7QUFDRjtBMERqdlRNOztFQUVFLCtCQUFBO0ExRG12VFI7QTBEaHZUUTs7O0VBRUUseUJBQUE7RUFDQSxXQXpCUztBMUQ0d1RuQjtBMERqdlRRO0VBQ0UsV0E1QlM7RUE2QlQsWUFBQTtBMURtdlRWO0EwRGx2VFU7RUFDRSxVQUFBO0ExRG92VFo7QTBEbHZUVTtFQUNFLG9DQUFBO0VBQ0EsVUFBQTtBMURvdlRaO0EwRGp2VFU7RUFDRSxXQXZDTztBMUQweFRuQjtBMERsdlRZO0VBQ0UsdUNBQUE7QTFEb3ZUZDtBMERsdlRZO0VBRUUsc0JBN0NLO0VBOENMLGtCQTlDSztFQStDTCx5QkFoREY7QTFEbXlUWjtBMERodlRRO0VBR0UsMkZBQUE7QTFEZ3ZUVjtBS3Z0VEU7RXFEdkJVO0lBQ0UsMkZBQUE7RTFEaXZUWjtBQUNGO0EwRHp5VEk7RUFDRSxvQ0FITTtFQUlOLHlCQUhhO0ExRDh5VG5CO0EwRDF5VE07O0VBRUUsY0FBQTtBMUQ0eVRSO0EwRDN5VE07RUFDRSx5QkFSVztBMURxelRuQjtBMEQ1eVRNO0VBQ0UseUJBQUE7QTFEOHlUUjtBMEQ3eVRROztFQUVFLHlCQWJTO0ExRDR6VG5CO0FLbHVURTtFcUQ1RUk7SUFFSSxvQ0FqQkU7RTFEaTBUVjtBQUNGO0EwRGh6VE07O0VBRUUseUJBQUE7QTFEa3pUUjtBMEQveVRROzs7RUFFRSx5QkFBQTtFQUNBLHlCQXpCUztBMUQyMFRuQjtBMERoelRRO0VBQ0UseUJBNUJTO0VBNkJULFlBQUE7QTFEa3pUVjtBMERqelRVO0VBQ0UsVUFBQTtBMURtelRaO0EwRGp6VFU7RUFDRSxvQ0FBQTtFQUNBLFVBQUE7QTFEbXpUWjtBMERoelRVO0VBQ0UseUJBdkNPO0ExRHkxVG5CO0EwRGp6VFk7RUFDRSx1Q0FBQTtBMURtelRkO0EwRGp6VFk7RUFFRSxvQ0E3Q0s7RUE4Q0wsZ0NBOUNLO0VBK0NMLHlCQWhERjtBMURrMlRaO0EwRC95VFE7RUFHRSwyRkFBQTtBMUQreVRWO0FLdHhURTtFcUR2QlU7SUFDRSwyRkFBQTtFMURnelRaO0FBQ0Y7QTBEeDJUSTtFQUNFLG9DQUhNO0VBSU4sV0FIYTtBMUQ2MlRuQjtBMER6MlRNOztFQUVFLGNBQUE7QTFEMjJUUjtBMEQxMlRNO0VBQ0UsV0FSVztBMURvM1RuQjtBMEQzMlRNO0VBQ0UsK0JBQUE7QTFENjJUUjtBMEQ1MlRROztFQUVFLFdBYlM7QTFEMjNUbkI7QUtqeVRFO0VxRDVFSTtJQUVJLG9DQWpCRTtFMURnNFRWO0FBQ0Y7QTBELzJUTTs7RUFFRSwrQkFBQTtBMURpM1RSO0EwRDkyVFE7OztFQUVFLHlCQUFBO0VBQ0EsV0F6QlM7QTFEMDRUbkI7QTBELzJUUTtFQUNFLFdBNUJTO0VBNkJULFlBQUE7QTFEaTNUVjtBMERoM1RVO0VBQ0UsVUFBQTtBMURrM1RaO0EwRGgzVFU7RUFDRSxvQ0FBQTtFQUNBLFVBQUE7QTFEazNUWjtBMEQvMlRVO0VBQ0UsV0F2Q087QTFEdzVUbkI7QTBEaDNUWTtFQUNFLHVDQUFBO0ExRGszVGQ7QTBEaDNUWTtFQUVFLHNCQTdDSztFQThDTCxrQkE5Q0s7RUErQ0wseUJBaERGO0ExRGk2VFo7QTBEOTJUUTtFQUdFLDJGQUFBO0ExRDgyVFY7QUtyMVRFO0VxRHZCVTtJQUNFLDJGQUFBO0UxRCsyVFo7QUFDRjtBMEQ3MlRJO0VBQ0UsZUFoRm9CO0ExRCs3VDFCO0FLejFURTtFcURuQkk7SUFDRSxvQkFuRm1CO0UxRGs4VHpCO0FBQ0Y7QUs5MVRFO0VxRGZJO0lBQ0UsbUJBdEZrQjtFMURzOFR4QjtBQUNGO0EwRDcyVEk7RUFDRSxtQkFBQTtFQUNBLGFBQUE7QTFEKzJUTjtBMEQ5MlRNO0VBQ0UsWUFBQTtFQUNBLGNBQUE7QTFEZzNUUjtBMEQvMlRFO0VBQ0UsZ0JBQUE7QTFEaTNUSjtBMERoM1RFO0VBQ0UsaUJBQUE7QTFEazNUSjs7QTBEOTJUQTtFQUVFLGdCQUFBO0ExRGczVEY7QTBELzJURTtFQUNFLFNBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7RUFDQSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxxQ0FBQTtBMURpM1RKO0EwRC8yVEU7RUFDRSxZQUFBO0ExRGkzVEo7QUtwNFRFO0VxRE9GO0lBZUksYUFBQTtFMURrM1RGO0FBQ0Y7O0EwRGozVEE7RUFDRSxrQkFBQTtBMURvM1RGO0FLNzRURTtFcUQ0QkU7SUFDRSxhQUFBO0UxRG8zVEo7RTBEbjNUSTtJQUNFLHNCQUFBO0UxRHEzVE47QUFDRjtBS2o1VEU7RXFEb0JGO0lBU0ksYUFBQTtJQUNBLHVCQUFBO0UxRHczVEY7RTBEdjNURTtJckQyQ0Esb0JxRDFDMEI7RTFEeTNUNUI7QUFDRjs7QTBEdDNUQTs7RUFFRSxZQUFBO0VBQ0EsY0FBQTtBMUR5M1RGOztBMER2M1RBO0VBQ0UsWUFBQTtFQUNBLGNBQUE7RUFDQSxvQkFwSmtCO0ExRDhnVXBCO0FLdDZURTtFcUR5Q0Y7SUFLSSxrQkFySnVCO0UxRGloVXpCO0FBQ0Y7O0EyRDlnVUE7RUFDRSxvQkFOZ0I7QTNEdWhVbEI7QUtuNlRFO0VzRC9HRjtJQUlJLGtCQVJzQjtFM0QwaFV4QjtFMkRoaFVFO0lBQ0Usb0JBVm1CO0UzRDRoVXZCO0UyRGpoVUU7SUFDRSxtQkFYa0I7RTNEOGhVdEI7QUFDRjs7QTREOWhVQTtFQUNFLGlDeERPYTtFd0ROYix5QkFKZTtBNURxaVVqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAY2hhcnNldCBcXFwidXRmLThcXFwiXFxuLyohIGJ1bG1hLmlvIHYwLjkuNCB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9qZ3RobXMvYnVsbWEgKi9cXG5AaW1wb3J0IFxcXCJzYXNzL3V0aWxpdGllcy9fYWxsXFxcIlxcbkBpbXBvcnQgXFxcInNhc3MvYmFzZS9fYWxsXFxcIlxcbkBpbXBvcnQgXFxcInNhc3MvZWxlbWVudHMvX2FsbFxcXCJcXG5AaW1wb3J0IFxcXCJzYXNzL2Zvcm0vX2FsbFxcXCJcXG5AaW1wb3J0IFxcXCJzYXNzL2NvbXBvbmVudHMvX2FsbFxcXCJcXG5AaW1wb3J0IFxcXCJzYXNzL2dyaWQvX2FsbFxcXCJcXG5AaW1wb3J0IFxcXCJzYXNzL2hlbHBlcnMvX2FsbFxcXCJcXG5AaW1wb3J0IFxcXCJzYXNzL2xheW91dC9fYWxsXFxcIlxcblwiLFwiLyogQnVsbWEgVXRpbGl0aWVzICovXFxuQGNoYXJzZXQgXFxcInV0Zi04XFxcIlxcblxcbkBpbXBvcnQgXFxcImluaXRpYWwtdmFyaWFibGVzXFxcIlxcbkBpbXBvcnQgXFxcImZ1bmN0aW9uc1xcXCJcXG5AaW1wb3J0IFxcXCJkZXJpdmVkLXZhcmlhYmxlc1xcXCJcXG5AaW1wb3J0IFxcXCJtaXhpbnNcXFwiXFxuQGltcG9ydCBcXFwiY29udHJvbHNcXFwiXFxuQGltcG9ydCBcXFwiZXh0ZW5kc1xcXCJcXG5cIixcIkBpbXBvcnQgXFxcIm1peGluc1xcXCJcXG5cXG4lY29udHJvbFxcbiAgK2NvbnRyb2xcXG5cXG4ldW5zZWxlY3RhYmxlXFxuICArdW5zZWxlY3RhYmxlXFxuXFxuJWFycm93XFxuICArYXJyb3dcXG5cXG4lYmxvY2tcXG4gICtibG9ja1xcblxcbiVkZWxldGVcXG4gICtkZWxldGVcXG5cXG4lbG9hZGVyXFxuICArbG9hZGVyXFxuXFxuJW92ZXJsYXlcXG4gICtvdmVybGF5XFxuXFxuJXJlc2V0XFxuICArcmVzZXRcXG5cIixcIkBpbXBvcnQgXFxcImRlcml2ZWQtdmFyaWFibGVzXFxcIlxcblxcbiRjb250cm9sLXJhZGl1czogJHJhZGl1cyAhZGVmYXVsdFxcbiRjb250cm9sLXJhZGl1cy1zbWFsbDogJHJhZGl1cy1zbWFsbCAhZGVmYXVsdFxcblxcbiRjb250cm9sLWJvcmRlci13aWR0aDogMXB4ICFkZWZhdWx0XFxuXFxuJGNvbnRyb2wtaGVpZ2h0OiAyLjVlbSAhZGVmYXVsdFxcbiRjb250cm9sLWxpbmUtaGVpZ2h0OiAxLjUgIWRlZmF1bHRcXG5cXG4kY29udHJvbC1wYWRkaW5nLXZlcnRpY2FsOiBjYWxjKDAuNWVtIC0gI3skY29udHJvbC1ib3JkZXItd2lkdGh9KSAhZGVmYXVsdFxcbiRjb250cm9sLXBhZGRpbmctaG9yaXpvbnRhbDogY2FsYygwLjc1ZW0gLSAjeyRjb250cm9sLWJvcmRlci13aWR0aH0pICFkZWZhdWx0XFxuXFxuPWNvbnRyb2xcXG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZVxcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lXFxuICBhbGlnbi1pdGVtczogY2VudGVyXFxuICBib3JkZXI6ICRjb250cm9sLWJvcmRlci13aWR0aCBzb2xpZCB0cmFuc3BhcmVudFxcbiAgYm9yZGVyLXJhZGl1czogJGNvbnRyb2wtcmFkaXVzXFxuICBib3gtc2hhZG93OiBub25lXFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleFxcbiAgZm9udC1zaXplOiAkc2l6ZS1ub3JtYWxcXG4gIGhlaWdodDogJGNvbnRyb2wtaGVpZ2h0XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnRcXG4gIGxpbmUtaGVpZ2h0OiAkY29udHJvbC1saW5lLWhlaWdodFxcbiAgcGFkZGluZy1ib3R0b206ICRjb250cm9sLXBhZGRpbmctdmVydGljYWxcXG4gIHBhZGRpbmctbGVmdDogJGNvbnRyb2wtcGFkZGluZy1ob3Jpem9udGFsXFxuICBwYWRkaW5nLXJpZ2h0OiAkY29udHJvbC1wYWRkaW5nLWhvcml6b250YWxcXG4gIHBhZGRpbmctdG9wOiAkY29udHJvbC1wYWRkaW5nLXZlcnRpY2FsXFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3BcXG4gIC8vIFN0YXRlc1xcbiAgJjpmb2N1cyxcXG4gICYuaXMtZm9jdXNlZCxcXG4gICY6YWN0aXZlLFxcbiAgJi5pcy1hY3RpdmVcXG4gICAgb3V0bGluZTogbm9uZVxcbiAgJltkaXNhYmxlZF0sXFxuICBmaWVsZHNldFtkaXNhYmxlZF0gJlxcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkXFxuXFxuLy8gVGhlIGNvbnRyb2xzIHNpemVzIHVzZSBtaXhpbnMgc28gdGhleSBjYW4gYmUgdXNlZCBhdCBkaWZmZXJlbnQgYnJlYWtwb2ludHNcXG49Y29udHJvbC1zbWFsbFxcbiAgYm9yZGVyLXJhZGl1czogJGNvbnRyb2wtcmFkaXVzLXNtYWxsXFxuICBmb250LXNpemU6ICRzaXplLXNtYWxsXFxuPWNvbnRyb2wtbWVkaXVtXFxuICBmb250LXNpemU6ICRzaXplLW1lZGl1bVxcbj1jb250cm9sLWxhcmdlXFxuICBmb250LXNpemU6ICRzaXplLWxhcmdlXFxuXCIsXCIvLyBDb2xvcnNcXG5cXG4kYmxhY2s6ICAgICAgICBoc2woMCwgMCUsIDQlKSAhZGVmYXVsdFxcbiRibGFjay1iaXM6ICAgIGhzbCgwLCAwJSwgNyUpICFkZWZhdWx0XFxuJGJsYWNrLXRlcjogICAgaHNsKDAsIDAlLCAxNCUpICFkZWZhdWx0XFxuXFxuJGdyZXktZGFya2VyOiAgaHNsKDAsIDAlLCAyMSUpICFkZWZhdWx0XFxuJGdyZXktZGFyazogICAgaHNsKDAsIDAlLCAyOSUpICFkZWZhdWx0XFxuJGdyZXk6ICAgICAgICAgaHNsKDAsIDAlLCA0OCUpICFkZWZhdWx0XFxuJGdyZXktbGlnaHQ6ICAgaHNsKDAsIDAlLCA3MSUpICFkZWZhdWx0XFxuJGdyZXktbGlnaHRlcjogaHNsKDAsIDAlLCA4NiUpICFkZWZhdWx0XFxuJGdyZXktbGlnaHRlc3Q6IGhzbCgwLCAwJSwgOTMlKSAhZGVmYXVsdFxcblxcbiR3aGl0ZS10ZXI6ICAgIGhzbCgwLCAwJSwgOTYlKSAhZGVmYXVsdFxcbiR3aGl0ZS1iaXM6ICAgIGhzbCgwLCAwJSwgOTglKSAhZGVmYXVsdFxcbiR3aGl0ZTogICAgICAgIGhzbCgwLCAwJSwgMTAwJSkgIWRlZmF1bHRcXG5cXG4kb3JhbmdlOiAgICAgICBoc2woMTQsICAxMDAlLCA1MyUpICFkZWZhdWx0XFxuJHllbGxvdzogICAgICAgaHNsKDQ0LCAgMTAwJSwgNzclKSAhZGVmYXVsdFxcbiRncmVlbjogICAgICAgIGhzbCgxNTMsIDUzJSwgIDUzJSkgIWRlZmF1bHRcXG4kdHVycXVvaXNlOiAgICBoc2woMTcxLCAxMDAlLCA0MSUpICFkZWZhdWx0XFxuJGN5YW46ICAgICAgICAgaHNsKDIwNywgNjElLCAgNTMlKSAhZGVmYXVsdFxcbiRibHVlOiAgICAgICAgIGhzbCgyMjksIDUzJSwgIDUzJSkgIWRlZmF1bHRcXG4kcHVycGxlOiAgICAgICBoc2woMjcxLCAxMDAlLCA3MSUpICFkZWZhdWx0XFxuJHJlZDogICAgICAgICAgaHNsKDM0OCwgODYlLCA2MSUpICFkZWZhdWx0XFxuXFxuLy8gVHlwb2dyYXBoeVxcblxcbiRmYW1pbHktc2Fucy1zZXJpZjogQmxpbmtNYWNTeXN0ZW1Gb250LCAtYXBwbGUtc3lzdGVtLCBcXFwiU2Vnb2UgVUlcXFwiLCBcXFwiUm9ib3RvXFxcIiwgXFxcIk94eWdlblxcXCIsIFxcXCJVYnVudHVcXFwiLCBcXFwiQ2FudGFyZWxsXFxcIiwgXFxcIkZpcmEgU2Fuc1xcXCIsIFxcXCJEcm9pZCBTYW5zXFxcIiwgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgXFxcIkhlbHZldGljYVxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWYgIWRlZmF1bHRcXG4kZmFtaWx5LW1vbm9zcGFjZTogbW9ub3NwYWNlICFkZWZhdWx0XFxuJHJlbmRlci1tb2RlOiBvcHRpbWl6ZUxlZ2liaWxpdHkgIWRlZmF1bHRcXG5cXG4kc2l6ZS0xOiAzcmVtICFkZWZhdWx0XFxuJHNpemUtMjogMi41cmVtICFkZWZhdWx0XFxuJHNpemUtMzogMnJlbSAhZGVmYXVsdFxcbiRzaXplLTQ6IDEuNXJlbSAhZGVmYXVsdFxcbiRzaXplLTU6IDEuMjVyZW0gIWRlZmF1bHRcXG4kc2l6ZS02OiAxcmVtICFkZWZhdWx0XFxuJHNpemUtNzogMC43NXJlbSAhZGVmYXVsdFxcblxcbiR3ZWlnaHQtbGlnaHQ6IDMwMCAhZGVmYXVsdFxcbiR3ZWlnaHQtbm9ybWFsOiA0MDAgIWRlZmF1bHRcXG4kd2VpZ2h0LW1lZGl1bTogNTAwICFkZWZhdWx0XFxuJHdlaWdodC1zZW1pYm9sZDogNjAwICFkZWZhdWx0XFxuJHdlaWdodC1ib2xkOiA3MDAgIWRlZmF1bHRcXG5cXG4vLyBTcGFjaW5nXFxuXFxuJGJsb2NrLXNwYWNpbmc6IDEuNXJlbSAhZGVmYXVsdFxcblxcbi8vIFJlc3BvbnNpdmVuZXNzXFxuXFxuLy8gVGhlIGNvbnRhaW5lciBob3Jpem9udGFsIGdhcCwgd2hpY2ggYWN0cyBhcyB0aGUgb2Zmc2V0IGZvciBicmVha3BvaW50c1xcbiRnYXA6IDMycHggIWRlZmF1bHRcXG4vLyA5NjAsIDExNTIsIGFuZCAxMzQ0IGhhdmUgYmVlbiBjaG9zZW4gYmVjYXVzZSB0aGV5IGFyZSBkaXZpc2libGUgYnkgYm90aCAxMiBhbmQgMTZcXG4kdGFibGV0OiA3NjlweCAhZGVmYXVsdFxcbi8vIDk2MHB4IGNvbnRhaW5lciArIDRyZW1cXG4kZGVza3RvcDogOTYwcHggKyAoMiAqICRnYXApICFkZWZhdWx0XFxuLy8gMTE1MnB4IGNvbnRhaW5lciArIDRyZW1cXG4kd2lkZXNjcmVlbjogMTE1MnB4ICsgKDIgKiAkZ2FwKSAhZGVmYXVsdFxcbiR3aWRlc2NyZWVuLWVuYWJsZWQ6IHRydWUgIWRlZmF1bHRcXG4vLyAxMzQ0cHggY29udGFpbmVyICsgNHJlbVxcbiRmdWxsaGQ6IDEzNDRweCArICgyICogJGdhcCkgIWRlZmF1bHRcXG4kZnVsbGhkLWVuYWJsZWQ6IHRydWUgIWRlZmF1bHRcXG4kYnJlYWtwb2ludHM6IChcXFwibW9iaWxlXFxcIjogKFxcXCJ1bnRpbFxcXCI6ICR0YWJsZXQpLCBcXFwidGFibGV0XFxcIjogKFxcXCJmcm9tXFxcIjogJHRhYmxldCksIFxcXCJ0YWJsZXQtb25seVxcXCI6IChcXFwiZnJvbVxcXCI6ICR0YWJsZXQsIFxcXCJ1bnRpbFxcXCI6ICRkZXNrdG9wKSwgXFxcInRvdWNoXFxcIjogKFxcXCJmcm9tXFxcIjogJGRlc2t0b3ApLCBcXFwiZGVza3RvcFxcXCI6IChcXFwiZnJvbVxcXCI6ICRkZXNrdG9wKSwgXFxcImRlc2t0b3Atb25seVxcXCI6IChcXFwiZnJvbVxcXCI6ICRkZXNrdG9wLCBcXFwidW50aWxcXFwiOiAkd2lkZXNjcmVlbiksIFxcXCJ1bnRpbC13aWRlc2NyZWVuXFxcIjogKFxcXCJ1bnRpbFxcXCI6ICR3aWRlc2NyZWVuKSwgXFxcIndpZGVzY3JlZW5cXFwiOiAoXFxcImZyb21cXFwiOiAkd2lkZXNjcmVlbiksIFxcXCJ3aWRlc2NyZWVuLW9ubHlcXFwiOiAoXFxcImZyb21cXFwiOiAkd2lkZXNjcmVlbiwgXFxcInVudGlsXFxcIjogJGZ1bGxoZCksIFxcXCJ1bnRpbC1mdWxsaGRcXFwiOiAoXFxcInVudGlsXFxcIjogJGZ1bGxoZCksIFxcXCJmdWxsaGRcXFwiOiAoXFxcImZyb21cXFwiOiAkZnVsbGhkKSkgIWRlZmF1bHRcXG5cXG4vLyBNaXNjZWxsYW5lb3VzXFxuXFxuJGVhc2luZzogZWFzZS1vdXQgIWRlZmF1bHRcXG4kcmFkaXVzLXNtYWxsOiAycHggIWRlZmF1bHRcXG4kcmFkaXVzOiA0cHggIWRlZmF1bHRcXG4kcmFkaXVzLWxhcmdlOiA2cHggIWRlZmF1bHRcXG4kcmFkaXVzLXJvdW5kZWQ6IDk5OTlweCAhZGVmYXVsdFxcbiRzcGVlZDogODZtcyAhZGVmYXVsdFxcblxcbi8vIEZsYWdzXFxuXFxuJHZhcmlhYmxlLWNvbHVtbnM6IHRydWUgIWRlZmF1bHRcXG4kcnRsOiBmYWxzZSAhZGVmYXVsdFxcblwiLFwiQGltcG9ydCBcXFwiZGVyaXZlZC12YXJpYWJsZXNcXFwiXFxuXFxuPWNsZWFyZml4XFxuICAmOjphZnRlclxcbiAgICBjbGVhcjogYm90aFxcbiAgICBjb250ZW50OiBcXFwiIFxcXCJcXG4gICAgZGlzcGxheTogdGFibGVcXG5cXG49Y2VudGVyKCR3aWR0aCwgJGhlaWdodDogMClcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZVxcbiAgQGlmICRoZWlnaHQgIT0gMFxcbiAgICBsZWZ0OiBjYWxjKDUwJSAtICgjeyR3aWR0aH0gKiAwLjUpKVxcbiAgICB0b3A6IGNhbGMoNTAlIC0gKCN7JGhlaWdodH0gKiAwLjUpKVxcbiAgQGVsc2VcXG4gICAgbGVmdDogY2FsYyg1MCUgLSAoI3skd2lkdGh9ICogMC41KSlcXG4gICAgdG9wOiBjYWxjKDUwJSAtICgjeyR3aWR0aH0gKiAwLjUpKVxcblxcbj1mYSgkc2l6ZSwgJGRpbWVuc2lvbnMpXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcXG4gIGZvbnQtc2l6ZTogJHNpemVcXG4gIGhlaWdodDogJGRpbWVuc2lvbnNcXG4gIGxpbmUtaGVpZ2h0OiAkZGltZW5zaW9uc1xcbiAgdGV4dC1hbGlnbjogY2VudGVyXFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wXFxuICB3aWR0aDogJGRpbWVuc2lvbnNcXG5cXG49aGFtYnVyZ2VyKCRkaW1lbnNpb25zKVxcbiAgLW1vei1hcHBlYXJhbmNlOiBub25lXFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmVcXG4gIGFwcGVhcmFuY2U6IG5vbmVcXG4gIGJhY2tncm91bmQ6IG5vbmVcXG4gIGJvcmRlcjogbm9uZVxcbiAgY3Vyc29yOiBwb2ludGVyXFxuICBkaXNwbGF5OiBibG9ja1xcbiAgaGVpZ2h0OiAkZGltZW5zaW9uc1xcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuICB3aWR0aDogJGRpbWVuc2lvbnNcXG4gIHNwYW5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yXFxuICAgIGRpc3BsYXk6IGJsb2NrXFxuICAgIGhlaWdodDogMXB4XFxuICAgIGxlZnQ6IGNhbGMoNTAlIC0gOHB4KVxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGVcXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyXFxuICAgIHRyYW5zaXRpb24tZHVyYXRpb246ICRzcGVlZFxcbiAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiBiYWNrZ3JvdW5kLWNvbG9yLCBvcGFjaXR5LCB0cmFuc2Zvcm1cXG4gICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ICRlYXNpbmdcXG4gICAgd2lkdGg6IDE2cHhcXG4gICAgJjpudGgtY2hpbGQoMSlcXG4gICAgICB0b3A6IGNhbGMoNTAlIC0gNnB4KVxcbiAgICAmOm50aC1jaGlsZCgyKVxcbiAgICAgIHRvcDogY2FsYyg1MCUgLSAxcHgpXFxuICAgICY6bnRoLWNoaWxkKDMpXFxuICAgICAgdG9wOiBjYWxjKDUwJSArIDRweClcXG4gICY6aG92ZXJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYnVsbWFSZ2JhKGJsYWNrLCAwLjA1KVxcbiAgLy8gTW9kaWZlcnNcXG4gICYuaXMtYWN0aXZlXFxuICAgIHNwYW5cXG4gICAgICAmOm50aC1jaGlsZCgxKVxcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDVweCkgcm90YXRlKDQ1ZGVnKVxcbiAgICAgICY6bnRoLWNoaWxkKDIpXFxuICAgICAgICBvcGFjaXR5OiAwXFxuICAgICAgJjpudGgtY2hpbGQoMylcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNXB4KSByb3RhdGUoLTQ1ZGVnKVxcblxcbj1vdmVyZmxvdy10b3VjaFxcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoXFxuXFxuPXBsYWNlaG9sZGVyXFxuICAkcGxhY2Vob2xkZXJzOiAnOi1tb3onICc6LXdlYmtpdC1pbnB1dCcgJy1tb3onICctbXMtaW5wdXQnXFxuICBAZWFjaCAkcGxhY2Vob2xkZXIgaW4gJHBsYWNlaG9sZGVyc1xcbiAgICAmOiN7JHBsYWNlaG9sZGVyfS1wbGFjZWhvbGRlclxcbiAgICAgIEBjb250ZW50XFxuXFxuPXJlc2V0XFxuICAtbW96LWFwcGVhcmFuY2U6IG5vbmVcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZVxcbiAgYXBwZWFyYW5jZTogbm9uZVxcbiAgYmFja2dyb3VuZDogbm9uZVxcbiAgYm9yZGVyOiBub25lXFxuICBjb2xvcjogY3VycmVudENvbG9yXFxuICBmb250LWZhbWlseTogaW5oZXJpdFxcbiAgZm9udC1zaXplOiAxZW1cXG4gIG1hcmdpbjogMFxcbiAgcGFkZGluZzogMFxcblxcbi8vIFJlc3BvbnNpdmVuZXNzXFxuXFxuPWZyb20oJGRldmljZSlcXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRkZXZpY2UpXFxuICAgIEBjb250ZW50XFxuXFxuPXVudGlsKCRkZXZpY2UpXFxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkZGV2aWNlIC0gMXB4KVxcbiAgICBAY29udGVudFxcblxcbj1iZXR3ZWVuKCRmcm9tLCAkdW50aWwpXFxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkZnJvbSkgYW5kIChtYXgtd2lkdGg6ICR1bnRpbCAtIDFweClcXG4gICAgQGNvbnRlbnRcXG5cXG49bW9iaWxlXFxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkdGFibGV0IC0gMXB4KVxcbiAgICBAY29udGVudFxcblxcbj10YWJsZXRcXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR0YWJsZXQpLCBwcmludFxcbiAgICBAY29udGVudFxcblxcbj10YWJsZXQtb25seVxcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJHRhYmxldCkgYW5kIChtYXgtd2lkdGg6ICRkZXNrdG9wIC0gMXB4KVxcbiAgICBAY29udGVudFxcblxcbj10b3VjaFxcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJGRlc2t0b3AgLSAxcHgpXFxuICAgIEBjb250ZW50XFxuXFxuPWRlc2t0b3BcXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRkZXNrdG9wKVxcbiAgICBAY29udGVudFxcblxcbj1kZXNrdG9wLW9ubHlcXG4gIEBpZiAkd2lkZXNjcmVlbi1lbmFibGVkXFxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRkZXNrdG9wKSBhbmQgKG1heC13aWR0aDogJHdpZGVzY3JlZW4gLSAxcHgpXFxuICAgICAgQGNvbnRlbnRcXG5cXG49dW50aWwtd2lkZXNjcmVlblxcbiAgQGlmICR3aWRlc2NyZWVuLWVuYWJsZWRcXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJHdpZGVzY3JlZW4gLSAxcHgpXFxuICAgICAgQGNvbnRlbnRcXG5cXG49d2lkZXNjcmVlblxcbiAgQGlmICR3aWRlc2NyZWVuLWVuYWJsZWRcXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJHdpZGVzY3JlZW4pXFxuICAgICAgQGNvbnRlbnRcXG5cXG49d2lkZXNjcmVlbi1vbmx5XFxuICBAaWYgJHdpZGVzY3JlZW4tZW5hYmxlZCBhbmQgJGZ1bGxoZC1lbmFibGVkXFxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR3aWRlc2NyZWVuKSBhbmQgKG1heC13aWR0aDogJGZ1bGxoZCAtIDFweClcXG4gICAgICBAY29udGVudFxcblxcbj11bnRpbC1mdWxsaGRcXG4gIEBpZiAkZnVsbGhkLWVuYWJsZWRcXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJGZ1bGxoZCAtIDFweClcXG4gICAgICBAY29udGVudFxcblxcbj1mdWxsaGRcXG4gIEBpZiAkZnVsbGhkLWVuYWJsZWRcXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJGZ1bGxoZClcXG4gICAgICBAY29udGVudFxcblxcbj1icmVha3BvaW50KCRuYW1lKVxcbiAgJGJyZWFrcG9pbnQ6IG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAkbmFtZSlcXG4gIEBpZiAkYnJlYWtwb2ludFxcbiAgICAkZnJvbTogbWFwLWdldCgkYnJlYWtwb2ludCwgXFxcImZyb21cXFwiKVxcbiAgICAkdW50aWw6IG1hcC1nZXQoJGJyZWFrcG9pbnQsIFxcXCJ1bnRpbFxcXCIpXFxuICAgIEBpZiAkZnJvbSBhbmQgJHVudGlsXFxuICAgICAgK2JldHdlZW4oJGZyb20sICR1bnRpbClcXG4gICAgICAgIEBjb250ZW50XFxuICAgIEBlbHNlIGlmICRmcm9tXFxuICAgICAgK2Zyb20oJGZyb20pXFxuICAgICAgICBAY29udGVudFxcbiAgICBAZWxzZSBpZiAkdW50aWxcXG4gICAgICArdW50aWwoJHVudGlsKVxcbiAgICAgICAgQGNvbnRlbnRcXG5cXG49bHRyXFxuICBAaWYgbm90ICRydGxcXG4gICAgQGNvbnRlbnRcXG5cXG49cnRsXFxuICBAaWYgJHJ0bFxcbiAgICBAY29udGVudFxcblxcbj1sdHItcHJvcGVydHkoJHByb3BlcnR5LCAkc3BhY2luZywgJHJpZ2h0OiB0cnVlKVxcbiAgJG5vcm1hbDogaWYoJHJpZ2h0LCBcXFwicmlnaHRcXFwiLCBcXFwibGVmdFxcXCIpXFxuICAkb3Bwb3NpdGU6IGlmKCRyaWdodCwgXFxcImxlZnRcXFwiLCBcXFwicmlnaHRcXFwiKVxcbiAgQGlmICRydGxcXG4gICAgI3skcHJvcGVydHl9LSN7JG9wcG9zaXRlfTogJHNwYWNpbmdcXG4gIEBlbHNlXFxuICAgICN7JHByb3BlcnR5fS0jeyRub3JtYWx9OiAkc3BhY2luZ1xcblxcbj1sdHItcG9zaXRpb24oJHNwYWNpbmcsICRyaWdodDogdHJ1ZSlcXG4gICRub3JtYWw6IGlmKCRyaWdodCwgXFxcInJpZ2h0XFxcIiwgXFxcImxlZnRcXFwiKVxcbiAgJG9wcG9zaXRlOiBpZigkcmlnaHQsIFxcXCJsZWZ0XFxcIiwgXFxcInJpZ2h0XFxcIilcXG4gIEBpZiAkcnRsXFxuICAgICN7JG9wcG9zaXRlfTogJHNwYWNpbmdcXG4gIEBlbHNlXFxuICAgICN7JG5vcm1hbH06ICRzcGFjaW5nXFxuXFxuLy8gUGxhY2Vob2xkZXJzXFxuXFxuPXVuc2VsZWN0YWJsZVxcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lXFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lXFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmVcXG4gIHVzZXItc2VsZWN0OiBub25lXFxuXFxuPWFycm93KCRjb2xvcjogdHJhbnNwYXJlbnQpXFxuICBib3JkZXI6IDNweCBzb2xpZCAkY29sb3JcXG4gIGJvcmRlci1yYWRpdXM6IDJweFxcbiAgYm9yZGVyLXJpZ2h0OiAwXFxuICBib3JkZXItdG9wOiAwXFxuICBjb250ZW50OiBcXFwiIFxcXCJcXG4gIGRpc3BsYXk6IGJsb2NrXFxuICBoZWlnaHQ6IDAuNjI1ZW1cXG4gIG1hcmdpbi10b3A6IC0wLjQzNzVlbVxcbiAgcG9pbnRlci1ldmVudHM6IG5vbmVcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZVxcbiAgdG9wOiA1MCVcXG4gIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZylcXG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlclxcbiAgd2lkdGg6IDAuNjI1ZW1cXG5cXG49YmxvY2soJHNwYWNpbmc6ICRibG9jay1zcGFjaW5nKVxcbiAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgIG1hcmdpbi1ib3R0b206ICRzcGFjaW5nXFxuXFxuPWRlbGV0ZVxcbiAgK3Vuc2VsZWN0YWJsZVxcbiAgLW1vei1hcHBlYXJhbmNlOiBub25lXFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmVcXG4gIGJhY2tncm91bmQtY29sb3I6IGJ1bG1hUmdiYSgkc2NoZW1lLWludmVydCwgMC4yKVxcbiAgYm9yZGVyOiBub25lXFxuICBib3JkZXItcmFkaXVzOiAkcmFkaXVzLXJvdW5kZWRcXG4gIGN1cnNvcjogcG9pbnRlclxcbiAgcG9pbnRlci1ldmVudHM6IGF1dG9cXG4gIGRpc3BsYXk6IGlubGluZS1ibG9ja1xcbiAgZmxleC1ncm93OiAwXFxuICBmbGV4LXNocmluazogMFxcbiAgZm9udC1zaXplOiAwXFxuICBoZWlnaHQ6IDIwcHhcXG4gIG1heC1oZWlnaHQ6IDIwcHhcXG4gIG1heC13aWR0aDogMjBweFxcbiAgbWluLWhlaWdodDogMjBweFxcbiAgbWluLXdpZHRoOiAyMHB4XFxuICBvdXRsaW5lOiBub25lXFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3BcXG4gIHdpZHRoOiAyMHB4XFxuICAmOjpiZWZvcmUsXFxuICAmOjphZnRlclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW5cXG4gICAgY29udGVudDogXFxcIlxcXCJcXG4gICAgZGlzcGxheTogYmxvY2tcXG4gICAgbGVmdDogNTAlXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZVxcbiAgICB0b3A6IDUwJVxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKSByb3RhdGUoNDVkZWcpXFxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXJcXG4gICY6OmJlZm9yZVxcbiAgICBoZWlnaHQ6IDJweFxcbiAgICB3aWR0aDogNTAlXFxuICAmOjphZnRlclxcbiAgICBoZWlnaHQ6IDUwJVxcbiAgICB3aWR0aDogMnB4XFxuICAmOmhvdmVyLFxcbiAgJjpmb2N1c1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBidWxtYVJnYmEoJHNjaGVtZS1pbnZlcnQsIDAuMylcXG4gICY6YWN0aXZlXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJ1bG1hUmdiYSgkc2NoZW1lLWludmVydCwgMC40KVxcbiAgLy8gU2l6ZXNcXG4gICYuaXMtc21hbGxcXG4gICAgaGVpZ2h0OiAxNnB4XFxuICAgIG1heC1oZWlnaHQ6IDE2cHhcXG4gICAgbWF4LXdpZHRoOiAxNnB4XFxuICAgIG1pbi1oZWlnaHQ6IDE2cHhcXG4gICAgbWluLXdpZHRoOiAxNnB4XFxuICAgIHdpZHRoOiAxNnB4XFxuICAmLmlzLW1lZGl1bVxcbiAgICBoZWlnaHQ6IDI0cHhcXG4gICAgbWF4LWhlaWdodDogMjRweFxcbiAgICBtYXgtd2lkdGg6IDI0cHhcXG4gICAgbWluLWhlaWdodDogMjRweFxcbiAgICBtaW4td2lkdGg6IDI0cHhcXG4gICAgd2lkdGg6IDI0cHhcXG4gICYuaXMtbGFyZ2VcXG4gICAgaGVpZ2h0OiAzMnB4XFxuICAgIG1heC1oZWlnaHQ6IDMycHhcXG4gICAgbWF4LXdpZHRoOiAzMnB4XFxuICAgIG1pbi1oZWlnaHQ6IDMycHhcXG4gICAgbWluLXdpZHRoOiAzMnB4XFxuICAgIHdpZHRoOiAzMnB4XFxuXFxuPWxvYWRlclxcbiAgYW5pbWF0aW9uOiBzcGluQXJvdW5kIDUwMG1zIGluZmluaXRlIGxpbmVhclxcbiAgYm9yZGVyOiAycHggc29saWQgJGdyZXktbGlnaHRlclxcbiAgYm9yZGVyLXJhZGl1czogJHJhZGl1cy1yb3VuZGVkXFxuICBib3JkZXItcmlnaHQtY29sb3I6IHRyYW5zcGFyZW50XFxuICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudFxcbiAgY29udGVudDogXFxcIlxcXCJcXG4gIGRpc3BsYXk6IGJsb2NrXFxuICBoZWlnaHQ6IDFlbVxcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuICB3aWR0aDogMWVtXFxuXFxuPW92ZXJsYXkoJG9mZnNldDogMClcXG4gIGJvdHRvbTogJG9mZnNldFxcbiAgbGVmdDogJG9mZnNldFxcbiAgcG9zaXRpb246IGFic29sdXRlXFxuICByaWdodDogJG9mZnNldFxcbiAgdG9wOiAkb2Zmc2V0XFxuXCIsXCIvKiBCdWxtYSBCYXNlICovXFxuQGNoYXJzZXQgXFxcInV0Zi04XFxcIlxcblxcbkBpbXBvcnQgXFxcIm1pbmlyZXNldFxcXCJcXG5AaW1wb3J0IFxcXCJnZW5lcmljXFxcIlxcbkBpbXBvcnQgXFxcImFuaW1hdGlvbnNcXFwiXFxuXCIsXCIvKiEgbWluaXJlc2V0LmNzcyB2MC4wLjYgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vamd0aG1zL21pbmlyZXNldC5jc3MgKi9cXG4vLyBCbG9ja3NcXG5odG1sLFxcbmJvZHksXFxucCxcXG5vbCxcXG51bCxcXG5saSxcXG5kbCxcXG5kdCxcXG5kZCxcXG5ibG9ja3F1b3RlLFxcbmZpZ3VyZSxcXG5maWVsZHNldCxcXG5sZWdlbmQsXFxudGV4dGFyZWEsXFxucHJlLFxcbmlmcmFtZSxcXG5ocixcXG5oMSxcXG5oMixcXG5oMyxcXG5oNCxcXG5oNSxcXG5oNlxcbiAgbWFyZ2luOiAwXFxuICBwYWRkaW5nOiAwXFxuXFxuLy8gSGVhZGluZ3NcXG5oMSxcXG5oMixcXG5oMyxcXG5oNCxcXG5oNSxcXG5oNlxcbiAgZm9udC1zaXplOiAxMDAlXFxuICBmb250LXdlaWdodDogbm9ybWFsXFxuXFxuLy8gTGlzdFxcbnVsXFxuICBsaXN0LXN0eWxlOiBub25lXFxuXFxuLy8gRm9ybVxcbmJ1dHRvbixcXG5pbnB1dCxcXG5zZWxlY3QsXFxudGV4dGFyZWFcXG4gIG1hcmdpbjogMFxcblxcbi8vIEJveCBzaXppbmdcXG5odG1sXFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94XFxuXFxuKlxcbiAgJixcXG4gICY6OmJlZm9yZSxcXG4gICY6OmFmdGVyXFxuICAgIGJveC1zaXppbmc6IGluaGVyaXRcXG5cXG4vLyBNZWRpYVxcbmltZyxcXG52aWRlb1xcbiAgaGVpZ2h0OiBhdXRvXFxuICBtYXgtd2lkdGg6IDEwMCVcXG5cXG4vLyBJZnJhbWVcXG5pZnJhbWVcXG4gIGJvcmRlcjogMFxcblxcbi8vIFRhYmxlXFxudGFibGVcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2VcXG4gIGJvcmRlci1zcGFjaW5nOiAwXFxuXFxudGQsXFxudGhcXG4gIHBhZGRpbmc6IDBcXG4gICY6bm90KFthbGlnbl0pXFxuICAgIHRleHQtYWxpZ246IGluaGVyaXRcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJGJvZHktYmFja2dyb3VuZC1jb2xvcjogJHNjaGVtZS1tYWluICFkZWZhdWx0XFxuJGJvZHktc2l6ZTogMTZweCAhZGVmYXVsdFxcbiRib2R5LW1pbi13aWR0aDogMzAwcHggIWRlZmF1bHRcXG4kYm9keS1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eSAhZGVmYXVsdFxcbiRib2R5LWZhbWlseTogJGZhbWlseS1wcmltYXJ5ICFkZWZhdWx0XFxuJGJvZHktb3ZlcmZsb3cteDogaGlkZGVuICFkZWZhdWx0XFxuJGJvZHktb3ZlcmZsb3cteTogc2Nyb2xsICFkZWZhdWx0XFxuXFxuJGJvZHktY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuJGJvZHktZm9udC1zaXplOiAxZW0gIWRlZmF1bHRcXG4kYm9keS13ZWlnaHQ6ICR3ZWlnaHQtbm9ybWFsICFkZWZhdWx0XFxuJGJvZHktbGluZS1oZWlnaHQ6IDEuNSAhZGVmYXVsdFxcblxcbiRjb2RlLWZhbWlseTogJGZhbWlseS1jb2RlICFkZWZhdWx0XFxuJGNvZGUtcGFkZGluZzogMC4yNWVtIDAuNWVtIDAuMjVlbSAhZGVmYXVsdFxcbiRjb2RlLXdlaWdodDogbm9ybWFsICFkZWZhdWx0XFxuJGNvZGUtc2l6ZTogMC44NzVlbSAhZGVmYXVsdFxcblxcbiRzbWFsbC1mb250LXNpemU6IDAuODc1ZW0gIWRlZmF1bHRcXG5cXG4kaHItYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQgIWRlZmF1bHRcXG4kaHItaGVpZ2h0OiAycHggIWRlZmF1bHRcXG4kaHItbWFyZ2luOiAxLjVyZW0gMCAhZGVmYXVsdFxcblxcbiRzdHJvbmctY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcbiRzdHJvbmctd2VpZ2h0OiAkd2VpZ2h0LWJvbGQgIWRlZmF1bHRcXG5cXG4kcHJlLWZvbnQtc2l6ZTogMC44NzVlbSAhZGVmYXVsdFxcbiRwcmUtcGFkZGluZzogMS4yNXJlbSAxLjVyZW0gIWRlZmF1bHRcXG4kcHJlLWNvZGUtZm9udC1zaXplOiAxZW0gIWRlZmF1bHRcXG5cXG5odG1sXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYm9keS1iYWNrZ3JvdW5kLWNvbG9yXFxuICBmb250LXNpemU6ICRib2R5LXNpemVcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGVcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkXFxuICBtaW4td2lkdGg6ICRib2R5LW1pbi13aWR0aFxcbiAgb3ZlcmZsb3cteDogJGJvZHktb3ZlcmZsb3cteFxcbiAgb3ZlcmZsb3cteTogJGJvZHktb3ZlcmZsb3cteVxcbiAgdGV4dC1yZW5kZXJpbmc6ICRib2R5LXJlbmRlcmluZ1xcbiAgdGV4dC1zaXplLWFkanVzdDogMTAwJVxcblxcbmFydGljbGUsXFxuYXNpZGUsXFxuZmlndXJlLFxcbmZvb3RlcixcXG5oZWFkZXIsXFxuaGdyb3VwLFxcbnNlY3Rpb25cXG4gIGRpc3BsYXk6IGJsb2NrXFxuXFxuYm9keSxcXG5idXR0b24sXFxuaW5wdXQsXFxub3B0Z3JvdXAsXFxuc2VsZWN0LFxcbnRleHRhcmVhXFxuICBmb250LWZhbWlseTogJGJvZHktZmFtaWx5XFxuXFxuY29kZSxcXG5wcmVcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBhdXRvXFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhdXRvXFxuICBmb250LWZhbWlseTogJGNvZGUtZmFtaWx5XFxuXFxuYm9keVxcbiAgY29sb3I6ICRib2R5LWNvbG9yXFxuICBmb250LXNpemU6ICRib2R5LWZvbnQtc2l6ZVxcbiAgZm9udC13ZWlnaHQ6ICRib2R5LXdlaWdodFxcbiAgbGluZS1oZWlnaHQ6ICRib2R5LWxpbmUtaGVpZ2h0XFxuXFxuLy8gSW5saW5lXFxuXFxuYVxcbiAgY29sb3I6ICRsaW5rXFxuICBjdXJzb3I6IHBvaW50ZXJcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZVxcbiAgc3Ryb25nXFxuICAgIGNvbG9yOiBjdXJyZW50Q29sb3JcXG4gICY6aG92ZXJcXG4gICAgY29sb3I6ICRsaW5rLWhvdmVyXFxuXFxuY29kZVxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNvZGUtYmFja2dyb3VuZFxcbiAgY29sb3I6ICRjb2RlXFxuICBmb250LXNpemU6ICRjb2RlLXNpemVcXG4gIGZvbnQtd2VpZ2h0OiAkY29kZS13ZWlnaHRcXG4gIHBhZGRpbmc6ICRjb2RlLXBhZGRpbmdcXG5cXG5oclxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGhyLWJhY2tncm91bmQtY29sb3JcXG4gIGJvcmRlcjogbm9uZVxcbiAgZGlzcGxheTogYmxvY2tcXG4gIGhlaWdodDogJGhyLWhlaWdodFxcbiAgbWFyZ2luOiAkaHItbWFyZ2luXFxuXFxuaW1nXFxuICBoZWlnaHQ6IGF1dG9cXG4gIG1heC13aWR0aDogMTAwJVxcblxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0sXFxuaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXVxcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lXFxuXFxuc21hbGxcXG4gIGZvbnQtc2l6ZTogJHNtYWxsLWZvbnQtc2l6ZVxcblxcbnNwYW5cXG4gIGZvbnQtc3R5bGU6IGluaGVyaXRcXG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0XFxuXFxuc3Ryb25nXFxuICBjb2xvcjogJHN0cm9uZy1jb2xvclxcbiAgZm9udC13ZWlnaHQ6ICRzdHJvbmctd2VpZ2h0XFxuXFxuLy8gQmxvY2tcXG5cXG5maWVsZHNldFxcbiAgYm9yZGVyOiBub25lXFxuXFxucHJlXFxuICArb3ZlcmZsb3ctdG91Y2hcXG4gIGJhY2tncm91bmQtY29sb3I6ICRwcmUtYmFja2dyb3VuZFxcbiAgY29sb3I6ICRwcmVcXG4gIGZvbnQtc2l6ZTogJHByZS1mb250LXNpemVcXG4gIG92ZXJmbG93LXg6IGF1dG9cXG4gIHBhZGRpbmc6ICRwcmUtcGFkZGluZ1xcbiAgd2hpdGUtc3BhY2U6IHByZVxcbiAgd29yZC13cmFwOiBub3JtYWxcXG4gIGNvZGVcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnRcXG4gICAgY29sb3I6IGN1cnJlbnRDb2xvclxcbiAgICBmb250LXNpemU6ICRwcmUtY29kZS1mb250LXNpemVcXG4gICAgcGFkZGluZzogMFxcblxcbnRhYmxlXFxuICB0ZCxcXG4gIHRoXFxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3BcXG4gICAgJjpub3QoW2FsaWduXSlcXG4gICAgICB0ZXh0LWFsaWduOiBpbmhlcml0XFxuICB0aFxcbiAgICBjb2xvcjogJHRleHQtc3Ryb25nXFxuXCIsXCJAaW1wb3J0IFxcXCJpbml0aWFsLXZhcmlhYmxlc1xcXCJcXG5AaW1wb3J0IFxcXCJmdW5jdGlvbnNcXFwiXFxuXFxuJHByaW1hcnk6ICR0dXJxdW9pc2UgIWRlZmF1bHRcXG5cXG4kaW5mbzogJGN5YW4gIWRlZmF1bHRcXG4kc3VjY2VzczogJGdyZWVuICFkZWZhdWx0XFxuJHdhcm5pbmc6ICR5ZWxsb3cgIWRlZmF1bHRcXG4kZGFuZ2VyOiAkcmVkICFkZWZhdWx0XFxuXFxuJGxpZ2h0OiAkd2hpdGUtdGVyICFkZWZhdWx0XFxuJGRhcms6ICRncmV5LWRhcmtlciAhZGVmYXVsdFxcblxcbi8vIEludmVydCBjb2xvcnNcXG5cXG4kb3JhbmdlLWludmVydDogZmluZENvbG9ySW52ZXJ0KCRvcmFuZ2UpICFkZWZhdWx0XFxuJHllbGxvdy1pbnZlcnQ6IGZpbmRDb2xvckludmVydCgkeWVsbG93KSAhZGVmYXVsdFxcbiRncmVlbi1pbnZlcnQ6IGZpbmRDb2xvckludmVydCgkZ3JlZW4pICFkZWZhdWx0XFxuJHR1cnF1b2lzZS1pbnZlcnQ6IGZpbmRDb2xvckludmVydCgkdHVycXVvaXNlKSAhZGVmYXVsdFxcbiRjeWFuLWludmVydDogZmluZENvbG9ySW52ZXJ0KCRjeWFuKSAhZGVmYXVsdFxcbiRibHVlLWludmVydDogZmluZENvbG9ySW52ZXJ0KCRibHVlKSAhZGVmYXVsdFxcbiRwdXJwbGUtaW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJHB1cnBsZSkgIWRlZmF1bHRcXG4kcmVkLWludmVydDogZmluZENvbG9ySW52ZXJ0KCRyZWQpICFkZWZhdWx0XFxuXFxuJHByaW1hcnktaW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJHByaW1hcnkpICFkZWZhdWx0XFxuJHByaW1hcnktbGlnaHQ6IGZpbmRMaWdodENvbG9yKCRwcmltYXJ5KSAhZGVmYXVsdFxcbiRwcmltYXJ5LWRhcms6IGZpbmREYXJrQ29sb3IoJHByaW1hcnkpICFkZWZhdWx0XFxuJGluZm8taW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJGluZm8pICFkZWZhdWx0XFxuJGluZm8tbGlnaHQ6IGZpbmRMaWdodENvbG9yKCRpbmZvKSAhZGVmYXVsdFxcbiRpbmZvLWRhcms6IGZpbmREYXJrQ29sb3IoJGluZm8pICFkZWZhdWx0XFxuJHN1Y2Nlc3MtaW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJHN1Y2Nlc3MpICFkZWZhdWx0XFxuJHN1Y2Nlc3MtbGlnaHQ6IGZpbmRMaWdodENvbG9yKCRzdWNjZXNzKSAhZGVmYXVsdFxcbiRzdWNjZXNzLWRhcms6IGZpbmREYXJrQ29sb3IoJHN1Y2Nlc3MpICFkZWZhdWx0XFxuJHdhcm5pbmctaW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJHdhcm5pbmcpICFkZWZhdWx0XFxuJHdhcm5pbmctbGlnaHQ6IGZpbmRMaWdodENvbG9yKCR3YXJuaW5nKSAhZGVmYXVsdFxcbiR3YXJuaW5nLWRhcms6IGZpbmREYXJrQ29sb3IoJHdhcm5pbmcpICFkZWZhdWx0XFxuJGRhbmdlci1pbnZlcnQ6IGZpbmRDb2xvckludmVydCgkZGFuZ2VyKSAhZGVmYXVsdFxcbiRkYW5nZXItbGlnaHQ6IGZpbmRMaWdodENvbG9yKCRkYW5nZXIpICFkZWZhdWx0XFxuJGRhbmdlci1kYXJrOiBmaW5kRGFya0NvbG9yKCRkYW5nZXIpICFkZWZhdWx0XFxuJGxpZ2h0LWludmVydDogZmluZENvbG9ySW52ZXJ0KCRsaWdodCkgIWRlZmF1bHRcXG4kZGFyay1pbnZlcnQ6IGZpbmRDb2xvckludmVydCgkZGFyaykgIWRlZmF1bHRcXG5cXG4vLyBHZW5lcmFsIGNvbG9yc1xcblxcbiRzY2hlbWUtbWFpbjogJHdoaXRlICFkZWZhdWx0XFxuJHNjaGVtZS1tYWluLWJpczogJHdoaXRlLWJpcyAhZGVmYXVsdFxcbiRzY2hlbWUtbWFpbi10ZXI6ICR3aGl0ZS10ZXIgIWRlZmF1bHRcXG4kc2NoZW1lLWludmVydDogJGJsYWNrICFkZWZhdWx0XFxuJHNjaGVtZS1pbnZlcnQtYmlzOiAkYmxhY2stYmlzICFkZWZhdWx0XFxuJHNjaGVtZS1pbnZlcnQtdGVyOiAkYmxhY2stdGVyICFkZWZhdWx0XFxuXFxuJGJhY2tncm91bmQ6ICR3aGl0ZS10ZXIgIWRlZmF1bHRcXG5cXG4kYm9yZGVyOiAkZ3JleS1saWdodGVyICFkZWZhdWx0XFxuJGJvcmRlci1ob3ZlcjogJGdyZXktbGlnaHQgIWRlZmF1bHRcXG4kYm9yZGVyLWxpZ2h0OiAkZ3JleS1saWdodGVzdCAhZGVmYXVsdFxcbiRib3JkZXItbGlnaHQtaG92ZXI6ICRncmV5LWxpZ2h0ICFkZWZhdWx0XFxuXFxuLy8gVGV4dCBjb2xvcnNcXG5cXG4kdGV4dDogJGdyZXktZGFyayAhZGVmYXVsdFxcbiR0ZXh0LWludmVydDogZmluZENvbG9ySW52ZXJ0KCR0ZXh0KSAhZGVmYXVsdFxcbiR0ZXh0LWxpZ2h0OiAkZ3JleSAhZGVmYXVsdFxcbiR0ZXh0LXN0cm9uZzogJGdyZXktZGFya2VyICFkZWZhdWx0XFxuXFxuLy8gQ29kZSBjb2xvcnNcXG5cXG4kY29kZTogZGFya2VuKCRyZWQsIDE1JSkgIWRlZmF1bHRcXG4kY29kZS1iYWNrZ3JvdW5kOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcblxcbiRwcmU6ICR0ZXh0ICFkZWZhdWx0XFxuJHByZS1iYWNrZ3JvdW5kOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcblxcbi8vIExpbmsgY29sb3JzXFxuXFxuJGxpbms6ICRibHVlICFkZWZhdWx0XFxuJGxpbmstaW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJGxpbmspICFkZWZhdWx0XFxuJGxpbmstbGlnaHQ6IGZpbmRMaWdodENvbG9yKCRsaW5rKSAhZGVmYXVsdFxcbiRsaW5rLWRhcms6IGZpbmREYXJrQ29sb3IoJGxpbmspICFkZWZhdWx0XFxuJGxpbmstdmlzaXRlZDogJHB1cnBsZSAhZGVmYXVsdFxcblxcbiRsaW5rLWhvdmVyOiAkZ3JleS1kYXJrZXIgIWRlZmF1bHRcXG4kbGluay1ob3Zlci1ib3JkZXI6ICRncmV5LWxpZ2h0ICFkZWZhdWx0XFxuXFxuJGxpbmstZm9jdXM6ICRncmV5LWRhcmtlciAhZGVmYXVsdFxcbiRsaW5rLWZvY3VzLWJvcmRlcjogJGJsdWUgIWRlZmF1bHRcXG5cXG4kbGluay1hY3RpdmU6ICRncmV5LWRhcmtlciAhZGVmYXVsdFxcbiRsaW5rLWFjdGl2ZS1ib3JkZXI6ICRncmV5LWRhcmsgIWRlZmF1bHRcXG5cXG4vLyBUeXBvZ3JhcGh5XFxuXFxuJGZhbWlseS1wcmltYXJ5OiAkZmFtaWx5LXNhbnMtc2VyaWYgIWRlZmF1bHRcXG4kZmFtaWx5LXNlY29uZGFyeTogJGZhbWlseS1zYW5zLXNlcmlmICFkZWZhdWx0XFxuJGZhbWlseS1jb2RlOiAkZmFtaWx5LW1vbm9zcGFjZSAhZGVmYXVsdFxcblxcbiRzaXplLXNtYWxsOiAkc2l6ZS03ICFkZWZhdWx0XFxuJHNpemUtbm9ybWFsOiAkc2l6ZS02ICFkZWZhdWx0XFxuJHNpemUtbWVkaXVtOiAkc2l6ZS01ICFkZWZhdWx0XFxuJHNpemUtbGFyZ2U6ICRzaXplLTQgIWRlZmF1bHRcXG5cXG4vLyBFZmZlY3RzXFxuXFxuJHNoYWRvdzogMCAwLjVlbSAxZW0gLTAuMTI1ZW0gcmdiYSgkc2NoZW1lLWludmVydCwgMC4xKSwgMCAwcHggMCAxcHggcmdiYSgkc2NoZW1lLWludmVydCwgMC4wMikgIWRlZmF1bHRcXG5cXG4vLyBMaXN0cyBhbmQgbWFwc1xcbiRjdXN0b20tY29sb3JzOiBudWxsICFkZWZhdWx0XFxuJGN1c3RvbS1zaGFkZXM6IG51bGwgIWRlZmF1bHRcXG5cXG4kY29sb3JzOiBtZXJnZUNvbG9yTWFwcygoXFxcIndoaXRlXFxcIjogKCR3aGl0ZSwgJGJsYWNrKSwgXFxcImJsYWNrXFxcIjogKCRibGFjaywgJHdoaXRlKSwgXFxcImxpZ2h0XFxcIjogKCRsaWdodCwgJGxpZ2h0LWludmVydCksIFxcXCJkYXJrXFxcIjogKCRkYXJrLCAkZGFyay1pbnZlcnQpLCBcXFwicHJpbWFyeVxcXCI6ICgkcHJpbWFyeSwgJHByaW1hcnktaW52ZXJ0LCAkcHJpbWFyeS1saWdodCwgJHByaW1hcnktZGFyayksIFxcXCJsaW5rXFxcIjogKCRsaW5rLCAkbGluay1pbnZlcnQsICRsaW5rLWxpZ2h0LCAkbGluay1kYXJrKSwgXFxcImluZm9cXFwiOiAoJGluZm8sICRpbmZvLWludmVydCwgJGluZm8tbGlnaHQsICRpbmZvLWRhcmspLCBcXFwic3VjY2Vzc1xcXCI6ICgkc3VjY2VzcywgJHN1Y2Nlc3MtaW52ZXJ0LCAkc3VjY2Vzcy1saWdodCwgJHN1Y2Nlc3MtZGFyayksIFxcXCJ3YXJuaW5nXFxcIjogKCR3YXJuaW5nLCAkd2FybmluZy1pbnZlcnQsICR3YXJuaW5nLWxpZ2h0LCAkd2FybmluZy1kYXJrKSwgXFxcImRhbmdlclxcXCI6ICgkZGFuZ2VyLCAkZGFuZ2VyLWludmVydCwgJGRhbmdlci1saWdodCwgJGRhbmdlci1kYXJrKSksICRjdXN0b20tY29sb3JzKSAhZGVmYXVsdFxcblxcbiRzaGFkZXM6IG1lcmdlQ29sb3JNYXBzKChcXFwiYmxhY2stYmlzXFxcIjogJGJsYWNrLWJpcywgXFxcImJsYWNrLXRlclxcXCI6ICRibGFjay10ZXIsIFxcXCJncmV5LWRhcmtlclxcXCI6ICRncmV5LWRhcmtlciwgXFxcImdyZXktZGFya1xcXCI6ICRncmV5LWRhcmssIFxcXCJncmV5XFxcIjogJGdyZXksIFxcXCJncmV5LWxpZ2h0XFxcIjogJGdyZXktbGlnaHQsIFxcXCJncmV5LWxpZ2h0ZXJcXFwiOiAkZ3JleS1saWdodGVyLCBcXFwid2hpdGUtdGVyXFxcIjogJHdoaXRlLXRlciwgXFxcIndoaXRlLWJpc1xcXCI6ICR3aGl0ZS1iaXMpLCAkY3VzdG9tLXNoYWRlcykgIWRlZmF1bHRcXG5cXG4kc2l6ZXM6ICRzaXplLTEgJHNpemUtMiAkc2l6ZS0zICRzaXplLTQgJHNpemUtNSAkc2l6ZS02ICRzaXplLTcgIWRlZmF1bHRcXG5cIixcIkBrZXlmcmFtZXMgc3BpbkFyb3VuZFxcbiAgZnJvbVxcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKVxcbiAgdG9cXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKVxcblwiLFwiLyogQnVsbWEgRWxlbWVudHMgKi9cXG5AY2hhcnNldCBcXFwidXRmLThcXFwiXFxuXFxuQGltcG9ydCBcXFwiYm94XFxcIlxcbkBpbXBvcnQgXFxcImJ1dHRvblxcXCJcXG5AaW1wb3J0IFxcXCJjb250YWluZXJcXFwiXFxuQGltcG9ydCBcXFwiY29udGVudFxcXCJcXG5AaW1wb3J0IFxcXCJpY29uXFxcIlxcbkBpbXBvcnQgXFxcImltYWdlXFxcIlxcbkBpbXBvcnQgXFxcIm5vdGlmaWNhdGlvblxcXCJcXG5AaW1wb3J0IFxcXCJwcm9ncmVzc1xcXCJcXG5AaW1wb3J0IFxcXCJ0YWJsZVxcXCJcXG5AaW1wb3J0IFxcXCJ0YWdcXFwiXFxuQGltcG9ydCBcXFwidGl0bGVcXFwiXFxuXFxuQGltcG9ydCBcXFwib3RoZXJcXFwiXFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvbWl4aW5zXFxcIlxcblxcbiRib3gtY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuJGJveC1iYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW4gIWRlZmF1bHRcXG4kYm94LXJhZGl1czogJHJhZGl1cy1sYXJnZSAhZGVmYXVsdFxcbiRib3gtc2hhZG93OiAkc2hhZG93ICFkZWZhdWx0XFxuJGJveC1wYWRkaW5nOiAxLjI1cmVtICFkZWZhdWx0XFxuXFxuJGJveC1saW5rLWhvdmVyLXNoYWRvdzogMCAwLjVlbSAxZW0gLTAuMTI1ZW0gcmdiYSgkc2NoZW1lLWludmVydCwgMC4xKSwgMCAwIDAgMXB4ICRsaW5rICFkZWZhdWx0XFxuJGJveC1saW5rLWFjdGl2ZS1zaGFkb3c6IGluc2V0IDAgMXB4IDJweCByZ2JhKCRzY2hlbWUtaW52ZXJ0LCAwLjIpLCAwIDAgMCAxcHggJGxpbmsgIWRlZmF1bHRcXG5cXG4uYm94XFxuICBAZXh0ZW5kICVibG9ja1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJGJveC1iYWNrZ3JvdW5kLWNvbG9yXFxuICBib3JkZXItcmFkaXVzOiAkYm94LXJhZGl1c1xcbiAgYm94LXNoYWRvdzogJGJveC1zaGFkb3dcXG4gIGNvbG9yOiAkYm94LWNvbG9yXFxuICBkaXNwbGF5OiBibG9ja1xcbiAgcGFkZGluZzogJGJveC1wYWRkaW5nXFxuXFxuYS5ib3hcXG4gICY6aG92ZXIsXFxuICAmOmZvY3VzXFxuICAgIGJveC1zaGFkb3c6ICRib3gtbGluay1ob3Zlci1zaGFkb3dcXG4gICY6YWN0aXZlXFxuICAgIGJveC1zaGFkb3c6ICRib3gtbGluay1hY3RpdmUtc2hhZG93XFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvY29udHJvbHNcXFwiXFxuQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kYnV0dG9uLWNvbG9yOiAkdGV4dC1zdHJvbmcgIWRlZmF1bHRcXG4kYnV0dG9uLWJhY2tncm91bmQtY29sb3I6ICRzY2hlbWUtbWFpbiAhZGVmYXVsdFxcbiRidXR0b24tZmFtaWx5OiBmYWxzZSAhZGVmYXVsdFxcblxcbiRidXR0b24tYm9yZGVyLWNvbG9yOiAkYm9yZGVyICFkZWZhdWx0XFxuJGJ1dHRvbi1ib3JkZXItd2lkdGg6ICRjb250cm9sLWJvcmRlci13aWR0aCAhZGVmYXVsdFxcblxcbiRidXR0b24tcGFkZGluZy12ZXJ0aWNhbDogY2FsYygwLjVlbSAtICN7JGJ1dHRvbi1ib3JkZXItd2lkdGh9KSAhZGVmYXVsdFxcbiRidXR0b24tcGFkZGluZy1ob3Jpem9udGFsOiAxZW0gIWRlZmF1bHRcXG5cXG4kYnV0dG9uLWhvdmVyLWNvbG9yOiAkbGluay1ob3ZlciAhZGVmYXVsdFxcbiRidXR0b24taG92ZXItYm9yZGVyLWNvbG9yOiAkbGluay1ob3Zlci1ib3JkZXIgIWRlZmF1bHRcXG5cXG4kYnV0dG9uLWZvY3VzLWNvbG9yOiAkbGluay1mb2N1cyAhZGVmYXVsdFxcbiRidXR0b24tZm9jdXMtYm9yZGVyLWNvbG9yOiAkbGluay1mb2N1cy1ib3JkZXIgIWRlZmF1bHRcXG4kYnV0dG9uLWZvY3VzLWJveC1zaGFkb3ctc2l6ZTogMCAwIDAgMC4xMjVlbSAhZGVmYXVsdFxcbiRidXR0b24tZm9jdXMtYm94LXNoYWRvdy1jb2xvcjogYnVsbWFSZ2JhKCRsaW5rLCAwLjI1KSAhZGVmYXVsdFxcblxcbiRidXR0b24tYWN0aXZlLWNvbG9yOiAkbGluay1hY3RpdmUgIWRlZmF1bHRcXG4kYnV0dG9uLWFjdGl2ZS1ib3JkZXItY29sb3I6ICRsaW5rLWFjdGl2ZS1ib3JkZXIgIWRlZmF1bHRcXG5cXG4kYnV0dG9uLXRleHQtY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuJGJ1dHRvbi10ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSAhZGVmYXVsdFxcbiRidXR0b24tdGV4dC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcbiRidXR0b24tdGV4dC1ob3Zlci1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuXFxuJGJ1dHRvbi1naG9zdC1iYWNrZ3JvdW5kOiBub25lICFkZWZhdWx0XFxuJGJ1dHRvbi1naG9zdC1ib3JkZXItY29sb3I6IHRyYW5zcGFyZW50ICFkZWZhdWx0XFxuJGJ1dHRvbi1naG9zdC1jb2xvcjogJGxpbmsgIWRlZmF1bHRcXG4kYnV0dG9uLWdob3N0LWRlY29yYXRpb246IG5vbmUgIWRlZmF1bHRcXG4kYnV0dG9uLWdob3N0LWhvdmVyLWNvbG9yOiAkbGluayAhZGVmYXVsdFxcbiRidXR0b24tZ2hvc3QtaG92ZXItZGVjb3JhdGlvbjogdW5kZXJsaW5lICFkZWZhdWx0XFxuXFxuJGJ1dHRvbi1kaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW4gIWRlZmF1bHRcXG4kYnV0dG9uLWRpc2FibGVkLWJvcmRlci1jb2xvcjogJGJvcmRlciAhZGVmYXVsdFxcbiRidXR0b24tZGlzYWJsZWQtc2hhZG93OiBub25lICFkZWZhdWx0XFxuJGJ1dHRvbi1kaXNhYmxlZC1vcGFjaXR5OiAwLjUgIWRlZmF1bHRcXG5cXG4kYnV0dG9uLXN0YXRpYy1jb2xvcjogJHRleHQtbGlnaHQgIWRlZmF1bHRcXG4kYnV0dG9uLXN0YXRpYy1iYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW4tdGVyICFkZWZhdWx0XFxuJGJ1dHRvbi1zdGF0aWMtYm9yZGVyLWNvbG9yOiAkYm9yZGVyICFkZWZhdWx0XFxuXFxuJGJ1dHRvbi1jb2xvcnM6ICRjb2xvcnMgIWRlZmF1bHRcXG4kYnV0dG9uLXJlc3BvbnNpdmUtc2l6ZXM6IChcXFwibW9iaWxlXFxcIjogKFxcXCJzbWFsbFxcXCI6ICgkc2l6ZS1zbWFsbCAqIDAuNzUpLCBcXFwibm9ybWFsXFxcIjogKCRzaXplLXNtYWxsICogMC44NzUpLCBcXFwibWVkaXVtXFxcIjogJHNpemUtc21hbGwsIFxcXCJsYXJnZVxcXCI6ICRzaXplLW5vcm1hbCksIFxcXCJ0YWJsZXQtb25seVxcXCI6IChcXFwic21hbGxcXFwiOiAoJHNpemUtc21hbGwgKiAwLjg3NSksIFxcXCJub3JtYWxcXFwiOiAoJHNpemUtc21hbGwpLCBcXFwibWVkaXVtXFxcIjogJHNpemUtbm9ybWFsLCBcXFwibGFyZ2VcXFwiOiAkc2l6ZS1tZWRpdW0pKSAhZGVmYXVsdFxcblxcbi8vIFRoZSBidXR0b24gc2l6ZXMgdXNlIG1peGlucyBzbyB0aGV5IGNhbiBiZSB1c2VkIGF0IGRpZmZlcmVudCBicmVha3BvaW50c1xcbj1idXR0b24tc21hbGxcXG4gICY6bm90KC5pcy1yb3VuZGVkKVxcbiAgICBib3JkZXItcmFkaXVzOiAkcmFkaXVzLXNtYWxsXFxuICBmb250LXNpemU6ICRzaXplLXNtYWxsXFxuPWJ1dHRvbi1ub3JtYWxcXG4gIGZvbnQtc2l6ZTogJHNpemUtbm9ybWFsXFxuPWJ1dHRvbi1tZWRpdW1cXG4gIGZvbnQtc2l6ZTogJHNpemUtbWVkaXVtXFxuPWJ1dHRvbi1sYXJnZVxcbiAgZm9udC1zaXplOiAkc2l6ZS1sYXJnZVxcblxcbi5idXR0b25cXG4gIEBleHRlbmQgJWNvbnRyb2xcXG4gIEBleHRlbmQgJXVuc2VsZWN0YWJsZVxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGJ1dHRvbi1iYWNrZ3JvdW5kLWNvbG9yXFxuICBib3JkZXItY29sb3I6ICRidXR0b24tYm9yZGVyLWNvbG9yXFxuICBib3JkZXItd2lkdGg6ICRidXR0b24tYm9yZGVyLXdpZHRoXFxuICBjb2xvcjogJGJ1dHRvbi1jb2xvclxcbiAgY3Vyc29yOiBwb2ludGVyXFxuICBAaWYgJGJ1dHRvbi1mYW1pbHlcXG4gICAgZm9udC1mYW1pbHk6ICRidXR0b24tZmFtaWx5XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcbiAgcGFkZGluZy1ib3R0b206ICRidXR0b24tcGFkZGluZy12ZXJ0aWNhbFxcbiAgcGFkZGluZy1sZWZ0OiAkYnV0dG9uLXBhZGRpbmctaG9yaXpvbnRhbFxcbiAgcGFkZGluZy1yaWdodDogJGJ1dHRvbi1wYWRkaW5nLWhvcml6b250YWxcXG4gIHBhZGRpbmctdG9wOiAkYnV0dG9uLXBhZGRpbmctdmVydGljYWxcXG4gIHRleHQtYWxpZ246IGNlbnRlclxcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcFxcbiAgc3Ryb25nXFxuICAgIGNvbG9yOiBpbmhlcml0XFxuICAuaWNvblxcbiAgICAmLFxcbiAgICAmLmlzLXNtYWxsLFxcbiAgICAmLmlzLW1lZGl1bSxcXG4gICAgJi5pcy1sYXJnZVxcbiAgICAgIGhlaWdodDogMS41ZW1cXG4gICAgICB3aWR0aDogMS41ZW1cXG4gICAgJjpmaXJzdC1jaGlsZDpub3QoOmxhc3QtY2hpbGQpXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgY2FsYygjey0wLjUgKiAkYnV0dG9uLXBhZGRpbmctaG9yaXpvbnRhbH0gLSAjeyRidXR0b24tYm9yZGVyLXdpZHRofSksIGZhbHNlKVxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsICRidXR0b24tcGFkZGluZy1ob3Jpem9udGFsICogMC4yNSlcXG4gICAgJjpsYXN0LWNoaWxkOm5vdCg6Zmlyc3QtY2hpbGQpXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgJGJ1dHRvbi1wYWRkaW5nLWhvcml6b250YWwgKiAwLjI1LCBmYWxzZSlcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCBjYWxjKCN7LTAuNSAqICRidXR0b24tcGFkZGluZy1ob3Jpem9udGFsfSAtICN7JGJ1dHRvbi1ib3JkZXItd2lkdGh9KSlcXG4gICAgJjpmaXJzdC1jaGlsZDpsYXN0LWNoaWxkXFxuICAgICAgbWFyZ2luLWxlZnQ6IGNhbGMoI3stMC41ICogJGJ1dHRvbi1wYWRkaW5nLWhvcml6b250YWx9IC0gI3skYnV0dG9uLWJvcmRlci13aWR0aH0pXFxuICAgICAgbWFyZ2luLXJpZ2h0OiBjYWxjKCN7LTAuNSAqICRidXR0b24tcGFkZGluZy1ob3Jpem9udGFsfSAtICN7JGJ1dHRvbi1ib3JkZXItd2lkdGh9KVxcbiAgLy8gU3RhdGVzXFxuICAmOmhvdmVyLFxcbiAgJi5pcy1ob3ZlcmVkXFxuICAgIGJvcmRlci1jb2xvcjogJGJ1dHRvbi1ob3Zlci1ib3JkZXItY29sb3JcXG4gICAgY29sb3I6ICRidXR0b24taG92ZXItY29sb3JcXG4gICY6Zm9jdXMsXFxuICAmLmlzLWZvY3VzZWRcXG4gICAgYm9yZGVyLWNvbG9yOiAkYnV0dG9uLWZvY3VzLWJvcmRlci1jb2xvclxcbiAgICBjb2xvcjogJGJ1dHRvbi1mb2N1cy1jb2xvclxcbiAgICAmOm5vdCg6YWN0aXZlKVxcbiAgICAgIGJveC1zaGFkb3c6ICRidXR0b24tZm9jdXMtYm94LXNoYWRvdy1zaXplICRidXR0b24tZm9jdXMtYm94LXNoYWRvdy1jb2xvclxcbiAgJjphY3RpdmUsXFxuICAmLmlzLWFjdGl2ZVxcbiAgICBib3JkZXItY29sb3I6ICRidXR0b24tYWN0aXZlLWJvcmRlci1jb2xvclxcbiAgICBjb2xvcjogJGJ1dHRvbi1hY3RpdmUtY29sb3JcXG4gIC8vIENvbG9yc1xcbiAgJi5pcy10ZXh0XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XFxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnRcXG4gICAgY29sb3I6ICRidXR0b24tdGV4dC1jb2xvclxcbiAgICB0ZXh0LWRlY29yYXRpb246ICRidXR0b24tdGV4dC1kZWNvcmF0aW9uXFxuICAgICY6aG92ZXIsXFxuICAgICYuaXMtaG92ZXJlZCxcXG4gICAgJjpmb2N1cyxcXG4gICAgJi5pcy1mb2N1c2VkXFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJ1dHRvbi10ZXh0LWhvdmVyLWJhY2tncm91bmQtY29sb3JcXG4gICAgICBjb2xvcjogJGJ1dHRvbi10ZXh0LWhvdmVyLWNvbG9yXFxuICAgICY6YWN0aXZlLFxcbiAgICAmLmlzLWFjdGl2ZVxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGJ1bG1hRGFya2VuKCRidXR0b24tdGV4dC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yLCA1JSlcXG4gICAgICBjb2xvcjogJGJ1dHRvbi10ZXh0LWhvdmVyLWNvbG9yXFxuICAgICZbZGlzYWJsZWRdLFxcbiAgICBmaWVsZHNldFtkaXNhYmxlZF0gJlxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudFxcbiAgICAgIGJveC1zaGFkb3c6IG5vbmVcXG4gICYuaXMtZ2hvc3RcXG4gICAgYmFja2dyb3VuZDogJGJ1dHRvbi1naG9zdC1iYWNrZ3JvdW5kXFxuICAgIGJvcmRlci1jb2xvcjogJGJ1dHRvbi1naG9zdC1ib3JkZXItY29sb3JcXG4gICAgY29sb3I6ICRidXR0b24tZ2hvc3QtY29sb3JcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiAkYnV0dG9uLWdob3N0LWRlY29yYXRpb25cXG4gICAgJjpob3ZlcixcXG4gICAgJi5pcy1ob3ZlcmVkXFxuICAgICAgY29sb3I6ICRidXR0b24tZ2hvc3QtaG92ZXItY29sb3JcXG4gICAgICB0ZXh0LWRlY29yYXRpb246ICRidXR0b24tZ2hvc3QtaG92ZXItZGVjb3JhdGlvblxcbiAgQGVhY2ggJG5hbWUsICRwYWlyIGluICRidXR0b24tY29sb3JzXFxuICAgICRjb2xvcjogbnRoKCRwYWlyLCAxKVxcbiAgICAkY29sb3ItaW52ZXJ0OiBudGgoJHBhaXIsIDIpXFxuICAgICYuaXMtI3skbmFtZX1cXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JcXG4gICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAmOmhvdmVyLFxcbiAgICAgICYuaXMtaG92ZXJlZFxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYnVsbWFEYXJrZW4oJGNvbG9yLCAyLjUlKVxcbiAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudFxcbiAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAmOmZvY3VzLFxcbiAgICAgICYuaXMtZm9jdXNlZFxcbiAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudFxcbiAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAgICY6bm90KDphY3RpdmUpXFxuICAgICAgICAgIGJveC1zaGFkb3c6ICRidXR0b24tZm9jdXMtYm94LXNoYWRvdy1zaXplIGJ1bG1hUmdiYSgkY29sb3IsIDAuMjUpXFxuICAgICAgJjphY3RpdmUsXFxuICAgICAgJi5pcy1hY3RpdmVcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJ1bG1hRGFya2VuKCRjb2xvciwgNSUpXFxuICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICZbZGlzYWJsZWRdLFxcbiAgICAgIGZpZWxkc2V0W2Rpc2FibGVkXSAmXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JcXG4gICAgICAgIGJvcmRlci1jb2xvcjogJGNvbG9yXFxuICAgICAgICBib3gtc2hhZG93OiBub25lXFxuICAgICAgJi5pcy1pbnZlcnRlZFxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICAgY29sb3I6ICRjb2xvclxcbiAgICAgICAgJjpob3ZlcixcXG4gICAgICAgICYuaXMtaG92ZXJlZFxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBidWxtYURhcmtlbigkY29sb3ItaW52ZXJ0LCA1JSlcXG4gICAgICAgICZbZGlzYWJsZWRdLFxcbiAgICAgICAgZmllbGRzZXRbZGlzYWJsZWRdICZcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmVcXG4gICAgICAgICAgY29sb3I6ICRjb2xvclxcbiAgICAgICYuaXMtbG9hZGluZ1xcbiAgICAgICAgJjo6YWZ0ZXJcXG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAkY29sb3ItaW52ZXJ0ICRjb2xvci1pbnZlcnQgIWltcG9ydGFudFxcbiAgICAgICYuaXMtb3V0bGluZWRcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgICBib3JkZXItY29sb3I6ICRjb2xvclxcbiAgICAgICAgY29sb3I6ICRjb2xvclxcbiAgICAgICAgJjpob3ZlcixcXG4gICAgICAgICYuaXMtaG92ZXJlZCxcXG4gICAgICAgICY6Zm9jdXMsXFxuICAgICAgICAmLmlzLWZvY3VzZWRcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yXFxuICAgICAgICAgIGJvcmRlci1jb2xvcjogJGNvbG9yXFxuICAgICAgICAgIGNvbG9yOiAkY29sb3ItaW52ZXJ0XFxuICAgICAgICAmLmlzLWxvYWRpbmdcXG4gICAgICAgICAgJjo6YWZ0ZXJcXG4gICAgICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICRjb2xvciAkY29sb3IgIWltcG9ydGFudFxcbiAgICAgICAgICAmOmhvdmVyLFxcbiAgICAgICAgICAmLmlzLWhvdmVyZWQsXFxuICAgICAgICAgICY6Zm9jdXMsXFxuICAgICAgICAgICYuaXMtZm9jdXNlZFxcbiAgICAgICAgICAgICY6OmFmdGVyXFxuICAgICAgICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICRjb2xvci1pbnZlcnQgJGNvbG9yLWludmVydCAhaW1wb3J0YW50XFxuICAgICAgICAmW2Rpc2FibGVkXSxcXG4gICAgICAgIGZpZWxkc2V0W2Rpc2FibGVkXSAmXFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgICAgIGJvcmRlci1jb2xvcjogJGNvbG9yXFxuICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmVcXG4gICAgICAgICAgY29sb3I6ICRjb2xvclxcbiAgICAgICYuaXMtaW52ZXJ0ZWQuaXMtb3V0bGluZWRcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgICBib3JkZXItY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAgIGNvbG9yOiAkY29sb3ItaW52ZXJ0XFxuICAgICAgICAmOmhvdmVyLFxcbiAgICAgICAgJi5pcy1ob3ZlcmVkLFxcbiAgICAgICAgJjpmb2N1cyxcXG4gICAgICAgICYuaXMtZm9jdXNlZFxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItaW52ZXJ0XFxuICAgICAgICAgIGNvbG9yOiAkY29sb3JcXG4gICAgICAgICYuaXMtbG9hZGluZ1xcbiAgICAgICAgICAmOmhvdmVyLFxcbiAgICAgICAgICAmLmlzLWhvdmVyZWQsXFxuICAgICAgICAgICY6Zm9jdXMsXFxuICAgICAgICAgICYuaXMtZm9jdXNlZFxcbiAgICAgICAgICAgICY6OmFmdGVyXFxuICAgICAgICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICRjb2xvciAkY29sb3IgIWltcG9ydGFudFxcbiAgICAgICAgJltkaXNhYmxlZF0sXFxuICAgICAgICBmaWVsZHNldFtkaXNhYmxlZF0gJlxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudFxcbiAgICAgICAgICBib3JkZXItY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAgICAgYm94LXNoYWRvdzogbm9uZVxcbiAgICAgICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgIC8vIElmIGxpZ2h0IGFuZCBkYXJrIGNvbG9ycyBhcmUgcHJvdmlkZWRcXG4gICAgICBAaWYgbGVuZ3RoKCRwYWlyKSA+PSA0XFxuICAgICAgICAkY29sb3ItbGlnaHQ6IG50aCgkcGFpciwgMylcXG4gICAgICAgICRjb2xvci1kYXJrOiBudGgoJHBhaXIsIDQpXFxuICAgICAgICAmLmlzLWxpZ2h0XFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1saWdodFxcbiAgICAgICAgICBjb2xvcjogJGNvbG9yLWRhcmtcXG4gICAgICAgICAgJjpob3ZlcixcXG4gICAgICAgICAgJi5pcy1ob3ZlcmVkXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYnVsbWFEYXJrZW4oJGNvbG9yLWxpZ2h0LCAyLjUlKVxcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnRcXG4gICAgICAgICAgICBjb2xvcjogJGNvbG9yLWRhcmtcXG4gICAgICAgICAgJjphY3RpdmUsXFxuICAgICAgICAgICYuaXMtYWN0aXZlXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYnVsbWFEYXJrZW4oJGNvbG9yLWxpZ2h0LCA1JSlcXG4gICAgICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgICAgICAgY29sb3I6ICRjb2xvci1kYXJrXFxuICAvLyBTaXplc1xcbiAgJi5pcy1zbWFsbFxcbiAgICArYnV0dG9uLXNtYWxsXFxuICAmLmlzLW5vcm1hbFxcbiAgICArYnV0dG9uLW5vcm1hbFxcbiAgJi5pcy1tZWRpdW1cXG4gICAgK2J1dHRvbi1tZWRpdW1cXG4gICYuaXMtbGFyZ2VcXG4gICAgK2J1dHRvbi1sYXJnZVxcbiAgLy8gTW9kaWZpZXJzXFxuICAmW2Rpc2FibGVkXSxcXG4gIGZpZWxkc2V0W2Rpc2FibGVkXSAmXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRidXR0b24tZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvclxcbiAgICBib3JkZXItY29sb3I6ICRidXR0b24tZGlzYWJsZWQtYm9yZGVyLWNvbG9yXFxuICAgIGJveC1zaGFkb3c6ICRidXR0b24tZGlzYWJsZWQtc2hhZG93XFxuICAgIG9wYWNpdHk6ICRidXR0b24tZGlzYWJsZWQtb3BhY2l0eVxcbiAgJi5pcy1mdWxsd2lkdGhcXG4gICAgZGlzcGxheTogZmxleFxcbiAgICB3aWR0aDogMTAwJVxcbiAgJi5pcy1sb2FkaW5nXFxuICAgIGNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lXFxuICAgICY6OmFmdGVyXFxuICAgICAgQGV4dGVuZCAlbG9hZGVyXFxuICAgICAgK2NlbnRlcigxZW0pXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnRcXG4gICYuaXMtc3RhdGljXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRidXR0b24tc3RhdGljLWJhY2tncm91bmQtY29sb3JcXG4gICAgYm9yZGVyLWNvbG9yOiAkYnV0dG9uLXN0YXRpYy1ib3JkZXItY29sb3JcXG4gICAgY29sb3I6ICRidXR0b24tc3RhdGljLWNvbG9yXFxuICAgIGJveC1zaGFkb3c6IG5vbmVcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmVcXG4gICYuaXMtcm91bmRlZFxcbiAgICBib3JkZXItcmFkaXVzOiAkcmFkaXVzLXJvdW5kZWRcXG4gICAgcGFkZGluZy1sZWZ0OiBjYWxjKCN7JGJ1dHRvbi1wYWRkaW5nLWhvcml6b250YWx9ICsgMC4yNWVtKVxcbiAgICBwYWRkaW5nLXJpZ2h0OiBjYWxjKCN7JGJ1dHRvbi1wYWRkaW5nLWhvcml6b250YWx9ICsgMC4yNWVtKVxcblxcbi5idXR0b25zXFxuICBhbGlnbi1pdGVtczogY2VudGVyXFxuICBkaXNwbGF5OiBmbGV4XFxuICBmbGV4LXdyYXA6IHdyYXBcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydFxcbiAgLmJ1dHRvblxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW1cXG4gICAgJjpub3QoOmxhc3QtY2hpbGQpOm5vdCguaXMtZnVsbHdpZHRoKVxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDAuNXJlbSlcXG4gICY6bGFzdC1jaGlsZFxcbiAgICBtYXJnaW4tYm90dG9tOiAtMC41cmVtXFxuICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbVxcbiAgLy8gU2l6ZXNcXG4gICYuYXJlLXNtYWxsXFxuICAgIC5idXR0b246bm90KC5pcy1ub3JtYWwpOm5vdCguaXMtbWVkaXVtKTpub3QoLmlzLWxhcmdlKVxcbiAgICAgICtidXR0b24tc21hbGxcXG4gICYuYXJlLW1lZGl1bVxcbiAgICAuYnV0dG9uOm5vdCguaXMtc21hbGwpOm5vdCguaXMtbm9ybWFsKTpub3QoLmlzLWxhcmdlKVxcbiAgICAgICtidXR0b24tbWVkaXVtXFxuICAmLmFyZS1sYXJnZVxcbiAgICAuYnV0dG9uOm5vdCguaXMtc21hbGwpOm5vdCguaXMtbm9ybWFsKTpub3QoLmlzLW1lZGl1bSlcXG4gICAgICArYnV0dG9uLWxhcmdlXFxuICAmLmhhcy1hZGRvbnNcXG4gICAgLmJ1dHRvblxcbiAgICAgICY6bm90KDpmaXJzdC1jaGlsZClcXG4gICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDBcXG4gICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDBcXG4gICAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwXFxuICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMFxcbiAgICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgLTFweClcXG4gICAgICAmOmxhc3QtY2hpbGRcXG4gICAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDApXFxuICAgICAgJjpob3ZlcixcXG4gICAgICAmLmlzLWhvdmVyZWRcXG4gICAgICAgIHotaW5kZXg6IDJcXG4gICAgICAmOmZvY3VzLFxcbiAgICAgICYuaXMtZm9jdXNlZCxcXG4gICAgICAmOmFjdGl2ZSxcXG4gICAgICAmLmlzLWFjdGl2ZSxcXG4gICAgICAmLmlzLXNlbGVjdGVkXFxuICAgICAgICB6LWluZGV4OiAzXFxuICAgICAgICAmOmhvdmVyXFxuICAgICAgICAgIHotaW5kZXg6IDRcXG4gICAgICAmLmlzLWV4cGFuZGVkXFxuICAgICAgICBmbGV4LWdyb3c6IDFcXG4gICAgICAgIGZsZXgtc2hyaW5rOiAxXFxuICAmLmlzLWNlbnRlcmVkXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyXFxuICAgICY6bm90KC5oYXMtYWRkb25zKVxcbiAgICAgIC5idXR0b246bm90KC5pcy1mdWxsd2lkdGgpXFxuICAgICAgICBtYXJnaW4tbGVmdDogMC4yNXJlbVxcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtXFxuICAmLmlzLXJpZ2h0XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmRcXG4gICAgJjpub3QoLmhhcy1hZGRvbnMpXFxuICAgICAgLmJ1dHRvbjpub3QoLmlzLWZ1bGx3aWR0aClcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtXFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW1cXG5cXG5AZWFjaCAkYnAtbmFtZSwgJGJwLXNpemVzIGluICRidXR0b24tcmVzcG9uc2l2ZS1zaXplc1xcbiAgK2JyZWFrcG9pbnQoJGJwLW5hbWUpXFxuICAgIEBlYWNoICRzaXplLCAkdmFsdWUgaW4gJGJwLXNpemVzXFxuICAgICAgQGlmICRzaXplICE9IFxcXCJub3JtYWxcXFwiXFxuICAgICAgICAuYnV0dG9uLmlzLXJlc3BvbnNpdmUuaXMtI3skc2l6ZX1cXG4gICAgICAgICAgZm9udC1zaXplOiAkdmFsdWVcXG4gICAgICBAZWxzZVxcbiAgICAgICAgLmJ1dHRvbi5pcy1yZXNwb25zaXZlLFxcbiAgICAgICAgLmJ1dHRvbi5pcy1yZXNwb25zaXZlLmlzLW5vcm1hbFxcbiAgICAgICAgICBmb250LXNpemU6ICR2YWx1ZVxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kY29udGFpbmVyLW9mZnNldDogKDIgKiAkZ2FwKSAhZGVmYXVsdFxcbiRjb250YWluZXItbWF4LXdpZHRoOiAkZnVsbGhkICFkZWZhdWx0XFxuXFxuLmNvbnRhaW5lclxcbiAgZmxleC1ncm93OiAxXFxuICBtYXJnaW46IDAgYXV0b1xcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuICB3aWR0aDogYXV0b1xcbiAgJi5pcy1mbHVpZFxcbiAgICBtYXgtd2lkdGg6IG5vbmUgIWltcG9ydGFudFxcbiAgICBwYWRkaW5nLWxlZnQ6ICRnYXBcXG4gICAgcGFkZGluZy1yaWdodDogJGdhcFxcbiAgICB3aWR0aDogMTAwJVxcbiAgK2Rlc2t0b3BcXG4gICAgbWF4LXdpZHRoOiAkZGVza3RvcCAtICRjb250YWluZXItb2Zmc2V0XFxuICArdW50aWwtd2lkZXNjcmVlblxcbiAgICAmLmlzLXdpZGVzY3JlZW46bm90KC5pcy1tYXgtZGVza3RvcClcXG4gICAgICBtYXgtd2lkdGg6IG1pbigkd2lkZXNjcmVlbiwgJGNvbnRhaW5lci1tYXgtd2lkdGgpIC0gJGNvbnRhaW5lci1vZmZzZXRcXG4gICt1bnRpbC1mdWxsaGRcXG4gICAgJi5pcy1mdWxsaGQ6bm90KC5pcy1tYXgtZGVza3RvcCk6bm90KC5pcy1tYXgtd2lkZXNjcmVlbilcXG4gICAgICBtYXgtd2lkdGg6IG1pbigkZnVsbGhkLCAkY29udGFpbmVyLW1heC13aWR0aCkgLSAkY29udGFpbmVyLW9mZnNldFxcbiAgK3dpZGVzY3JlZW5cXG4gICAgJjpub3QoLmlzLW1heC1kZXNrdG9wKVxcbiAgICAgIG1heC13aWR0aDogbWluKCR3aWRlc2NyZWVuLCAkY29udGFpbmVyLW1heC13aWR0aCkgLSAkY29udGFpbmVyLW9mZnNldFxcbiAgK2Z1bGxoZFxcbiAgICAmOm5vdCguaXMtbWF4LWRlc2t0b3ApOm5vdCguaXMtbWF4LXdpZGVzY3JlZW4pXFxuICAgICAgbWF4LXdpZHRoOiBtaW4oJGZ1bGxoZCwgJGNvbnRhaW5lci1tYXgtd2lkdGgpIC0gJGNvbnRhaW5lci1vZmZzZXRcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJGNvbnRlbnQtaGVhZGluZy1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuJGNvbnRlbnQtaGVhZGluZy13ZWlnaHQ6ICR3ZWlnaHQtc2VtaWJvbGQgIWRlZmF1bHRcXG4kY29udGVudC1oZWFkaW5nLWxpbmUtaGVpZ2h0OiAxLjEyNSAhZGVmYXVsdFxcblxcbiRjb250ZW50LWJsb2NrLW1hcmdpbi1ib3R0b206IDFlbSAhZGVmYXVsdFxcblxcbiRjb250ZW50LWJsb2NrcXVvdGUtYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQgIWRlZmF1bHRcXG4kY29udGVudC1ibG9ja3F1b3RlLWJvcmRlci1sZWZ0OiA1cHggc29saWQgJGJvcmRlciAhZGVmYXVsdFxcbiRjb250ZW50LWJsb2NrcXVvdGUtcGFkZGluZzogMS4yNWVtIDEuNWVtICFkZWZhdWx0XFxuXFxuJGNvbnRlbnQtcHJlLXBhZGRpbmc6IDEuMjVlbSAxLjVlbSAhZGVmYXVsdFxcblxcbiRjb250ZW50LXRhYmxlLWNlbGwtYm9yZGVyOiAxcHggc29saWQgJGJvcmRlciAhZGVmYXVsdFxcbiRjb250ZW50LXRhYmxlLWNlbGwtYm9yZGVyLXdpZHRoOiAwIDAgMXB4ICFkZWZhdWx0XFxuJGNvbnRlbnQtdGFibGUtY2VsbC1wYWRkaW5nOiAwLjVlbSAwLjc1ZW0gIWRlZmF1bHRcXG4kY29udGVudC10YWJsZS1jZWxsLWhlYWRpbmctY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcbiRjb250ZW50LXRhYmxlLWhlYWQtY2VsbC1ib3JkZXItd2lkdGg6IDAgMCAycHggIWRlZmF1bHRcXG4kY29udGVudC10YWJsZS1oZWFkLWNlbGwtY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcbiRjb250ZW50LXRhYmxlLWJvZHktbGFzdC1yb3ctY2VsbC1ib3JkZXItYm90dG9tLXdpZHRoOiAwICFkZWZhdWx0XFxuJGNvbnRlbnQtdGFibGUtZm9vdC1jZWxsLWJvcmRlci13aWR0aDogMnB4IDAgMCAhZGVmYXVsdFxcbiRjb250ZW50LXRhYmxlLWZvb3QtY2VsbC1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuXFxuLmNvbnRlbnRcXG4gIEBleHRlbmQgJWJsb2NrXFxuICAvLyBJbmxpbmVcXG4gIGxpICsgbGlcXG4gICAgbWFyZ2luLXRvcDogMC4yNWVtXFxuICAvLyBCbG9ja1xcbiAgcCxcXG4gIGRsLFxcbiAgb2wsXFxuICB1bCxcXG4gIGJsb2NrcXVvdGUsXFxuICBwcmUsXFxuICB0YWJsZVxcbiAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICBtYXJnaW4tYm90dG9tOiAkY29udGVudC1ibG9jay1tYXJnaW4tYm90dG9tXFxuICBoMSxcXG4gIGgyLFxcbiAgaDMsXFxuICBoNCxcXG4gIGg1LFxcbiAgaDZcXG4gICAgY29sb3I6ICRjb250ZW50LWhlYWRpbmctY29sb3JcXG4gICAgZm9udC13ZWlnaHQ6ICRjb250ZW50LWhlYWRpbmctd2VpZ2h0XFxuICAgIGxpbmUtaGVpZ2h0OiAkY29udGVudC1oZWFkaW5nLWxpbmUtaGVpZ2h0XFxuICBoMVxcbiAgICBmb250LXNpemU6IDJlbVxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVlbVxcbiAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpXFxuICAgICAgbWFyZ2luLXRvcDogMWVtXFxuICBoMlxcbiAgICBmb250LXNpemU6IDEuNzVlbVxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjU3MTRlbVxcbiAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpXFxuICAgICAgbWFyZ2luLXRvcDogMS4xNDI4ZW1cXG4gIGgzXFxuICAgIGZvbnQtc2l6ZTogMS41ZW1cXG4gICAgbWFyZ2luLWJvdHRvbTogMC42NjY2ZW1cXG4gICAgJjpub3QoOmZpcnN0LWNoaWxkKVxcbiAgICAgIG1hcmdpbi10b3A6IDEuMzMzM2VtXFxuICBoNFxcbiAgICBmb250LXNpemU6IDEuMjVlbVxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjhlbVxcbiAgaDVcXG4gICAgZm9udC1zaXplOiAxLjEyNWVtXFxuICAgIG1hcmdpbi1ib3R0b206IDAuODg4OGVtXFxuICBoNlxcbiAgICBmb250LXNpemU6IDFlbVxcbiAgICBtYXJnaW4tYm90dG9tOiAxZW1cXG4gIGJsb2NrcXVvdGVcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbnRlbnQtYmxvY2txdW90ZS1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgICtsdHItcHJvcGVydHkoXFxcImJvcmRlclxcXCIsICRjb250ZW50LWJsb2NrcXVvdGUtYm9yZGVyLWxlZnQsIGZhbHNlKVxcbiAgICBwYWRkaW5nOiAkY29udGVudC1ibG9ja3F1b3RlLXBhZGRpbmdcXG4gIG9sXFxuICAgIGxpc3Qtc3R5bGUtcG9zaXRpb246IG91dHNpZGVcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMmVtLCBmYWxzZSlcXG4gICAgbWFyZ2luLXRvcDogMWVtXFxuICAgICY6bm90KFt0eXBlXSlcXG4gICAgICBsaXN0LXN0eWxlLXR5cGU6IGRlY2ltYWxcXG4gICAgICAmLmlzLWxvd2VyLWFscGhhXFxuICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IGxvd2VyLWFscGhhXFxuICAgICAgJi5pcy1sb3dlci1yb21hblxcbiAgICAgICAgbGlzdC1zdHlsZS10eXBlOiBsb3dlci1yb21hblxcbiAgICAgICYuaXMtdXBwZXItYWxwaGFcXG4gICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogdXBwZXItYWxwaGFcXG4gICAgICAmLmlzLXVwcGVyLXJvbWFuXFxuICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IHVwcGVyLXJvbWFuXFxuICB1bFxcbiAgICBsaXN0LXN0eWxlOiBkaXNjIG91dHNpZGVcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMmVtLCBmYWxzZSlcXG4gICAgbWFyZ2luLXRvcDogMWVtXFxuICAgIHVsXFxuICAgICAgbGlzdC1zdHlsZS10eXBlOiBjaXJjbGVcXG4gICAgICBtYXJnaW4tdG9wOiAwLjVlbVxcbiAgICAgIHVsXFxuICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IHNxdWFyZVxcbiAgZGRcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMmVtLCBmYWxzZSlcXG4gIGZpZ3VyZVxcbiAgICBtYXJnaW4tbGVmdDogMmVtXFxuICAgIG1hcmdpbi1yaWdodDogMmVtXFxuICAgIHRleHQtYWxpZ246IGNlbnRlclxcbiAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpXFxuICAgICAgbWFyZ2luLXRvcDogMmVtXFxuICAgICY6bm90KDpsYXN0LWNoaWxkKVxcbiAgICAgIG1hcmdpbi1ib3R0b206IDJlbVxcbiAgICBpbWdcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2tcXG4gICAgZmlnY2FwdGlvblxcbiAgICAgIGZvbnQtc3R5bGU6IGl0YWxpY1xcbiAgcHJlXFxuICAgICtvdmVyZmxvdy10b3VjaFxcbiAgICBvdmVyZmxvdy14OiBhdXRvXFxuICAgIHBhZGRpbmc6ICRjb250ZW50LXByZS1wYWRkaW5nXFxuICAgIHdoaXRlLXNwYWNlOiBwcmVcXG4gICAgd29yZC13cmFwOiBub3JtYWxcXG4gIHN1cCxcXG4gIHN1YlxcbiAgICBmb250LXNpemU6IDc1JVxcbiAgdGFibGVcXG4gICAgd2lkdGg6IDEwMCVcXG4gICAgdGQsXFxuICAgIHRoXFxuICAgICAgYm9yZGVyOiAkY29udGVudC10YWJsZS1jZWxsLWJvcmRlclxcbiAgICAgIGJvcmRlci13aWR0aDogJGNvbnRlbnQtdGFibGUtY2VsbC1ib3JkZXItd2lkdGhcXG4gICAgICBwYWRkaW5nOiAkY29udGVudC10YWJsZS1jZWxsLXBhZGRpbmdcXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wXFxuICAgIHRoXFxuICAgICAgY29sb3I6ICRjb250ZW50LXRhYmxlLWNlbGwtaGVhZGluZy1jb2xvclxcbiAgICAgICY6bm90KFthbGlnbl0pXFxuICAgICAgICB0ZXh0LWFsaWduOiBpbmhlcml0XFxuICAgIHRoZWFkXFxuICAgICAgdGQsXFxuICAgICAgdGhcXG4gICAgICAgIGJvcmRlci13aWR0aDogJGNvbnRlbnQtdGFibGUtaGVhZC1jZWxsLWJvcmRlci13aWR0aFxcbiAgICAgICAgY29sb3I6ICRjb250ZW50LXRhYmxlLWhlYWQtY2VsbC1jb2xvclxcbiAgICB0Zm9vdFxcbiAgICAgIHRkLFxcbiAgICAgIHRoXFxuICAgICAgICBib3JkZXItd2lkdGg6ICRjb250ZW50LXRhYmxlLWZvb3QtY2VsbC1ib3JkZXItd2lkdGhcXG4gICAgICAgIGNvbG9yOiAkY29udGVudC10YWJsZS1mb290LWNlbGwtY29sb3JcXG4gICAgdGJvZHlcXG4gICAgICB0clxcbiAgICAgICAgJjpsYXN0LWNoaWxkXFxuICAgICAgICAgIHRkLFxcbiAgICAgICAgICB0aFxcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b20td2lkdGg6ICRjb250ZW50LXRhYmxlLWJvZHktbGFzdC1yb3ctY2VsbC1ib3JkZXItYm90dG9tLXdpZHRoXFxuICAudGFic1xcbiAgICBsaSArIGxpXFxuICAgICAgbWFyZ2luLXRvcDogMFxcbiAgLy8gU2l6ZXNcXG4gICYuaXMtc21hbGxcXG4gICAgZm9udC1zaXplOiAkc2l6ZS1zbWFsbFxcbiAgJi5pcy1ub3JtYWxcXG4gICAgZm9udC1zaXplOiAkc2l6ZS1ub3JtYWxcXG4gICYuaXMtbWVkaXVtXFxuICAgIGZvbnQtc2l6ZTogJHNpemUtbWVkaXVtXFxuICAmLmlzLWxhcmdlXFxuICAgIGZvbnQtc2l6ZTogJHNpemUtbGFyZ2VcXG5cIixcIiRpY29uLWRpbWVuc2lvbnM6IDEuNXJlbSAhZGVmYXVsdFxcbiRpY29uLWRpbWVuc2lvbnMtc21hbGw6IDFyZW0gIWRlZmF1bHRcXG4kaWNvbi1kaW1lbnNpb25zLW1lZGl1bTogMnJlbSAhZGVmYXVsdFxcbiRpY29uLWRpbWVuc2lvbnMtbGFyZ2U6IDNyZW0gIWRlZmF1bHRcXG4kaWNvbi10ZXh0LXNwYWNpbmc6IDAuMjVlbSAhZGVmYXVsdFxcblxcbi5pY29uXFxuICBhbGlnbi1pdGVtczogY2VudGVyXFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleFxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gIGhlaWdodDogJGljb24tZGltZW5zaW9uc1xcbiAgd2lkdGg6ICRpY29uLWRpbWVuc2lvbnNcXG4gIC8vIFNpemVzXFxuICAmLmlzLXNtYWxsXFxuICAgIGhlaWdodDogJGljb24tZGltZW5zaW9ucy1zbWFsbFxcbiAgICB3aWR0aDogJGljb24tZGltZW5zaW9ucy1zbWFsbFxcbiAgJi5pcy1tZWRpdW1cXG4gICAgaGVpZ2h0OiAkaWNvbi1kaW1lbnNpb25zLW1lZGl1bVxcbiAgICB3aWR0aDogJGljb24tZGltZW5zaW9ucy1tZWRpdW1cXG4gICYuaXMtbGFyZ2VcXG4gICAgaGVpZ2h0OiAkaWNvbi1kaW1lbnNpb25zLWxhcmdlXFxuICAgIHdpZHRoOiAkaWNvbi1kaW1lbnNpb25zLWxhcmdlXFxuXFxuLmljb24tdGV4dFxcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnRcXG4gIGNvbG9yOiBpbmhlcml0XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleFxcbiAgZmxleC13cmFwOiB3cmFwXFxuICBsaW5lLWhlaWdodDogJGljb24tZGltZW5zaW9uc1xcbiAgdmVydGljYWwtYWxpZ246IHRvcFxcbiAgLmljb25cXG4gICAgZmxleC1ncm93OiAwXFxuICAgIGZsZXgtc2hyaW5rOiAwXFxuICAgICY6bm90KDpsYXN0LWNoaWxkKVxcbiAgICAgICtsdHJcXG4gICAgICAgIG1hcmdpbi1yaWdodDogJGljb24tdGV4dC1zcGFjaW5nXFxuICAgICAgK3J0bFxcbiAgICAgICAgbWFyZ2luLWxlZnQ6ICRpY29uLXRleHQtc3BhY2luZ1xcbiAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpXFxuICAgICAgK2x0clxcbiAgICAgICAgbWFyZ2luLWxlZnQ6ICRpY29uLXRleHQtc3BhY2luZ1xcbiAgICAgICtydGxcXG4gICAgICAgIG1hcmdpbi1yaWdodDogJGljb24tdGV4dC1zcGFjaW5nXFxuXFxuZGl2Lmljb24tdGV4dFxcbiAgZGlzcGxheTogZmxleFxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kZGltZW5zaW9uczogMTYgMjQgMzIgNDggNjQgOTYgMTI4ICFkZWZhdWx0XFxuXFxuLmltYWdlXFxuICBkaXNwbGF5OiBibG9ja1xcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuICBpbWdcXG4gICAgZGlzcGxheTogYmxvY2tcXG4gICAgaGVpZ2h0OiBhdXRvXFxuICAgIHdpZHRoOiAxMDAlXFxuICAgICYuaXMtcm91bmRlZFxcbiAgICAgIGJvcmRlci1yYWRpdXM6ICRyYWRpdXMtcm91bmRlZFxcbiAgJi5pcy1mdWxsd2lkdGhcXG4gICAgd2lkdGg6IDEwMCVcXG4gIC8vIFJhdGlvXFxuICAmLmlzLXNxdWFyZSxcXG4gICYuaXMtMWJ5MSxcXG4gICYuaXMtNWJ5NCxcXG4gICYuaXMtNGJ5MyxcXG4gICYuaXMtM2J5MixcXG4gICYuaXMtNWJ5MyxcXG4gICYuaXMtMTZieTksXFxuICAmLmlzLTJieTEsXFxuICAmLmlzLTNieTEsXFxuICAmLmlzLTRieTUsXFxuICAmLmlzLTNieTQsXFxuICAmLmlzLTJieTMsXFxuICAmLmlzLTNieTUsXFxuICAmLmlzLTlieTE2LFxcbiAgJi5pcy0xYnkyLFxcbiAgJi5pcy0xYnkzXFxuICAgIGltZyxcXG4gICAgLmhhcy1yYXRpb1xcbiAgICAgIEBleHRlbmQgJW92ZXJsYXlcXG4gICAgICBoZWlnaHQ6IDEwMCVcXG4gICAgICB3aWR0aDogMTAwJVxcbiAgJi5pcy1zcXVhcmUsXFxuICAmLmlzLTFieTFcXG4gICAgcGFkZGluZy10b3A6IDEwMCVcXG4gICYuaXMtNWJ5NFxcbiAgICBwYWRkaW5nLXRvcDogODAlXFxuICAmLmlzLTRieTNcXG4gICAgcGFkZGluZy10b3A6IDc1JVxcbiAgJi5pcy0zYnkyXFxuICAgIHBhZGRpbmctdG9wOiA2Ni42NjY2JVxcbiAgJi5pcy01YnkzXFxuICAgIHBhZGRpbmctdG9wOiA2MCVcXG4gICYuaXMtMTZieTlcXG4gICAgcGFkZGluZy10b3A6IDU2LjI1JVxcbiAgJi5pcy0yYnkxXFxuICAgIHBhZGRpbmctdG9wOiA1MCVcXG4gICYuaXMtM2J5MVxcbiAgICBwYWRkaW5nLXRvcDogMzMuMzMzMyVcXG4gICYuaXMtNGJ5NVxcbiAgICBwYWRkaW5nLXRvcDogMTI1JVxcbiAgJi5pcy0zYnk0XFxuICAgIHBhZGRpbmctdG9wOiAxMzMuMzMzMyVcXG4gICYuaXMtMmJ5M1xcbiAgICBwYWRkaW5nLXRvcDogMTUwJVxcbiAgJi5pcy0zYnk1XFxuICAgIHBhZGRpbmctdG9wOiAxNjYuNjY2NiVcXG4gICYuaXMtOWJ5MTZcXG4gICAgcGFkZGluZy10b3A6IDE3Ny43Nzc3JVxcbiAgJi5pcy0xYnkyXFxuICAgIHBhZGRpbmctdG9wOiAyMDAlXFxuICAmLmlzLTFieTNcXG4gICAgcGFkZGluZy10b3A6IDMwMCVcXG4gIC8vIFNpemVzXFxuICBAZWFjaCAkZGltZW5zaW9uIGluICRkaW1lbnNpb25zXFxuICAgICYuaXMtI3skZGltZW5zaW9ufXgjeyRkaW1lbnNpb259XFxuICAgICAgaGVpZ2h0OiAkZGltZW5zaW9uICogMXB4XFxuICAgICAgd2lkdGg6ICRkaW1lbnNpb24gKiAxcHhcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJG5vdGlmaWNhdGlvbi1iYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcbiRub3RpZmljYXRpb24tY29kZS1iYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW4gIWRlZmF1bHRcXG4kbm90aWZpY2F0aW9uLXJhZGl1czogJHJhZGl1cyAhZGVmYXVsdFxcbiRub3RpZmljYXRpb24tcGFkZGluZzogMS4yNXJlbSAyLjVyZW0gMS4yNXJlbSAxLjVyZW0gIWRlZmF1bHRcXG4kbm90aWZpY2F0aW9uLXBhZGRpbmctbHRyOiAxLjI1cmVtIDIuNXJlbSAxLjI1cmVtIDEuNXJlbSAhZGVmYXVsdFxcbiRub3RpZmljYXRpb24tcGFkZGluZy1ydGw6IDEuMjVyZW0gMS41cmVtIDEuMjVyZW0gMi41cmVtICFkZWZhdWx0XFxuXFxuJG5vdGlmaWNhdGlvbi1jb2xvcnM6ICRjb2xvcnMgIWRlZmF1bHRcXG5cXG4ubm90aWZpY2F0aW9uXFxuICBAZXh0ZW5kICVibG9ja1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJG5vdGlmaWNhdGlvbi1iYWNrZ3JvdW5kLWNvbG9yXFxuICBib3JkZXItcmFkaXVzOiAkbm90aWZpY2F0aW9uLXJhZGl1c1xcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuICArbHRyXFxuICAgIHBhZGRpbmc6ICRub3RpZmljYXRpb24tcGFkZGluZy1sdHJcXG4gICtydGxcXG4gICAgcGFkZGluZzogJG5vdGlmaWNhdGlvbi1wYWRkaW5nLXJ0bFxcbiAgYTpub3QoLmJ1dHRvbik6bm90KC5kcm9wZG93bi1pdGVtKVxcbiAgICBjb2xvcjogY3VycmVudENvbG9yXFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lXFxuICBzdHJvbmdcXG4gICAgY29sb3I6IGN1cnJlbnRDb2xvclxcbiAgY29kZSxcXG4gIHByZVxcbiAgICBiYWNrZ3JvdW5kOiAkbm90aWZpY2F0aW9uLWNvZGUtYmFja2dyb3VuZC1jb2xvclxcbiAgcHJlIGNvZGVcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnRcXG4gICYgPiAuZGVsZXRlXFxuICAgICtsdHItcG9zaXRpb24oMC41cmVtKVxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGVcXG4gICAgdG9wOiAwLjVyZW1cXG4gIC50aXRsZSxcXG4gIC5zdWJ0aXRsZSxcXG4gIC5jb250ZW50XFxuICAgIGNvbG9yOiBjdXJyZW50Q29sb3JcXG4gIC8vIENvbG9yc1xcbiAgQGVhY2ggJG5hbWUsICRwYWlyIGluICRub3RpZmljYXRpb24tY29sb3JzXFxuICAgICRjb2xvcjogbnRoKCRwYWlyLCAxKVxcbiAgICAkY29sb3ItaW52ZXJ0OiBudGgoJHBhaXIsIDIpXFxuICAgICYuaXMtI3skbmFtZX1cXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JcXG4gICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgIC8vIElmIGxpZ2h0IGFuZCBkYXJrIGNvbG9ycyBhcmUgcHJvdmlkZWRcXG4gICAgICBAaWYgbGVuZ3RoKCRwYWlyKSA+PSA0XFxuICAgICAgICAkY29sb3ItbGlnaHQ6IG50aCgkcGFpciwgMylcXG4gICAgICAgICRjb2xvci1kYXJrOiBudGgoJHBhaXIsIDQpXFxuICAgICAgICAmLmlzLWxpZ2h0XFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1saWdodFxcbiAgICAgICAgICBjb2xvcjogJGNvbG9yLWRhcmtcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJHByb2dyZXNzLWJhci1iYWNrZ3JvdW5kLWNvbG9yOiAkYm9yZGVyLWxpZ2h0ICFkZWZhdWx0XFxuJHByb2dyZXNzLXZhbHVlLWJhY2tncm91bmQtY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuJHByb2dyZXNzLWJvcmRlci1yYWRpdXM6ICRyYWRpdXMtcm91bmRlZCAhZGVmYXVsdFxcblxcbiRwcm9ncmVzcy1pbmRldGVybWluYXRlLWR1cmF0aW9uOiAxLjVzICFkZWZhdWx0XFxuXFxuJHByb2dyZXNzLWNvbG9yczogJGNvbG9ycyAhZGVmYXVsdFxcblxcbi5wcm9ncmVzc1xcbiAgQGV4dGVuZCAlYmxvY2tcXG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZVxcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lXFxuICBib3JkZXI6IG5vbmVcXG4gIGJvcmRlci1yYWRpdXM6ICRwcm9ncmVzcy1ib3JkZXItcmFkaXVzXFxuICBkaXNwbGF5OiBibG9ja1xcbiAgaGVpZ2h0OiAkc2l6ZS1ub3JtYWxcXG4gIG92ZXJmbG93OiBoaWRkZW5cXG4gIHBhZGRpbmc6IDBcXG4gIHdpZHRoOiAxMDAlXFxuICAmOjotd2Via2l0LXByb2dyZXNzLWJhclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJvZ3Jlc3MtYmFyLWJhY2tncm91bmQtY29sb3JcXG4gICY6Oi13ZWJraXQtcHJvZ3Jlc3MtdmFsdWVcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHByb2dyZXNzLXZhbHVlLWJhY2tncm91bmQtY29sb3JcXG4gICY6Oi1tb3otcHJvZ3Jlc3MtYmFyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRwcm9ncmVzcy12YWx1ZS1iYWNrZ3JvdW5kLWNvbG9yXFxuICAmOjotbXMtZmlsbFxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJvZ3Jlc3MtdmFsdWUtYmFja2dyb3VuZC1jb2xvclxcbiAgICBib3JkZXI6IG5vbmVcXG4gIC8vIENvbG9yc1xcbiAgQGVhY2ggJG5hbWUsICRwYWlyIGluICRwcm9ncmVzcy1jb2xvcnNcXG4gICAgJGNvbG9yOiBudGgoJHBhaXIsIDEpXFxuICAgICYuaXMtI3skbmFtZX1cXG4gICAgICAmOjotd2Via2l0LXByb2dyZXNzLXZhbHVlXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JcXG4gICAgICAmOjotbW96LXByb2dyZXNzLWJhclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yXFxuICAgICAgJjo6LW1zLWZpbGxcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvclxcbiAgICAgICY6aW5kZXRlcm1pbmF0ZVxcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAkY29sb3IgMzAlLCAkcHJvZ3Jlc3MtYmFyLWJhY2tncm91bmQtY29sb3IgMzAlKVxcblxcbiAgJjppbmRldGVybWluYXRlXFxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHByb2dyZXNzLWluZGV0ZXJtaW5hdGUtZHVyYXRpb25cXG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGVcXG4gICAgYW5pbWF0aW9uLW5hbWU6IG1vdmVJbmRldGVybWluYXRlXFxuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJvZ3Jlc3MtYmFyLWJhY2tncm91bmQtY29sb3JcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAkdGV4dCAzMCUsICRwcm9ncmVzcy1iYXItYmFja2dyb3VuZC1jb2xvciAzMCUpXFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcCBsZWZ0XFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXRcXG4gICAgYmFja2dyb3VuZC1zaXplOiAxNTAlIDE1MCVcXG4gICAgJjo6LXdlYmtpdC1wcm9ncmVzcy1iYXJcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudFxcbiAgICAmOjotbW96LXByb2dyZXNzLWJhclxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICY6Oi1tcy1maWxsXFxuICAgICAgYW5pbWF0aW9uLW5hbWU6IG5vbmVcXG5cXG4gIC8vIFNpemVzXFxuICAmLmlzLXNtYWxsXFxuICAgIGhlaWdodDogJHNpemUtc21hbGxcXG4gICYuaXMtbWVkaXVtXFxuICAgIGhlaWdodDogJHNpemUtbWVkaXVtXFxuICAmLmlzLWxhcmdlXFxuICAgIGhlaWdodDogJHNpemUtbGFyZ2VcXG5cXG5Aa2V5ZnJhbWVzIG1vdmVJbmRldGVybWluYXRlXFxuICBmcm9tXFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDIwMCUgMFxcbiAgdG9cXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMCUgMFxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kdGFibGUtY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcbiR0YWJsZS1iYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW4gIWRlZmF1bHRcXG5cXG4kdGFibGUtY2VsbC1ib3JkZXI6IDFweCBzb2xpZCAkYm9yZGVyICFkZWZhdWx0XFxuJHRhYmxlLWNlbGwtYm9yZGVyLXdpZHRoOiAwIDAgMXB4ICFkZWZhdWx0XFxuJHRhYmxlLWNlbGwtcGFkZGluZzogMC41ZW0gMC43NWVtICFkZWZhdWx0XFxuJHRhYmxlLWNlbGwtaGVhZGluZy1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuJHRhYmxlLWNlbGwtdGV4dC1hbGlnbjogbGVmdCAhZGVmYXVsdFxcblxcbiR0YWJsZS1oZWFkLWNlbGwtYm9yZGVyLXdpZHRoOiAwIDAgMnB4ICFkZWZhdWx0XFxuJHRhYmxlLWhlYWQtY2VsbC1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuJHRhYmxlLWZvb3QtY2VsbC1ib3JkZXItd2lkdGg6IDJweCAwIDAgIWRlZmF1bHRcXG4kdGFibGUtZm9vdC1jZWxsLWNvbG9yOiAkdGV4dC1zdHJvbmcgIWRlZmF1bHRcXG5cXG4kdGFibGUtaGVhZC1iYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhZGVmYXVsdFxcbiR0YWJsZS1ib2R5LWJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFkZWZhdWx0XFxuJHRhYmxlLWZvb3QtYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWRlZmF1bHRcXG5cXG4kdGFibGUtcm93LWhvdmVyLWJhY2tncm91bmQtY29sb3I6ICRzY2hlbWUtbWFpbi1iaXMgIWRlZmF1bHRcXG5cXG4kdGFibGUtcm93LWFjdGl2ZS1iYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeSAhZGVmYXVsdFxcbiR0YWJsZS1yb3ctYWN0aXZlLWNvbG9yOiAkcHJpbWFyeS1pbnZlcnQgIWRlZmF1bHRcXG5cXG4kdGFibGUtc3RyaXBlZC1yb3ctZXZlbi1iYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW4tYmlzICFkZWZhdWx0XFxuJHRhYmxlLXN0cmlwZWQtcm93LWV2ZW4taG92ZXItYmFja2dyb3VuZC1jb2xvcjogJHNjaGVtZS1tYWluLXRlciAhZGVmYXVsdFxcblxcbiR0YWJsZS1jb2xvcnM6ICRjb2xvcnMgIWRlZmF1bHRcXG5cXG4udGFibGVcXG4gIEBleHRlbmQgJWJsb2NrXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkdGFibGUtYmFja2dyb3VuZC1jb2xvclxcbiAgY29sb3I6ICR0YWJsZS1jb2xvclxcbiAgdGQsXFxuICB0aFxcbiAgICBib3JkZXI6ICR0YWJsZS1jZWxsLWJvcmRlclxcbiAgICBib3JkZXItd2lkdGg6ICR0YWJsZS1jZWxsLWJvcmRlci13aWR0aFxcbiAgICBwYWRkaW5nOiAkdGFibGUtY2VsbC1wYWRkaW5nXFxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3BcXG4gICAgLy8gQ29sb3JzXFxuICAgIEBlYWNoICRuYW1lLCAkcGFpciBpbiAkdGFibGUtY29sb3JzXFxuICAgICAgJGNvbG9yOiBudGgoJHBhaXIsIDEpXFxuICAgICAgJGNvbG9yLWludmVydDogbnRoKCRwYWlyLCAyKVxcbiAgICAgICYuaXMtI3skbmFtZX1cXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvclxcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAkY29sb3JcXG4gICAgICAgIGNvbG9yOiAkY29sb3ItaW52ZXJ0XFxuICAgIC8vIE1vZGlmaWVyc1xcbiAgICAmLmlzLW5hcnJvd1xcbiAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXBcXG4gICAgICB3aWR0aDogMSVcXG4gICAgJi5pcy1zZWxlY3RlZFxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR0YWJsZS1yb3ctYWN0aXZlLWJhY2tncm91bmQtY29sb3JcXG4gICAgICBjb2xvcjogJHRhYmxlLXJvdy1hY3RpdmUtY29sb3JcXG4gICAgICBhLFxcbiAgICAgIHN0cm9uZ1xcbiAgICAgICAgY29sb3I6IGN1cnJlbnRDb2xvclxcbiAgICAmLmlzLXZjZW50ZXJlZFxcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGVcXG4gIHRoXFxuICAgIGNvbG9yOiAkdGFibGUtY2VsbC1oZWFkaW5nLWNvbG9yXFxuICAgICY6bm90KFthbGlnbl0pXFxuICAgICAgdGV4dC1hbGlnbjogJHRhYmxlLWNlbGwtdGV4dC1hbGlnblxcbiAgdHJcXG4gICAgJi5pcy1zZWxlY3RlZFxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR0YWJsZS1yb3ctYWN0aXZlLWJhY2tncm91bmQtY29sb3JcXG4gICAgICBjb2xvcjogJHRhYmxlLXJvdy1hY3RpdmUtY29sb3JcXG4gICAgICBhLFxcbiAgICAgIHN0cm9uZ1xcbiAgICAgICAgY29sb3I6IGN1cnJlbnRDb2xvclxcbiAgICAgIHRkLFxcbiAgICAgIHRoXFxuICAgICAgICBib3JkZXItY29sb3I6ICR0YWJsZS1yb3ctYWN0aXZlLWNvbG9yXFxuICAgICAgICBjb2xvcjogY3VycmVudENvbG9yXFxuICB0aGVhZFxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdGFibGUtaGVhZC1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgIHRkLFxcbiAgICB0aFxcbiAgICAgIGJvcmRlci13aWR0aDogJHRhYmxlLWhlYWQtY2VsbC1ib3JkZXItd2lkdGhcXG4gICAgICBjb2xvcjogJHRhYmxlLWhlYWQtY2VsbC1jb2xvclxcbiAgdGZvb3RcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHRhYmxlLWZvb3QtYmFja2dyb3VuZC1jb2xvclxcbiAgICB0ZCxcXG4gICAgdGhcXG4gICAgICBib3JkZXItd2lkdGg6ICR0YWJsZS1mb290LWNlbGwtYm9yZGVyLXdpZHRoXFxuICAgICAgY29sb3I6ICR0YWJsZS1mb290LWNlbGwtY29sb3JcXG4gIHRib2R5XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICR0YWJsZS1ib2R5LWJhY2tncm91bmQtY29sb3JcXG4gICAgdHJcXG4gICAgICAmOmxhc3QtY2hpbGRcXG4gICAgICAgIHRkLFxcbiAgICAgICAgdGhcXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMFxcbiAgLy8gTW9kaWZpZXJzXFxuICAmLmlzLWJvcmRlcmVkXFxuICAgIHRkLFxcbiAgICB0aFxcbiAgICAgIGJvcmRlci13aWR0aDogMXB4XFxuICAgIHRyXFxuICAgICAgJjpsYXN0LWNoaWxkXFxuICAgICAgICB0ZCxcXG4gICAgICAgIHRoXFxuICAgICAgICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweFxcbiAgJi5pcy1mdWxsd2lkdGhcXG4gICAgd2lkdGg6IDEwMCVcXG4gICYuaXMtaG92ZXJhYmxlXFxuICAgIHRib2R5XFxuICAgICAgdHI6bm90KC5pcy1zZWxlY3RlZClcXG4gICAgICAgICY6aG92ZXJcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHRhYmxlLXJvdy1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgICYuaXMtc3RyaXBlZFxcbiAgICAgIHRib2R5XFxuICAgICAgICB0cjpub3QoLmlzLXNlbGVjdGVkKVxcbiAgICAgICAgICAmOmhvdmVyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHRhYmxlLXJvdy1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgICAgICAgICAgJjpudGgtY2hpbGQoZXZlbilcXG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR0YWJsZS1zdHJpcGVkLXJvdy1ldmVuLWhvdmVyLWJhY2tncm91bmQtY29sb3JcXG4gICYuaXMtbmFycm93XFxuICAgIHRkLFxcbiAgICB0aFxcbiAgICAgIHBhZGRpbmc6IDAuMjVlbSAwLjVlbVxcbiAgJi5pcy1zdHJpcGVkXFxuICAgIHRib2R5XFxuICAgICAgdHI6bm90KC5pcy1zZWxlY3RlZClcXG4gICAgICAgICY6bnRoLWNoaWxkKGV2ZW4pXFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR0YWJsZS1zdHJpcGVkLXJvdy1ldmVuLWJhY2tncm91bmQtY29sb3JcXG5cXG4udGFibGUtY29udGFpbmVyXFxuICBAZXh0ZW5kICVibG9ja1xcbiAgK292ZXJmbG93LXRvdWNoXFxuICBvdmVyZmxvdzogYXV0b1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuXFxuICBtYXgtd2lkdGg6IDEwMCVcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJHRhZy1iYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcbiR0YWctY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuJHRhZy1yYWRpdXM6ICRyYWRpdXMgIWRlZmF1bHRcXG4kdGFnLWRlbGV0ZS1tYXJnaW46IDFweCAhZGVmYXVsdFxcblxcbiR0YWctY29sb3JzOiAkY29sb3JzICFkZWZhdWx0XFxuXFxuLnRhZ3NcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gIGRpc3BsYXk6IGZsZXhcXG4gIGZsZXgtd3JhcDogd3JhcFxcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0XFxuICAudGFnXFxuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbVxcbiAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAwLjVyZW0pXFxuICAmOmxhc3QtY2hpbGRcXG4gICAgbWFyZ2luLWJvdHRvbTogLTAuNXJlbVxcbiAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW1cXG4gIC8vIFNpemVzXFxuICAmLmFyZS1tZWRpdW1cXG4gICAgLnRhZzpub3QoLmlzLW5vcm1hbCk6bm90KC5pcy1sYXJnZSlcXG4gICAgICBmb250LXNpemU6ICRzaXplLW5vcm1hbFxcbiAgJi5hcmUtbGFyZ2VcXG4gICAgLnRhZzpub3QoLmlzLW5vcm1hbCk6bm90KC5pcy1tZWRpdW0pXFxuICAgICAgZm9udC1zaXplOiAkc2l6ZS1tZWRpdW1cXG4gICYuaXMtY2VudGVyZWRcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gICAgLnRhZ1xcbiAgICAgIG1hcmdpbi1yaWdodDogMC4yNXJlbVxcbiAgICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtXFxuICAmLmlzLXJpZ2h0XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmRcXG4gICAgLnRhZ1xcbiAgICAgICY6bm90KDpmaXJzdC1jaGlsZClcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwLjVyZW1cXG4gICAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICAgIG1hcmdpbi1yaWdodDogMFxcbiAgJi5oYXMtYWRkb25zXFxuICAgIC50YWdcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAwKVxcbiAgICAgICY6bm90KDpmaXJzdC1jaGlsZClcXG4gICAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDAsIGZhbHNlKVxcbiAgICAgICAgK2x0clxcbiAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwXFxuICAgICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDBcXG4gICAgICAgICtydGxcXG4gICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDBcXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDBcXG4gICAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICAgICtsdHJcXG4gICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDBcXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDBcXG4gICAgICAgICtydGxcXG4gICAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMFxcbiAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwXFxuXFxuLnRhZzpub3QoYm9keSlcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gIGJhY2tncm91bmQtY29sb3I6ICR0YWctYmFja2dyb3VuZC1jb2xvclxcbiAgYm9yZGVyLXJhZGl1czogJHRhZy1yYWRpdXNcXG4gIGNvbG9yOiAkdGFnLWNvbG9yXFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleFxcbiAgZm9udC1zaXplOiAkc2l6ZS1zbWFsbFxcbiAgaGVpZ2h0OiAyZW1cXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyXFxuICBsaW5lLWhlaWdodDogMS41XFxuICBwYWRkaW5nLWxlZnQ6IDAuNzVlbVxcbiAgcGFkZGluZy1yaWdodDogMC43NWVtXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwXFxuICAuZGVsZXRlXFxuICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDAuMjVyZW0sIGZhbHNlKVxcbiAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAtMC4zNzVyZW0pXFxuICAvLyBDb2xvcnNcXG4gIEBlYWNoICRuYW1lLCAkcGFpciBpbiAkdGFnLWNvbG9yc1xcbiAgICAkY29sb3I6IG50aCgkcGFpciwgMSlcXG4gICAgJGNvbG9yLWludmVydDogbnRoKCRwYWlyLCAyKVxcbiAgICAmLmlzLSN7JG5hbWV9XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yXFxuICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAvLyBJZiBhIGxpZ2h0IGFuZCBkYXJrIGNvbG9ycyBhcmUgcHJvdmlkZWRcXG4gICAgICBAaWYgbGVuZ3RoKCRwYWlyKSA+IDNcXG4gICAgICAgICRjb2xvci1saWdodDogbnRoKCRwYWlyLCAzKVxcbiAgICAgICAgJGNvbG9yLWRhcms6IG50aCgkcGFpciwgNClcXG4gICAgICAgICYuaXMtbGlnaHRcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWxpZ2h0XFxuICAgICAgICAgIGNvbG9yOiAkY29sb3ItZGFya1xcbiAgLy8gU2l6ZXNcXG4gICYuaXMtbm9ybWFsXFxuICAgIGZvbnQtc2l6ZTogJHNpemUtc21hbGxcXG4gICYuaXMtbWVkaXVtXFxuICAgIGZvbnQtc2l6ZTogJHNpemUtbm9ybWFsXFxuICAmLmlzLWxhcmdlXFxuICAgIGZvbnQtc2l6ZTogJHNpemUtbWVkaXVtXFxuICAuaWNvblxcbiAgICAmOmZpcnN0LWNoaWxkOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAtMC4zNzVlbSwgZmFsc2UpXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMC4xODc1ZW0pXFxuICAgICY6bGFzdC1jaGlsZDpub3QoOmZpcnN0LWNoaWxkKVxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDAuMTg3NWVtLCBmYWxzZSlcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAtMC4zNzVlbSlcXG4gICAgJjpmaXJzdC1jaGlsZDpsYXN0LWNoaWxkXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgLTAuMzc1ZW0sIGZhbHNlKVxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIC0wLjM3NWVtKVxcbiAgLy8gTW9kaWZpZXJzXFxuICAmLmlzLWRlbGV0ZVxcbiAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAkdGFnLWRlbGV0ZS1tYXJnaW4sIGZhbHNlKVxcbiAgICBwYWRkaW5nOiAwXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZVxcbiAgICB3aWR0aDogMmVtXFxuICAgICY6OmJlZm9yZSxcXG4gICAgJjo6YWZ0ZXJcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3JcXG4gICAgICBjb250ZW50OiBcXFwiXFxcIlxcbiAgICAgIGRpc3BsYXk6IGJsb2NrXFxuICAgICAgbGVmdDogNTAlXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlXFxuICAgICAgdG9wOiA1MCVcXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKSByb3RhdGUoNDVkZWcpXFxuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlclxcbiAgICAmOjpiZWZvcmVcXG4gICAgICBoZWlnaHQ6IDFweFxcbiAgICAgIHdpZHRoOiA1MCVcXG4gICAgJjo6YWZ0ZXJcXG4gICAgICBoZWlnaHQ6IDUwJVxcbiAgICAgIHdpZHRoOiAxcHhcXG4gICAgJjpob3ZlcixcXG4gICAgJjpmb2N1c1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtlbigkdGFnLWJhY2tncm91bmQtY29sb3IsIDUlKVxcbiAgICAmOmFjdGl2ZVxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtlbigkdGFnLWJhY2tncm91bmQtY29sb3IsIDEwJSlcXG4gICYuaXMtcm91bmRlZFxcbiAgICBib3JkZXItcmFkaXVzOiAkcmFkaXVzLXJvdW5kZWRcXG5cXG5hLnRhZ1xcbiAgJjpob3ZlclxcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZVxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kdGl0bGUtY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcbiR0aXRsZS1mYW1pbHk6IGZhbHNlICFkZWZhdWx0XFxuJHRpdGxlLXNpemU6ICRzaXplLTMgIWRlZmF1bHRcXG4kdGl0bGUtd2VpZ2h0OiAkd2VpZ2h0LXNlbWlib2xkICFkZWZhdWx0XFxuJHRpdGxlLWxpbmUtaGVpZ2h0OiAxLjEyNSAhZGVmYXVsdFxcbiR0aXRsZS1zdHJvbmctY29sb3I6IGluaGVyaXQgIWRlZmF1bHRcXG4kdGl0bGUtc3Ryb25nLXdlaWdodDogaW5oZXJpdCAhZGVmYXVsdFxcbiR0aXRsZS1zdWItc2l6ZTogMC43NWVtICFkZWZhdWx0XFxuJHRpdGxlLXN1cC1zaXplOiAwLjc1ZW0gIWRlZmF1bHRcXG5cXG4kc3VidGl0bGUtY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuJHN1YnRpdGxlLWZhbWlseTogZmFsc2UgIWRlZmF1bHRcXG4kc3VidGl0bGUtc2l6ZTogJHNpemUtNSAhZGVmYXVsdFxcbiRzdWJ0aXRsZS13ZWlnaHQ6ICR3ZWlnaHQtbm9ybWFsICFkZWZhdWx0XFxuJHN1YnRpdGxlLWxpbmUtaGVpZ2h0OiAxLjI1ICFkZWZhdWx0XFxuJHN1YnRpdGxlLXN0cm9uZy1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuJHN1YnRpdGxlLXN0cm9uZy13ZWlnaHQ6ICR3ZWlnaHQtc2VtaWJvbGQgIWRlZmF1bHRcXG4kc3VidGl0bGUtbmVnYXRpdmUtbWFyZ2luOiAtMS4yNXJlbSAhZGVmYXVsdFxcblxcbi50aXRsZSxcXG4uc3VidGl0bGVcXG4gIEBleHRlbmQgJWJsb2NrXFxuICB3b3JkLWJyZWFrOiBicmVhay13b3JkXFxuICBlbSxcXG4gIHNwYW5cXG4gICAgZm9udC13ZWlnaHQ6IGluaGVyaXRcXG4gIHN1YlxcbiAgICBmb250LXNpemU6ICR0aXRsZS1zdWItc2l6ZVxcbiAgc3VwXFxuICAgIGZvbnQtc2l6ZTogJHRpdGxlLXN1cC1zaXplXFxuICAudGFnXFxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGVcXG5cXG4udGl0bGVcXG4gIGNvbG9yOiAkdGl0bGUtY29sb3JcXG4gIEBpZiAkdGl0bGUtZmFtaWx5XFxuICAgIGZvbnQtZmFtaWx5OiAkdGl0bGUtZmFtaWx5XFxuICBmb250LXNpemU6ICR0aXRsZS1zaXplXFxuICBmb250LXdlaWdodDogJHRpdGxlLXdlaWdodFxcbiAgbGluZS1oZWlnaHQ6ICR0aXRsZS1saW5lLWhlaWdodFxcbiAgc3Ryb25nXFxuICAgIGNvbG9yOiAkdGl0bGUtc3Ryb25nLWNvbG9yXFxuICAgIGZvbnQtd2VpZ2h0OiAkdGl0bGUtc3Ryb25nLXdlaWdodFxcbiAgJjpub3QoLmlzLXNwYWNlZCkgKyAuc3VidGl0bGVcXG4gICAgbWFyZ2luLXRvcDogJHN1YnRpdGxlLW5lZ2F0aXZlLW1hcmdpblxcbiAgLy8gU2l6ZXNcXG4gIEBlYWNoICRzaXplIGluICRzaXplc1xcbiAgICAkaTogaW5kZXgoJHNpemVzLCAkc2l6ZSlcXG4gICAgJi5pcy0jeyRpfVxcbiAgICAgIGZvbnQtc2l6ZTogJHNpemVcXG5cXG4uc3VidGl0bGVcXG4gIGNvbG9yOiAkc3VidGl0bGUtY29sb3JcXG4gIEBpZiAkc3VidGl0bGUtZmFtaWx5XFxuICAgIGZvbnQtZmFtaWx5OiAkc3VidGl0bGUtZmFtaWx5XFxuICBmb250LXNpemU6ICRzdWJ0aXRsZS1zaXplXFxuICBmb250LXdlaWdodDogJHN1YnRpdGxlLXdlaWdodFxcbiAgbGluZS1oZWlnaHQ6ICRzdWJ0aXRsZS1saW5lLWhlaWdodFxcbiAgc3Ryb25nXFxuICAgIGNvbG9yOiAkc3VidGl0bGUtc3Ryb25nLWNvbG9yXFxuICAgIGZvbnQtd2VpZ2h0OiAkc3VidGl0bGUtc3Ryb25nLXdlaWdodFxcbiAgJjpub3QoLmlzLXNwYWNlZCkgKyAudGl0bGVcXG4gICAgbWFyZ2luLXRvcDogJHN1YnRpdGxlLW5lZ2F0aXZlLW1hcmdpblxcbiAgLy8gU2l6ZXNcXG4gIEBlYWNoICRzaXplIGluICRzaXplc1xcbiAgICAkaTogaW5kZXgoJHNpemVzLCAkc2l6ZSlcXG4gICAgJi5pcy0jeyRpfVxcbiAgICAgIGZvbnQtc2l6ZTogJHNpemVcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuLmJsb2NrXFxuICBAZXh0ZW5kICVibG9ja1xcblxcbi5kZWxldGVcXG4gIEBleHRlbmQgJWRlbGV0ZVxcblxcbi5oZWFkaW5nXFxuICBkaXNwbGF5OiBibG9ja1xcbiAgZm9udC1zaXplOiAxMXB4XFxuICBsZXR0ZXItc3BhY2luZzogMXB4XFxuICBtYXJnaW4tYm90dG9tOiA1cHhcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2VcXG5cXG4ubG9hZGVyXFxuICBAZXh0ZW5kICVsb2FkZXJcXG5cXG4ubnVtYmVyXFxuICBhbGlnbi1pdGVtczogY2VudGVyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZFxcbiAgYm9yZGVyLXJhZGl1czogJHJhZGl1cy1yb3VuZGVkXFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleFxcbiAgZm9udC1zaXplOiAkc2l6ZS1tZWRpdW1cXG4gIGhlaWdodDogMmVtXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcbiAgbWFyZ2luLXJpZ2h0OiAxLjVyZW1cXG4gIG1pbi13aWR0aDogMi41ZW1cXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtXFxuICB0ZXh0LWFsaWduOiBjZW50ZXJcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3BcXG5cIixcIi8qIEJ1bG1hIEZvcm0gKi9cXG5AY2hhcnNldCBcXFwidXRmLThcXFwiXFxuXFxuQGltcG9ydCBcXFwic2hhcmVkXFxcIlxcbkBpbXBvcnQgXFxcImlucHV0LXRleHRhcmVhXFxcIlxcbkBpbXBvcnQgXFxcImNoZWNrYm94LXJhZGlvXFxcIlxcbkBpbXBvcnQgXFxcInNlbGVjdFxcXCJcXG5AaW1wb3J0IFxcXCJmaWxlXFxcIlxcbkBpbXBvcnQgXFxcInRvb2xzXFxcIlxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL2NvbnRyb2xzXFxcIlxcbkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJGZvcm0tY29sb3JzOiAkY29sb3JzICFkZWZhdWx0XFxuXFxuJGlucHV0LWNvbG9yOiAkdGV4dC1zdHJvbmcgIWRlZmF1bHRcXG4kaW5wdXQtYmFja2dyb3VuZC1jb2xvcjogJHNjaGVtZS1tYWluICFkZWZhdWx0XFxuJGlucHV0LWJvcmRlci1jb2xvcjogJGJvcmRlciAhZGVmYXVsdFxcbiRpbnB1dC1oZWlnaHQ6ICRjb250cm9sLWhlaWdodCAhZGVmYXVsdFxcbiRpbnB1dC1zaGFkb3c6IGluc2V0IDAgMC4wNjI1ZW0gMC4xMjVlbSByZ2JhKCRzY2hlbWUtaW52ZXJ0LCAwLjA1KSAhZGVmYXVsdFxcbiRpbnB1dC1wbGFjZWhvbGRlci1jb2xvcjogYnVsbWFSZ2JhKCRpbnB1dC1jb2xvciwgMC4zKSAhZGVmYXVsdFxcblxcbiRpbnB1dC1ob3Zlci1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuJGlucHV0LWhvdmVyLWJvcmRlci1jb2xvcjogJGJvcmRlci1ob3ZlciAhZGVmYXVsdFxcblxcbiRpbnB1dC1mb2N1cy1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuJGlucHV0LWZvY3VzLWJvcmRlci1jb2xvcjogJGxpbmsgIWRlZmF1bHRcXG4kaW5wdXQtZm9jdXMtYm94LXNoYWRvdy1zaXplOiAwIDAgMCAwLjEyNWVtICFkZWZhdWx0XFxuJGlucHV0LWZvY3VzLWJveC1zaGFkb3ctY29sb3I6IGJ1bG1hUmdiYSgkbGluaywgMC4yNSkgIWRlZmF1bHRcXG5cXG4kaW5wdXQtZGlzYWJsZWQtY29sb3I6ICR0ZXh0LWxpZ2h0ICFkZWZhdWx0XFxuJGlucHV0LWRpc2FibGVkLWJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kICFkZWZhdWx0XFxuJGlucHV0LWRpc2FibGVkLWJvcmRlci1jb2xvcjogJGJhY2tncm91bmQgIWRlZmF1bHRcXG4kaW5wdXQtZGlzYWJsZWQtcGxhY2Vob2xkZXItY29sb3I6IGJ1bG1hUmdiYSgkaW5wdXQtZGlzYWJsZWQtY29sb3IsIDAuMykgIWRlZmF1bHRcXG5cXG4kaW5wdXQtYXJyb3c6ICRsaW5rICFkZWZhdWx0XFxuXFxuJGlucHV0LWljb24tY29sb3I6ICRib3JkZXIgIWRlZmF1bHRcXG4kaW5wdXQtaWNvbi1hY3RpdmUtY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuXFxuJGlucHV0LXJhZGl1czogJHJhZGl1cyAhZGVmYXVsdFxcblxcbj1pbnB1dFxcbiAgQGV4dGVuZCAlY29udHJvbFxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGlucHV0LWJhY2tncm91bmQtY29sb3JcXG4gIGJvcmRlci1jb2xvcjogJGlucHV0LWJvcmRlci1jb2xvclxcbiAgYm9yZGVyLXJhZGl1czogJGlucHV0LXJhZGl1c1xcbiAgY29sb3I6ICRpbnB1dC1jb2xvclxcbiAgK3BsYWNlaG9sZGVyXFxuICAgIGNvbG9yOiAkaW5wdXQtcGxhY2Vob2xkZXItY29sb3JcXG4gICY6aG92ZXIsXFxuICAmLmlzLWhvdmVyZWRcXG4gICAgYm9yZGVyLWNvbG9yOiAkaW5wdXQtaG92ZXItYm9yZGVyLWNvbG9yXFxuICAmOmZvY3VzLFxcbiAgJi5pcy1mb2N1c2VkLFxcbiAgJjphY3RpdmUsXFxuICAmLmlzLWFjdGl2ZVxcbiAgICBib3JkZXItY29sb3I6ICRpbnB1dC1mb2N1cy1ib3JkZXItY29sb3JcXG4gICAgYm94LXNoYWRvdzogJGlucHV0LWZvY3VzLWJveC1zaGFkb3ctc2l6ZSAkaW5wdXQtZm9jdXMtYm94LXNoYWRvdy1jb2xvclxcbiAgJltkaXNhYmxlZF0sXFxuICBmaWVsZHNldFtkaXNhYmxlZF0gJlxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkaW5wdXQtZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvclxcbiAgICBib3JkZXItY29sb3I6ICRpbnB1dC1kaXNhYmxlZC1ib3JkZXItY29sb3JcXG4gICAgYm94LXNoYWRvdzogbm9uZVxcbiAgICBjb2xvcjogJGlucHV0LWRpc2FibGVkLWNvbG9yXFxuICAgICtwbGFjZWhvbGRlclxcbiAgICAgIGNvbG9yOiAkaW5wdXQtZGlzYWJsZWQtcGxhY2Vob2xkZXItY29sb3JcXG5cXG4laW5wdXRcXG4gICtpbnB1dFxcblwiLFwiJHRleHRhcmVhLXBhZGRpbmc6ICRjb250cm9sLXBhZGRpbmctaG9yaXpvbnRhbCAhZGVmYXVsdFxcbiR0ZXh0YXJlYS1tYXgtaGVpZ2h0OiA0MGVtICFkZWZhdWx0XFxuJHRleHRhcmVhLW1pbi1oZWlnaHQ6IDhlbSAhZGVmYXVsdFxcblxcbiR0ZXh0YXJlYS1jb2xvcnM6ICRmb3JtLWNvbG9ycyAhZGVmYXVsdFxcblxcbiVpbnB1dC10ZXh0YXJlYVxcbiAgQGV4dGVuZCAlaW5wdXRcXG4gIGJveC1zaGFkb3c6ICRpbnB1dC1zaGFkb3dcXG4gIG1heC13aWR0aDogMTAwJVxcbiAgd2lkdGg6IDEwMCVcXG4gICZbcmVhZG9ubHldXFxuICAgIGJveC1zaGFkb3c6IG5vbmVcXG4gIC8vIENvbG9yc1xcbiAgQGVhY2ggJG5hbWUsICRwYWlyIGluICR0ZXh0YXJlYS1jb2xvcnNcXG4gICAgJGNvbG9yOiBudGgoJHBhaXIsIDEpXFxuICAgICYuaXMtI3skbmFtZX1cXG4gICAgICBib3JkZXItY29sb3I6ICRjb2xvclxcbiAgICAgICY6Zm9jdXMsXFxuICAgICAgJi5pcy1mb2N1c2VkLFxcbiAgICAgICY6YWN0aXZlLFxcbiAgICAgICYuaXMtYWN0aXZlXFxuICAgICAgICBib3gtc2hhZG93OiAkaW5wdXQtZm9jdXMtYm94LXNoYWRvdy1zaXplIGJ1bG1hUmdiYSgkY29sb3IsIDAuMjUpXFxuICAvLyBTaXplc1xcbiAgJi5pcy1zbWFsbFxcbiAgICArY29udHJvbC1zbWFsbFxcbiAgJi5pcy1tZWRpdW1cXG4gICAgK2NvbnRyb2wtbWVkaXVtXFxuICAmLmlzLWxhcmdlXFxuICAgICtjb250cm9sLWxhcmdlXFxuICAvLyBNb2RpZmllcnNcXG4gICYuaXMtZnVsbHdpZHRoXFxuICAgIGRpc3BsYXk6IGJsb2NrXFxuICAgIHdpZHRoOiAxMDAlXFxuICAmLmlzLWlubGluZVxcbiAgICBkaXNwbGF5OiBpbmxpbmVcXG4gICAgd2lkdGg6IGF1dG9cXG5cXG4uaW5wdXRcXG4gIEBleHRlbmQgJWlucHV0LXRleHRhcmVhXFxuICAmLmlzLXJvdW5kZWRcXG4gICAgYm9yZGVyLXJhZGl1czogJHJhZGl1cy1yb3VuZGVkXFxuICAgIHBhZGRpbmctbGVmdDogY2FsYygjeyRjb250cm9sLXBhZGRpbmctaG9yaXpvbnRhbH0gKyAwLjM3NWVtKVxcbiAgICBwYWRkaW5nLXJpZ2h0OiBjYWxjKCN7JGNvbnRyb2wtcGFkZGluZy1ob3Jpem9udGFsfSArIDAuMzc1ZW0pXFxuICAmLmlzLXN0YXRpY1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudFxcbiAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50XFxuICAgIGJveC1zaGFkb3c6IG5vbmVcXG4gICAgcGFkZGluZy1sZWZ0OiAwXFxuICAgIHBhZGRpbmctcmlnaHQ6IDBcXG5cXG4udGV4dGFyZWFcXG4gIEBleHRlbmQgJWlucHV0LXRleHRhcmVhXFxuICBkaXNwbGF5OiBibG9ja1xcbiAgbWF4LXdpZHRoOiAxMDAlXFxuICBtaW4td2lkdGg6IDEwMCVcXG4gIHBhZGRpbmc6ICR0ZXh0YXJlYS1wYWRkaW5nXFxuICByZXNpemU6IHZlcnRpY2FsXFxuICAmOm5vdChbcm93c10pXFxuICAgIG1heC1oZWlnaHQ6ICR0ZXh0YXJlYS1tYXgtaGVpZ2h0XFxuICAgIG1pbi1oZWlnaHQ6ICR0ZXh0YXJlYS1taW4taGVpZ2h0XFxuICAmW3Jvd3NdXFxuICAgIGhlaWdodDogaW5pdGlhbFxcbiAgLy8gTW9kaWZpZXJzXFxuICAmLmhhcy1maXhlZC1zaXplXFxuICAgIHJlc2l6ZTogbm9uZVxcblwiLFwiJWNoZWNrYm94LXJhZGlvXFxuICBjdXJzb3I6IHBvaW50ZXJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9ja1xcbiAgbGluZS1oZWlnaHQ6IDEuMjVcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZVxcbiAgaW5wdXRcXG4gICAgY3Vyc29yOiBwb2ludGVyXFxuICAmOmhvdmVyXFxuICAgIGNvbG9yOiAkaW5wdXQtaG92ZXItY29sb3JcXG4gICZbZGlzYWJsZWRdLFxcbiAgZmllbGRzZXRbZGlzYWJsZWRdICYsXFxuICBpbnB1dFtkaXNhYmxlZF1cXG4gICAgY29sb3I6ICRpbnB1dC1kaXNhYmxlZC1jb2xvclxcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkXFxuXFxuLmNoZWNrYm94XFxuICBAZXh0ZW5kICVjaGVja2JveC1yYWRpb1xcblxcbi5yYWRpb1xcbiAgQGV4dGVuZCAlY2hlY2tib3gtcmFkaW9cXG4gICYgKyAucmFkaW9cXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMC41ZW0sIGZhbHNlKVxcblwiLFwiJHNlbGVjdC1jb2xvcnM6ICRmb3JtLWNvbG9ycyAhZGVmYXVsdFxcblxcbi5zZWxlY3RcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9ja1xcbiAgbWF4LXdpZHRoOiAxMDAlXFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3BcXG4gICY6bm90KC5pcy1tdWx0aXBsZSlcXG4gICAgaGVpZ2h0OiAkaW5wdXQtaGVpZ2h0XFxuICAmOm5vdCguaXMtbXVsdGlwbGUpOm5vdCguaXMtbG9hZGluZylcXG4gICAgJjo6YWZ0ZXJcXG4gICAgICBAZXh0ZW5kICVhcnJvd1xcbiAgICAgIGJvcmRlci1jb2xvcjogJGlucHV0LWFycm93XFxuICAgICAgK2x0ci1wb3NpdGlvbigxLjEyNWVtKVxcbiAgICAgIHotaW5kZXg6IDRcXG4gICYuaXMtcm91bmRlZFxcbiAgICBzZWxlY3RcXG4gICAgICBib3JkZXItcmFkaXVzOiAkcmFkaXVzLXJvdW5kZWRcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJwYWRkaW5nXFxcIiwgMWVtLCBmYWxzZSlcXG4gIHNlbGVjdFxcbiAgICBAZXh0ZW5kICVpbnB1dFxcbiAgICBjdXJzb3I6IHBvaW50ZXJcXG4gICAgZGlzcGxheTogYmxvY2tcXG4gICAgZm9udC1zaXplOiAxZW1cXG4gICAgbWF4LXdpZHRoOiAxMDAlXFxuICAgIG91dGxpbmU6IG5vbmVcXG4gICAgJjo6LW1zLWV4cGFuZFxcbiAgICAgIGRpc3BsYXk6IG5vbmVcXG4gICAgJltkaXNhYmxlZF06aG92ZXIsXFxuICAgIGZpZWxkc2V0W2Rpc2FibGVkXSAmOmhvdmVyXFxuICAgICAgYm9yZGVyLWNvbG9yOiAkaW5wdXQtZGlzYWJsZWQtYm9yZGVyLWNvbG9yXFxuICAgICY6bm90KFttdWx0aXBsZV0pXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwicGFkZGluZ1xcXCIsIDIuNWVtKVxcbiAgICAmW211bHRpcGxlXVxcbiAgICAgIGhlaWdodDogYXV0b1xcbiAgICAgIHBhZGRpbmc6IDBcXG4gICAgICBvcHRpb25cXG4gICAgICAgIHBhZGRpbmc6IDAuNWVtIDFlbVxcbiAgLy8gU3RhdGVzXFxuICAmOm5vdCguaXMtbXVsdGlwbGUpOm5vdCguaXMtbG9hZGluZyk6aG92ZXJcXG4gICAgJjo6YWZ0ZXJcXG4gICAgICBib3JkZXItY29sb3I6ICRpbnB1dC1ob3Zlci1jb2xvclxcbiAgLy8gQ29sb3JzXFxuICBAZWFjaCAkbmFtZSwgJHBhaXIgaW4gJHNlbGVjdC1jb2xvcnNcXG4gICAgJGNvbG9yOiBudGgoJHBhaXIsIDEpXFxuICAgICYuaXMtI3skbmFtZX1cXG4gICAgICAmOm5vdCg6aG92ZXIpOjphZnRlclxcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAkY29sb3JcXG4gICAgICBzZWxlY3RcXG4gICAgICAgIGJvcmRlci1jb2xvcjogJGNvbG9yXFxuICAgICAgICAmOmhvdmVyLFxcbiAgICAgICAgJi5pcy1ob3ZlcmVkXFxuICAgICAgICAgIGJvcmRlci1jb2xvcjogYnVsbWFEYXJrZW4oJGNvbG9yLCA1JSlcXG4gICAgICAgICY6Zm9jdXMsXFxuICAgICAgICAmLmlzLWZvY3VzZWQsXFxuICAgICAgICAmOmFjdGl2ZSxcXG4gICAgICAgICYuaXMtYWN0aXZlXFxuICAgICAgICAgIGJveC1zaGFkb3c6ICRpbnB1dC1mb2N1cy1ib3gtc2hhZG93LXNpemUgYnVsbWFSZ2JhKCRjb2xvciwgMC4yNSlcXG4gIC8vIFNpemVzXFxuICAmLmlzLXNtYWxsXFxuICAgICtjb250cm9sLXNtYWxsXFxuICAmLmlzLW1lZGl1bVxcbiAgICArY29udHJvbC1tZWRpdW1cXG4gICYuaXMtbGFyZ2VcXG4gICAgK2NvbnRyb2wtbGFyZ2VcXG4gIC8vIE1vZGlmaWVyc1xcbiAgJi5pcy1kaXNhYmxlZFxcbiAgICAmOjphZnRlclxcbiAgICAgIGJvcmRlci1jb2xvcjogJGlucHV0LWRpc2FibGVkLWNvbG9yICFpbXBvcnRhbnRcXG4gICAgICBvcGFjaXR5OiAwLjVcXG4gICYuaXMtZnVsbHdpZHRoXFxuICAgIHdpZHRoOiAxMDAlXFxuICAgIHNlbGVjdFxcbiAgICAgIHdpZHRoOiAxMDAlXFxuICAmLmlzLWxvYWRpbmdcXG4gICAgJjo6YWZ0ZXJcXG4gICAgICBAZXh0ZW5kICVsb2FkZXJcXG4gICAgICBtYXJnaW4tdG9wOiAwXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlXFxuICAgICAgK2x0ci1wb3NpdGlvbigwLjYyNWVtKVxcbiAgICAgIHRvcDogMC42MjVlbVxcbiAgICAgIHRyYW5zZm9ybTogbm9uZVxcbiAgICAmLmlzLXNtYWxsOmFmdGVyXFxuICAgICAgZm9udC1zaXplOiAkc2l6ZS1zbWFsbFxcbiAgICAmLmlzLW1lZGl1bTphZnRlclxcbiAgICAgIGZvbnQtc2l6ZTogJHNpemUtbWVkaXVtXFxuICAgICYuaXMtbGFyZ2U6YWZ0ZXJcXG4gICAgICBmb250LXNpemU6ICRzaXplLWxhcmdlXFxuXCIsXCIkZmlsZS1ib3JkZXItY29sb3I6ICRib3JkZXIgIWRlZmF1bHRcXG4kZmlsZS1yYWRpdXM6ICRyYWRpdXMgIWRlZmF1bHRcXG5cXG4kZmlsZS1jdGEtYmFja2dyb3VuZC1jb2xvcjogJHNjaGVtZS1tYWluLXRlciAhZGVmYXVsdFxcbiRmaWxlLWN0YS1jb2xvcjogJHRleHQgIWRlZmF1bHRcXG4kZmlsZS1jdGEtaG92ZXItY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcbiRmaWxlLWN0YS1hY3RpdmUtY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcblxcbiRmaWxlLW5hbWUtYm9yZGVyLWNvbG9yOiAkYm9yZGVyICFkZWZhdWx0XFxuJGZpbGUtbmFtZS1ib3JkZXItc3R5bGU6IHNvbGlkICFkZWZhdWx0XFxuJGZpbGUtbmFtZS1ib3JkZXItd2lkdGg6IDFweCAxcHggMXB4IDAgIWRlZmF1bHRcXG4kZmlsZS1uYW1lLW1heC13aWR0aDogMTZlbSAhZGVmYXVsdFxcblxcbiRmaWxlLWNvbG9yczogJGZvcm0tY29sb3JzICFkZWZhdWx0XFxuXFxuLmZpbGVcXG4gIEBleHRlbmQgJXVuc2VsZWN0YWJsZVxcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2hcXG4gIGRpc3BsYXk6IGZsZXhcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydFxcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuICAvLyBDb2xvcnNcXG4gIEBlYWNoICRuYW1lLCAkcGFpciBpbiAkZmlsZS1jb2xvcnNcXG4gICAgJGNvbG9yOiBudGgoJHBhaXIsIDEpXFxuICAgICRjb2xvci1pbnZlcnQ6IG50aCgkcGFpciwgMilcXG4gICAgJi5pcy0jeyRuYW1lfVxcbiAgICAgIC5maWxlLWN0YVxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yXFxuICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICY6aG92ZXIsXFxuICAgICAgJi5pcy1ob3ZlcmVkXFxuICAgICAgICAuZmlsZS1jdGFcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYnVsbWFEYXJrZW4oJGNvbG9yLCAyLjUlKVxcbiAgICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgICAgIGNvbG9yOiAkY29sb3ItaW52ZXJ0XFxuICAgICAgJjpmb2N1cyxcXG4gICAgICAmLmlzLWZvY3VzZWRcXG4gICAgICAgIC5maWxlLWN0YVxcbiAgICAgICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50XFxuICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwLjVlbSBidWxtYVJnYmEoJGNvbG9yLCAwLjI1KVxcbiAgICAgICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICY6YWN0aXZlLFxcbiAgICAgICYuaXMtYWN0aXZlXFxuICAgICAgICAuZmlsZS1jdGFcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYnVsbWFEYXJrZW4oJGNvbG9yLCA1JSlcXG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudFxcbiAgICAgICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgLy8gU2l6ZXNcXG4gICYuaXMtc21hbGxcXG4gICAgZm9udC1zaXplOiAkc2l6ZS1zbWFsbFxcbiAgJi5pcy1ub3JtYWxcXG4gICAgZm9udC1zaXplOiAkc2l6ZS1ub3JtYWxcXG4gICYuaXMtbWVkaXVtXFxuICAgIGZvbnQtc2l6ZTogJHNpemUtbWVkaXVtXFxuICAgIC5maWxlLWljb25cXG4gICAgICAuZmFcXG4gICAgICAgIGZvbnQtc2l6ZTogMjFweFxcbiAgJi5pcy1sYXJnZVxcbiAgICBmb250LXNpemU6ICRzaXplLWxhcmdlXFxuICAgIC5maWxlLWljb25cXG4gICAgICAuZmFcXG4gICAgICAgIGZvbnQtc2l6ZTogMjhweFxcbiAgLy8gTW9kaWZpZXJzXFxuICAmLmhhcy1uYW1lXFxuICAgIC5maWxlLWN0YVxcbiAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwXFxuICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDBcXG4gICAgLmZpbGUtbmFtZVxcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDBcXG4gICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwXFxuICAgICYuaXMtZW1wdHlcXG4gICAgICAuZmlsZS1jdGFcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICRmaWxlLXJhZGl1c1xcbiAgICAgIC5maWxlLW5hbWVcXG4gICAgICAgIGRpc3BsYXk6IG5vbmVcXG4gICYuaXMtYm94ZWRcXG4gICAgLmZpbGUtbGFiZWxcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uXFxuICAgIC5maWxlLWN0YVxcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW5cXG4gICAgICBoZWlnaHQ6IGF1dG9cXG4gICAgICBwYWRkaW5nOiAxZW0gM2VtXFxuICAgIC5maWxlLW5hbWVcXG4gICAgICBib3JkZXItd2lkdGg6IDAgMXB4IDFweFxcbiAgICAuZmlsZS1pY29uXFxuICAgICAgaGVpZ2h0OiAxLjVlbVxcbiAgICAgIHdpZHRoOiAxLjVlbVxcbiAgICAgIC5mYVxcbiAgICAgICAgZm9udC1zaXplOiAyMXB4XFxuICAgICYuaXMtc21hbGxcXG4gICAgICAuZmlsZS1pY29uIC5mYVxcbiAgICAgICAgZm9udC1zaXplOiAxNHB4XFxuICAgICYuaXMtbWVkaXVtXFxuICAgICAgLmZpbGUtaWNvbiAuZmFcXG4gICAgICAgIGZvbnQtc2l6ZTogMjhweFxcbiAgICAmLmlzLWxhcmdlXFxuICAgICAgLmZpbGUtaWNvbiAuZmFcXG4gICAgICAgIGZvbnQtc2l6ZTogMzVweFxcbiAgICAmLmhhcy1uYW1lXFxuICAgICAgLmZpbGUtY3RhXFxuICAgICAgICBib3JkZXItcmFkaXVzOiAkZmlsZS1yYWRpdXMgJGZpbGUtcmFkaXVzIDAgMFxcbiAgICAgIC5maWxlLW5hbWVcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDAgMCAkZmlsZS1yYWRpdXMgJGZpbGUtcmFkaXVzXFxuICAgICAgICBib3JkZXItd2lkdGg6IDAgMXB4IDFweFxcbiAgJi5pcy1jZW50ZXJlZFxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcbiAgJi5pcy1mdWxsd2lkdGhcXG4gICAgLmZpbGUtbGFiZWxcXG4gICAgICB3aWR0aDogMTAwJVxcbiAgICAuZmlsZS1uYW1lXFxuICAgICAgZmxleC1ncm93OiAxXFxuICAgICAgbWF4LXdpZHRoOiBub25lXFxuICAmLmlzLXJpZ2h0XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmRcXG4gICAgLmZpbGUtY3RhXFxuICAgICAgYm9yZGVyLXJhZGl1czogMCAkZmlsZS1yYWRpdXMgJGZpbGUtcmFkaXVzIDBcXG4gICAgLmZpbGUtbmFtZVxcbiAgICAgIGJvcmRlci1yYWRpdXM6ICRmaWxlLXJhZGl1cyAwIDAgJGZpbGUtcmFkaXVzXFxuICAgICAgYm9yZGVyLXdpZHRoOiAxcHggMCAxcHggMXB4XFxuICAgICAgb3JkZXI6IC0xXFxuXFxuLmZpbGUtbGFiZWxcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoXFxuICBkaXNwbGF5OiBmbGV4XFxuICBjdXJzb3I6IHBvaW50ZXJcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydFxcbiAgb3ZlcmZsb3c6IGhpZGRlblxcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuICAmOmhvdmVyXFxuICAgIC5maWxlLWN0YVxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGJ1bG1hRGFya2VuKCRmaWxlLWN0YS1iYWNrZ3JvdW5kLWNvbG9yLCAyLjUlKVxcbiAgICAgIGNvbG9yOiAkZmlsZS1jdGEtaG92ZXItY29sb3JcXG4gICAgLmZpbGUtbmFtZVxcbiAgICAgIGJvcmRlci1jb2xvcjogYnVsbWFEYXJrZW4oJGZpbGUtbmFtZS1ib3JkZXItY29sb3IsIDIuNSUpXFxuICAmOmFjdGl2ZVxcbiAgICAuZmlsZS1jdGFcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBidWxtYURhcmtlbigkZmlsZS1jdGEtYmFja2dyb3VuZC1jb2xvciwgNSUpXFxuICAgICAgY29sb3I6ICRmaWxlLWN0YS1hY3RpdmUtY29sb3JcXG4gICAgLmZpbGUtbmFtZVxcbiAgICAgIGJvcmRlci1jb2xvcjogYnVsbWFEYXJrZW4oJGZpbGUtbmFtZS1ib3JkZXItY29sb3IsIDUlKVxcblxcbi5maWxlLWlucHV0XFxuICBoZWlnaHQ6IDEwMCVcXG4gIGxlZnQ6IDBcXG4gIG9wYWNpdHk6IDBcXG4gIG91dGxpbmU6IG5vbmVcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZVxcbiAgdG9wOiAwXFxuICB3aWR0aDogMTAwJVxcblxcbi5maWxlLWN0YSxcXG4uZmlsZS1uYW1lXFxuICBAZXh0ZW5kICVjb250cm9sXFxuICBib3JkZXItY29sb3I6ICRmaWxlLWJvcmRlci1jb2xvclxcbiAgYm9yZGVyLXJhZGl1czogJGZpbGUtcmFkaXVzXFxuICBmb250LXNpemU6IDFlbVxcbiAgcGFkZGluZy1sZWZ0OiAxZW1cXG4gIHBhZGRpbmctcmlnaHQ6IDFlbVxcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcFxcblxcbi5maWxlLWN0YVxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGZpbGUtY3RhLWJhY2tncm91bmQtY29sb3JcXG4gIGNvbG9yOiAkZmlsZS1jdGEtY29sb3JcXG5cXG4uZmlsZS1uYW1lXFxuICBib3JkZXItY29sb3I6ICRmaWxlLW5hbWUtYm9yZGVyLWNvbG9yXFxuICBib3JkZXItc3R5bGU6ICRmaWxlLW5hbWUtYm9yZGVyLXN0eWxlXFxuICBib3JkZXItd2lkdGg6ICRmaWxlLW5hbWUtYm9yZGVyLXdpZHRoXFxuICBkaXNwbGF5OiBibG9ja1xcbiAgbWF4LXdpZHRoOiAkZmlsZS1uYW1lLW1heC13aWR0aFxcbiAgb3ZlcmZsb3c6IGhpZGRlblxcbiAgdGV4dC1hbGlnbjogaW5oZXJpdFxcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXNcXG5cXG4uZmlsZS1pY29uXFxuICBhbGlnbi1pdGVtczogY2VudGVyXFxuICBkaXNwbGF5OiBmbGV4XFxuICBoZWlnaHQ6IDFlbVxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDAuNWVtKVxcbiAgd2lkdGg6IDFlbVxcbiAgLmZhXFxuICAgIGZvbnQtc2l6ZTogMTRweFxcblwiLFwiJGxhYmVsLWNvbG9yOiAkdGV4dC1zdHJvbmcgIWRlZmF1bHRcXG4kbGFiZWwtd2VpZ2h0OiAkd2VpZ2h0LWJvbGQgIWRlZmF1bHRcXG5cXG4kaGVscC1zaXplOiAkc2l6ZS1zbWFsbCAhZGVmYXVsdFxcblxcbiRsYWJlbC1jb2xvcnM6ICRmb3JtLWNvbG9ycyAhZGVmYXVsdFxcblxcbi5sYWJlbFxcbiAgY29sb3I6ICRsYWJlbC1jb2xvclxcbiAgZGlzcGxheTogYmxvY2tcXG4gIGZvbnQtc2l6ZTogJHNpemUtbm9ybWFsXFxuICBmb250LXdlaWdodDogJGxhYmVsLXdlaWdodFxcbiAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgIG1hcmdpbi1ib3R0b206IDAuNWVtXFxuICAvLyBTaXplc1xcbiAgJi5pcy1zbWFsbFxcbiAgICBmb250LXNpemU6ICRzaXplLXNtYWxsXFxuICAmLmlzLW1lZGl1bVxcbiAgICBmb250LXNpemU6ICRzaXplLW1lZGl1bVxcbiAgJi5pcy1sYXJnZVxcbiAgICBmb250LXNpemU6ICRzaXplLWxhcmdlXFxuXFxuLmhlbHBcXG4gIGRpc3BsYXk6IGJsb2NrXFxuICBmb250LXNpemU6ICRoZWxwLXNpemVcXG4gIG1hcmdpbi10b3A6IDAuMjVyZW1cXG4gIEBlYWNoICRuYW1lLCAkcGFpciBpbiAkbGFiZWwtY29sb3JzXFxuICAgICRjb2xvcjogbnRoKCRwYWlyLCAxKVxcbiAgICAmLmlzLSN7JG5hbWV9XFxuICAgICAgY29sb3I6ICRjb2xvclxcblxcbi8vIENvbnRhaW5lcnNcXG5cXG4uZmllbGRcXG4gICY6bm90KDpsYXN0LWNoaWxkKVxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtXFxuICAvLyBNb2RpZmllcnNcXG4gICYuaGFzLWFkZG9uc1xcbiAgICBkaXNwbGF5OiBmbGV4XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydFxcbiAgICAuY29udHJvbFxcbiAgICAgICY6bm90KDpsYXN0LWNoaWxkKVxcbiAgICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgLTFweClcXG4gICAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICAgIC5idXR0b24sXFxuICAgICAgICAuaW5wdXQsXFxuICAgICAgICAuc2VsZWN0IHNlbGVjdFxcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAwXFxuICAgICAgJjpmaXJzdC1jaGlsZDpub3QoOm9ubHktY2hpbGQpXFxuICAgICAgICAuYnV0dG9uLFxcbiAgICAgICAgLmlucHV0LFxcbiAgICAgICAgLnNlbGVjdCBzZWxlY3RcXG4gICAgICAgICAgK2x0clxcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwXFxuICAgICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDBcXG4gICAgICAgICAgK3J0bFxcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDBcXG4gICAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwXFxuICAgICAgJjpsYXN0LWNoaWxkOm5vdCg6b25seS1jaGlsZClcXG4gICAgICAgIC5idXR0b24sXFxuICAgICAgICAuaW5wdXQsXFxuICAgICAgICAuc2VsZWN0IHNlbGVjdFxcbiAgICAgICAgICArbHRyXFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMFxcbiAgICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDBcXG4gICAgICAgICAgK3J0bFxcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwXFxuICAgICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDBcXG4gICAgICAuYnV0dG9uLFxcbiAgICAgIC5pbnB1dCxcXG4gICAgICAuc2VsZWN0IHNlbGVjdFxcbiAgICAgICAgJjpub3QoW2Rpc2FibGVkXSlcXG4gICAgICAgICAgJjpob3ZlcixcXG4gICAgICAgICAgJi5pcy1ob3ZlcmVkXFxuICAgICAgICAgICAgei1pbmRleDogMlxcbiAgICAgICAgICAmOmZvY3VzLFxcbiAgICAgICAgICAmLmlzLWZvY3VzZWQsXFxuICAgICAgICAgICY6YWN0aXZlLFxcbiAgICAgICAgICAmLmlzLWFjdGl2ZVxcbiAgICAgICAgICAgIHotaW5kZXg6IDNcXG4gICAgICAgICAgICAmOmhvdmVyXFxuICAgICAgICAgICAgICB6LWluZGV4OiA0XFxuICAgICAgJi5pcy1leHBhbmRlZFxcbiAgICAgICAgZmxleC1ncm93OiAxXFxuICAgICAgICBmbGV4LXNocmluazogMVxcbiAgICAmLmhhcy1hZGRvbnMtY2VudGVyZWRcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcbiAgICAmLmhhcy1hZGRvbnMtcmlnaHRcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kXFxuICAgICYuaGFzLWFkZG9ucy1mdWxsd2lkdGhcXG4gICAgICAuY29udHJvbFxcbiAgICAgICAgZmxleC1ncm93OiAxXFxuICAgICAgICBmbGV4LXNocmluazogMFxcbiAgJi5pcy1ncm91cGVkXFxuICAgIGRpc3BsYXk6IGZsZXhcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0XFxuICAgICYgPiAuY29udHJvbFxcbiAgICAgIGZsZXgtc2hyaW5rOiAwXFxuICAgICAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAwXFxuICAgICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAwLjc1cmVtKVxcbiAgICAgICYuaXMtZXhwYW5kZWRcXG4gICAgICAgIGZsZXgtZ3JvdzogMVxcbiAgICAgICAgZmxleC1zaHJpbms6IDFcXG4gICAgJi5pcy1ncm91cGVkLWNlbnRlcmVkXFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gICAgJi5pcy1ncm91cGVkLXJpZ2h0XFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZFxcbiAgICAmLmlzLWdyb3VwZWQtbXVsdGlsaW5lXFxuICAgICAgZmxleC13cmFwOiB3cmFwXFxuICAgICAgJiA+IC5jb250cm9sXFxuICAgICAgICAmOmxhc3QtY2hpbGQsXFxuICAgICAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMC43NXJlbVxcbiAgICAgICY6bGFzdC1jaGlsZFxcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogLTAuNzVyZW1cXG4gICAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDBcXG4gICYuaXMtaG9yaXpvbnRhbFxcbiAgICArdGFibGV0XFxuICAgICAgZGlzcGxheTogZmxleFxcblxcbi5maWVsZC1sYWJlbFxcbiAgLmxhYmVsXFxuICAgIGZvbnQtc2l6ZTogaW5oZXJpdFxcbiAgK21vYmlsZVxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW1cXG4gICt0YWJsZXRcXG4gICAgZmxleC1iYXNpczogMFxcbiAgICBmbGV4LWdyb3c6IDFcXG4gICAgZmxleC1zaHJpbms6IDBcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMS41cmVtKVxcbiAgICB0ZXh0LWFsaWduOiByaWdodFxcbiAgICAmLmlzLXNtYWxsXFxuICAgICAgZm9udC1zaXplOiAkc2l6ZS1zbWFsbFxcbiAgICAgIHBhZGRpbmctdG9wOiAwLjM3NWVtXFxuICAgICYuaXMtbm9ybWFsXFxuICAgICAgcGFkZGluZy10b3A6IDAuMzc1ZW1cXG4gICAgJi5pcy1tZWRpdW1cXG4gICAgICBmb250LXNpemU6ICRzaXplLW1lZGl1bVxcbiAgICAgIHBhZGRpbmctdG9wOiAwLjM3NWVtXFxuICAgICYuaXMtbGFyZ2VcXG4gICAgICBmb250LXNpemU6ICRzaXplLWxhcmdlXFxuICAgICAgcGFkZGluZy10b3A6IDAuMzc1ZW1cXG5cXG4uZmllbGQtYm9keVxcbiAgLmZpZWxkIC5maWVsZFxcbiAgICBtYXJnaW4tYm90dG9tOiAwXFxuICArdGFibGV0XFxuICAgIGRpc3BsYXk6IGZsZXhcXG4gICAgZmxleC1iYXNpczogMFxcbiAgICBmbGV4LWdyb3c6IDVcXG4gICAgZmxleC1zaHJpbms6IDFcXG4gICAgLmZpZWxkXFxuICAgICAgbWFyZ2luLWJvdHRvbTogMFxcbiAgICAmID4gLmZpZWxkXFxuICAgICAgZmxleC1zaHJpbms6IDFcXG4gICAgICAmOm5vdCguaXMtbmFycm93KVxcbiAgICAgICAgZmxleC1ncm93OiAxXFxuICAgICAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAwLjc1cmVtKVxcblxcbi5jb250cm9sXFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94XFxuICBjbGVhcjogYm90aFxcbiAgZm9udC1zaXplOiAkc2l6ZS1ub3JtYWxcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZVxcbiAgdGV4dC1hbGlnbjogaW5oZXJpdFxcbiAgLy8gTW9kaWZpZXJzXFxuICAmLmhhcy1pY29ucy1sZWZ0LFxcbiAgJi5oYXMtaWNvbnMtcmlnaHRcXG4gICAgLmlucHV0LFxcbiAgICAuc2VsZWN0XFxuICAgICAgJjpmb2N1c1xcbiAgICAgICAgJiB+IC5pY29uXFxuICAgICAgICAgIGNvbG9yOiAkaW5wdXQtaWNvbi1hY3RpdmUtY29sb3JcXG4gICAgICAmLmlzLXNtYWxsIH4gLmljb25cXG4gICAgICAgIGZvbnQtc2l6ZTogJHNpemUtc21hbGxcXG4gICAgICAmLmlzLW1lZGl1bSB+IC5pY29uXFxuICAgICAgICBmb250LXNpemU6ICRzaXplLW1lZGl1bVxcbiAgICAgICYuaXMtbGFyZ2UgfiAuaWNvblxcbiAgICAgICAgZm9udC1zaXplOiAkc2l6ZS1sYXJnZVxcbiAgICAuaWNvblxcbiAgICAgIGNvbG9yOiAkaW5wdXQtaWNvbi1jb2xvclxcbiAgICAgIGhlaWdodDogJGlucHV0LWhlaWdodFxcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlXFxuICAgICAgdG9wOiAwXFxuICAgICAgd2lkdGg6ICRpbnB1dC1oZWlnaHRcXG4gICAgICB6LWluZGV4OiA0XFxuICAmLmhhcy1pY29ucy1sZWZ0XFxuICAgIC5pbnB1dCxcXG4gICAgLnNlbGVjdCBzZWxlY3RcXG4gICAgICBwYWRkaW5nLWxlZnQ6ICRpbnB1dC1oZWlnaHRcXG4gICAgLmljb24uaXMtbGVmdFxcbiAgICAgIGxlZnQ6IDBcXG4gICYuaGFzLWljb25zLXJpZ2h0XFxuICAgIC5pbnB1dCxcXG4gICAgLnNlbGVjdCBzZWxlY3RcXG4gICAgICBwYWRkaW5nLXJpZ2h0OiAkaW5wdXQtaGVpZ2h0XFxuICAgIC5pY29uLmlzLXJpZ2h0XFxuICAgICAgcmlnaHQ6IDBcXG4gICYuaXMtbG9hZGluZ1xcbiAgICAmOjphZnRlclxcbiAgICAgIEBleHRlbmQgJWxvYWRlclxcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50XFxuICAgICAgK2x0ci1wb3NpdGlvbigwLjYyNWVtKVxcbiAgICAgIHRvcDogMC42MjVlbVxcbiAgICAgIHotaW5kZXg6IDRcXG4gICAgJi5pcy1zbWFsbDphZnRlclxcbiAgICAgIGZvbnQtc2l6ZTogJHNpemUtc21hbGxcXG4gICAgJi5pcy1tZWRpdW06YWZ0ZXJcXG4gICAgICBmb250LXNpemU6ICRzaXplLW1lZGl1bVxcbiAgICAmLmlzLWxhcmdlOmFmdGVyXFxuICAgICAgZm9udC1zaXplOiAkc2l6ZS1sYXJnZVxcblwiLFwiLyogQnVsbWEgQ29tcG9uZW50cyAqL1xcbkBjaGFyc2V0IFxcXCJ1dGYtOFxcXCJcXG5cXG5AaW1wb3J0IFxcXCJicmVhZGNydW1iXFxcIlxcbkBpbXBvcnQgXFxcImNhcmRcXFwiXFxuQGltcG9ydCBcXFwiZHJvcGRvd25cXFwiXFxuQGltcG9ydCBcXFwibGV2ZWxcXFwiXFxuQGltcG9ydCBcXFwibWVkaWFcXFwiXFxuQGltcG9ydCBcXFwibWVudVxcXCJcXG5AaW1wb3J0IFxcXCJtZXNzYWdlXFxcIlxcbkBpbXBvcnQgXFxcIm1vZGFsXFxcIlxcbkBpbXBvcnQgXFxcIm5hdmJhclxcXCJcXG5AaW1wb3J0IFxcXCJwYWdpbmF0aW9uXFxcIlxcbkBpbXBvcnQgXFxcInBhbmVsXFxcIlxcbkBpbXBvcnQgXFxcInRhYnNcXFwiXFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvbWl4aW5zXFxcIlxcblxcbiRicmVhZGNydW1iLWl0ZW0tY29sb3I6ICRsaW5rICFkZWZhdWx0XFxuJGJyZWFkY3J1bWItaXRlbS1ob3Zlci1jb2xvcjogJGxpbmstaG92ZXIgIWRlZmF1bHRcXG4kYnJlYWRjcnVtYi1pdGVtLWFjdGl2ZS1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuXFxuJGJyZWFkY3J1bWItaXRlbS1wYWRkaW5nLXZlcnRpY2FsOiAwICFkZWZhdWx0XFxuJGJyZWFkY3J1bWItaXRlbS1wYWRkaW5nLWhvcml6b250YWw6IDAuNzVlbSAhZGVmYXVsdFxcblxcbiRicmVhZGNydW1iLWl0ZW0tc2VwYXJhdG9yLWNvbG9yOiAkYm9yZGVyLWhvdmVyICFkZWZhdWx0XFxuXFxuLmJyZWFkY3J1bWJcXG4gIEBleHRlbmQgJWJsb2NrXFxuICBAZXh0ZW5kICV1bnNlbGVjdGFibGVcXG4gIGZvbnQtc2l6ZTogJHNpemUtbm9ybWFsXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwXFxuICBhXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gICAgY29sb3I6ICRicmVhZGNydW1iLWl0ZW0tY29sb3JcXG4gICAgZGlzcGxheTogZmxleFxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcbiAgICBwYWRkaW5nOiAkYnJlYWRjcnVtYi1pdGVtLXBhZGRpbmctdmVydGljYWwgJGJyZWFkY3J1bWItaXRlbS1wYWRkaW5nLWhvcml6b250YWxcXG4gICAgJjpob3ZlclxcbiAgICAgIGNvbG9yOiAkYnJlYWRjcnVtYi1pdGVtLWhvdmVyLWNvbG9yXFxuICBsaVxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyXFxuICAgIGRpc3BsYXk6IGZsZXhcXG4gICAgJjpmaXJzdC1jaGlsZCBhXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwicGFkZGluZ1xcXCIsIDAsIGZhbHNlKVxcbiAgICAmLmlzLWFjdGl2ZVxcbiAgICAgIGFcXG4gICAgICAgIGNvbG9yOiAkYnJlYWRjcnVtYi1pdGVtLWFjdGl2ZS1jb2xvclxcbiAgICAgICAgY3Vyc29yOiBkZWZhdWx0XFxuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZVxcbiAgICAmICsgbGk6OmJlZm9yZVxcbiAgICAgIGNvbG9yOiAkYnJlYWRjcnVtYi1pdGVtLXNlcGFyYXRvci1jb2xvclxcbiAgICAgIGNvbnRlbnQ6IFxcXCJcXFxcMDAwMmZcXFwiXFxuICB1bCxcXG4gIG9sXFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0XFxuICAgIGRpc3BsYXk6IGZsZXhcXG4gICAgZmxleC13cmFwOiB3cmFwXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydFxcbiAgLmljb25cXG4gICAgJjpmaXJzdC1jaGlsZFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDAuNWVtKVxcbiAgICAmOmxhc3QtY2hpbGRcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAwLjVlbSwgZmFsc2UpXFxuICAvLyBBbGlnbm1lbnRcXG4gICYuaXMtY2VudGVyZWRcXG4gICAgb2wsXFxuICAgIHVsXFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gICYuaXMtcmlnaHRcXG4gICAgb2wsXFxuICAgIHVsXFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZFxcbiAgLy8gU2l6ZXNcXG4gICYuaXMtc21hbGxcXG4gICAgZm9udC1zaXplOiAkc2l6ZS1zbWFsbFxcbiAgJi5pcy1tZWRpdW1cXG4gICAgZm9udC1zaXplOiAkc2l6ZS1tZWRpdW1cXG4gICYuaXMtbGFyZ2VcXG4gICAgZm9udC1zaXplOiAkc2l6ZS1sYXJnZVxcbiAgLy8gU3R5bGVzXFxuICAmLmhhcy1hcnJvdy1zZXBhcmF0b3JcXG4gICAgbGkgKyBsaTo6YmVmb3JlXFxuICAgICAgY29udGVudDogXFxcIlxcXFwwMjE5MlxcXCJcXG4gICYuaGFzLWJ1bGxldC1zZXBhcmF0b3JcXG4gICAgbGkgKyBsaTo6YmVmb3JlXFxuICAgICAgY29udGVudDogXFxcIlxcXFwwMjAyMlxcXCJcXG4gICYuaGFzLWRvdC1zZXBhcmF0b3JcXG4gICAgbGkgKyBsaTo6YmVmb3JlXFxuICAgICAgY29udGVudDogXFxcIlxcXFwwMDBiN1xcXCJcXG4gICYuaGFzLXN1Y2NlZWRzLXNlcGFyYXRvclxcbiAgICBsaSArIGxpOjpiZWZvcmVcXG4gICAgICBjb250ZW50OiBcXFwiXFxcXDAyMjdCXFxcIlxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kY2FyZC1jb2xvcjogJHRleHQgIWRlZmF1bHRcXG4kY2FyZC1iYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW4gIWRlZmF1bHRcXG4kY2FyZC1zaGFkb3c6ICRzaGFkb3cgIWRlZmF1bHRcXG4kY2FyZC1yYWRpdXM6IDAuMjVyZW0gIWRlZmF1bHRcXG5cXG4kY2FyZC1oZWFkZXItYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWRlZmF1bHRcXG4kY2FyZC1oZWFkZXItY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcbiRjYXJkLWhlYWRlci1wYWRkaW5nOiAwLjc1cmVtIDFyZW0gIWRlZmF1bHRcXG4kY2FyZC1oZWFkZXItc2hhZG93OiAwIDAuMTI1ZW0gMC4yNWVtIHJnYmEoJHNjaGVtZS1pbnZlcnQsIDAuMSkgIWRlZmF1bHRcXG4kY2FyZC1oZWFkZXItd2VpZ2h0OiAkd2VpZ2h0LWJvbGQgIWRlZmF1bHRcXG5cXG4kY2FyZC1jb250ZW50LWJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFkZWZhdWx0XFxuJGNhcmQtY29udGVudC1wYWRkaW5nOiAxLjVyZW0gIWRlZmF1bHRcXG5cXG4kY2FyZC1mb290ZXItYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWRlZmF1bHRcXG4kY2FyZC1mb290ZXItYm9yZGVyLXRvcDogMXB4IHNvbGlkICRib3JkZXItbGlnaHQgIWRlZmF1bHRcXG4kY2FyZC1mb290ZXItcGFkZGluZzogMC43NXJlbSAhZGVmYXVsdFxcblxcbiRjYXJkLW1lZGlhLW1hcmdpbjogJGJsb2NrLXNwYWNpbmcgIWRlZmF1bHRcXG5cXG4uY2FyZFxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNhcmQtYmFja2dyb3VuZC1jb2xvclxcbiAgYm9yZGVyLXJhZGl1czogJGNhcmQtcmFkaXVzXFxuICBib3gtc2hhZG93OiAkY2FyZC1zaGFkb3dcXG4gIGNvbG9yOiAkY2FyZC1jb2xvclxcbiAgbWF4LXdpZHRoOiAxMDAlXFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG5cXG4lY2FyZC1pdGVtXFxuICAmOmZpcnN0LWNoaWxkXFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICRjYXJkLXJhZGl1c1xcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJGNhcmQtcmFkaXVzXFxuICAmOmxhc3QtY2hpbGRcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJGNhcmQtcmFkaXVzXFxuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAkY2FyZC1yYWRpdXNcXG5cXG4uY2FyZC1oZWFkZXJcXG4gIEBleHRlbmQgJWNhcmQtaXRlbVxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNhcmQtaGVhZGVyLWJhY2tncm91bmQtY29sb3JcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoXFxuICBib3gtc2hhZG93OiAkY2FyZC1oZWFkZXItc2hhZG93XFxuICBkaXNwbGF5OiBmbGV4XFxuXFxuLmNhcmQtaGVhZGVyLXRpdGxlXFxuICBhbGlnbi1pdGVtczogY2VudGVyXFxuICBjb2xvcjogJGNhcmQtaGVhZGVyLWNvbG9yXFxuICBkaXNwbGF5OiBmbGV4XFxuICBmbGV4LWdyb3c6IDFcXG4gIGZvbnQtd2VpZ2h0OiAkY2FyZC1oZWFkZXItd2VpZ2h0XFxuICBwYWRkaW5nOiAkY2FyZC1oZWFkZXItcGFkZGluZ1xcbiAgJi5pcy1jZW50ZXJlZFxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcblxcbi5jYXJkLWhlYWRlci1pY29uXFxuICArcmVzZXRcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gIGN1cnNvcjogcG9pbnRlclxcbiAgZGlzcGxheTogZmxleFxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gIHBhZGRpbmc6ICRjYXJkLWhlYWRlci1wYWRkaW5nXFxuXFxuLmNhcmQtaW1hZ2VcXG4gIGRpc3BsYXk6IGJsb2NrXFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG4gICY6Zmlyc3QtY2hpbGRcXG4gICAgaW1nXFxuICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogJGNhcmQtcmFkaXVzXFxuICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICRjYXJkLXJhZGl1c1xcbiAgJjpsYXN0LWNoaWxkXFxuICAgIGltZ1xcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRjYXJkLXJhZGl1c1xcbiAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAkY2FyZC1yYWRpdXNcXG5cXG4uY2FyZC1jb250ZW50XFxuICBAZXh0ZW5kICVjYXJkLWl0ZW1cXG4gIGJhY2tncm91bmQtY29sb3I6ICRjYXJkLWNvbnRlbnQtYmFja2dyb3VuZC1jb2xvclxcbiAgcGFkZGluZzogJGNhcmQtY29udGVudC1wYWRkaW5nXFxuXFxuLmNhcmQtZm9vdGVyXFxuICBAZXh0ZW5kICVjYXJkLWl0ZW1cXG4gIGJhY2tncm91bmQtY29sb3I6ICRjYXJkLWZvb3Rlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICBib3JkZXItdG9wOiAkY2FyZC1mb290ZXItYm9yZGVyLXRvcFxcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2hcXG4gIGRpc3BsYXk6IGZsZXhcXG5cXG4uY2FyZC1mb290ZXItaXRlbVxcbiAgYWxpZ24taXRlbXM6IGNlbnRlclxcbiAgZGlzcGxheTogZmxleFxcbiAgZmxleC1iYXNpczogMFxcbiAgZmxleC1ncm93OiAxXFxuICBmbGV4LXNocmluazogMFxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gIHBhZGRpbmc6ICRjYXJkLWZvb3Rlci1wYWRkaW5nXFxuICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwiYm9yZGVyXFxcIiwgJGNhcmQtZm9vdGVyLWJvcmRlci10b3ApXFxuXFxuLy8gQ29tYmluYXRpb25zXFxuXFxuLmNhcmRcXG4gIC5tZWRpYTpub3QoOmxhc3QtY2hpbGQpXFxuICAgIG1hcmdpbi1ib3R0b206ICRjYXJkLW1lZGlhLW1hcmdpblxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kZHJvcGRvd24tbWVudS1taW4td2lkdGg6IDEycmVtICFkZWZhdWx0XFxuXFxuJGRyb3Bkb3duLWNvbnRlbnQtYmFja2dyb3VuZC1jb2xvcjogJHNjaGVtZS1tYWluICFkZWZhdWx0XFxuJGRyb3Bkb3duLWNvbnRlbnQtYXJyb3c6ICRsaW5rICFkZWZhdWx0XFxuJGRyb3Bkb3duLWNvbnRlbnQtb2Zmc2V0OiA0cHggIWRlZmF1bHRcXG4kZHJvcGRvd24tY29udGVudC1wYWRkaW5nLWJvdHRvbTogMC41cmVtICFkZWZhdWx0XFxuJGRyb3Bkb3duLWNvbnRlbnQtcGFkZGluZy10b3A6IDAuNXJlbSAhZGVmYXVsdFxcbiRkcm9wZG93bi1jb250ZW50LXJhZGl1czogJHJhZGl1cyAhZGVmYXVsdFxcbiRkcm9wZG93bi1jb250ZW50LXNoYWRvdzogJHNoYWRvdyAhZGVmYXVsdFxcbiRkcm9wZG93bi1jb250ZW50LXo6IDIwICFkZWZhdWx0XFxuXFxuJGRyb3Bkb3duLWl0ZW0tY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuJGRyb3Bkb3duLWl0ZW0taG92ZXItY29sb3I6ICRzY2hlbWUtaW52ZXJ0ICFkZWZhdWx0XFxuJGRyb3Bkb3duLWl0ZW0taG92ZXItYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQgIWRlZmF1bHRcXG4kZHJvcGRvd24taXRlbS1hY3RpdmUtY29sb3I6ICRsaW5rLWludmVydCAhZGVmYXVsdFxcbiRkcm9wZG93bi1pdGVtLWFjdGl2ZS1iYWNrZ3JvdW5kLWNvbG9yOiAkbGluayAhZGVmYXVsdFxcblxcbiRkcm9wZG93bi1kaXZpZGVyLWJhY2tncm91bmQtY29sb3I6ICRib3JkZXItbGlnaHQgIWRlZmF1bHRcXG5cXG4uZHJvcGRvd25cXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4XFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3BcXG4gICYuaXMtYWN0aXZlLFxcbiAgJi5pcy1ob3ZlcmFibGU6aG92ZXJcXG4gICAgLmRyb3Bkb3duLW1lbnVcXG4gICAgICBkaXNwbGF5OiBibG9ja1xcbiAgJi5pcy1yaWdodFxcbiAgICAuZHJvcGRvd24tbWVudVxcbiAgICAgIGxlZnQ6IGF1dG9cXG4gICAgICByaWdodDogMFxcbiAgJi5pcy11cFxcbiAgICAuZHJvcGRvd24tbWVudVxcbiAgICAgIGJvdHRvbTogMTAwJVxcbiAgICAgIHBhZGRpbmctYm90dG9tOiAkZHJvcGRvd24tY29udGVudC1vZmZzZXRcXG4gICAgICBwYWRkaW5nLXRvcDogaW5pdGlhbFxcbiAgICAgIHRvcDogYXV0b1xcblxcbi5kcm9wZG93bi1tZW51XFxuICBkaXNwbGF5OiBub25lXFxuICArbHRyLXBvc2l0aW9uKDAsIGZhbHNlKVxcbiAgbWluLXdpZHRoOiAkZHJvcGRvd24tbWVudS1taW4td2lkdGhcXG4gIHBhZGRpbmctdG9wOiAkZHJvcGRvd24tY29udGVudC1vZmZzZXRcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZVxcbiAgdG9wOiAxMDAlXFxuICB6LWluZGV4OiAkZHJvcGRvd24tY29udGVudC16XFxuXFxuLmRyb3Bkb3duLWNvbnRlbnRcXG4gIGJhY2tncm91bmQtY29sb3I6ICRkcm9wZG93bi1jb250ZW50LWJhY2tncm91bmQtY29sb3JcXG4gIGJvcmRlci1yYWRpdXM6ICRkcm9wZG93bi1jb250ZW50LXJhZGl1c1xcbiAgYm94LXNoYWRvdzogJGRyb3Bkb3duLWNvbnRlbnQtc2hhZG93XFxuICBwYWRkaW5nLWJvdHRvbTogJGRyb3Bkb3duLWNvbnRlbnQtcGFkZGluZy1ib3R0b21cXG4gIHBhZGRpbmctdG9wOiAkZHJvcGRvd24tY29udGVudC1wYWRkaW5nLXRvcFxcblxcbi5kcm9wZG93bi1pdGVtXFxuICBjb2xvcjogJGRyb3Bkb3duLWl0ZW0tY29sb3JcXG4gIGRpc3BsYXk6IGJsb2NrXFxuICBmb250LXNpemU6IDAuODc1cmVtXFxuICBsaW5lLWhlaWdodDogMS41XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAxcmVtXFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG5cXG5hLmRyb3Bkb3duLWl0ZW0sXFxuYnV0dG9uLmRyb3Bkb3duLWl0ZW1cXG4gICtsdHItcHJvcGVydHkoXFxcInBhZGRpbmdcXFwiLCAzcmVtKVxcbiAgdGV4dC1hbGlnbjogaW5oZXJpdFxcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcFxcbiAgd2lkdGg6IDEwMCVcXG4gICY6aG92ZXJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGRyb3Bkb3duLWl0ZW0taG92ZXItYmFja2dyb3VuZC1jb2xvclxcbiAgICBjb2xvcjogJGRyb3Bkb3duLWl0ZW0taG92ZXItY29sb3JcXG4gICYuaXMtYWN0aXZlXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRkcm9wZG93bi1pdGVtLWFjdGl2ZS1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgIGNvbG9yOiAkZHJvcGRvd24taXRlbS1hY3RpdmUtY29sb3JcXG5cXG4uZHJvcGRvd24tZGl2aWRlclxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGRyb3Bkb3duLWRpdmlkZXItYmFja2dyb3VuZC1jb2xvclxcbiAgYm9yZGVyOiBub25lXFxuICBkaXNwbGF5OiBibG9ja1xcbiAgaGVpZ2h0OiAxcHhcXG4gIG1hcmdpbjogMC41cmVtIDBcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJGxldmVsLWl0ZW0tc3BhY2luZzogKCRibG9jay1zcGFjaW5nICogMC41KSAhZGVmYXVsdFxcblxcbi5sZXZlbFxcbiAgQGV4dGVuZCAlYmxvY2tcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlblxcbiAgY29kZVxcbiAgICBib3JkZXItcmFkaXVzOiAkcmFkaXVzXFxuICBpbWdcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrXFxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3BcXG4gIC8vIE1vZGlmaWVyc1xcbiAgJi5pcy1tb2JpbGVcXG4gICAgZGlzcGxheTogZmxleFxcbiAgICAubGV2ZWwtbGVmdCxcXG4gICAgLmxldmVsLXJpZ2h0XFxuICAgICAgZGlzcGxheTogZmxleFxcbiAgICAubGV2ZWwtbGVmdCArIC5sZXZlbC1yaWdodFxcbiAgICAgIG1hcmdpbi10b3A6IDBcXG4gICAgLmxldmVsLWl0ZW1cXG4gICAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDBcXG4gICAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsICRsZXZlbC1pdGVtLXNwYWNpbmcpXFxuICAgICAgJjpub3QoLmlzLW5hcnJvdylcXG4gICAgICAgIGZsZXgtZ3JvdzogMVxcbiAgLy8gUmVzcG9uc2l2ZW5lc3NcXG4gICt0YWJsZXRcXG4gICAgZGlzcGxheTogZmxleFxcbiAgICAmID4gLmxldmVsLWl0ZW1cXG4gICAgICAmOm5vdCguaXMtbmFycm93KVxcbiAgICAgICAgZmxleC1ncm93OiAxXFxuXFxuLmxldmVsLWl0ZW1cXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gIGRpc3BsYXk6IGZsZXhcXG4gIGZsZXgtYmFzaXM6IGF1dG9cXG4gIGZsZXgtZ3JvdzogMFxcbiAgZmxleC1zaHJpbms6IDBcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyXFxuICAudGl0bGUsXFxuICAuc3VidGl0bGVcXG4gICAgbWFyZ2luLWJvdHRvbTogMFxcbiAgLy8gUmVzcG9uc2l2ZW5lc3NcXG4gICttb2JpbGVcXG4gICAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgICAgbWFyZ2luLWJvdHRvbTogJGxldmVsLWl0ZW0tc3BhY2luZ1xcblxcbi5sZXZlbC1sZWZ0LFxcbi5sZXZlbC1yaWdodFxcbiAgZmxleC1iYXNpczogYXV0b1xcbiAgZmxleC1ncm93OiAwXFxuICBmbGV4LXNocmluazogMFxcbiAgLmxldmVsLWl0ZW1cXG4gICAgLy8gTW9kaWZpZXJzXFxuICAgICYuaXMtZmxleGlibGVcXG4gICAgICBmbGV4LWdyb3c6IDFcXG4gICAgLy8gUmVzcG9uc2l2ZW5lc3NcXG4gICAgK3RhYmxldFxcbiAgICAgICY6bm90KDpsYXN0LWNoaWxkKVxcbiAgICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgJGxldmVsLWl0ZW0tc3BhY2luZylcXG5cXG4ubGV2ZWwtbGVmdFxcbiAgYWxpZ24taXRlbXM6IGNlbnRlclxcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0XFxuICAvLyBSZXNwb25zaXZlbmVzc1xcbiAgK21vYmlsZVxcbiAgICAmICsgLmxldmVsLXJpZ2h0XFxuICAgICAgbWFyZ2luLXRvcDogMS41cmVtXFxuICArdGFibGV0XFxuICAgIGRpc3BsYXk6IGZsZXhcXG5cXG4ubGV2ZWwtcmlnaHRcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmRcXG4gIC8vIFJlc3BvbnNpdmVuZXNzXFxuICArdGFibGV0XFxuICAgIGRpc3BsYXk6IGZsZXhcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJG1lZGlhLWJvcmRlci1jb2xvcjogYnVsbWFSZ2JhKCRib3JkZXIsIDAuNSkgIWRlZmF1bHRcXG4kbWVkaWEtYm9yZGVyLXNpemU6IDFweCAhZGVmYXVsdFxcbiRtZWRpYS1zcGFjaW5nOiAxcmVtICFkZWZhdWx0XFxuJG1lZGlhLXNwYWNpbmctbGFyZ2U6IDEuNXJlbSAhZGVmYXVsdFxcbiRtZWRpYS1jb250ZW50LXNwYWNpbmc6IDAuNzVyZW0gIWRlZmF1bHRcXG4kbWVkaWEtbGV2ZWwtMS1zcGFjaW5nOiAwLjc1cmVtICFkZWZhdWx0XFxuJG1lZGlhLWxldmVsLTEtY29udGVudC1zcGFjaW5nOiAwLjVyZW0gIWRlZmF1bHRcXG4kbWVkaWEtbGV2ZWwtMi1zcGFjaW5nOiAwLjVyZW0gIWRlZmF1bHRcXG5cXG4ubWVkaWFcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0XFxuICBkaXNwbGF5OiBmbGV4XFxuICB0ZXh0LWFsaWduOiBpbmhlcml0XFxuICAuY29udGVudDpub3QoOmxhc3QtY2hpbGQpXFxuICAgIG1hcmdpbi1ib3R0b206ICRtZWRpYS1jb250ZW50LXNwYWNpbmdcXG4gIC5tZWRpYVxcbiAgICBib3JkZXItdG9wOiAkbWVkaWEtYm9yZGVyLXNpemUgc29saWQgJG1lZGlhLWJvcmRlci1jb2xvclxcbiAgICBkaXNwbGF5OiBmbGV4XFxuICAgIHBhZGRpbmctdG9wOiAkbWVkaWEtbGV2ZWwtMS1zcGFjaW5nXFxuICAgIC5jb250ZW50Om5vdCg6bGFzdC1jaGlsZCksXFxuICAgIC5jb250cm9sOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICBtYXJnaW4tYm90dG9tOiAkbWVkaWEtbGV2ZWwtMS1jb250ZW50LXNwYWNpbmdcXG4gICAgLm1lZGlhXFxuICAgICAgcGFkZGluZy10b3A6ICRtZWRpYS1sZXZlbC0yLXNwYWNpbmdcXG4gICAgICAmICsgLm1lZGlhXFxuICAgICAgICBtYXJnaW4tdG9wOiAkbWVkaWEtbGV2ZWwtMi1zcGFjaW5nXFxuICAmICsgLm1lZGlhXFxuICAgIGJvcmRlci10b3A6ICRtZWRpYS1ib3JkZXItc2l6ZSBzb2xpZCAkbWVkaWEtYm9yZGVyLWNvbG9yXFxuICAgIG1hcmdpbi10b3A6ICRtZWRpYS1zcGFjaW5nXFxuICAgIHBhZGRpbmctdG9wOiAkbWVkaWEtc3BhY2luZ1xcbiAgLy8gU2l6ZXNcXG4gICYuaXMtbGFyZ2VcXG4gICAgJiArIC5tZWRpYVxcbiAgICAgIG1hcmdpbi10b3A6ICRtZWRpYS1zcGFjaW5nLWxhcmdlXFxuICAgICAgcGFkZGluZy10b3A6ICRtZWRpYS1zcGFjaW5nLWxhcmdlXFxuXFxuLm1lZGlhLWxlZnQsXFxuLm1lZGlhLXJpZ2h0XFxuICBmbGV4LWJhc2lzOiBhdXRvXFxuICBmbGV4LWdyb3c6IDBcXG4gIGZsZXgtc2hyaW5rOiAwXFxuXFxuLm1lZGlhLWxlZnRcXG4gICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsICRtZWRpYS1zcGFjaW5nKVxcblxcbi5tZWRpYS1yaWdodFxcbiAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgJG1lZGlhLXNwYWNpbmcsIGZhbHNlKVxcblxcbi5tZWRpYS1jb250ZW50XFxuICBmbGV4LWJhc2lzOiBhdXRvXFxuICBmbGV4LWdyb3c6IDFcXG4gIGZsZXgtc2hyaW5rOiAxXFxuICB0ZXh0LWFsaWduOiBpbmhlcml0XFxuXFxuK21vYmlsZVxcbiAgLm1lZGlhLWNvbnRlbnRcXG4gICAgb3ZlcmZsb3cteDogYXV0b1xcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kbWVudS1pdGVtLWNvbG9yOiAkdGV4dCAhZGVmYXVsdFxcbiRtZW51LWl0ZW0tcmFkaXVzOiAkcmFkaXVzLXNtYWxsICFkZWZhdWx0XFxuJG1lbnUtaXRlbS1ob3Zlci1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuJG1lbnUtaXRlbS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcbiRtZW51LWl0ZW0tYWN0aXZlLWNvbG9yOiAkbGluay1pbnZlcnQgIWRlZmF1bHRcXG4kbWVudS1pdGVtLWFjdGl2ZS1iYWNrZ3JvdW5kLWNvbG9yOiAkbGluayAhZGVmYXVsdFxcblxcbiRtZW51LWxpc3QtYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkYm9yZGVyICFkZWZhdWx0XFxuJG1lbnUtbGlzdC1saW5lLWhlaWdodDogMS4yNSAhZGVmYXVsdFxcbiRtZW51LWxpc3QtbGluay1wYWRkaW5nOiAwLjVlbSAwLjc1ZW0gIWRlZmF1bHRcXG4kbWVudS1uZXN0ZWQtbGlzdC1tYXJnaW46IDAuNzVlbSAhZGVmYXVsdFxcbiRtZW51LW5lc3RlZC1saXN0LXBhZGRpbmctbGVmdDogMC43NWVtICFkZWZhdWx0XFxuXFxuJG1lbnUtbGFiZWwtY29sb3I6ICR0ZXh0LWxpZ2h0ICFkZWZhdWx0XFxuJG1lbnUtbGFiZWwtZm9udC1zaXplOiAwLjc1ZW0gIWRlZmF1bHRcXG4kbWVudS1sYWJlbC1sZXR0ZXItc3BhY2luZzogMC4xZW0gIWRlZmF1bHRcXG4kbWVudS1sYWJlbC1zcGFjaW5nOiAxZW0gIWRlZmF1bHRcXG5cXG4ubWVudVxcbiAgZm9udC1zaXplOiAkc2l6ZS1ub3JtYWxcXG4gIC8vIFNpemVzXFxuICAmLmlzLXNtYWxsXFxuICAgIGZvbnQtc2l6ZTogJHNpemUtc21hbGxcXG4gICYuaXMtbWVkaXVtXFxuICAgIGZvbnQtc2l6ZTogJHNpemUtbWVkaXVtXFxuICAmLmlzLWxhcmdlXFxuICAgIGZvbnQtc2l6ZTogJHNpemUtbGFyZ2VcXG5cXG4ubWVudS1saXN0XFxuICBsaW5lLWhlaWdodDogJG1lbnUtbGlzdC1saW5lLWhlaWdodFxcbiAgYVxcbiAgICBib3JkZXItcmFkaXVzOiAkbWVudS1pdGVtLXJhZGl1c1xcbiAgICBjb2xvcjogJG1lbnUtaXRlbS1jb2xvclxcbiAgICBkaXNwbGF5OiBibG9ja1xcbiAgICBwYWRkaW5nOiAkbWVudS1saXN0LWxpbmstcGFkZGluZ1xcbiAgICAmOmhvdmVyXFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1lbnUtaXRlbS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgICAgY29sb3I6ICRtZW51LWl0ZW0taG92ZXItY29sb3JcXG4gICAgLy8gTW9kaWZpZXJzXFxuICAgICYuaXMtYWN0aXZlXFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1lbnUtaXRlbS1hY3RpdmUtYmFja2dyb3VuZC1jb2xvclxcbiAgICAgIGNvbG9yOiAkbWVudS1pdGVtLWFjdGl2ZS1jb2xvclxcbiAgbGlcXG4gICAgdWxcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJib3JkZXJcXFwiLCAkbWVudS1saXN0LWJvcmRlci1sZWZ0LCBmYWxzZSlcXG4gICAgICBtYXJnaW46ICRtZW51LW5lc3RlZC1saXN0LW1hcmdpblxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcInBhZGRpbmdcXFwiLCAkbWVudS1uZXN0ZWQtbGlzdC1wYWRkaW5nLWxlZnQsIGZhbHNlKVxcblxcbi5tZW51LWxhYmVsXFxuICBjb2xvcjogJG1lbnUtbGFiZWwtY29sb3JcXG4gIGZvbnQtc2l6ZTogJG1lbnUtbGFiZWwtZm9udC1zaXplXFxuICBsZXR0ZXItc3BhY2luZzogJG1lbnUtbGFiZWwtbGV0dGVyLXNwYWNpbmdcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2VcXG4gICY6bm90KDpmaXJzdC1jaGlsZClcXG4gICAgbWFyZ2luLXRvcDogJG1lbnUtbGFiZWwtc3BhY2luZ1xcbiAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgIG1hcmdpbi1ib3R0b206ICRtZW51LWxhYmVsLXNwYWNpbmdcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJG1lc3NhZ2UtYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQgIWRlZmF1bHRcXG4kbWVzc2FnZS1yYWRpdXM6ICRyYWRpdXMgIWRlZmF1bHRcXG5cXG4kbWVzc2FnZS1oZWFkZXItYmFja2dyb3VuZC1jb2xvcjogJHRleHQgIWRlZmF1bHRcXG4kbWVzc2FnZS1oZWFkZXItY29sb3I6ICR0ZXh0LWludmVydCAhZGVmYXVsdFxcbiRtZXNzYWdlLWhlYWRlci13ZWlnaHQ6ICR3ZWlnaHQtYm9sZCAhZGVmYXVsdFxcbiRtZXNzYWdlLWhlYWRlci1wYWRkaW5nOiAwLjc1ZW0gMWVtICFkZWZhdWx0XFxuJG1lc3NhZ2UtaGVhZGVyLXJhZGl1czogJHJhZGl1cyAhZGVmYXVsdFxcblxcbiRtZXNzYWdlLWJvZHktYm9yZGVyLWNvbG9yOiAkYm9yZGVyICFkZWZhdWx0XFxuJG1lc3NhZ2UtYm9keS1ib3JkZXItd2lkdGg6IDAgMCAwIDRweCAhZGVmYXVsdFxcbiRtZXNzYWdlLWJvZHktY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuJG1lc3NhZ2UtYm9keS1wYWRkaW5nOiAxLjI1ZW0gMS41ZW0gIWRlZmF1bHRcXG4kbWVzc2FnZS1ib2R5LXJhZGl1czogJHJhZGl1cyAhZGVmYXVsdFxcblxcbiRtZXNzYWdlLWJvZHktcHJlLWJhY2tncm91bmQtY29sb3I6ICRzY2hlbWUtbWFpbiAhZGVmYXVsdFxcbiRtZXNzYWdlLWJvZHktcHJlLWNvZGUtYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWRlZmF1bHRcXG5cXG4kbWVzc2FnZS1oZWFkZXItYm9keS1ib3JkZXItd2lkdGg6IDAgIWRlZmF1bHRcXG4kbWVzc2FnZS1jb2xvcnM6ICRjb2xvcnMgIWRlZmF1bHRcXG5cXG4ubWVzc2FnZVxcbiAgQGV4dGVuZCAlYmxvY2tcXG4gIGJhY2tncm91bmQtY29sb3I6ICRtZXNzYWdlLWJhY2tncm91bmQtY29sb3JcXG4gIGJvcmRlci1yYWRpdXM6ICRtZXNzYWdlLXJhZGl1c1xcbiAgZm9udC1zaXplOiAkc2l6ZS1ub3JtYWxcXG4gIHN0cm9uZ1xcbiAgICBjb2xvcjogY3VycmVudENvbG9yXFxuICBhOm5vdCguYnV0dG9uKTpub3QoLnRhZyk6bm90KC5kcm9wZG93bi1pdGVtKVxcbiAgICBjb2xvcjogY3VycmVudENvbG9yXFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lXFxuICAvLyBTaXplc1xcbiAgJi5pcy1zbWFsbFxcbiAgICBmb250LXNpemU6ICRzaXplLXNtYWxsXFxuICAmLmlzLW1lZGl1bVxcbiAgICBmb250LXNpemU6ICRzaXplLW1lZGl1bVxcbiAgJi5pcy1sYXJnZVxcbiAgICBmb250LXNpemU6ICRzaXplLWxhcmdlXFxuICAvLyBDb2xvcnNcXG4gIEBlYWNoICRuYW1lLCAkY29tcG9uZW50cyBpbiAkbWVzc2FnZS1jb2xvcnNcXG4gICAgJGNvbG9yOiBudGgoJGNvbXBvbmVudHMsIDEpXFxuICAgICRjb2xvci1pbnZlcnQ6IG50aCgkY29tcG9uZW50cywgMilcXG4gICAgJGNvbG9yLWxpZ2h0OiBudWxsXFxuICAgICRjb2xvci1kYXJrOiBudWxsXFxuXFxuICAgIEBpZiBsZW5ndGgoJGNvbXBvbmVudHMpID49IDNcXG4gICAgICAkY29sb3ItbGlnaHQ6IG50aCgkY29tcG9uZW50cywgMylcXG4gICAgICBAaWYgbGVuZ3RoKCRjb21wb25lbnRzKSA+PSA0XFxuICAgICAgICAkY29sb3ItZGFyazogbnRoKCRjb21wb25lbnRzLCA0KVxcbiAgICAgIEBlbHNlXFxuICAgICAgICAkY29sb3ItbHVtaW5hbmNlOiBjb2xvckx1bWluYW5jZSgkY29sb3IpXFxuICAgICAgICAkZGFya2VuLXBlcmNlbnRhZ2U6ICRjb2xvci1sdW1pbmFuY2UgKiA3MCVcXG4gICAgICAgICRkZXNhdHVyYXRlLXBlcmNlbnRhZ2U6ICRjb2xvci1sdW1pbmFuY2UgKiAzMCVcXG4gICAgICAgICRjb2xvci1kYXJrOiBkZXNhdHVyYXRlKGRhcmtlbigkY29sb3IsICRkYXJrZW4tcGVyY2VudGFnZSksICRkZXNhdHVyYXRlLXBlcmNlbnRhZ2UpXFxuICAgIEBlbHNlXFxuICAgICAgJGNvbG9yLWxpZ2h0bmluZzogbWF4KCgxMDAlIC0gbGlnaHRuZXNzKCRjb2xvcikpIC0gMiUsIDAlKVxcbiAgICAgICRjb2xvci1saWdodDogbGlnaHRlbigkY29sb3IsICRjb2xvci1saWdodG5pbmcpXFxuXFxuICAgICYuaXMtI3skbmFtZX1cXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItbGlnaHRcXG4gICAgICAubWVzc2FnZS1oZWFkZXJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvclxcbiAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAubWVzc2FnZS1ib2R5XFxuICAgICAgICBib3JkZXItY29sb3I6ICRjb2xvclxcbiAgICAgICAgY29sb3I6ICRjb2xvci1kYXJrXFxuXFxuLm1lc3NhZ2UtaGVhZGVyXFxuICBhbGlnbi1pdGVtczogY2VudGVyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkbWVzc2FnZS1oZWFkZXItYmFja2dyb3VuZC1jb2xvclxcbiAgYm9yZGVyLXJhZGl1czogJG1lc3NhZ2UtaGVhZGVyLXJhZGl1cyAkbWVzc2FnZS1oZWFkZXItcmFkaXVzIDAgMFxcbiAgY29sb3I6ICRtZXNzYWdlLWhlYWRlci1jb2xvclxcbiAgZGlzcGxheTogZmxleFxcbiAgZm9udC13ZWlnaHQ6ICRtZXNzYWdlLWhlYWRlci13ZWlnaHRcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlblxcbiAgbGluZS1oZWlnaHQ6IDEuMjVcXG4gIHBhZGRpbmc6ICRtZXNzYWdlLWhlYWRlci1wYWRkaW5nXFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG4gIC5kZWxldGVcXG4gICAgZmxleC1ncm93OiAwXFxuICAgIGZsZXgtc2hyaW5rOiAwXFxuICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDAuNzVlbSwgZmFsc2UpXFxuICAmICsgLm1lc3NhZ2UtYm9keVxcbiAgICBib3JkZXItd2lkdGg6ICRtZXNzYWdlLWhlYWRlci1ib2R5LWJvcmRlci13aWR0aFxcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwXFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwXFxuXFxuLm1lc3NhZ2UtYm9keVxcbiAgYm9yZGVyLWNvbG9yOiAkbWVzc2FnZS1ib2R5LWJvcmRlci1jb2xvclxcbiAgYm9yZGVyLXJhZGl1czogJG1lc3NhZ2UtYm9keS1yYWRpdXNcXG4gIGJvcmRlci1zdHlsZTogc29saWRcXG4gIGJvcmRlci13aWR0aDogJG1lc3NhZ2UtYm9keS1ib3JkZXItd2lkdGhcXG4gIGNvbG9yOiAkbWVzc2FnZS1ib2R5LWNvbG9yXFxuICBwYWRkaW5nOiAkbWVzc2FnZS1ib2R5LXBhZGRpbmdcXG4gIGNvZGUsXFxuICBwcmVcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJG1lc3NhZ2UtYm9keS1wcmUtYmFja2dyb3VuZC1jb2xvclxcbiAgcHJlIGNvZGVcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJG1lc3NhZ2UtYm9keS1wcmUtY29kZS1iYWNrZ3JvdW5kLWNvbG9yXFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvbWl4aW5zXFxcIlxcblxcbiRtb2RhbC16OiA0MCAhZGVmYXVsdFxcblxcbiRtb2RhbC1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3I6IGJ1bG1hUmdiYSgkc2NoZW1lLWludmVydCwgMC44NikgIWRlZmF1bHRcXG5cXG4kbW9kYWwtY29udGVudC13aWR0aDogNjQwcHggIWRlZmF1bHRcXG4kbW9kYWwtY29udGVudC1tYXJnaW4tbW9iaWxlOiAyMHB4ICFkZWZhdWx0XFxuJG1vZGFsLWNvbnRlbnQtc3BhY2luZy1tb2JpbGU6IDE2MHB4ICFkZWZhdWx0XFxuJG1vZGFsLWNvbnRlbnQtc3BhY2luZy10YWJsZXQ6IDQwcHggIWRlZmF1bHRcXG5cXG4kbW9kYWwtY2xvc2UtZGltZW5zaW9uczogNDBweCAhZGVmYXVsdFxcbiRtb2RhbC1jbG9zZS1yaWdodDogMjBweCAhZGVmYXVsdFxcbiRtb2RhbC1jbG9zZS10b3A6IDIwcHggIWRlZmF1bHRcXG5cXG4kbW9kYWwtY2FyZC1zcGFjaW5nOiA0MHB4ICFkZWZhdWx0XFxuXFxuJG1vZGFsLWNhcmQtaGVhZC1iYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcbiRtb2RhbC1jYXJkLWhlYWQtYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRib3JkZXIgIWRlZmF1bHRcXG4kbW9kYWwtY2FyZC1oZWFkLXBhZGRpbmc6IDIwcHggIWRlZmF1bHRcXG4kbW9kYWwtY2FyZC1oZWFkLXJhZGl1czogJHJhZGl1cy1sYXJnZSAhZGVmYXVsdFxcblxcbiRtb2RhbC1jYXJkLXRpdGxlLWNvbG9yOiAkdGV4dC1zdHJvbmcgIWRlZmF1bHRcXG4kbW9kYWwtY2FyZC10aXRsZS1saW5lLWhlaWdodDogMSAhZGVmYXVsdFxcbiRtb2RhbC1jYXJkLXRpdGxlLXNpemU6ICRzaXplLTQgIWRlZmF1bHRcXG5cXG4kbW9kYWwtY2FyZC1mb290LXJhZGl1czogJHJhZGl1cy1sYXJnZSAhZGVmYXVsdFxcbiRtb2RhbC1jYXJkLWZvb3QtYm9yZGVyLXRvcDogMXB4IHNvbGlkICRib3JkZXIgIWRlZmF1bHRcXG5cXG4kbW9kYWwtY2FyZC1ib2R5LWJhY2tncm91bmQtY29sb3I6ICRzY2hlbWUtbWFpbiAhZGVmYXVsdFxcbiRtb2RhbC1jYXJkLWJvZHktcGFkZGluZzogMjBweCAhZGVmYXVsdFxcblxcbiRtb2RhbC1icmVha3BvaW50OiAkdGFibGV0ICFkZWZhdWx0XFxuXFxuLm1vZGFsXFxuICBAZXh0ZW5kICVvdmVybGF5XFxuICBhbGlnbi1pdGVtczogY2VudGVyXFxuICBkaXNwbGF5OiBub25lXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcbiAgb3ZlcmZsb3c6IGhpZGRlblxcbiAgcG9zaXRpb246IGZpeGVkXFxuICB6LWluZGV4OiAkbW9kYWwtelxcbiAgLy8gTW9kaWZpZXJzXFxuICAmLmlzLWFjdGl2ZVxcbiAgICBkaXNwbGF5OiBmbGV4XFxuXFxuLm1vZGFsLWJhY2tncm91bmRcXG4gIEBleHRlbmQgJW92ZXJsYXlcXG4gIGJhY2tncm91bmQtY29sb3I6ICRtb2RhbC1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3JcXG5cXG4ubW9kYWwtY29udGVudCxcXG4ubW9kYWwtY2FyZFxcbiAgbWFyZ2luOiAwICRtb2RhbC1jb250ZW50LW1hcmdpbi1tb2JpbGVcXG4gIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSAjeyRtb2RhbC1jb250ZW50LXNwYWNpbmctbW9iaWxlfSlcXG4gIG92ZXJmbG93OiBhdXRvXFxuICBwb3NpdGlvbjogcmVsYXRpdmVcXG4gIHdpZHRoOiAxMDAlXFxuICAvLyBSZXNwb25zaXZlbmVzc1xcbiAgK2Zyb20oJG1vZGFsLWJyZWFrcG9pbnQpXFxuICAgIG1hcmdpbjogMCBhdXRvXFxuICAgIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSAjeyRtb2RhbC1jb250ZW50LXNwYWNpbmctdGFibGV0fSlcXG4gICAgd2lkdGg6ICRtb2RhbC1jb250ZW50LXdpZHRoXFxuXFxuLm1vZGFsLWNsb3NlXFxuICBAZXh0ZW5kICVkZWxldGVcXG4gIGJhY2tncm91bmQ6IG5vbmVcXG4gIGhlaWdodDogJG1vZGFsLWNsb3NlLWRpbWVuc2lvbnNcXG4gIHBvc2l0aW9uOiBmaXhlZFxcbiAgK2x0ci1wb3NpdGlvbigkbW9kYWwtY2xvc2UtcmlnaHQpXFxuICB0b3A6ICRtb2RhbC1jbG9zZS10b3BcXG4gIHdpZHRoOiAkbW9kYWwtY2xvc2UtZGltZW5zaW9uc1xcblxcbi5tb2RhbC1jYXJkXFxuICBkaXNwbGF5OiBmbGV4XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uXFxuICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoIC0gI3skbW9kYWwtY2FyZC1zcGFjaW5nfSlcXG4gIG92ZXJmbG93OiBoaWRkZW5cXG4gIC1tcy1vdmVyZmxvdy15OiB2aXNpYmxlXFxuXFxuLm1vZGFsLWNhcmQtaGVhZCxcXG4ubW9kYWwtY2FyZC1mb290XFxuICBhbGlnbi1pdGVtczogY2VudGVyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkbW9kYWwtY2FyZC1oZWFkLWJhY2tncm91bmQtY29sb3JcXG4gIGRpc3BsYXk6IGZsZXhcXG4gIGZsZXgtc2hyaW5rOiAwXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnRcXG4gIHBhZGRpbmc6ICRtb2RhbC1jYXJkLWhlYWQtcGFkZGluZ1xcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuXFxuLm1vZGFsLWNhcmQtaGVhZFxcbiAgYm9yZGVyLWJvdHRvbTogJG1vZGFsLWNhcmQtaGVhZC1ib3JkZXItYm90dG9tXFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAkbW9kYWwtY2FyZC1oZWFkLXJhZGl1c1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICRtb2RhbC1jYXJkLWhlYWQtcmFkaXVzXFxuXFxuLm1vZGFsLWNhcmQtdGl0bGVcXG4gIGNvbG9yOiAkbW9kYWwtY2FyZC10aXRsZS1jb2xvclxcbiAgZmxleC1ncm93OiAxXFxuICBmbGV4LXNocmluazogMFxcbiAgZm9udC1zaXplOiAkbW9kYWwtY2FyZC10aXRsZS1zaXplXFxuICBsaW5lLWhlaWdodDogJG1vZGFsLWNhcmQtdGl0bGUtbGluZS1oZWlnaHRcXG5cXG4ubW9kYWwtY2FyZC1mb290XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAkbW9kYWwtY2FyZC1mb290LXJhZGl1c1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6ICRtb2RhbC1jYXJkLWZvb3QtcmFkaXVzXFxuICBib3JkZXItdG9wOiAkbW9kYWwtY2FyZC1mb290LWJvcmRlci10b3BcXG4gIC5idXR0b25cXG4gICAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMC41ZW0pXFxuXFxuLm1vZGFsLWNhcmQtYm9keVxcbiAgK292ZXJmbG93LXRvdWNoXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkbW9kYWwtY2FyZC1ib2R5LWJhY2tncm91bmQtY29sb3JcXG4gIGZsZXgtZ3JvdzogMVxcbiAgZmxleC1zaHJpbms6IDFcXG4gIG92ZXJmbG93OiBhdXRvXFxuICBwYWRkaW5nOiAkbW9kYWwtY2FyZC1ib2R5LXBhZGRpbmdcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJG5hdmJhci1iYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW4gIWRlZmF1bHRcXG4kbmF2YmFyLWJveC1zaGFkb3ctc2l6ZTogMCAycHggMCAwICFkZWZhdWx0XFxuJG5hdmJhci1ib3gtc2hhZG93LWNvbG9yOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcbiRuYXZiYXItaGVpZ2h0OiAzLjI1cmVtICFkZWZhdWx0XFxuJG5hdmJhci1wYWRkaW5nLXZlcnRpY2FsOiAxcmVtICFkZWZhdWx0XFxuJG5hdmJhci1wYWRkaW5nLWhvcml6b250YWw6IDJyZW0gIWRlZmF1bHRcXG4kbmF2YmFyLXo6IDMwICFkZWZhdWx0XFxuJG5hdmJhci1maXhlZC16OiAzMCAhZGVmYXVsdFxcblxcbiRuYXZiYXItaXRlbS1jb2xvcjogJHRleHQgIWRlZmF1bHRcXG4kbmF2YmFyLWl0ZW0taG92ZXItY29sb3I6ICRsaW5rICFkZWZhdWx0XFxuJG5hdmJhci1pdGVtLWhvdmVyLWJhY2tncm91bmQtY29sb3I6ICRzY2hlbWUtbWFpbi1iaXMgIWRlZmF1bHRcXG4kbmF2YmFyLWl0ZW0tYWN0aXZlLWNvbG9yOiAkc2NoZW1lLWludmVydCAhZGVmYXVsdFxcbiRuYXZiYXItaXRlbS1hY3RpdmUtYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWRlZmF1bHRcXG4kbmF2YmFyLWl0ZW0taW1nLW1heC1oZWlnaHQ6IDEuNzVyZW0gIWRlZmF1bHRcXG5cXG4kbmF2YmFyLWJ1cmdlci1jb2xvcjogJG5hdmJhci1pdGVtLWNvbG9yICFkZWZhdWx0XFxuXFxuJG5hdmJhci10YWItaG92ZXItYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWRlZmF1bHRcXG4kbmF2YmFyLXRhYi1ob3Zlci1ib3JkZXItYm90dG9tLWNvbG9yOiAkbGluayAhZGVmYXVsdFxcbiRuYXZiYXItdGFiLWFjdGl2ZS1jb2xvcjogJGxpbmsgIWRlZmF1bHRcXG4kbmF2YmFyLXRhYi1hY3RpdmUtYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWRlZmF1bHRcXG4kbmF2YmFyLXRhYi1hY3RpdmUtYm9yZGVyLWJvdHRvbS1jb2xvcjogJGxpbmsgIWRlZmF1bHRcXG4kbmF2YmFyLXRhYi1hY3RpdmUtYm9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQgIWRlZmF1bHRcXG4kbmF2YmFyLXRhYi1hY3RpdmUtYm9yZGVyLWJvdHRvbS13aWR0aDogM3B4ICFkZWZhdWx0XFxuXFxuJG5hdmJhci1kcm9wZG93bi1iYWNrZ3JvdW5kLWNvbG9yOiAkc2NoZW1lLW1haW4gIWRlZmF1bHRcXG4kbmF2YmFyLWRyb3Bkb3duLWJvcmRlci10b3A6IDJweCBzb2xpZCAkYm9yZGVyICFkZWZhdWx0XFxuJG5hdmJhci1kcm9wZG93bi1vZmZzZXQ6IC00cHggIWRlZmF1bHRcXG4kbmF2YmFyLWRyb3Bkb3duLWFycm93OiAkbGluayAhZGVmYXVsdFxcbiRuYXZiYXItZHJvcGRvd24tcmFkaXVzOiAkcmFkaXVzLWxhcmdlICFkZWZhdWx0XFxuJG5hdmJhci1kcm9wZG93bi16OiAyMCAhZGVmYXVsdFxcblxcbiRuYXZiYXItZHJvcGRvd24tYm94ZWQtcmFkaXVzOiAkcmFkaXVzLWxhcmdlICFkZWZhdWx0XFxuJG5hdmJhci1kcm9wZG93bi1ib3hlZC1zaGFkb3c6IDAgOHB4IDhweCBidWxtYVJnYmEoJHNjaGVtZS1pbnZlcnQsIDAuMSksIDAgMCAwIDFweCBidWxtYVJnYmEoJHNjaGVtZS1pbnZlcnQsIDAuMSkgIWRlZmF1bHRcXG5cXG4kbmF2YmFyLWRyb3Bkb3duLWl0ZW0taG92ZXItY29sb3I6ICRzY2hlbWUtaW52ZXJ0ICFkZWZhdWx0XFxuJG5hdmJhci1kcm9wZG93bi1pdGVtLWhvdmVyLWJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kICFkZWZhdWx0XFxuJG5hdmJhci1kcm9wZG93bi1pdGVtLWFjdGl2ZS1jb2xvcjogJGxpbmsgIWRlZmF1bHRcXG4kbmF2YmFyLWRyb3Bkb3duLWl0ZW0tYWN0aXZlLWJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kICFkZWZhdWx0XFxuXFxuJG5hdmJhci1kaXZpZGVyLWJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kICFkZWZhdWx0XFxuJG5hdmJhci1kaXZpZGVyLWhlaWdodDogMnB4ICFkZWZhdWx0XFxuXFxuJG5hdmJhci1ib3R0b20tYm94LXNoYWRvdy1zaXplOiAwIC0ycHggMCAwICFkZWZhdWx0XFxuXFxuJG5hdmJhci1icmVha3BvaW50OiAkZGVza3RvcCAhZGVmYXVsdFxcblxcbiRuYXZiYXItY29sb3JzOiAkY29sb3JzICFkZWZhdWx0XFxuXFxuPW5hdmJhci1maXhlZFxcbiAgbGVmdDogMFxcbiAgcG9zaXRpb246IGZpeGVkXFxuICByaWdodDogMFxcbiAgei1pbmRleDogJG5hdmJhci1maXhlZC16XFxuXFxuLm5hdmJhclxcbiAgYmFja2dyb3VuZC1jb2xvcjogJG5hdmJhci1iYWNrZ3JvdW5kLWNvbG9yXFxuICBtaW4taGVpZ2h0OiAkbmF2YmFyLWhlaWdodFxcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuICB6LWluZGV4OiAkbmF2YmFyLXpcXG4gIEBlYWNoICRuYW1lLCAkcGFpciBpbiAkbmF2YmFyLWNvbG9yc1xcbiAgICAkY29sb3I6IG50aCgkcGFpciwgMSlcXG4gICAgJGNvbG9yLWludmVydDogbnRoKCRwYWlyLCAyKVxcbiAgICAmLmlzLSN7JG5hbWV9XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yXFxuICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAubmF2YmFyLWJyYW5kXFxuICAgICAgICAmID4gLm5hdmJhci1pdGVtLFxcbiAgICAgICAgLm5hdmJhci1saW5rXFxuICAgICAgICAgIGNvbG9yOiAkY29sb3ItaW52ZXJ0XFxuICAgICAgICAmID4gYS5uYXZiYXItaXRlbSxcXG4gICAgICAgIC5uYXZiYXItbGlua1xcbiAgICAgICAgICAmOmZvY3VzLFxcbiAgICAgICAgICAmOmhvdmVyLFxcbiAgICAgICAgICAmLmlzLWFjdGl2ZVxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJ1bG1hRGFya2VuKCRjb2xvciwgNSUpXFxuICAgICAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAgIC5uYXZiYXItbGlua1xcbiAgICAgICAgICAmOjphZnRlclxcbiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgIC5uYXZiYXItYnVyZ2VyXFxuICAgICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICtmcm9tKCRuYXZiYXItYnJlYWtwb2ludClcXG4gICAgICAgIC5uYXZiYXItc3RhcnQsXFxuICAgICAgICAubmF2YmFyLWVuZFxcbiAgICAgICAgICAmID4gLm5hdmJhci1pdGVtLFxcbiAgICAgICAgICAubmF2YmFyLWxpbmtcXG4gICAgICAgICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICAgICAmID4gYS5uYXZiYXItaXRlbSxcXG4gICAgICAgICAgLm5hdmJhci1saW5rXFxuICAgICAgICAgICAgJjpmb2N1cyxcXG4gICAgICAgICAgICAmOmhvdmVyLFxcbiAgICAgICAgICAgICYuaXMtYWN0aXZlXFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBidWxtYURhcmtlbigkY29sb3IsIDUlKVxcbiAgICAgICAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAgICAgLm5hdmJhci1saW5rXFxuICAgICAgICAgICAgJjo6YWZ0ZXJcXG4gICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICAgLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93bjpmb2N1cyAubmF2YmFyLWxpbmssXFxuICAgICAgICAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duOmhvdmVyIC5uYXZiYXItbGluayxcXG4gICAgICAgIC5uYXZiYXItaXRlbS5oYXMtZHJvcGRvd24uaXMtYWN0aXZlIC5uYXZiYXItbGlua1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBidWxtYURhcmtlbigkY29sb3IsIDUlKVxcbiAgICAgICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICAgLm5hdmJhci1kcm9wZG93blxcbiAgICAgICAgICBhLm5hdmJhci1pdGVtXFxuICAgICAgICAgICAgJi5pcy1hY3RpdmVcXG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvclxcbiAgICAgICAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICYgPiAuY29udGFpbmVyXFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoXFxuICAgIGRpc3BsYXk6IGZsZXhcXG4gICAgbWluLWhlaWdodDogJG5hdmJhci1oZWlnaHRcXG4gICAgd2lkdGg6IDEwMCVcXG4gICYuaGFzLXNoYWRvd1xcbiAgICBib3gtc2hhZG93OiAkbmF2YmFyLWJveC1zaGFkb3ctc2l6ZSAkbmF2YmFyLWJveC1zaGFkb3ctY29sb3JcXG4gICYuaXMtZml4ZWQtYm90dG9tLFxcbiAgJi5pcy1maXhlZC10b3BcXG4gICAgK25hdmJhci1maXhlZFxcbiAgJi5pcy1maXhlZC1ib3R0b21cXG4gICAgYm90dG9tOiAwXFxuICAgICYuaGFzLXNoYWRvd1xcbiAgICAgIGJveC1zaGFkb3c6ICRuYXZiYXItYm90dG9tLWJveC1zaGFkb3ctc2l6ZSAkbmF2YmFyLWJveC1zaGFkb3ctY29sb3JcXG4gICYuaXMtZml4ZWQtdG9wXFxuICAgIHRvcDogMFxcblxcbmh0bWwsXFxuYm9keVxcbiAgJi5oYXMtbmF2YmFyLWZpeGVkLXRvcFxcbiAgICBwYWRkaW5nLXRvcDogJG5hdmJhci1oZWlnaHRcXG4gICYuaGFzLW5hdmJhci1maXhlZC1ib3R0b21cXG4gICAgcGFkZGluZy1ib3R0b206ICRuYXZiYXItaGVpZ2h0XFxuXFxuLm5hdmJhci1icmFuZCxcXG4ubmF2YmFyLXRhYnNcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoXFxuICBkaXNwbGF5OiBmbGV4XFxuICBmbGV4LXNocmluazogMFxcbiAgbWluLWhlaWdodDogJG5hdmJhci1oZWlnaHRcXG5cXG4ubmF2YmFyLWJyYW5kXFxuICBhLm5hdmJhci1pdGVtXFxuICAgICY6Zm9jdXMsXFxuICAgICY6aG92ZXJcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudFxcblxcbi5uYXZiYXItdGFic1xcbiAgK292ZXJmbG93LXRvdWNoXFxuICBtYXgtd2lkdGg6IDEwMHZ3XFxuICBvdmVyZmxvdy14OiBhdXRvXFxuICBvdmVyZmxvdy15OiBoaWRkZW5cXG5cXG4ubmF2YmFyLWJ1cmdlclxcbiAgQGV4dGVuZCAlcmVzZXRcXG4gIGNvbG9yOiAkbmF2YmFyLWJ1cmdlci1jb2xvclxcbiAgK2hhbWJ1cmdlcigkbmF2YmFyLWhlaWdodClcXG4gICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIGF1dG8sIGZhbHNlKVxcblxcbi5uYXZiYXItbWVudVxcbiAgZGlzcGxheTogbm9uZVxcblxcbi5uYXZiYXItaXRlbSxcXG4ubmF2YmFyLWxpbmtcXG4gIGNvbG9yOiAkbmF2YmFyLWl0ZW0tY29sb3JcXG4gIGRpc3BsYXk6IGJsb2NrXFxuICBsaW5lLWhlaWdodDogMS41XFxuICBwYWRkaW5nOiAwLjVyZW0gMC43NXJlbVxcbiAgcG9zaXRpb246IHJlbGF0aXZlXFxuICAuaWNvblxcbiAgICAmOm9ubHktY2hpbGRcXG4gICAgICBtYXJnaW4tbGVmdDogLTAuMjVyZW1cXG4gICAgICBtYXJnaW4tcmlnaHQ6IC0wLjI1cmVtXFxuXFxuYS5uYXZiYXItaXRlbSxcXG4ubmF2YmFyLWxpbmtcXG4gIGN1cnNvcjogcG9pbnRlclxcbiAgJjpmb2N1cyxcXG4gICY6Zm9jdXMtd2l0aGluLFxcbiAgJjpob3ZlcixcXG4gICYuaXMtYWN0aXZlXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRuYXZiYXItaXRlbS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgIGNvbG9yOiAkbmF2YmFyLWl0ZW0taG92ZXItY29sb3JcXG5cXG4ubmF2YmFyLWl0ZW1cXG4gIGZsZXgtZ3JvdzogMFxcbiAgZmxleC1zaHJpbms6IDBcXG4gIGltZ1xcbiAgICBtYXgtaGVpZ2h0OiAkbmF2YmFyLWl0ZW0taW1nLW1heC1oZWlnaHRcXG4gICYuaGFzLWRyb3Bkb3duXFxuICAgIHBhZGRpbmc6IDBcXG4gICYuaXMtZXhwYW5kZWRcXG4gICAgZmxleC1ncm93OiAxXFxuICAgIGZsZXgtc2hyaW5rOiAxXFxuICAmLmlzLXRhYlxcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdHJhbnNwYXJlbnRcXG4gICAgbWluLWhlaWdodDogJG5hdmJhci1oZWlnaHRcXG4gICAgcGFkZGluZy1ib3R0b206IGNhbGMoMC41cmVtIC0gMXB4KVxcbiAgICAmOmZvY3VzLFxcbiAgICAmOmhvdmVyXFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG5hdmJhci10YWItaG92ZXItYmFja2dyb3VuZC1jb2xvclxcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRuYXZiYXItdGFiLWhvdmVyLWJvcmRlci1ib3R0b20tY29sb3JcXG4gICAgJi5pcy1hY3RpdmVcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbmF2YmFyLXRhYi1hY3RpdmUtYmFja2dyb3VuZC1jb2xvclxcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRuYXZiYXItdGFiLWFjdGl2ZS1ib3JkZXItYm90dG9tLWNvbG9yXFxuICAgICAgYm9yZGVyLWJvdHRvbS1zdHlsZTogJG5hdmJhci10YWItYWN0aXZlLWJvcmRlci1ib3R0b20tc3R5bGVcXG4gICAgICBib3JkZXItYm90dG9tLXdpZHRoOiAkbmF2YmFyLXRhYi1hY3RpdmUtYm9yZGVyLWJvdHRvbS13aWR0aFxcbiAgICAgIGNvbG9yOiAkbmF2YmFyLXRhYi1hY3RpdmUtY29sb3JcXG4gICAgICBwYWRkaW5nLWJvdHRvbTogY2FsYygwLjVyZW0gLSAjeyRuYXZiYXItdGFiLWFjdGl2ZS1ib3JkZXItYm90dG9tLXdpZHRofSlcXG5cXG4ubmF2YmFyLWNvbnRlbnRcXG4gIGZsZXgtZ3JvdzogMVxcbiAgZmxleC1zaHJpbms6IDFcXG5cXG4ubmF2YmFyLWxpbms6bm90KC5pcy1hcnJvd2xlc3MpXFxuICArbHRyLXByb3BlcnR5KFxcXCJwYWRkaW5nXFxcIiwgMi41ZW0pXFxuICAmOjphZnRlclxcbiAgICBAZXh0ZW5kICVhcnJvd1xcbiAgICBib3JkZXItY29sb3I6ICRuYXZiYXItZHJvcGRvd24tYXJyb3dcXG4gICAgbWFyZ2luLXRvcDogLTAuMzc1ZW1cXG4gICAgK2x0ci1wb3NpdGlvbigxLjEyNWVtKVxcblxcbi5uYXZiYXItZHJvcGRvd25cXG4gIGZvbnQtc2l6ZTogMC44NzVyZW1cXG4gIHBhZGRpbmctYm90dG9tOiAwLjVyZW1cXG4gIHBhZGRpbmctdG9wOiAwLjVyZW1cXG4gIC5uYXZiYXItaXRlbVxcbiAgICBwYWRkaW5nLWxlZnQ6IDEuNXJlbVxcbiAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW1cXG5cXG4ubmF2YmFyLWRpdmlkZXJcXG4gIGJhY2tncm91bmQtY29sb3I6ICRuYXZiYXItZGl2aWRlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICBib3JkZXI6IG5vbmVcXG4gIGRpc3BsYXk6IG5vbmVcXG4gIGhlaWdodDogJG5hdmJhci1kaXZpZGVyLWhlaWdodFxcbiAgbWFyZ2luOiAwLjVyZW0gMFxcblxcbit1bnRpbCgkbmF2YmFyLWJyZWFrcG9pbnQpXFxuICAubmF2YmFyID4gLmNvbnRhaW5lclxcbiAgICBkaXNwbGF5OiBibG9ja1xcbiAgLm5hdmJhci1icmFuZCxcXG4gIC5uYXZiYXItdGFic1xcbiAgICAubmF2YmFyLWl0ZW1cXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyXFxuICAgICAgZGlzcGxheTogZmxleFxcbiAgLm5hdmJhci1saW5rXFxuICAgICY6OmFmdGVyXFxuICAgICAgZGlzcGxheTogbm9uZVxcbiAgLm5hdmJhci1tZW51XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRuYXZiYXItYmFja2dyb3VuZC1jb2xvclxcbiAgICBib3gtc2hhZG93OiAwIDhweCAxNnB4IGJ1bG1hUmdiYSgkc2NoZW1lLWludmVydCwgMC4xKVxcbiAgICBwYWRkaW5nOiAwLjVyZW0gMFxcbiAgICAmLmlzLWFjdGl2ZVxcbiAgICAgIGRpc3BsYXk6IGJsb2NrXFxuICAvLyBGaXhlZCBuYXZiYXJcXG4gIC5uYXZiYXJcXG4gICAgJi5pcy1maXhlZC1ib3R0b20tdG91Y2gsXFxuICAgICYuaXMtZml4ZWQtdG9wLXRvdWNoXFxuICAgICAgK25hdmJhci1maXhlZFxcbiAgICAmLmlzLWZpeGVkLWJvdHRvbS10b3VjaFxcbiAgICAgIGJvdHRvbTogMFxcbiAgICAgICYuaGFzLXNoYWRvd1xcbiAgICAgICAgYm94LXNoYWRvdzogMCAtMnB4IDNweCBidWxtYVJnYmEoJHNjaGVtZS1pbnZlcnQsIDAuMSlcXG4gICAgJi5pcy1maXhlZC10b3AtdG91Y2hcXG4gICAgICB0b3A6IDBcXG4gICAgJi5pcy1maXhlZC10b3AsXFxuICAgICYuaXMtZml4ZWQtdG9wLXRvdWNoXFxuICAgICAgLm5hdmJhci1tZW51XFxuICAgICAgICArb3ZlcmZsb3ctdG91Y2hcXG4gICAgICAgIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSAjeyRuYXZiYXItaGVpZ2h0fSlcXG4gICAgICAgIG92ZXJmbG93OiBhdXRvXFxuICBodG1sLFxcbiAgYm9keVxcbiAgICAmLmhhcy1uYXZiYXItZml4ZWQtdG9wLXRvdWNoXFxuICAgICAgcGFkZGluZy10b3A6ICRuYXZiYXItaGVpZ2h0XFxuICAgICYuaGFzLW5hdmJhci1maXhlZC1ib3R0b20tdG91Y2hcXG4gICAgICBwYWRkaW5nLWJvdHRvbTogJG5hdmJhci1oZWlnaHRcXG5cXG4rZnJvbSgkbmF2YmFyLWJyZWFrcG9pbnQpXFxuICAubmF2YmFyLFxcbiAgLm5hdmJhci1tZW51LFxcbiAgLm5hdmJhci1zdGFydCxcXG4gIC5uYXZiYXItZW5kXFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoXFxuICAgIGRpc3BsYXk6IGZsZXhcXG4gIC5uYXZiYXJcXG4gICAgbWluLWhlaWdodDogJG5hdmJhci1oZWlnaHRcXG4gICAgJi5pcy1zcGFjZWRcXG4gICAgICBwYWRkaW5nOiAkbmF2YmFyLXBhZGRpbmctdmVydGljYWwgJG5hdmJhci1wYWRkaW5nLWhvcml6b250YWxcXG4gICAgICAubmF2YmFyLXN0YXJ0LFxcbiAgICAgIC5uYXZiYXItZW5kXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyXFxuICAgICAgYS5uYXZiYXItaXRlbSxcXG4gICAgICAubmF2YmFyLWxpbmtcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICRyYWRpdXNcXG4gICAgJi5pcy10cmFuc3BhcmVudFxcbiAgICAgIGEubmF2YmFyLWl0ZW0sXFxuICAgICAgLm5hdmJhci1saW5rXFxuICAgICAgICAmOmZvY3VzLFxcbiAgICAgICAgJjpob3ZlcixcXG4gICAgICAgICYuaXMtYWN0aXZlXFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnRcXG4gICAgICAubmF2YmFyLWl0ZW0uaGFzLWRyb3Bkb3duXFxuICAgICAgICAmLmlzLWFjdGl2ZSxcXG4gICAgICAgICYuaXMtaG92ZXJhYmxlOmZvY3VzLFxcbiAgICAgICAgJi5pcy1ob3ZlcmFibGU6Zm9jdXMtd2l0aGluLFxcbiAgICAgICAgJi5pcy1ob3ZlcmFibGU6aG92ZXJcXG4gICAgICAgICAgLm5hdmJhci1saW5rXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudFxcbiAgICAgIC5uYXZiYXItZHJvcGRvd25cXG4gICAgICAgIGEubmF2YmFyLWl0ZW1cXG4gICAgICAgICAgJjpmb2N1cyxcXG4gICAgICAgICAgJjpob3ZlclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRuYXZiYXItZHJvcGRvd24taXRlbS1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgICAgICAgICAgY29sb3I6ICRuYXZiYXItZHJvcGRvd24taXRlbS1ob3Zlci1jb2xvclxcbiAgICAgICAgICAmLmlzLWFjdGl2ZVxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRuYXZiYXItZHJvcGRvd24taXRlbS1hY3RpdmUtYmFja2dyb3VuZC1jb2xvclxcbiAgICAgICAgICAgIGNvbG9yOiAkbmF2YmFyLWRyb3Bkb3duLWl0ZW0tYWN0aXZlLWNvbG9yXFxuICAubmF2YmFyLWJ1cmdlclxcbiAgICBkaXNwbGF5OiBub25lXFxuICAubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLWxpbmtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlclxcbiAgICBkaXNwbGF5OiBmbGV4XFxuICAubmF2YmFyLWl0ZW1cXG4gICAgJi5oYXMtZHJvcGRvd25cXG4gICAgICBhbGlnbi1pdGVtczogc3RyZXRjaFxcbiAgICAmLmhhcy1kcm9wZG93bi11cFxcbiAgICAgIC5uYXZiYXItbGluazo6YWZ0ZXJcXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDEzNWRlZykgdHJhbnNsYXRlKDAuMjVlbSwgLTAuMjVlbSlcXG4gICAgICAubmF2YmFyLWRyb3Bkb3duXFxuICAgICAgICBib3JkZXItYm90dG9tOiAkbmF2YmFyLWRyb3Bkb3duLWJvcmRlci10b3BcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICRuYXZiYXItZHJvcGRvd24tcmFkaXVzICRuYXZiYXItZHJvcGRvd24tcmFkaXVzIDAgMFxcbiAgICAgICAgYm9yZGVyLXRvcDogbm9uZVxcbiAgICAgICAgYm90dG9tOiAxMDAlXFxuICAgICAgICBib3gtc2hhZG93OiAwIC04cHggOHB4IGJ1bG1hUmdiYSgkc2NoZW1lLWludmVydCwgMC4xKVxcbiAgICAgICAgdG9wOiBhdXRvXFxuICAgICYuaXMtYWN0aXZlLFxcbiAgICAmLmlzLWhvdmVyYWJsZTpmb2N1cyxcXG4gICAgJi5pcy1ob3ZlcmFibGU6Zm9jdXMtd2l0aGluLFxcbiAgICAmLmlzLWhvdmVyYWJsZTpob3ZlclxcbiAgICAgIC5uYXZiYXItZHJvcGRvd25cXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrXFxuICAgICAgICAubmF2YmFyLmlzLXNwYWNlZCAmLFxcbiAgICAgICAgJi5pcy1ib3hlZFxcbiAgICAgICAgICBvcGFjaXR5OiAxXFxuICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvXFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKVxcbiAgLm5hdmJhci1tZW51XFxuICAgIGZsZXgtZ3JvdzogMVxcbiAgICBmbGV4LXNocmluazogMFxcbiAgLm5hdmJhci1zdGFydFxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnRcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgYXV0bylcXG4gIC5uYXZiYXItZW5kXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmRcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgYXV0bywgZmFsc2UpXFxuICAubmF2YmFyLWRyb3Bkb3duXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRuYXZiYXItZHJvcGRvd24tYmFja2dyb3VuZC1jb2xvclxcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAkbmF2YmFyLWRyb3Bkb3duLXJhZGl1c1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogJG5hdmJhci1kcm9wZG93bi1yYWRpdXNcXG4gICAgYm9yZGVyLXRvcDogJG5hdmJhci1kcm9wZG93bi1ib3JkZXItdG9wXFxuICAgIGJveC1zaGFkb3c6IDAgOHB4IDhweCBidWxtYVJnYmEoJHNjaGVtZS1pbnZlcnQsIDAuMSlcXG4gICAgZGlzcGxheTogbm9uZVxcbiAgICBmb250LXNpemU6IDAuODc1cmVtXFxuICAgICtsdHItcG9zaXRpb24oMCwgZmFsc2UpXFxuICAgIG1pbi13aWR0aDogMTAwJVxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGVcXG4gICAgdG9wOiAxMDAlXFxuICAgIHotaW5kZXg6ICRuYXZiYXItZHJvcGRvd24telxcbiAgICAubmF2YmFyLWl0ZW1cXG4gICAgICBwYWRkaW5nOiAwLjM3NXJlbSAxcmVtXFxuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcFxcbiAgICBhLm5hdmJhci1pdGVtXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwicGFkZGluZ1xcXCIsIDNyZW0pXFxuICAgICAgJjpmb2N1cyxcXG4gICAgICAmOmhvdmVyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbmF2YmFyLWRyb3Bkb3duLWl0ZW0taG92ZXItYmFja2dyb3VuZC1jb2xvclxcbiAgICAgICAgY29sb3I6ICRuYXZiYXItZHJvcGRvd24taXRlbS1ob3Zlci1jb2xvclxcbiAgICAgICYuaXMtYWN0aXZlXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbmF2YmFyLWRyb3Bkb3duLWl0ZW0tYWN0aXZlLWJhY2tncm91bmQtY29sb3JcXG4gICAgICAgIGNvbG9yOiAkbmF2YmFyLWRyb3Bkb3duLWl0ZW0tYWN0aXZlLWNvbG9yXFxuICAgIC5uYXZiYXIuaXMtc3BhY2VkICYsXFxuICAgICYuaXMtYm94ZWRcXG4gICAgICBib3JkZXItcmFkaXVzOiAkbmF2YmFyLWRyb3Bkb3duLWJveGVkLXJhZGl1c1xcbiAgICAgIGJvcmRlci10b3A6IG5vbmVcXG4gICAgICBib3gtc2hhZG93OiAkbmF2YmFyLWRyb3Bkb3duLWJveGVkLXNoYWRvd1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrXFxuICAgICAgb3BhY2l0eTogMFxcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lXFxuICAgICAgdG9wOiBjYWxjKDEwMCUgKyAoI3skbmF2YmFyLWRyb3Bkb3duLW9mZnNldH0pKVxcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNXB4KVxcbiAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246ICRzcGVlZFxcbiAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IG9wYWNpdHksIHRyYW5zZm9ybVxcbiAgICAmLmlzLXJpZ2h0XFxuICAgICAgbGVmdDogYXV0b1xcbiAgICAgIHJpZ2h0OiAwXFxuICAubmF2YmFyLWRpdmlkZXJcXG4gICAgZGlzcGxheTogYmxvY2tcXG4gIC5uYXZiYXIgPiAuY29udGFpbmVyLFxcbiAgLmNvbnRhaW5lciA+IC5uYXZiYXJcXG4gICAgLm5hdmJhci1icmFuZFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIC0uNzVyZW0sIGZhbHNlKVxcbiAgICAubmF2YmFyLW1lbnVcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAtLjc1cmVtKVxcbiAgLy8gRml4ZWQgbmF2YmFyXFxuICAubmF2YmFyXFxuICAgICYuaXMtZml4ZWQtYm90dG9tLWRlc2t0b3AsXFxuICAgICYuaXMtZml4ZWQtdG9wLWRlc2t0b3BcXG4gICAgICArbmF2YmFyLWZpeGVkXFxuICAgICYuaXMtZml4ZWQtYm90dG9tLWRlc2t0b3BcXG4gICAgICBib3R0b206IDBcXG4gICAgICAmLmhhcy1zaGFkb3dcXG4gICAgICAgIGJveC1zaGFkb3c6IDAgLTJweCAzcHggYnVsbWFSZ2JhKCRzY2hlbWUtaW52ZXJ0LCAwLjEpXFxuICAgICYuaXMtZml4ZWQtdG9wLWRlc2t0b3BcXG4gICAgICB0b3A6IDBcXG4gIGh0bWwsXFxuICBib2R5XFxuICAgICYuaGFzLW5hdmJhci1maXhlZC10b3AtZGVza3RvcFxcbiAgICAgIHBhZGRpbmctdG9wOiAkbmF2YmFyLWhlaWdodFxcbiAgICAmLmhhcy1uYXZiYXItZml4ZWQtYm90dG9tLWRlc2t0b3BcXG4gICAgICBwYWRkaW5nLWJvdHRvbTogJG5hdmJhci1oZWlnaHRcXG4gICAgJi5oYXMtc3BhY2VkLW5hdmJhci1maXhlZC10b3BcXG4gICAgICBwYWRkaW5nLXRvcDogJG5hdmJhci1oZWlnaHQgKyAoJG5hdmJhci1wYWRkaW5nLXZlcnRpY2FsICogMilcXG4gICAgJi5oYXMtc3BhY2VkLW5hdmJhci1maXhlZC1ib3R0b21cXG4gICAgICBwYWRkaW5nLWJvdHRvbTogJG5hdmJhci1oZWlnaHQgKyAoJG5hdmJhci1wYWRkaW5nLXZlcnRpY2FsICogMilcXG4gIC8vIEhvdmVyL0FjdGl2ZSBzdGF0ZXNcXG4gIGEubmF2YmFyLWl0ZW0sXFxuICAubmF2YmFyLWxpbmtcXG4gICAgJi5pcy1hY3RpdmVcXG4gICAgICBjb2xvcjogJG5hdmJhci1pdGVtLWFjdGl2ZS1jb2xvclxcbiAgICAmLmlzLWFjdGl2ZTpub3QoOmZvY3VzKTpub3QoOmhvdmVyKVxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRuYXZiYXItaXRlbS1hY3RpdmUtYmFja2dyb3VuZC1jb2xvclxcbiAgLm5hdmJhci1pdGVtLmhhcy1kcm9wZG93blxcbiAgICAmOmZvY3VzLFxcbiAgICAmOmhvdmVyLFxcbiAgICAmLmlzLWFjdGl2ZVxcbiAgICAgIC5uYXZiYXItbGlua1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG5hdmJhci1pdGVtLWhvdmVyLWJhY2tncm91bmQtY29sb3JcXG5cXG4vLyBDb21iaW5hdGlvblxcblxcbi5oZXJvXFxuICAmLmlzLWZ1bGxoZWlnaHQtd2l0aC1uYXZiYXJcXG4gICAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtICN7JG5hdmJhci1oZWlnaHR9KVxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL2NvbnRyb2xzXFxcIlxcbkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJHBhZ2luYXRpb24tY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcbiRwYWdpbmF0aW9uLWJvcmRlci1jb2xvcjogJGJvcmRlciAhZGVmYXVsdFxcbiRwYWdpbmF0aW9uLW1hcmdpbjogLTAuMjVyZW0gIWRlZmF1bHRcXG4kcGFnaW5hdGlvbi1taW4td2lkdGg6ICRjb250cm9sLWhlaWdodCAhZGVmYXVsdFxcblxcbiRwYWdpbmF0aW9uLWl0ZW0tZm9udC1zaXplOiAxZW0gIWRlZmF1bHRcXG4kcGFnaW5hdGlvbi1pdGVtLW1hcmdpbjogMC4yNXJlbSAhZGVmYXVsdFxcbiRwYWdpbmF0aW9uLWl0ZW0tcGFkZGluZy1sZWZ0OiAwLjVlbSAhZGVmYXVsdFxcbiRwYWdpbmF0aW9uLWl0ZW0tcGFkZGluZy1yaWdodDogMC41ZW0gIWRlZmF1bHRcXG5cXG4kcGFnaW5hdGlvbi1uYXYtcGFkZGluZy1sZWZ0OiAwLjc1ZW0gIWRlZmF1bHRcXG4kcGFnaW5hdGlvbi1uYXYtcGFkZGluZy1yaWdodDogMC43NWVtICFkZWZhdWx0XFxuXFxuJHBhZ2luYXRpb24taG92ZXItY29sb3I6ICRsaW5rLWhvdmVyICFkZWZhdWx0XFxuJHBhZ2luYXRpb24taG92ZXItYm9yZGVyLWNvbG9yOiAkbGluay1ob3Zlci1ib3JkZXIgIWRlZmF1bHRcXG5cXG4kcGFnaW5hdGlvbi1mb2N1cy1jb2xvcjogJGxpbmstZm9jdXMgIWRlZmF1bHRcXG4kcGFnaW5hdGlvbi1mb2N1cy1ib3JkZXItY29sb3I6ICRsaW5rLWZvY3VzLWJvcmRlciAhZGVmYXVsdFxcblxcbiRwYWdpbmF0aW9uLWFjdGl2ZS1jb2xvcjogJGxpbmstYWN0aXZlICFkZWZhdWx0XFxuJHBhZ2luYXRpb24tYWN0aXZlLWJvcmRlci1jb2xvcjogJGxpbmstYWN0aXZlLWJvcmRlciAhZGVmYXVsdFxcblxcbiRwYWdpbmF0aW9uLWRpc2FibGVkLWNvbG9yOiAkdGV4dC1saWdodCAhZGVmYXVsdFxcbiRwYWdpbmF0aW9uLWRpc2FibGVkLWJhY2tncm91bmQtY29sb3I6ICRib3JkZXIgIWRlZmF1bHRcXG4kcGFnaW5hdGlvbi1kaXNhYmxlZC1ib3JkZXItY29sb3I6ICRib3JkZXIgIWRlZmF1bHRcXG5cXG4kcGFnaW5hdGlvbi1jdXJyZW50LWNvbG9yOiAkbGluay1pbnZlcnQgIWRlZmF1bHRcXG4kcGFnaW5hdGlvbi1jdXJyZW50LWJhY2tncm91bmQtY29sb3I6ICRsaW5rICFkZWZhdWx0XFxuJHBhZ2luYXRpb24tY3VycmVudC1ib3JkZXItY29sb3I6ICRsaW5rICFkZWZhdWx0XFxuXFxuJHBhZ2luYXRpb24tZWxsaXBzaXMtY29sb3I6ICRncmV5LWxpZ2h0ICFkZWZhdWx0XFxuXFxuJHBhZ2luYXRpb24tc2hhZG93LWluc2V0OiBpbnNldCAwIDFweCAycHggcmdiYSgkc2NoZW1lLWludmVydCwgMC4yKSAhZGVmYXVsdFxcblxcbi5wYWdpbmF0aW9uXFxuICBAZXh0ZW5kICVibG9ja1xcbiAgZm9udC1zaXplOiAkc2l6ZS1ub3JtYWxcXG4gIG1hcmdpbjogJHBhZ2luYXRpb24tbWFyZ2luXFxuICAvLyBTaXplc1xcbiAgJi5pcy1zbWFsbFxcbiAgICBmb250LXNpemU6ICRzaXplLXNtYWxsXFxuICAmLmlzLW1lZGl1bVxcbiAgICBmb250LXNpemU6ICRzaXplLW1lZGl1bVxcbiAgJi5pcy1sYXJnZVxcbiAgICBmb250LXNpemU6ICRzaXplLWxhcmdlXFxuICAmLmlzLXJvdW5kZWRcXG4gICAgLnBhZ2luYXRpb24tcHJldmlvdXMsXFxuICAgIC5wYWdpbmF0aW9uLW5leHRcXG4gICAgICBwYWRkaW5nLWxlZnQ6IDFlbVxcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDFlbVxcbiAgICAgIGJvcmRlci1yYWRpdXM6ICRyYWRpdXMtcm91bmRlZFxcbiAgICAucGFnaW5hdGlvbi1saW5rXFxuICAgICAgYm9yZGVyLXJhZGl1czogJHJhZGl1cy1yb3VuZGVkXFxuXFxuLnBhZ2luYXRpb24sXFxuLnBhZ2luYXRpb24tbGlzdFxcbiAgYWxpZ24taXRlbXM6IGNlbnRlclxcbiAgZGlzcGxheTogZmxleFxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gIHRleHQtYWxpZ246IGNlbnRlclxcblxcbi5wYWdpbmF0aW9uLXByZXZpb3VzLFxcbi5wYWdpbmF0aW9uLW5leHQsXFxuLnBhZ2luYXRpb24tbGluayxcXG4ucGFnaW5hdGlvbi1lbGxpcHNpc1xcbiAgQGV4dGVuZCAlY29udHJvbFxcbiAgQGV4dGVuZCAldW5zZWxlY3RhYmxlXFxuICBmb250LXNpemU6ICRwYWdpbmF0aW9uLWl0ZW0tZm9udC1zaXplXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcbiAgbWFyZ2luOiAkcGFnaW5hdGlvbi1pdGVtLW1hcmdpblxcbiAgcGFkZGluZy1sZWZ0OiAkcGFnaW5hdGlvbi1pdGVtLXBhZGRpbmctbGVmdFxcbiAgcGFkZGluZy1yaWdodDogJHBhZ2luYXRpb24taXRlbS1wYWRkaW5nLXJpZ2h0XFxuICB0ZXh0LWFsaWduOiBjZW50ZXJcXG5cXG4ucGFnaW5hdGlvbi1wcmV2aW91cyxcXG4ucGFnaW5hdGlvbi1uZXh0LFxcbi5wYWdpbmF0aW9uLWxpbmtcXG4gIGJvcmRlci1jb2xvcjogJHBhZ2luYXRpb24tYm9yZGVyLWNvbG9yXFxuICBjb2xvcjogJHBhZ2luYXRpb24tY29sb3JcXG4gIG1pbi13aWR0aDogJHBhZ2luYXRpb24tbWluLXdpZHRoXFxuICAmOmhvdmVyXFxuICAgIGJvcmRlci1jb2xvcjogJHBhZ2luYXRpb24taG92ZXItYm9yZGVyLWNvbG9yXFxuICAgIGNvbG9yOiAkcGFnaW5hdGlvbi1ob3Zlci1jb2xvclxcbiAgJjpmb2N1c1xcbiAgICBib3JkZXItY29sb3I6ICRwYWdpbmF0aW9uLWZvY3VzLWJvcmRlci1jb2xvclxcbiAgJjphY3RpdmVcXG4gICAgYm94LXNoYWRvdzogJHBhZ2luYXRpb24tc2hhZG93LWluc2V0XFxuICAmW2Rpc2FibGVkXSxcXG4gICYuaXMtZGlzYWJsZWRcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHBhZ2luYXRpb24tZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvclxcbiAgICBib3JkZXItY29sb3I6ICRwYWdpbmF0aW9uLWRpc2FibGVkLWJvcmRlci1jb2xvclxcbiAgICBib3gtc2hhZG93OiBub25lXFxuICAgIGNvbG9yOiAkcGFnaW5hdGlvbi1kaXNhYmxlZC1jb2xvclxcbiAgICBvcGFjaXR5OiAwLjVcXG5cXG4ucGFnaW5hdGlvbi1wcmV2aW91cyxcXG4ucGFnaW5hdGlvbi1uZXh0XFxuICBwYWRkaW5nLWxlZnQ6ICRwYWdpbmF0aW9uLW5hdi1wYWRkaW5nLWxlZnRcXG4gIHBhZGRpbmctcmlnaHQ6ICRwYWdpbmF0aW9uLW5hdi1wYWRkaW5nLXJpZ2h0XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwXFxuXFxuLnBhZ2luYXRpb24tbGlua1xcbiAgJi5pcy1jdXJyZW50XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRwYWdpbmF0aW9uLWN1cnJlbnQtYmFja2dyb3VuZC1jb2xvclxcbiAgICBib3JkZXItY29sb3I6ICRwYWdpbmF0aW9uLWN1cnJlbnQtYm9yZGVyLWNvbG9yXFxuICAgIGNvbG9yOiAkcGFnaW5hdGlvbi1jdXJyZW50LWNvbG9yXFxuXFxuLnBhZ2luYXRpb24tZWxsaXBzaXNcXG4gIGNvbG9yOiAkcGFnaW5hdGlvbi1lbGxpcHNpcy1jb2xvclxcbiAgcG9pbnRlci1ldmVudHM6IG5vbmVcXG5cXG4ucGFnaW5hdGlvbi1saXN0XFxuICBmbGV4LXdyYXA6IHdyYXBcXG4gIGxpXFxuICAgIGxpc3Qtc3R5bGU6IG5vbmVcXG5cXG4rbW9iaWxlXFxuICAucGFnaW5hdGlvblxcbiAgICBmbGV4LXdyYXA6IHdyYXBcXG4gIC5wYWdpbmF0aW9uLXByZXZpb3VzLFxcbiAgLnBhZ2luYXRpb24tbmV4dFxcbiAgICBmbGV4LWdyb3c6IDFcXG4gICAgZmxleC1zaHJpbms6IDFcXG4gIC5wYWdpbmF0aW9uLWxpc3RcXG4gICAgbGlcXG4gICAgICBmbGV4LWdyb3c6IDFcXG4gICAgICBmbGV4LXNocmluazogMVxcblxcbit0YWJsZXRcXG4gIC5wYWdpbmF0aW9uLWxpc3RcXG4gICAgZmxleC1ncm93OiAxXFxuICAgIGZsZXgtc2hyaW5rOiAxXFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydFxcbiAgICBvcmRlcjogMVxcbiAgLnBhZ2luYXRpb24tcHJldmlvdXMsXFxuICAucGFnaW5hdGlvbi1uZXh0LFxcbiAgLnBhZ2luYXRpb24tbGluayxcXG4gIC5wYWdpbmF0aW9uLWVsbGlwc2lzXFxuICAgIG1hcmdpbi1ib3R0b206IDBcXG4gICAgbWFyZ2luLXRvcDogMFxcbiAgLnBhZ2luYXRpb24tcHJldmlvdXNcXG4gICAgb3JkZXI6IDJcXG4gIC5wYWdpbmF0aW9uLW5leHRcXG4gICAgb3JkZXI6IDNcXG4gIC5wYWdpbmF0aW9uXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlblxcbiAgICBtYXJnaW4tYm90dG9tOiAwXFxuICAgIG1hcmdpbi10b3A6IDBcXG4gICAgJi5pcy1jZW50ZXJlZFxcbiAgICAgIC5wYWdpbmF0aW9uLXByZXZpb3VzXFxuICAgICAgICBvcmRlcjogMVxcbiAgICAgIC5wYWdpbmF0aW9uLWxpc3RcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyXFxuICAgICAgICBvcmRlcjogMlxcbiAgICAgIC5wYWdpbmF0aW9uLW5leHRcXG4gICAgICAgIG9yZGVyOiAzXFxuICAgICYuaXMtcmlnaHRcXG4gICAgICAucGFnaW5hdGlvbi1wcmV2aW91c1xcbiAgICAgICAgb3JkZXI6IDFcXG4gICAgICAucGFnaW5hdGlvbi1uZXh0XFxuICAgICAgICBvcmRlcjogMlxcbiAgICAgIC5wYWdpbmF0aW9uLWxpc3RcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmRcXG4gICAgICAgIG9yZGVyOiAzXFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvbWl4aW5zXFxcIlxcblxcbiRwYW5lbC1tYXJnaW46ICRibG9jay1zcGFjaW5nICFkZWZhdWx0XFxuJHBhbmVsLWl0ZW0tYm9yZGVyOiAxcHggc29saWQgJGJvcmRlci1saWdodCAhZGVmYXVsdFxcbiRwYW5lbC1yYWRpdXM6ICRyYWRpdXMtbGFyZ2UgIWRlZmF1bHRcXG4kcGFuZWwtc2hhZG93OiAkc2hhZG93ICFkZWZhdWx0XFxuXFxuJHBhbmVsLWhlYWRpbmctYmFja2dyb3VuZC1jb2xvcjogJGJvcmRlci1saWdodCAhZGVmYXVsdFxcbiRwYW5lbC1oZWFkaW5nLWNvbG9yOiAkdGV4dC1zdHJvbmcgIWRlZmF1bHRcXG4kcGFuZWwtaGVhZGluZy1saW5lLWhlaWdodDogMS4yNSAhZGVmYXVsdFxcbiRwYW5lbC1oZWFkaW5nLXBhZGRpbmc6IDAuNzVlbSAxZW0gIWRlZmF1bHRcXG4kcGFuZWwtaGVhZGluZy1yYWRpdXM6ICRyYWRpdXMgIWRlZmF1bHRcXG4kcGFuZWwtaGVhZGluZy1zaXplOiAxLjI1ZW0gIWRlZmF1bHRcXG4kcGFuZWwtaGVhZGluZy13ZWlnaHQ6ICR3ZWlnaHQtYm9sZCAhZGVmYXVsdFxcblxcbiRwYW5lbC10YWJzLWZvbnQtc2l6ZTogMC44NzVlbSAhZGVmYXVsdFxcbiRwYW5lbC10YWItYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRib3JkZXIgIWRlZmF1bHRcXG4kcGFuZWwtdGFiLWFjdGl2ZS1ib3JkZXItYm90dG9tLWNvbG9yOiAkbGluay1hY3RpdmUtYm9yZGVyICFkZWZhdWx0XFxuJHBhbmVsLXRhYi1hY3RpdmUtY29sb3I6ICRsaW5rLWFjdGl2ZSAhZGVmYXVsdFxcblxcbiRwYW5lbC1saXN0LWl0ZW0tY29sb3I6ICR0ZXh0ICFkZWZhdWx0XFxuJHBhbmVsLWxpc3QtaXRlbS1ob3Zlci1jb2xvcjogJGxpbmsgIWRlZmF1bHRcXG5cXG4kcGFuZWwtYmxvY2stY29sb3I6ICR0ZXh0LXN0cm9uZyAhZGVmYXVsdFxcbiRwYW5lbC1ibG9jay1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcbiRwYW5lbC1ibG9jay1hY3RpdmUtYm9yZGVyLWxlZnQtY29sb3I6ICRsaW5rICFkZWZhdWx0XFxuJHBhbmVsLWJsb2NrLWFjdGl2ZS1jb2xvcjogJGxpbmstYWN0aXZlICFkZWZhdWx0XFxuJHBhbmVsLWJsb2NrLWFjdGl2ZS1pY29uLWNvbG9yOiAkbGluayAhZGVmYXVsdFxcblxcbiRwYW5lbC1pY29uLWNvbG9yOiAkdGV4dC1saWdodCAhZGVmYXVsdFxcbiRwYW5lbC1jb2xvcnM6ICRjb2xvcnMgIWRlZmF1bHRcXG5cXG4ucGFuZWxcXG4gIGJvcmRlci1yYWRpdXM6ICRwYW5lbC1yYWRpdXNcXG4gIGJveC1zaGFkb3c6ICRwYW5lbC1zaGFkb3dcXG4gIGZvbnQtc2l6ZTogJHNpemUtbm9ybWFsXFxuICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgbWFyZ2luLWJvdHRvbTogJHBhbmVsLW1hcmdpblxcbiAgLy8gQ29sb3JzXFxuICBAZWFjaCAkbmFtZSwgJGNvbXBvbmVudHMgaW4gJHBhbmVsLWNvbG9yc1xcbiAgICAkY29sb3I6IG50aCgkY29tcG9uZW50cywgMSlcXG4gICAgJGNvbG9yLWludmVydDogbnRoKCRjb21wb25lbnRzLCAyKVxcbiAgICAmLmlzLSN7JG5hbWV9XFxuICAgICAgLnBhbmVsLWhlYWRpbmdcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvclxcbiAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAucGFuZWwtdGFicyBhLmlzLWFjdGl2ZVxcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJGNvbG9yXFxuICAgICAgLnBhbmVsLWJsb2NrLmlzLWFjdGl2ZSAucGFuZWwtaWNvblxcbiAgICAgICAgY29sb3I6ICRjb2xvclxcblxcbi5wYW5lbC10YWJzLFxcbi5wYW5lbC1ibG9ja1xcbiAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgIGJvcmRlci1ib3R0b206ICRwYW5lbC1pdGVtLWJvcmRlclxcblxcbi5wYW5lbC1oZWFkaW5nXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkcGFuZWwtaGVhZGluZy1iYWNrZ3JvdW5kLWNvbG9yXFxuICBib3JkZXItcmFkaXVzOiAkcGFuZWwtcmFkaXVzICRwYW5lbC1yYWRpdXMgMCAwXFxuICBjb2xvcjogJHBhbmVsLWhlYWRpbmctY29sb3JcXG4gIGZvbnQtc2l6ZTogJHBhbmVsLWhlYWRpbmctc2l6ZVxcbiAgZm9udC13ZWlnaHQ6ICRwYW5lbC1oZWFkaW5nLXdlaWdodFxcbiAgbGluZS1oZWlnaHQ6ICRwYW5lbC1oZWFkaW5nLWxpbmUtaGVpZ2h0XFxuICBwYWRkaW5nOiAkcGFuZWwtaGVhZGluZy1wYWRkaW5nXFxuXFxuLnBhbmVsLXRhYnNcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LWVuZFxcbiAgZGlzcGxheTogZmxleFxcbiAgZm9udC1zaXplOiAkcGFuZWwtdGFicy1mb250LXNpemVcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyXFxuICBhXFxuICAgIGJvcmRlci1ib3R0b206ICRwYW5lbC10YWItYm9yZGVyLWJvdHRvbVxcbiAgICBtYXJnaW4tYm90dG9tOiAtMXB4XFxuICAgIHBhZGRpbmc6IDAuNWVtXFxuICAgIC8vIE1vZGlmaWVyc1xcbiAgICAmLmlzLWFjdGl2ZVxcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRwYW5lbC10YWItYWN0aXZlLWJvcmRlci1ib3R0b20tY29sb3JcXG4gICAgICBjb2xvcjogJHBhbmVsLXRhYi1hY3RpdmUtY29sb3JcXG5cXG4ucGFuZWwtbGlzdFxcbiAgYVxcbiAgICBjb2xvcjogJHBhbmVsLWxpc3QtaXRlbS1jb2xvclxcbiAgICAmOmhvdmVyXFxuICAgICAgY29sb3I6ICRwYW5lbC1saXN0LWl0ZW0taG92ZXItY29sb3JcXG5cXG4ucGFuZWwtYmxvY2tcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gIGNvbG9yOiAkcGFuZWwtYmxvY2stY29sb3JcXG4gIGRpc3BsYXk6IGZsZXhcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydFxcbiAgcGFkZGluZzogMC41ZW0gMC43NWVtXFxuICBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdXFxuICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDAuNzVlbSlcXG4gICYgPiAuY29udHJvbFxcbiAgICBmbGV4LWdyb3c6IDFcXG4gICAgZmxleC1zaHJpbms6IDFcXG4gICAgd2lkdGg6IDEwMCVcXG4gICYuaXMtd3JhcHBlZFxcbiAgICBmbGV4LXdyYXA6IHdyYXBcXG4gICYuaXMtYWN0aXZlXFxuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAkcGFuZWwtYmxvY2stYWN0aXZlLWJvcmRlci1sZWZ0LWNvbG9yXFxuICAgIGNvbG9yOiAkcGFuZWwtYmxvY2stYWN0aXZlLWNvbG9yXFxuICAgIC5wYW5lbC1pY29uXFxuICAgICAgY29sb3I6ICRwYW5lbC1ibG9jay1hY3RpdmUtaWNvbi1jb2xvclxcbiAgJjpsYXN0LWNoaWxkXFxuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRwYW5lbC1yYWRpdXNcXG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6ICRwYW5lbC1yYWRpdXNcXG5cXG5hLnBhbmVsLWJsb2NrLFxcbmxhYmVsLnBhbmVsLWJsb2NrXFxuICBjdXJzb3I6IHBvaW50ZXJcXG4gICY6aG92ZXJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHBhbmVsLWJsb2NrLWhvdmVyLWJhY2tncm91bmQtY29sb3JcXG5cXG4ucGFuZWwtaWNvblxcbiAgK2ZhKDE0cHgsIDFlbSlcXG4gIGNvbG9yOiAkcGFuZWwtaWNvbi1jb2xvclxcbiAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMC43NWVtKVxcbiAgLmZhXFxuICAgIGZvbnQtc2l6ZTogaW5oZXJpdFxcbiAgICBsaW5lLWhlaWdodDogaW5oZXJpdFxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kdGFicy1ib3JkZXItYm90dG9tLWNvbG9yOiAkYm9yZGVyICFkZWZhdWx0XFxuJHRhYnMtYm9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQgIWRlZmF1bHRcXG4kdGFicy1ib3JkZXItYm90dG9tLXdpZHRoOiAxcHggIWRlZmF1bHRcXG4kdGFicy1saW5rLWNvbG9yOiAkdGV4dCAhZGVmYXVsdFxcbiR0YWJzLWxpbmstaG92ZXItYm9yZGVyLWJvdHRvbS1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuJHRhYnMtbGluay1ob3Zlci1jb2xvcjogJHRleHQtc3Ryb25nICFkZWZhdWx0XFxuJHRhYnMtbGluay1hY3RpdmUtYm9yZGVyLWJvdHRvbS1jb2xvcjogJGxpbmsgIWRlZmF1bHRcXG4kdGFicy1saW5rLWFjdGl2ZS1jb2xvcjogJGxpbmsgIWRlZmF1bHRcXG4kdGFicy1saW5rLXBhZGRpbmc6IDAuNWVtIDFlbSAhZGVmYXVsdFxcblxcbiR0YWJzLWJveGVkLWxpbmstcmFkaXVzOiAkcmFkaXVzICFkZWZhdWx0XFxuJHRhYnMtYm94ZWQtbGluay1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZCAhZGVmYXVsdFxcbiR0YWJzLWJveGVkLWxpbmstaG92ZXItYm9yZGVyLWJvdHRvbS1jb2xvcjogJGJvcmRlciAhZGVmYXVsdFxcblxcbiR0YWJzLWJveGVkLWxpbmstYWN0aXZlLWJhY2tncm91bmQtY29sb3I6ICRzY2hlbWUtbWFpbiAhZGVmYXVsdFxcbiR0YWJzLWJveGVkLWxpbmstYWN0aXZlLWJvcmRlci1jb2xvcjogJGJvcmRlciAhZGVmYXVsdFxcbiR0YWJzLWJveGVkLWxpbmstYWN0aXZlLWJvcmRlci1ib3R0b20tY29sb3I6IHRyYW5zcGFyZW50ICFkZWZhdWx0XFxuXFxuJHRhYnMtdG9nZ2xlLWxpbmstYm9yZGVyLWNvbG9yOiAkYm9yZGVyICFkZWZhdWx0XFxuJHRhYnMtdG9nZ2xlLWxpbmstYm9yZGVyLXN0eWxlOiBzb2xpZCAhZGVmYXVsdFxcbiR0YWJzLXRvZ2dsZS1saW5rLWJvcmRlci13aWR0aDogMXB4ICFkZWZhdWx0XFxuJHRhYnMtdG9nZ2xlLWxpbmstaG92ZXItYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQgIWRlZmF1bHRcXG4kdGFicy10b2dnbGUtbGluay1ob3Zlci1ib3JkZXItY29sb3I6ICRib3JkZXItaG92ZXIgIWRlZmF1bHRcXG4kdGFicy10b2dnbGUtbGluay1yYWRpdXM6ICRyYWRpdXMgIWRlZmF1bHRcXG4kdGFicy10b2dnbGUtbGluay1hY3RpdmUtYmFja2dyb3VuZC1jb2xvcjogJGxpbmsgIWRlZmF1bHRcXG4kdGFicy10b2dnbGUtbGluay1hY3RpdmUtYm9yZGVyLWNvbG9yOiAkbGluayAhZGVmYXVsdFxcbiR0YWJzLXRvZ2dsZS1saW5rLWFjdGl2ZS1jb2xvcjogJGxpbmstaW52ZXJ0ICFkZWZhdWx0XFxuXFxuLnRhYnNcXG4gIEBleHRlbmQgJWJsb2NrXFxuICArb3ZlcmZsb3ctdG91Y2hcXG4gIEBleHRlbmQgJXVuc2VsZWN0YWJsZVxcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2hcXG4gIGRpc3BsYXk6IGZsZXhcXG4gIGZvbnQtc2l6ZTogJHNpemUtbm9ybWFsXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW5cXG4gIG92ZXJmbG93OiBoaWRkZW5cXG4gIG92ZXJmbG93LXg6IGF1dG9cXG4gIHdoaXRlLXNwYWNlOiBub3dyYXBcXG4gIGFcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlclxcbiAgICBib3JkZXItYm90dG9tLWNvbG9yOiAkdGFicy1ib3JkZXItYm90dG9tLWNvbG9yXFxuICAgIGJvcmRlci1ib3R0b20tc3R5bGU6ICR0YWJzLWJvcmRlci1ib3R0b20tc3R5bGVcXG4gICAgYm9yZGVyLWJvdHRvbS13aWR0aDogJHRhYnMtYm9yZGVyLWJvdHRvbS13aWR0aFxcbiAgICBjb2xvcjogJHRhYnMtbGluay1jb2xvclxcbiAgICBkaXNwbGF5OiBmbGV4XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyXFxuICAgIG1hcmdpbi1ib3R0b206IC0jeyR0YWJzLWJvcmRlci1ib3R0b20td2lkdGh9XFxuICAgIHBhZGRpbmc6ICR0YWJzLWxpbmstcGFkZGluZ1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wXFxuICAgICY6aG92ZXJcXG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAkdGFicy1saW5rLWhvdmVyLWJvcmRlci1ib3R0b20tY29sb3JcXG4gICAgICBjb2xvcjogJHRhYnMtbGluay1ob3Zlci1jb2xvclxcbiAgbGlcXG4gICAgZGlzcGxheTogYmxvY2tcXG4gICAgJi5pcy1hY3RpdmVcXG4gICAgICBhXFxuICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAkdGFicy1saW5rLWFjdGl2ZS1ib3JkZXItYm90dG9tLWNvbG9yXFxuICAgICAgICBjb2xvcjogJHRhYnMtbGluay1hY3RpdmUtY29sb3JcXG4gIHVsXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJHRhYnMtYm9yZGVyLWJvdHRvbS1jb2xvclxcbiAgICBib3JkZXItYm90dG9tLXN0eWxlOiAkdGFicy1ib3JkZXItYm90dG9tLXN0eWxlXFxuICAgIGJvcmRlci1ib3R0b20td2lkdGg6ICR0YWJzLWJvcmRlci1ib3R0b20td2lkdGhcXG4gICAgZGlzcGxheTogZmxleFxcbiAgICBmbGV4LWdyb3c6IDFcXG4gICAgZmxleC1zaHJpbms6IDBcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0XFxuICAgICYuaXMtbGVmdFxcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDAuNzVlbVxcbiAgICAmLmlzLWNlbnRlclxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcbiAgICAgIHBhZGRpbmctbGVmdDogMC43NWVtXFxuICAgICAgcGFkZGluZy1yaWdodDogMC43NWVtXFxuICAgICYuaXMtcmlnaHRcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kXFxuICAgICAgcGFkZGluZy1sZWZ0OiAwLjc1ZW1cXG4gIC5pY29uXFxuICAgICY6Zmlyc3QtY2hpbGRcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAwLjVlbSlcXG4gICAgJjpsYXN0LWNoaWxkXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMC41ZW0sIGZhbHNlKVxcbiAgLy8gQWxpZ25tZW50XFxuICAmLmlzLWNlbnRlcmVkXFxuICAgIHVsXFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gICYuaXMtcmlnaHRcXG4gICAgdWxcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kXFxuICAvLyBTdHlsZXNcXG4gICYuaXMtYm94ZWRcXG4gICAgYVxcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50XFxuICAgICAgK2x0clxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJHRhYnMtYm94ZWQtbGluay1yYWRpdXMgJHRhYnMtYm94ZWQtbGluay1yYWRpdXMgMCAwXFxuICAgICAgK3J0bFxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMCAwICR0YWJzLWJveGVkLWxpbmstcmFkaXVzICR0YWJzLWJveGVkLWxpbmstcmFkaXVzXFxuICAgICAgJjpob3ZlclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHRhYnMtYm94ZWQtbGluay1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAkdGFicy1ib3hlZC1saW5rLWhvdmVyLWJvcmRlci1ib3R0b20tY29sb3JcXG4gICAgbGlcXG4gICAgICAmLmlzLWFjdGl2ZVxcbiAgICAgICAgYVxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdGFicy1ib3hlZC1saW5rLWFjdGl2ZS1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgICAgICAgIGJvcmRlci1jb2xvcjogJHRhYnMtYm94ZWQtbGluay1hY3RpdmUtYm9yZGVyLWNvbG9yXFxuICAgICAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICR0YWJzLWJveGVkLWxpbmstYWN0aXZlLWJvcmRlci1ib3R0b20tY29sb3IgIWltcG9ydGFudFxcbiAgJi5pcy1mdWxsd2lkdGhcXG4gICAgbGlcXG4gICAgICBmbGV4LWdyb3c6IDFcXG4gICAgICBmbGV4LXNocmluazogMFxcbiAgJi5pcy10b2dnbGVcXG4gICAgYVxcbiAgICAgIGJvcmRlci1jb2xvcjogJHRhYnMtdG9nZ2xlLWxpbmstYm9yZGVyLWNvbG9yXFxuICAgICAgYm9yZGVyLXN0eWxlOiAkdGFicy10b2dnbGUtbGluay1ib3JkZXItc3R5bGVcXG4gICAgICBib3JkZXItd2lkdGg6ICR0YWJzLXRvZ2dsZS1saW5rLWJvcmRlci13aWR0aFxcbiAgICAgIG1hcmdpbi1ib3R0b206IDBcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmVcXG4gICAgICAmOmhvdmVyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdGFicy10b2dnbGUtbGluay1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICAgICAgICBib3JkZXItY29sb3I6ICR0YWJzLXRvZ2dsZS1saW5rLWhvdmVyLWJvcmRlci1jb2xvclxcbiAgICAgICAgei1pbmRleDogMlxcbiAgICBsaVxcbiAgICAgICYgKyBsaVxcbiAgICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgLSN7JHRhYnMtdG9nZ2xlLWxpbmstYm9yZGVyLXdpZHRofSwgZmFsc2UpXFxuICAgICAgJjpmaXJzdC1jaGlsZCBhXFxuICAgICAgICArbHRyXFxuICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR0YWJzLXRvZ2dsZS1saW5rLXJhZGl1c1xcbiAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAkdGFicy10b2dnbGUtbGluay1yYWRpdXNcXG4gICAgICAgICtydGxcXG4gICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICR0YWJzLXRvZ2dsZS1saW5rLXJhZGl1c1xcbiAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogJHRhYnMtdG9nZ2xlLWxpbmstcmFkaXVzXFxuICAgICAgJjpsYXN0LWNoaWxkIGFcXG4gICAgICAgICtsdHJcXG4gICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICR0YWJzLXRvZ2dsZS1saW5rLXJhZGl1c1xcbiAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogJHRhYnMtdG9nZ2xlLWxpbmstcmFkaXVzXFxuICAgICAgICArcnRsXFxuICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICR0YWJzLXRvZ2dsZS1saW5rLXJhZGl1c1xcbiAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAkdGFicy10b2dnbGUtbGluay1yYWRpdXNcXG4gICAgICAmLmlzLWFjdGl2ZVxcbiAgICAgICAgYVxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdGFicy10b2dnbGUtbGluay1hY3RpdmUtYmFja2dyb3VuZC1jb2xvclxcbiAgICAgICAgICBib3JkZXItY29sb3I6ICR0YWJzLXRvZ2dsZS1saW5rLWFjdGl2ZS1ib3JkZXItY29sb3JcXG4gICAgICAgICAgY29sb3I6ICR0YWJzLXRvZ2dsZS1saW5rLWFjdGl2ZS1jb2xvclxcbiAgICAgICAgICB6LWluZGV4OiAxXFxuICAgIHVsXFxuICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZVxcbiAgICAmLmlzLXRvZ2dsZS1yb3VuZGVkXFxuICAgICAgbGlcXG4gICAgICAgICY6Zmlyc3QtY2hpbGQgYVxcbiAgICAgICAgICArbHRyXFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHJhZGl1cy1yb3VuZGVkXFxuICAgICAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogJHJhZGl1cy1yb3VuZGVkXFxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxLjI1ZW1cXG4gICAgICAgICAgK3J0bFxcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAkcmFkaXVzLXJvdW5kZWRcXG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJHJhZGl1cy1yb3VuZGVkXFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMS4yNWVtXFxuICAgICAgICAmOmxhc3QtY2hpbGQgYVxcbiAgICAgICAgICArbHRyXFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6ICRyYWRpdXMtcm91bmRlZFxcbiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAkcmFkaXVzLXJvdW5kZWRcXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxLjI1ZW1cXG4gICAgICAgICAgK3J0bFxcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6ICRyYWRpdXMtcm91bmRlZFxcbiAgICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6ICRyYWRpdXMtcm91bmRlZFxcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMS4yNWVtXFxuICAvLyBTaXplc1xcbiAgJi5pcy1zbWFsbFxcbiAgICBmb250LXNpemU6ICRzaXplLXNtYWxsXFxuICAmLmlzLW1lZGl1bVxcbiAgICBmb250LXNpemU6ICRzaXplLW1lZGl1bVxcbiAgJi5pcy1sYXJnZVxcbiAgICBmb250LXNpemU6ICRzaXplLWxhcmdlXFxuXCIsXCIvKiBCdWxtYSBHcmlkICovXFxuQGNoYXJzZXQgXFxcInV0Zi04XFxcIlxcblxcbkBpbXBvcnQgXFxcImNvbHVtbnNcXFwiXFxuQGltcG9ydCBcXFwidGlsZXNcXFwiXFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvbWl4aW5zXFxcIlxcblxcbiRjb2x1bW4tZ2FwOiAwLjc1cmVtICFkZWZhdWx0XFxuXFxuLmNvbHVtblxcbiAgZGlzcGxheTogYmxvY2tcXG4gIGZsZXgtYmFzaXM6IDBcXG4gIGZsZXgtZ3JvdzogMVxcbiAgZmxleC1zaHJpbms6IDFcXG4gIHBhZGRpbmc6ICRjb2x1bW4tZ2FwXFxuICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLW5hcnJvd1xcbiAgICBmbGV4OiBub25lXFxuICAgIHdpZHRoOiB1bnNldFxcbiAgLmNvbHVtbnMuaXMtbW9iaWxlID4gJi5pcy1mdWxsXFxuICAgIGZsZXg6IG5vbmVcXG4gICAgd2lkdGg6IDEwMCVcXG4gIC5jb2x1bW5zLmlzLW1vYmlsZSA+ICYuaXMtdGhyZWUtcXVhcnRlcnNcXG4gICAgZmxleDogbm9uZVxcbiAgICB3aWR0aDogNzUlXFxuICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLXR3by10aGlyZHNcXG4gICAgZmxleDogbm9uZVxcbiAgICB3aWR0aDogNjYuNjY2NiVcXG4gIC5jb2x1bW5zLmlzLW1vYmlsZSA+ICYuaXMtaGFsZlxcbiAgICBmbGV4OiBub25lXFxuICAgIHdpZHRoOiA1MCVcXG4gIC5jb2x1bW5zLmlzLW1vYmlsZSA+ICYuaXMtb25lLXRoaXJkXFxuICAgIGZsZXg6IG5vbmVcXG4gICAgd2lkdGg6IDMzLjMzMzMlXFxuICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLW9uZS1xdWFydGVyXFxuICAgIGZsZXg6IG5vbmVcXG4gICAgd2lkdGg6IDI1JVxcbiAgLmNvbHVtbnMuaXMtbW9iaWxlID4gJi5pcy1vbmUtZmlmdGhcXG4gICAgZmxleDogbm9uZVxcbiAgICB3aWR0aDogMjAlXFxuICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLXR3by1maWZ0aHNcXG4gICAgZmxleDogbm9uZVxcbiAgICB3aWR0aDogNDAlXFxuICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLXRocmVlLWZpZnRoc1xcbiAgICBmbGV4OiBub25lXFxuICAgIHdpZHRoOiA2MCVcXG4gIC5jb2x1bW5zLmlzLW1vYmlsZSA+ICYuaXMtZm91ci1maWZ0aHNcXG4gICAgZmxleDogbm9uZVxcbiAgICB3aWR0aDogODAlXFxuICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLW9mZnNldC10aHJlZS1xdWFydGVyc1xcbiAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA3NSUsIGZhbHNlKVxcbiAgLmNvbHVtbnMuaXMtbW9iaWxlID4gJi5pcy1vZmZzZXQtdHdvLXRoaXJkc1xcbiAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA2Ni42NjY2JSwgZmFsc2UpXFxuICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLW9mZnNldC1oYWxmXFxuICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDUwJSwgZmFsc2UpXFxuICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLW9mZnNldC1vbmUtdGhpcmRcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMzMuMzMzMyUsIGZhbHNlKVxcbiAgLmNvbHVtbnMuaXMtbW9iaWxlID4gJi5pcy1vZmZzZXQtb25lLXF1YXJ0ZXJcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMjUlLCBmYWxzZSlcXG4gIC5jb2x1bW5zLmlzLW1vYmlsZSA+ICYuaXMtb2Zmc2V0LW9uZS1maWZ0aFxcbiAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAyMCUsIGZhbHNlKVxcbiAgLmNvbHVtbnMuaXMtbW9iaWxlID4gJi5pcy1vZmZzZXQtdHdvLWZpZnRoc1xcbiAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA0MCUsIGZhbHNlKVxcbiAgLmNvbHVtbnMuaXMtbW9iaWxlID4gJi5pcy1vZmZzZXQtdGhyZWUtZmlmdGhzXFxuICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDYwJSwgZmFsc2UpXFxuICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLW9mZnNldC1mb3VyLWZpZnRoc1xcbiAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA4MCUsIGZhbHNlKVxcbiAgQGZvciAkaSBmcm9tIDAgdGhyb3VnaCAxMlxcbiAgICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLSN7JGl9XFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiBwZXJjZW50YWdlKGRpdmlkZSgkaSwgMTIpKVxcbiAgICAuY29sdW1ucy5pcy1tb2JpbGUgPiAmLmlzLW9mZnNldC0jeyRpfVxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIHBlcmNlbnRhZ2UoZGl2aWRlKCRpLCAxMikpLCBmYWxzZSlcXG4gICttb2JpbGVcXG4gICAgJi5pcy1uYXJyb3ctbW9iaWxlXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiB1bnNldFxcbiAgICAmLmlzLWZ1bGwtbW9iaWxlXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiAxMDAlXFxuICAgICYuaXMtdGhyZWUtcXVhcnRlcnMtbW9iaWxlXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA3NSVcXG4gICAgJi5pcy10d28tdGhpcmRzLW1vYmlsZVxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNjYuNjY2NiVcXG4gICAgJi5pcy1oYWxmLW1vYmlsZVxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNTAlXFxuICAgICYuaXMtb25lLXRoaXJkLW1vYmlsZVxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogMzMuMzMzMyVcXG4gICAgJi5pcy1vbmUtcXVhcnRlci1tb2JpbGVcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDI1JVxcbiAgICAmLmlzLW9uZS1maWZ0aC1tb2JpbGVcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDIwJVxcbiAgICAmLmlzLXR3by1maWZ0aHMtbW9iaWxlXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA0MCVcXG4gICAgJi5pcy10aHJlZS1maWZ0aHMtbW9iaWxlXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA2MCVcXG4gICAgJi5pcy1mb3VyLWZpZnRocy1tb2JpbGVcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDgwJVxcbiAgICAmLmlzLW9mZnNldC10aHJlZS1xdWFydGVycy1tb2JpbGVcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA3NSUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC10d28tdGhpcmRzLW1vYmlsZVxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDY2LjY2NjYlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtaGFsZi1tb2JpbGVcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA1MCUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1vbmUtdGhpcmQtbW9iaWxlXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMzMuMzMzMyUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1vbmUtcXVhcnRlci1tb2JpbGVcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAyNSUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1vbmUtZmlmdGgtbW9iaWxlXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMjAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdHdvLWZpZnRocy1tb2JpbGVcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA0MCUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC10aHJlZS1maWZ0aHMtbW9iaWxlXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNjAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtZm91ci1maWZ0aHMtbW9iaWxlXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgODAlLCBmYWxzZSlcXG4gICAgQGZvciAkaSBmcm9tIDAgdGhyb3VnaCAxMlxcbiAgICAgICYuaXMtI3skaX0tbW9iaWxlXFxuICAgICAgICBmbGV4OiBub25lXFxuICAgICAgICB3aWR0aDogcGVyY2VudGFnZShkaXZpZGUoJGksIDEyKSlcXG4gICAgICAmLmlzLW9mZnNldC0jeyRpfS1tb2JpbGVcXG4gICAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIHBlcmNlbnRhZ2UoZGl2aWRlKCRpLCAxMikpLCBmYWxzZSlcXG4gICt0YWJsZXRcXG4gICAgJi5pcy1uYXJyb3csXFxuICAgICYuaXMtbmFycm93LXRhYmxldFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogdW5zZXRcXG4gICAgJi5pcy1mdWxsLFxcbiAgICAmLmlzLWZ1bGwtdGFibGV0XFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiAxMDAlXFxuICAgICYuaXMtdGhyZWUtcXVhcnRlcnMsXFxuICAgICYuaXMtdGhyZWUtcXVhcnRlcnMtdGFibGV0XFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA3NSVcXG4gICAgJi5pcy10d28tdGhpcmRzLFxcbiAgICAmLmlzLXR3by10aGlyZHMtdGFibGV0XFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA2Ni42NjY2JVxcbiAgICAmLmlzLWhhbGYsXFxuICAgICYuaXMtaGFsZi10YWJsZXRcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDUwJVxcbiAgICAmLmlzLW9uZS10aGlyZCxcXG4gICAgJi5pcy1vbmUtdGhpcmQtdGFibGV0XFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiAzMy4zMzMzJVxcbiAgICAmLmlzLW9uZS1xdWFydGVyLFxcbiAgICAmLmlzLW9uZS1xdWFydGVyLXRhYmxldFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogMjUlXFxuICAgICYuaXMtb25lLWZpZnRoLFxcbiAgICAmLmlzLW9uZS1maWZ0aC10YWJsZXRcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDIwJVxcbiAgICAmLmlzLXR3by1maWZ0aHMsXFxuICAgICYuaXMtdHdvLWZpZnRocy10YWJsZXRcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDQwJVxcbiAgICAmLmlzLXRocmVlLWZpZnRocyxcXG4gICAgJi5pcy10aHJlZS1maWZ0aHMtdGFibGV0XFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA2MCVcXG4gICAgJi5pcy1mb3VyLWZpZnRocyxcXG4gICAgJi5pcy1mb3VyLWZpZnRocy10YWJsZXRcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDgwJVxcbiAgICAmLmlzLW9mZnNldC10aHJlZS1xdWFydGVycyxcXG4gICAgJi5pcy1vZmZzZXQtdGhyZWUtcXVhcnRlcnMtdGFibGV0XFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNzUlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdHdvLXRoaXJkcyxcXG4gICAgJi5pcy1vZmZzZXQtdHdvLXRoaXJkcy10YWJsZXRcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA2Ni42NjY2JSwgZmFsc2UpXFxuICAgICYuaXMtb2Zmc2V0LWhhbGYsXFxuICAgICYuaXMtb2Zmc2V0LWhhbGYtdGFibGV0XFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNTAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtb25lLXRoaXJkLFxcbiAgICAmLmlzLW9mZnNldC1vbmUtdGhpcmQtdGFibGV0XFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMzMuMzMzMyUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1vbmUtcXVhcnRlcixcXG4gICAgJi5pcy1vZmZzZXQtb25lLXF1YXJ0ZXItdGFibGV0XFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMjUlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtb25lLWZpZnRoLFxcbiAgICAmLmlzLW9mZnNldC1vbmUtZmlmdGgtdGFibGV0XFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMjAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdHdvLWZpZnRocyxcXG4gICAgJi5pcy1vZmZzZXQtdHdvLWZpZnRocy10YWJsZXRcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA0MCUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC10aHJlZS1maWZ0aHMsXFxuICAgICYuaXMtb2Zmc2V0LXRocmVlLWZpZnRocy10YWJsZXRcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA2MCUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1mb3VyLWZpZnRocyxcXG4gICAgJi5pcy1vZmZzZXQtZm91ci1maWZ0aHMtdGFibGV0XFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgODAlLCBmYWxzZSlcXG4gICAgQGZvciAkaSBmcm9tIDAgdGhyb3VnaCAxMlxcbiAgICAgICYuaXMtI3skaX0sXFxuICAgICAgJi5pcy0jeyRpfS10YWJsZXRcXG4gICAgICAgIGZsZXg6IG5vbmVcXG4gICAgICAgIHdpZHRoOiBwZXJjZW50YWdlKGRpdmlkZSgkaSwgMTIpKVxcbiAgICAgICYuaXMtb2Zmc2V0LSN7JGl9LFxcbiAgICAgICYuaXMtb2Zmc2V0LSN7JGl9LXRhYmxldFxcbiAgICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgcGVyY2VudGFnZShkaXZpZGUoJGksIDEyKSksIGZhbHNlKVxcbiAgK3RvdWNoXFxuICAgICYuaXMtbmFycm93LXRvdWNoXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiB1bnNldFxcbiAgICAmLmlzLWZ1bGwtdG91Y2hcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDEwMCVcXG4gICAgJi5pcy10aHJlZS1xdWFydGVycy10b3VjaFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNzUlXFxuICAgICYuaXMtdHdvLXRoaXJkcy10b3VjaFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNjYuNjY2NiVcXG4gICAgJi5pcy1oYWxmLXRvdWNoXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA1MCVcXG4gICAgJi5pcy1vbmUtdGhpcmQtdG91Y2hcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDMzLjMzMzMlXFxuICAgICYuaXMtb25lLXF1YXJ0ZXItdG91Y2hcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDI1JVxcbiAgICAmLmlzLW9uZS1maWZ0aC10b3VjaFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogMjAlXFxuICAgICYuaXMtdHdvLWZpZnRocy10b3VjaFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNDAlXFxuICAgICYuaXMtdGhyZWUtZmlmdGhzLXRvdWNoXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA2MCVcXG4gICAgJi5pcy1mb3VyLWZpZnRocy10b3VjaFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogODAlXFxuICAgICYuaXMtb2Zmc2V0LXRocmVlLXF1YXJ0ZXJzLXRvdWNoXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNzUlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdHdvLXRoaXJkcy10b3VjaFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDY2LjY2NjYlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtaGFsZi10b3VjaFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDUwJSwgZmFsc2UpXFxuICAgICYuaXMtb2Zmc2V0LW9uZS10aGlyZC10b3VjaFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDMzLjMzMzMlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtb25lLXF1YXJ0ZXItdG91Y2hcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAyNSUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1vbmUtZmlmdGgtdG91Y2hcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAyMCUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC10d28tZmlmdGhzLXRvdWNoXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNDAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdGhyZWUtZmlmdGhzLXRvdWNoXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNjAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtZm91ci1maWZ0aHMtdG91Y2hcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA4MCUsIGZhbHNlKVxcbiAgICBAZm9yICRpIGZyb20gMCB0aHJvdWdoIDEyXFxuICAgICAgJi5pcy0jeyRpfS10b3VjaFxcbiAgICAgICAgZmxleDogbm9uZVxcbiAgICAgICAgd2lkdGg6IHBlcmNlbnRhZ2UoZGl2aWRlKCRpLCAxMikpXFxuICAgICAgJi5pcy1vZmZzZXQtI3skaX0tdG91Y2hcXG4gICAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIHBlcmNlbnRhZ2UoZGl2aWRlKCRpLCAxMikpLCBmYWxzZSlcXG4gICtkZXNrdG9wXFxuICAgICYuaXMtbmFycm93LWRlc2t0b3BcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IHVuc2V0XFxuICAgICYuaXMtZnVsbC1kZXNrdG9wXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiAxMDAlXFxuICAgICYuaXMtdGhyZWUtcXVhcnRlcnMtZGVza3RvcFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNzUlXFxuICAgICYuaXMtdHdvLXRoaXJkcy1kZXNrdG9wXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA2Ni42NjY2JVxcbiAgICAmLmlzLWhhbGYtZGVza3RvcFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNTAlXFxuICAgICYuaXMtb25lLXRoaXJkLWRlc2t0b3BcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDMzLjMzMzMlXFxuICAgICYuaXMtb25lLXF1YXJ0ZXItZGVza3RvcFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogMjUlXFxuICAgICYuaXMtb25lLWZpZnRoLWRlc2t0b3BcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDIwJVxcbiAgICAmLmlzLXR3by1maWZ0aHMtZGVza3RvcFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNDAlXFxuICAgICYuaXMtdGhyZWUtZmlmdGhzLWRlc2t0b3BcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDYwJVxcbiAgICAmLmlzLWZvdXItZmlmdGhzLWRlc2t0b3BcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDgwJVxcbiAgICAmLmlzLW9mZnNldC10aHJlZS1xdWFydGVycy1kZXNrdG9wXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNzUlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdHdvLXRoaXJkcy1kZXNrdG9wXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNjYuNjY2NiUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1oYWxmLWRlc2t0b3BcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA1MCUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1vbmUtdGhpcmQtZGVza3RvcFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDMzLjMzMzMlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtb25lLXF1YXJ0ZXItZGVza3RvcFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDI1JSwgZmFsc2UpXFxuICAgICYuaXMtb2Zmc2V0LW9uZS1maWZ0aC1kZXNrdG9wXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMjAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdHdvLWZpZnRocy1kZXNrdG9wXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNDAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdGhyZWUtZmlmdGhzLWRlc2t0b3BcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA2MCUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1mb3VyLWZpZnRocy1kZXNrdG9wXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgODAlLCBmYWxzZSlcXG4gICAgQGZvciAkaSBmcm9tIDAgdGhyb3VnaCAxMlxcbiAgICAgICYuaXMtI3skaX0tZGVza3RvcFxcbiAgICAgICAgZmxleDogbm9uZVxcbiAgICAgICAgd2lkdGg6IHBlcmNlbnRhZ2UoZGl2aWRlKCRpLCAxMikpXFxuICAgICAgJi5pcy1vZmZzZXQtI3skaX0tZGVza3RvcFxcbiAgICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgcGVyY2VudGFnZShkaXZpZGUoJGksIDEyKSksIGZhbHNlKVxcbiAgK3dpZGVzY3JlZW5cXG4gICAgJi5pcy1uYXJyb3ctd2lkZXNjcmVlblxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogdW5zZXRcXG4gICAgJi5pcy1mdWxsLXdpZGVzY3JlZW5cXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDEwMCVcXG4gICAgJi5pcy10aHJlZS1xdWFydGVycy13aWRlc2NyZWVuXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA3NSVcXG4gICAgJi5pcy10d28tdGhpcmRzLXdpZGVzY3JlZW5cXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDY2LjY2NjYlXFxuICAgICYuaXMtaGFsZi13aWRlc2NyZWVuXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA1MCVcXG4gICAgJi5pcy1vbmUtdGhpcmQtd2lkZXNjcmVlblxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogMzMuMzMzMyVcXG4gICAgJi5pcy1vbmUtcXVhcnRlci13aWRlc2NyZWVuXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiAyNSVcXG4gICAgJi5pcy1vbmUtZmlmdGgtd2lkZXNjcmVlblxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogMjAlXFxuICAgICYuaXMtdHdvLWZpZnRocy13aWRlc2NyZWVuXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA0MCVcXG4gICAgJi5pcy10aHJlZS1maWZ0aHMtd2lkZXNjcmVlblxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNjAlXFxuICAgICYuaXMtZm91ci1maWZ0aHMtd2lkZXNjcmVlblxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogODAlXFxuICAgICYuaXMtb2Zmc2V0LXRocmVlLXF1YXJ0ZXJzLXdpZGVzY3JlZW5cXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA3NSUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC10d28tdGhpcmRzLXdpZGVzY3JlZW5cXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA2Ni42NjY2JSwgZmFsc2UpXFxuICAgICYuaXMtb2Zmc2V0LWhhbGYtd2lkZXNjcmVlblxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDUwJSwgZmFsc2UpXFxuICAgICYuaXMtb2Zmc2V0LW9uZS10aGlyZC13aWRlc2NyZWVuXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMzMuMzMzMyUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC1vbmUtcXVhcnRlci13aWRlc2NyZWVuXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMjUlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtb25lLWZpZnRoLXdpZGVzY3JlZW5cXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAyMCUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC10d28tZmlmdGhzLXdpZGVzY3JlZW5cXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA0MCUsIGZhbHNlKVxcbiAgICAmLmlzLW9mZnNldC10aHJlZS1maWZ0aHMtd2lkZXNjcmVlblxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDYwJSwgZmFsc2UpXFxuICAgICYuaXMtb2Zmc2V0LWZvdXItZmlmdGhzLXdpZGVzY3JlZW5cXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA4MCUsIGZhbHNlKVxcbiAgICBAZm9yICRpIGZyb20gMCB0aHJvdWdoIDEyXFxuICAgICAgJi5pcy0jeyRpfS13aWRlc2NyZWVuXFxuICAgICAgICBmbGV4OiBub25lXFxuICAgICAgICB3aWR0aDogcGVyY2VudGFnZShkaXZpZGUoJGksIDEyKSlcXG4gICAgICAmLmlzLW9mZnNldC0jeyRpfS13aWRlc2NyZWVuXFxuICAgICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCBwZXJjZW50YWdlKGRpdmlkZSgkaSwgMTIpKSwgZmFsc2UpXFxuICArZnVsbGhkXFxuICAgICYuaXMtbmFycm93LWZ1bGxoZFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogdW5zZXRcXG4gICAgJi5pcy1mdWxsLWZ1bGxoZFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogMTAwJVxcbiAgICAmLmlzLXRocmVlLXF1YXJ0ZXJzLWZ1bGxoZFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNzUlXFxuICAgICYuaXMtdHdvLXRoaXJkcy1mdWxsaGRcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDY2LjY2NjYlXFxuICAgICYuaXMtaGFsZi1mdWxsaGRcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDUwJVxcbiAgICAmLmlzLW9uZS10aGlyZC1mdWxsaGRcXG4gICAgICBmbGV4OiBub25lXFxuICAgICAgd2lkdGg6IDMzLjMzMzMlXFxuICAgICYuaXMtb25lLXF1YXJ0ZXItZnVsbGhkXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiAyNSVcXG4gICAgJi5pcy1vbmUtZmlmdGgtZnVsbGhkXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiAyMCVcXG4gICAgJi5pcy10d28tZmlmdGhzLWZ1bGxoZFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNDAlXFxuICAgICYuaXMtdGhyZWUtZmlmdGhzLWZ1bGxoZFxcbiAgICAgIGZsZXg6IG5vbmVcXG4gICAgICB3aWR0aDogNjAlXFxuICAgICYuaXMtZm91ci1maWZ0aHMtZnVsbGhkXFxuICAgICAgZmxleDogbm9uZVxcbiAgICAgIHdpZHRoOiA4MCVcXG4gICAgJi5pcy1vZmZzZXQtdGhyZWUtcXVhcnRlcnMtZnVsbGhkXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNzUlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdHdvLXRoaXJkcy1mdWxsaGRcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCA2Ni42NjY2JSwgZmFsc2UpXFxuICAgICYuaXMtb2Zmc2V0LWhhbGYtZnVsbGhkXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNTAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtb25lLXRoaXJkLWZ1bGxoZFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDMzLjMzMzMlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtb25lLXF1YXJ0ZXItZnVsbGhkXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMjUlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtb25lLWZpZnRoLWZ1bGxoZFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDIwJSwgZmFsc2UpXFxuICAgICYuaXMtb2Zmc2V0LXR3by1maWZ0aHMtZnVsbGhkXFxuICAgICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgNDAlLCBmYWxzZSlcXG4gICAgJi5pcy1vZmZzZXQtdGhyZWUtZmlmdGhzLWZ1bGxoZFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDYwJSwgZmFsc2UpXFxuICAgICYuaXMtb2Zmc2V0LWZvdXItZmlmdGhzLWZ1bGxoZFxcbiAgICAgICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsIDgwJSwgZmFsc2UpXFxuICAgIEBmb3IgJGkgZnJvbSAwIHRocm91Z2ggMTJcXG4gICAgICAmLmlzLSN7JGl9LWZ1bGxoZFxcbiAgICAgICAgZmxleDogbm9uZVxcbiAgICAgICAgd2lkdGg6IHBlcmNlbnRhZ2UoZGl2aWRlKCRpLCAxMikpXFxuICAgICAgJi5pcy1vZmZzZXQtI3skaX0tZnVsbGhkXFxuICAgICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCBwZXJjZW50YWdlKGRpdmlkZSgkaSwgMTIpKSwgZmFsc2UpXFxuXFxuLmNvbHVtbnNcXG4gICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsICgtJGNvbHVtbi1nYXApLCBmYWxzZSlcXG4gICtsdHItcHJvcGVydHkoXFxcIm1hcmdpblxcXCIsICgtJGNvbHVtbi1nYXApKVxcbiAgbWFyZ2luLXRvcDogKC0kY29sdW1uLWdhcClcXG4gICY6bGFzdC1jaGlsZFxcbiAgICBtYXJnaW4tYm90dG9tOiAoLSRjb2x1bW4tZ2FwKVxcbiAgJjpub3QoOmxhc3QtY2hpbGQpXFxuICAgIG1hcmdpbi1ib3R0b206IGNhbGMoMS41cmVtIC0gI3skY29sdW1uLWdhcH0pXFxuICAvLyBNb2RpZmllcnNcXG4gICYuaXMtY2VudGVyZWRcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXJcXG4gICYuaXMtZ2FwbGVzc1xcbiAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAwLCBmYWxzZSlcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgMClcXG4gICAgbWFyZ2luLXRvcDogMFxcbiAgICAmID4gLmNvbHVtblxcbiAgICAgIG1hcmdpbjogMFxcbiAgICAgIHBhZGRpbmc6IDAgIWltcG9ydGFudFxcbiAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW1cXG4gICAgJjpsYXN0LWNoaWxkXFxuICAgICAgbWFyZ2luLWJvdHRvbTogMFxcbiAgJi5pcy1tb2JpbGVcXG4gICAgZGlzcGxheTogZmxleFxcbiAgJi5pcy1tdWx0aWxpbmVcXG4gICAgZmxleC13cmFwOiB3cmFwXFxuICAmLmlzLXZjZW50ZXJlZFxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyXFxuICAvLyBSZXNwb25zaXZlbmVzc1xcbiAgK3RhYmxldFxcbiAgICAmOm5vdCguaXMtZGVza3RvcClcXG4gICAgICBkaXNwbGF5OiBmbGV4XFxuICArZGVza3RvcFxcbiAgICAvLyBNb2RpZmllcnNcXG4gICAgJi5pcy1kZXNrdG9wXFxuICAgICAgZGlzcGxheTogZmxleFxcblxcbkBpZiAkdmFyaWFibGUtY29sdW1uc1xcbiAgLmNvbHVtbnMuaXMtdmFyaWFibGVcXG4gICAgLS1jb2x1bW5HYXA6IDAuNzVyZW1cXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgY2FsYygtMSAqIHZhcigtLWNvbHVtbkdhcCkpLCBmYWxzZSlcXG4gICAgK2x0ci1wcm9wZXJ0eShcXFwibWFyZ2luXFxcIiwgY2FsYygtMSAqIHZhcigtLWNvbHVtbkdhcCkpKVxcbiAgICA+IC5jb2x1bW5cXG4gICAgICBwYWRkaW5nLWxlZnQ6IHZhcigtLWNvbHVtbkdhcClcXG4gICAgICBwYWRkaW5nLXJpZ2h0OiB2YXIoLS1jb2x1bW5HYXApXFxuICAgIEBmb3IgJGkgZnJvbSAwIHRocm91Z2ggOFxcbiAgICAgICYuaXMtI3skaX1cXG4gICAgICAgIC0tY29sdW1uR2FwOiAjeyRpICogMC4yNXJlbX1cXG4gICAgICArbW9iaWxlXFxuICAgICAgICAmLmlzLSN7JGl9LW1vYmlsZVxcbiAgICAgICAgICAtLWNvbHVtbkdhcDogI3skaSAqIDAuMjVyZW19XFxuICAgICAgK3RhYmxldFxcbiAgICAgICAgJi5pcy0jeyRpfS10YWJsZXRcXG4gICAgICAgICAgLS1jb2x1bW5HYXA6ICN7JGkgKiAwLjI1cmVtfVxcbiAgICAgICt0YWJsZXQtb25seVxcbiAgICAgICAgJi5pcy0jeyRpfS10YWJsZXQtb25seVxcbiAgICAgICAgICAtLWNvbHVtbkdhcDogI3skaSAqIDAuMjVyZW19XFxuICAgICAgK3RvdWNoXFxuICAgICAgICAmLmlzLSN7JGl9LXRvdWNoXFxuICAgICAgICAgIC0tY29sdW1uR2FwOiAjeyRpICogMC4yNXJlbX1cXG4gICAgICArZGVza3RvcFxcbiAgICAgICAgJi5pcy0jeyRpfS1kZXNrdG9wXFxuICAgICAgICAgIC0tY29sdW1uR2FwOiAjeyRpICogMC4yNXJlbX1cXG4gICAgICArZGVza3RvcC1vbmx5XFxuICAgICAgICAmLmlzLSN7JGl9LWRlc2t0b3Atb25seVxcbiAgICAgICAgICAtLWNvbHVtbkdhcDogI3skaSAqIDAuMjVyZW19XFxuICAgICAgK3dpZGVzY3JlZW5cXG4gICAgICAgICYuaXMtI3skaX0td2lkZXNjcmVlblxcbiAgICAgICAgICAtLWNvbHVtbkdhcDogI3skaSAqIDAuMjVyZW19XFxuICAgICAgK3dpZGVzY3JlZW4tb25seVxcbiAgICAgICAgJi5pcy0jeyRpfS13aWRlc2NyZWVuLW9ubHlcXG4gICAgICAgICAgLS1jb2x1bW5HYXA6ICN7JGkgKiAwLjI1cmVtfVxcbiAgICAgICtmdWxsaGRcXG4gICAgICAgICYuaXMtI3skaX0tZnVsbGhkXFxuICAgICAgICAgIC0tY29sdW1uR2FwOiAjeyRpICogMC4yNXJlbX1cXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJHRpbGUtc3BhY2luZzogMC43NXJlbSAhZGVmYXVsdFxcblxcbi50aWxlXFxuICBhbGlnbi1pdGVtczogc3RyZXRjaFxcbiAgZGlzcGxheTogYmxvY2tcXG4gIGZsZXgtYmFzaXM6IDBcXG4gIGZsZXgtZ3JvdzogMVxcbiAgZmxleC1zaHJpbms6IDFcXG4gIG1pbi1oZWlnaHQ6IG1pbi1jb250ZW50XFxuICAvLyBNb2RpZmllcnNcXG4gICYuaXMtYW5jZXN0b3JcXG4gICAgbWFyZ2luLWxlZnQ6ICR0aWxlLXNwYWNpbmcgKiAtMVxcbiAgICBtYXJnaW4tcmlnaHQ6ICR0aWxlLXNwYWNpbmcgKiAtMVxcbiAgICBtYXJnaW4tdG9wOiAkdGlsZS1zcGFjaW5nICogLTFcXG4gICAgJjpsYXN0LWNoaWxkXFxuICAgICAgbWFyZ2luLWJvdHRvbTogJHRpbGUtc3BhY2luZyAqIC0xXFxuICAgICY6bm90KDpsYXN0LWNoaWxkKVxcbiAgICAgIG1hcmdpbi1ib3R0b206ICR0aWxlLXNwYWNpbmdcXG4gICYuaXMtY2hpbGRcXG4gICAgbWFyZ2luOiAwICFpbXBvcnRhbnRcXG4gICYuaXMtcGFyZW50XFxuICAgIHBhZGRpbmc6ICR0aWxlLXNwYWNpbmdcXG4gICYuaXMtdmVydGljYWxcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtblxcbiAgICAmID4gLnRpbGUuaXMtY2hpbGQ6bm90KDpsYXN0LWNoaWxkKVxcbiAgICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50XFxuICAvLyBSZXNwb25zaXZlbmVzc1xcbiAgK3RhYmxldFxcbiAgICAmOm5vdCguaXMtY2hpbGQpXFxuICAgICAgZGlzcGxheTogZmxleFxcbiAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIDEyXFxuICAgICAgJi5pcy0jeyRpfVxcbiAgICAgICAgZmxleDogbm9uZVxcbiAgICAgICAgd2lkdGg6IChkaXZpZGUoJGksIDEyKSkgKiAxMDAlXFxuXCIsXCIvKiBCdWxtYSBIZWxwZXJzICovXFxuQGNoYXJzZXQgXFxcInV0Zi04XFxcIlxcblxcbkBpbXBvcnQgXFxcImNvbG9yXFxcIlxcbkBpbXBvcnQgXFxcImZsZXhib3hcXFwiXFxuQGltcG9ydCBcXFwiZmxvYXRcXFwiXFxuQGltcG9ydCBcXFwib3RoZXJcXFwiXFxuQGltcG9ydCBcXFwib3ZlcmZsb3dcXFwiXFxuQGltcG9ydCBcXFwicG9zaXRpb25cXFwiXFxuQGltcG9ydCBcXFwic3BhY2luZ1xcXCJcXG5AaW1wb3J0IFxcXCJ0eXBvZ3JhcGh5XFxcIlxcbkBpbXBvcnQgXFxcInZpc2liaWxpdHlcXFwiXFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvZGVyaXZlZC12YXJpYWJsZXNcXFwiXFxuXFxuQGVhY2ggJG5hbWUsICRwYWlyIGluICRjb2xvcnNcXG4gICRjb2xvcjogbnRoKCRwYWlyLCAxKVxcbiAgLmhhcy10ZXh0LSN7JG5hbWV9XFxuICAgIGNvbG9yOiAkY29sb3IgIWltcG9ydGFudFxcbiAgYS5oYXMtdGV4dC0jeyRuYW1lfVxcbiAgICAmOmhvdmVyLFxcbiAgICAmOmZvY3VzXFxuICAgICAgY29sb3I6IGJ1bG1hRGFya2VuKCRjb2xvciwgMTAlKSAhaW1wb3J0YW50XFxuICAuaGFzLWJhY2tncm91bmQtI3skbmFtZX1cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yICFpbXBvcnRhbnRcXG4gIEBpZiBsZW5ndGgoJHBhaXIpID49IDRcXG4gICAgJGNvbG9yLWxpZ2h0OiBudGgoJHBhaXIsIDMpXFxuICAgICRjb2xvci1kYXJrOiBudGgoJHBhaXIsIDQpXFxuICAgIC8vIExpZ2h0XFxuICAgIC5oYXMtdGV4dC0jeyRuYW1lfS1saWdodFxcbiAgICAgIGNvbG9yOiAkY29sb3ItbGlnaHQgIWltcG9ydGFudFxcbiAgICBhLmhhcy10ZXh0LSN7JG5hbWV9LWxpZ2h0XFxuICAgICAgJjpob3ZlcixcXG4gICAgICAmOmZvY3VzXFxuICAgICAgICBjb2xvcjogYnVsbWFEYXJrZW4oJGNvbG9yLWxpZ2h0LCAxMCUpICFpbXBvcnRhbnRcXG4gICAgLmhhcy1iYWNrZ3JvdW5kLSN7JG5hbWV9LWxpZ2h0XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWxpZ2h0ICFpbXBvcnRhbnRcXG4gICAgLy8gRGFya1xcbiAgICAuaGFzLXRleHQtI3skbmFtZX0tZGFya1xcbiAgICAgIGNvbG9yOiAkY29sb3ItZGFyayAhaW1wb3J0YW50XFxuICAgIGEuaGFzLXRleHQtI3skbmFtZX0tZGFya1xcbiAgICAgICY6aG92ZXIsXFxuICAgICAgJjpmb2N1c1xcbiAgICAgICAgY29sb3I6IGJ1bG1hTGlnaHRlbigkY29sb3ItZGFyaywgMTAlKSAhaW1wb3J0YW50XFxuICAgIC5oYXMtYmFja2dyb3VuZC0jeyRuYW1lfS1kYXJrXFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWRhcmsgIWltcG9ydGFudFxcblxcbkBlYWNoICRuYW1lLCAkc2hhZGUgaW4gJHNoYWRlc1xcbiAgLmhhcy10ZXh0LSN7JG5hbWV9XFxuICAgIGNvbG9yOiAkc2hhZGUgIWltcG9ydGFudFxcbiAgLmhhcy1iYWNrZ3JvdW5kLSN7JG5hbWV9XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRzaGFkZSAhaW1wb3J0YW50XFxuXCIsXCIkZmxleC1kaXJlY3Rpb24tdmFsdWVzOiByb3csIHJvdy1yZXZlcnNlLCBjb2x1bW4sIGNvbHVtbi1yZXZlcnNlXFxuQGVhY2ggJHZhbHVlIGluICRmbGV4LWRpcmVjdGlvbi12YWx1ZXNcXG4gIC5pcy1mbGV4LWRpcmVjdGlvbi0jeyR2YWx1ZX1cXG4gICAgZmxleC1kaXJlY3Rpb246ICR2YWx1ZSAhaW1wb3J0YW50XFxuXFxuJGZsZXgtd3JhcC12YWx1ZXM6IG5vd3JhcCwgd3JhcCwgd3JhcC1yZXZlcnNlXFxuQGVhY2ggJHZhbHVlIGluICRmbGV4LXdyYXAtdmFsdWVzXFxuICAuaXMtZmxleC13cmFwLSN7JHZhbHVlfVxcbiAgICBmbGV4LXdyYXA6ICR2YWx1ZSAhaW1wb3J0YW50XFxuXFxuJGp1c3RpZnktY29udGVudC12YWx1ZXM6IGZsZXgtc3RhcnQsIGZsZXgtZW5kLCBjZW50ZXIsIHNwYWNlLWJldHdlZW4sIHNwYWNlLWFyb3VuZCwgc3BhY2UtZXZlbmx5LCBzdGFydCwgZW5kLCBsZWZ0LCByaWdodFxcbkBlYWNoICR2YWx1ZSBpbiAkanVzdGlmeS1jb250ZW50LXZhbHVlc1xcbiAgLmlzLWp1c3RpZnktY29udGVudC0jeyR2YWx1ZX1cXG4gICAganVzdGlmeS1jb250ZW50OiAkdmFsdWUgIWltcG9ydGFudFxcblxcbiRhbGlnbi1jb250ZW50LXZhbHVlczogZmxleC1zdGFydCwgZmxleC1lbmQsIGNlbnRlciwgc3BhY2UtYmV0d2Vlbiwgc3BhY2UtYXJvdW5kLCBzcGFjZS1ldmVubHksIHN0cmV0Y2gsIHN0YXJ0LCBlbmQsIGJhc2VsaW5lXFxuQGVhY2ggJHZhbHVlIGluICRhbGlnbi1jb250ZW50LXZhbHVlc1xcbiAgLmlzLWFsaWduLWNvbnRlbnQtI3skdmFsdWV9XFxuICAgIGFsaWduLWNvbnRlbnQ6ICR2YWx1ZSAhaW1wb3J0YW50XFxuXFxuJGFsaWduLWl0ZW1zLXZhbHVlczogc3RyZXRjaCwgZmxleC1zdGFydCwgZmxleC1lbmQsIGNlbnRlciwgYmFzZWxpbmUsIHN0YXJ0LCBlbmQsIHNlbGYtc3RhcnQsIHNlbGYtZW5kXFxuQGVhY2ggJHZhbHVlIGluICRhbGlnbi1pdGVtcy12YWx1ZXNcXG4gIC5pcy1hbGlnbi1pdGVtcy0jeyR2YWx1ZX1cXG4gICAgYWxpZ24taXRlbXM6ICR2YWx1ZSAhaW1wb3J0YW50XFxuXFxuJGFsaWduLXNlbGYtdmFsdWVzOiBhdXRvLCBmbGV4LXN0YXJ0LCBmbGV4LWVuZCwgY2VudGVyLCBiYXNlbGluZSwgc3RyZXRjaFxcbkBlYWNoICR2YWx1ZSBpbiAkYWxpZ24tc2VsZi12YWx1ZXNcXG4gIC5pcy1hbGlnbi1zZWxmLSN7JHZhbHVlfVxcbiAgICBhbGlnbi1zZWxmOiAkdmFsdWUgIWltcG9ydGFudFxcblxcbiRmbGV4LW9wZXJhdG9yczogZ3Jvdywgc2hyaW5rXFxuQGVhY2ggJG9wZXJhdG9yIGluICRmbGV4LW9wZXJhdG9yc1xcbiAgQGZvciAkaSBmcm9tIDAgdGhyb3VnaCA1XFxuICAgIC5pcy1mbGV4LSN7JG9wZXJhdG9yfS0jeyRpfVxcbiAgICAgIGZsZXgtI3skb3BlcmF0b3J9OiAkaSAhaW1wb3J0YW50XFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvbWl4aW5zXFxcIlxcblxcbi5pcy1jbGVhcmZpeFxcbiAgK2NsZWFyZml4XFxuXFxuLmlzLXB1bGxlZC1sZWZ0XFxuICBmbG9hdDogbGVmdCAhaW1wb3J0YW50XFxuXFxuLmlzLXB1bGxlZC1yaWdodFxcbiAgZmxvYXQ6IHJpZ2h0ICFpbXBvcnRhbnRcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuLmlzLXJhZGl1c2xlc3NcXG4gIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudFxcblxcbi5pcy1zaGFkb3dsZXNzXFxuICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnRcXG5cXG4uaXMtY2xpY2thYmxlXFxuICBjdXJzb3I6IHBvaW50ZXIgIWltcG9ydGFudFxcbiAgcG9pbnRlci1ldmVudHM6IGFsbCAhaW1wb3J0YW50XFxuXFxuLmlzLXVuc2VsZWN0YWJsZVxcbiAgQGV4dGVuZCAldW5zZWxlY3RhYmxlXFxuXCIsXCIuaXMtY2xpcHBlZFxcbiAgb3ZlcmZsb3c6IGhpZGRlbiAhaW1wb3J0YW50XFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvbWl4aW5zXFxcIlxcblxcbi5pcy1vdmVybGF5XFxuICBAZXh0ZW5kICVvdmVybGF5XFxuXFxuLmlzLXJlbGF0aXZlXFxuICBwb3NpdGlvbjogcmVsYXRpdmUgIWltcG9ydGFudFxcblwiLFwiLmlzLW1hcmdpbmxlc3NcXG4gIG1hcmdpbjogMCAhaW1wb3J0YW50XFxuXFxuLmlzLXBhZGRpbmdsZXNzXFxuICBwYWRkaW5nOiAwICFpbXBvcnRhbnRcXG5cXG4kc3BhY2luZy1zaG9ydGN1dHM6IChcXFwibWFyZ2luXFxcIjogXFxcIm1cXFwiLCBcXFwicGFkZGluZ1xcXCI6IFxcXCJwXFxcIikgIWRlZmF1bHRcXG4kc3BhY2luZy1kaXJlY3Rpb25zOiAoXFxcInRvcFxcXCI6IFxcXCJ0XFxcIiwgXFxcInJpZ2h0XFxcIjogXFxcInJcXFwiLCBcXFwiYm90dG9tXFxcIjogXFxcImJcXFwiLCBcXFwibGVmdFxcXCI6IFxcXCJsXFxcIikgIWRlZmF1bHRcXG4kc3BhY2luZy1ob3Jpem9udGFsOiBcXFwieFxcXCIgIWRlZmF1bHRcXG4kc3BhY2luZy12ZXJ0aWNhbDogXFxcInlcXFwiICFkZWZhdWx0XFxuJHNwYWNpbmctdmFsdWVzOiAoXFxcIjBcXFwiOiAwLCBcXFwiMVxcXCI6IDAuMjVyZW0sIFxcXCIyXFxcIjogMC41cmVtLCBcXFwiM1xcXCI6IDAuNzVyZW0sIFxcXCI0XFxcIjogMXJlbSwgXFxcIjVcXFwiOiAxLjVyZW0sIFxcXCI2XFxcIjogM3JlbSwgXFxcImF1dG9cXFwiOiBhdXRvKSAhZGVmYXVsdFxcblxcbkBlYWNoICRwcm9wZXJ0eSwgJHNob3J0Y3V0IGluICRzcGFjaW5nLXNob3J0Y3V0c1xcbiAgQGVhY2ggJG5hbWUsICR2YWx1ZSBpbiAkc3BhY2luZy12YWx1ZXNcXG4gICAgLy8gQWxsIGRpcmVjdGlvbnNcXG4gICAgLiN7JHNob3J0Y3V0fS0jeyRuYW1lfVxcbiAgICAgICN7JHByb3BlcnR5fTogJHZhbHVlICFpbXBvcnRhbnRcXG4gICAgLy8gQ2FyZGluYWwgZGlyZWN0aW9uc1xcbiAgICBAZWFjaCAkZGlyZWN0aW9uLCAkc3VmZml4IGluICRzcGFjaW5nLWRpcmVjdGlvbnNcXG4gICAgICAuI3skc2hvcnRjdXR9I3skc3VmZml4fS0jeyRuYW1lfVxcbiAgICAgICAgI3skcHJvcGVydHl9LSN7JGRpcmVjdGlvbn06ICR2YWx1ZSAhaW1wb3J0YW50XFxuICAgIC8vIEhvcml6b250YWwgYXhpc1xcbiAgICBAaWYgJHNwYWNpbmctaG9yaXpvbnRhbCAhPSBudWxsXFxuICAgICAgLiN7JHNob3J0Y3V0fSN7JHNwYWNpbmctaG9yaXpvbnRhbH0tI3skbmFtZX1cXG4gICAgICAgICN7JHByb3BlcnR5fS1sZWZ0OiAkdmFsdWUgIWltcG9ydGFudFxcbiAgICAgICAgI3skcHJvcGVydHl9LXJpZ2h0OiAkdmFsdWUgIWltcG9ydGFudFxcbiAgICAvLyBWZXJ0aWNhbCBheGlzXFxuICAgIEBpZiAkc3BhY2luZy12ZXJ0aWNhbCAhPSBudWxsXFxuICAgICAgLiN7JHNob3J0Y3V0fSN7JHNwYWNpbmctdmVydGljYWx9LSN7JG5hbWV9XFxuICAgICAgICAjeyRwcm9wZXJ0eX0tdG9wOiAkdmFsdWUgIWltcG9ydGFudFxcbiAgICAgICAgI3skcHJvcGVydHl9LWJvdHRvbTogJHZhbHVlICFpbXBvcnRhbnRcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuPXR5cG9ncmFwaHktc2l6ZSgkdGFyZ2V0OicnKVxcbiAgQGVhY2ggJHNpemUgaW4gJHNpemVzXFxuICAgICRpOiBpbmRleCgkc2l6ZXMsICRzaXplKVxcbiAgICAuaXMtc2l6ZS0jeyRpfSN7aWYoJHRhcmdldCA9PSAnJywgJycsICctJyArICR0YXJnZXQpfVxcbiAgICAgIGZvbnQtc2l6ZTogJHNpemUgIWltcG9ydGFudFxcblxcbit0eXBvZ3JhcGh5LXNpemUoKVxcblxcbittb2JpbGVcXG4gICt0eXBvZ3JhcGh5LXNpemUoJ21vYmlsZScpXFxuXFxuK3RhYmxldFxcbiAgK3R5cG9ncmFwaHktc2l6ZSgndGFibGV0JylcXG5cXG4rdG91Y2hcXG4gICt0eXBvZ3JhcGh5LXNpemUoJ3RvdWNoJylcXG5cXG4rZGVza3RvcFxcbiAgK3R5cG9ncmFwaHktc2l6ZSgnZGVza3RvcCcpXFxuXFxuK3dpZGVzY3JlZW5cXG4gICt0eXBvZ3JhcGh5LXNpemUoJ3dpZGVzY3JlZW4nKVxcblxcbitmdWxsaGRcXG4gICt0eXBvZ3JhcGh5LXNpemUoJ2Z1bGxoZCcpXFxuXFxuJGFsaWdubWVudHM6ICgnY2VudGVyZWQnOiAnY2VudGVyJywgJ2p1c3RpZmllZCc6ICdqdXN0aWZ5JywgJ2xlZnQnOiAnbGVmdCcsICdyaWdodCc6ICdyaWdodCcpXFxuXFxuQGVhY2ggJGFsaWdubWVudCwgJHRleHQtYWxpZ24gaW4gJGFsaWdubWVudHNcXG4gIC5oYXMtdGV4dC0jeyRhbGlnbm1lbnR9XFxuICAgIHRleHQtYWxpZ246ICN7JHRleHQtYWxpZ259ICFpbXBvcnRhbnRcXG5cXG5AZWFjaCAkYWxpZ25tZW50LCAkdGV4dC1hbGlnbiBpbiAkYWxpZ25tZW50c1xcbiAgK21vYmlsZVxcbiAgICAuaGFzLXRleHQtI3skYWxpZ25tZW50fS1tb2JpbGVcXG4gICAgICB0ZXh0LWFsaWduOiAjeyR0ZXh0LWFsaWdufSAhaW1wb3J0YW50XFxuICArdGFibGV0XFxuICAgIC5oYXMtdGV4dC0jeyRhbGlnbm1lbnR9LXRhYmxldFxcbiAgICAgIHRleHQtYWxpZ246ICN7JHRleHQtYWxpZ259ICFpbXBvcnRhbnRcXG4gICt0YWJsZXQtb25seVxcbiAgICAuaGFzLXRleHQtI3skYWxpZ25tZW50fS10YWJsZXQtb25seVxcbiAgICAgIHRleHQtYWxpZ246ICN7JHRleHQtYWxpZ259ICFpbXBvcnRhbnRcXG4gICt0b3VjaFxcbiAgICAuaGFzLXRleHQtI3skYWxpZ25tZW50fS10b3VjaFxcbiAgICAgIHRleHQtYWxpZ246ICN7JHRleHQtYWxpZ259ICFpbXBvcnRhbnRcXG4gICtkZXNrdG9wXFxuICAgIC5oYXMtdGV4dC0jeyRhbGlnbm1lbnR9LWRlc2t0b3BcXG4gICAgICB0ZXh0LWFsaWduOiAjeyR0ZXh0LWFsaWdufSAhaW1wb3J0YW50XFxuICArZGVza3RvcC1vbmx5XFxuICAgIC5oYXMtdGV4dC0jeyRhbGlnbm1lbnR9LWRlc2t0b3Atb25seVxcbiAgICAgIHRleHQtYWxpZ246ICN7JHRleHQtYWxpZ259ICFpbXBvcnRhbnRcXG4gICt3aWRlc2NyZWVuXFxuICAgIC5oYXMtdGV4dC0jeyRhbGlnbm1lbnR9LXdpZGVzY3JlZW5cXG4gICAgICB0ZXh0LWFsaWduOiAjeyR0ZXh0LWFsaWdufSAhaW1wb3J0YW50XFxuICArd2lkZXNjcmVlbi1vbmx5XFxuICAgIC5oYXMtdGV4dC0jeyRhbGlnbm1lbnR9LXdpZGVzY3JlZW4tb25seVxcbiAgICAgIHRleHQtYWxpZ246ICN7JHRleHQtYWxpZ259ICFpbXBvcnRhbnRcXG4gICtmdWxsaGRcXG4gICAgLmhhcy10ZXh0LSN7JGFsaWdubWVudH0tZnVsbGhkXFxuICAgICAgdGV4dC1hbGlnbjogI3skdGV4dC1hbGlnbn0gIWltcG9ydGFudFxcblxcbi5pcy1jYXBpdGFsaXplZFxcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemUgIWltcG9ydGFudFxcblxcbi5pcy1sb3dlcmNhc2VcXG4gIHRleHQtdHJhbnNmb3JtOiBsb3dlcmNhc2UgIWltcG9ydGFudFxcblxcbi5pcy11cHBlcmNhc2VcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2UgIWltcG9ydGFudFxcblxcbi5pcy1pdGFsaWNcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYyAhaW1wb3J0YW50XFxuICBcXG4uaXMtdW5kZXJsaW5lZFxcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgIWltcG9ydGFudFxcblxcbi5oYXMtdGV4dC13ZWlnaHQtbGlnaHRcXG4gIGZvbnQtd2VpZ2h0OiAkd2VpZ2h0LWxpZ2h0ICFpbXBvcnRhbnRcXG4uaGFzLXRleHQtd2VpZ2h0LW5vcm1hbFxcbiAgZm9udC13ZWlnaHQ6ICR3ZWlnaHQtbm9ybWFsICFpbXBvcnRhbnRcXG4uaGFzLXRleHQtd2VpZ2h0LW1lZGl1bVxcbiAgZm9udC13ZWlnaHQ6ICR3ZWlnaHQtbWVkaXVtICFpbXBvcnRhbnRcXG4uaGFzLXRleHQtd2VpZ2h0LXNlbWlib2xkXFxuICBmb250LXdlaWdodDogJHdlaWdodC1zZW1pYm9sZCAhaW1wb3J0YW50XFxuLmhhcy10ZXh0LXdlaWdodC1ib2xkXFxuICBmb250LXdlaWdodDogJHdlaWdodC1ib2xkICFpbXBvcnRhbnRcXG5cXG4uaXMtZmFtaWx5LXByaW1hcnlcXG4gIGZvbnQtZmFtaWx5OiAkZmFtaWx5LXByaW1hcnkgIWltcG9ydGFudFxcblxcbi5pcy1mYW1pbHktc2Vjb25kYXJ5XFxuICBmb250LWZhbWlseTogJGZhbWlseS1zZWNvbmRhcnkgIWltcG9ydGFudFxcblxcbi5pcy1mYW1pbHktc2Fucy1zZXJpZlxcbiAgZm9udC1mYW1pbHk6ICRmYW1pbHktc2Fucy1zZXJpZiAhaW1wb3J0YW50XFxuXFxuLmlzLWZhbWlseS1tb25vc3BhY2VcXG4gIGZvbnQtZmFtaWx5OiAkZmFtaWx5LW1vbm9zcGFjZSAhaW1wb3J0YW50XFxuXFxuLmlzLWZhbWlseS1jb2RlXFxuICBmb250LWZhbWlseTogJGZhbWlseS1jb2RlICFpbXBvcnRhbnRcXG5cIixcIkBpbXBvcnQgXFxcIi4uL3V0aWxpdGllcy9taXhpbnNcXFwiXFxuXFxuJGRpc3BsYXlzOiAnYmxvY2snICdmbGV4JyAnaW5saW5lJyAnaW5saW5lLWJsb2NrJyAnaW5saW5lLWZsZXgnXFxuXFxuQGVhY2ggJGRpc3BsYXkgaW4gJGRpc3BsYXlzXFxuICAuaXMtI3skZGlzcGxheX1cXG4gICAgZGlzcGxheTogI3skZGlzcGxheX0gIWltcG9ydGFudFxcbiAgK21vYmlsZVxcbiAgICAuaXMtI3skZGlzcGxheX0tbW9iaWxlXFxuICAgICAgZGlzcGxheTogI3skZGlzcGxheX0gIWltcG9ydGFudFxcbiAgK3RhYmxldFxcbiAgICAuaXMtI3skZGlzcGxheX0tdGFibGV0XFxuICAgICAgZGlzcGxheTogI3skZGlzcGxheX0gIWltcG9ydGFudFxcbiAgK3RhYmxldC1vbmx5XFxuICAgIC5pcy0jeyRkaXNwbGF5fS10YWJsZXQtb25seVxcbiAgICAgIGRpc3BsYXk6ICN7JGRpc3BsYXl9ICFpbXBvcnRhbnRcXG4gICt0b3VjaFxcbiAgICAuaXMtI3skZGlzcGxheX0tdG91Y2hcXG4gICAgICBkaXNwbGF5OiAjeyRkaXNwbGF5fSAhaW1wb3J0YW50XFxuICArZGVza3RvcFxcbiAgICAuaXMtI3skZGlzcGxheX0tZGVza3RvcFxcbiAgICAgIGRpc3BsYXk6ICN7JGRpc3BsYXl9ICFpbXBvcnRhbnRcXG4gICtkZXNrdG9wLW9ubHlcXG4gICAgLmlzLSN7JGRpc3BsYXl9LWRlc2t0b3Atb25seVxcbiAgICAgIGRpc3BsYXk6ICN7JGRpc3BsYXl9ICFpbXBvcnRhbnRcXG4gICt3aWRlc2NyZWVuXFxuICAgIC5pcy0jeyRkaXNwbGF5fS13aWRlc2NyZWVuXFxuICAgICAgZGlzcGxheTogI3skZGlzcGxheX0gIWltcG9ydGFudFxcbiAgK3dpZGVzY3JlZW4tb25seVxcbiAgICAuaXMtI3skZGlzcGxheX0td2lkZXNjcmVlbi1vbmx5XFxuICAgICAgZGlzcGxheTogI3skZGlzcGxheX0gIWltcG9ydGFudFxcbiAgK2Z1bGxoZFxcbiAgICAuaXMtI3skZGlzcGxheX0tZnVsbGhkXFxuICAgICAgZGlzcGxheTogI3skZGlzcGxheX0gIWltcG9ydGFudFxcblxcbi5pcy1oaWRkZW5cXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudFxcblxcbi5pcy1zci1vbmx5XFxuICBib3JkZXI6IG5vbmUgIWltcG9ydGFudFxcbiAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKSAhaW1wb3J0YW50XFxuICBoZWlnaHQ6IDAuMDFlbSAhaW1wb3J0YW50XFxuICBvdmVyZmxvdzogaGlkZGVuICFpbXBvcnRhbnRcXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudFxcbiAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnRcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXAgIWltcG9ydGFudFxcbiAgd2lkdGg6IDAuMDFlbSAhaW1wb3J0YW50XFxuXFxuK21vYmlsZVxcbiAgLmlzLWhpZGRlbi1tb2JpbGVcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50XFxuXFxuK3RhYmxldFxcbiAgLmlzLWhpZGRlbi10YWJsZXRcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50XFxuXFxuK3RhYmxldC1vbmx5XFxuICAuaXMtaGlkZGVuLXRhYmxldC1vbmx5XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudFxcblxcbit0b3VjaFxcbiAgLmlzLWhpZGRlbi10b3VjaFxcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnRcXG5cXG4rZGVza3RvcFxcbiAgLmlzLWhpZGRlbi1kZXNrdG9wXFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudFxcblxcbitkZXNrdG9wLW9ubHlcXG4gIC5pcy1oaWRkZW4tZGVza3RvcC1vbmx5XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudFxcblxcbit3aWRlc2NyZWVuXFxuICAuaXMtaGlkZGVuLXdpZGVzY3JlZW5cXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50XFxuXFxuK3dpZGVzY3JlZW4tb25seVxcbiAgLmlzLWhpZGRlbi13aWRlc2NyZWVuLW9ubHlcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50XFxuXFxuK2Z1bGxoZFxcbiAgLmlzLWhpZGRlbi1mdWxsaGRcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50XFxuXFxuLmlzLWludmlzaWJsZVxcbiAgdmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnRcXG5cXG4rbW9iaWxlXFxuICAuaXMtaW52aXNpYmxlLW1vYmlsZVxcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudFxcblxcbit0YWJsZXRcXG4gIC5pcy1pbnZpc2libGUtdGFibGV0XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50XFxuXFxuK3RhYmxldC1vbmx5XFxuICAuaXMtaW52aXNpYmxlLXRhYmxldC1vbmx5XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50XFxuXFxuK3RvdWNoXFxuICAuaXMtaW52aXNpYmxlLXRvdWNoXFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50XFxuXFxuK2Rlc2t0b3BcXG4gIC5pcy1pbnZpc2libGUtZGVza3RvcFxcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudFxcblxcbitkZXNrdG9wLW9ubHlcXG4gIC5pcy1pbnZpc2libGUtZGVza3RvcC1vbmx5XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50XFxuXFxuK3dpZGVzY3JlZW5cXG4gIC5pcy1pbnZpc2libGUtd2lkZXNjcmVlblxcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudFxcblxcbit3aWRlc2NyZWVuLW9ubHlcXG4gIC5pcy1pbnZpc2libGUtd2lkZXNjcmVlbi1vbmx5XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50XFxuXFxuK2Z1bGxoZFxcbiAgLmlzLWludmlzaWJsZS1mdWxsaGRcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnRcXG5cIixcIi8qIEJ1bG1hIExheW91dCAqL1xcbkBjaGFyc2V0IFxcXCJ1dGYtOFxcXCJcXG5cXG5AaW1wb3J0IFxcXCJoZXJvXFxcIlxcbkBpbXBvcnQgXFxcInNlY3Rpb25cXFwiXFxuQGltcG9ydCBcXFwiZm9vdGVyXFxcIlxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL21peGluc1xcXCJcXG5cXG4kaGVyby1ib2R5LXBhZGRpbmc6IDNyZW0gMS41cmVtICFkZWZhdWx0XFxuJGhlcm8tYm9keS1wYWRkaW5nLXRhYmxldDogM3JlbSAzcmVtICFkZWZhdWx0XFxuJGhlcm8tYm9keS1wYWRkaW5nLXNtYWxsOiAxLjVyZW0gIWRlZmF1bHRcXG4kaGVyby1ib2R5LXBhZGRpbmctbWVkaXVtOiA5cmVtIDQuNXJlbSAhZGVmYXVsdFxcbiRoZXJvLWJvZHktcGFkZGluZy1sYXJnZTogMThyZW0gNnJlbSAhZGVmYXVsdFxcblxcbiRoZXJvLWNvbG9yczogJGNvbG9ycyAhZGVmYXVsdFxcblxcbi8vIE1haW4gY29udGFpbmVyXFxuLmhlcm9cXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoXFxuICBkaXNwbGF5OiBmbGV4XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW5cXG4gIC5uYXZiYXJcXG4gICAgYmFja2dyb3VuZDogbm9uZVxcbiAgLnRhYnNcXG4gICAgdWxcXG4gICAgICBib3JkZXItYm90dG9tOiBub25lXFxuICAvLyBDb2xvcnNcXG4gIEBlYWNoICRuYW1lLCAkcGFpciBpbiAkaGVyby1jb2xvcnNcXG4gICAgJGNvbG9yOiBudGgoJHBhaXIsIDEpXFxuICAgICRjb2xvci1pbnZlcnQ6IG50aCgkcGFpciwgMilcXG4gICAgJi5pcy0jeyRuYW1lfVxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvclxcbiAgICAgIGNvbG9yOiAkY29sb3ItaW52ZXJ0XFxuICAgICAgYTpub3QoLmJ1dHRvbik6bm90KC5kcm9wZG93bi1pdGVtKTpub3QoLnRhZyk6bm90KC5wYWdpbmF0aW9uLWxpbmsuaXMtY3VycmVudCksXFxuICAgICAgc3Ryb25nXFxuICAgICAgICBjb2xvcjogaW5oZXJpdFxcbiAgICAgIC50aXRsZVxcbiAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAuc3VidGl0bGVcXG4gICAgICAgIGNvbG9yOiBidWxtYVJnYmEoJGNvbG9yLWludmVydCwgMC45KVxcbiAgICAgICAgYTpub3QoLmJ1dHRvbiksXFxuICAgICAgICBzdHJvbmdcXG4gICAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAubmF2YmFyLW1lbnVcXG4gICAgICAgICt0b3VjaFxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JcXG4gICAgICAubmF2YmFyLWl0ZW0sXFxuICAgICAgLm5hdmJhci1saW5rXFxuICAgICAgICBjb2xvcjogYnVsbWFSZ2JhKCRjb2xvci1pbnZlcnQsIDAuNylcXG4gICAgICBhLm5hdmJhci1pdGVtLFxcbiAgICAgIC5uYXZiYXItbGlua1xcbiAgICAgICAgJjpob3ZlcixcXG4gICAgICAgICYuaXMtYWN0aXZlXFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJ1bG1hRGFya2VuKCRjb2xvciwgNSUpXFxuICAgICAgICAgIGNvbG9yOiAkY29sb3ItaW52ZXJ0XFxuICAgICAgLnRhYnNcXG4gICAgICAgIGFcXG4gICAgICAgICAgY29sb3I6ICRjb2xvci1pbnZlcnRcXG4gICAgICAgICAgb3BhY2l0eTogMC45XFxuICAgICAgICAgICY6aG92ZXJcXG4gICAgICAgICAgICBvcGFjaXR5OiAxXFxuICAgICAgICBsaVxcbiAgICAgICAgICAmLmlzLWFjdGl2ZSBhXFxuICAgICAgICAgICAgY29sb3I6ICRjb2xvciAhaW1wb3J0YW50XFxuICAgICAgICAgICAgb3BhY2l0eTogMVxcbiAgICAgICAgJi5pcy1ib3hlZCxcXG4gICAgICAgICYuaXMtdG9nZ2xlXFxuICAgICAgICAgIGFcXG4gICAgICAgICAgICBjb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICAgICAgICY6aG92ZXJcXG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJ1bG1hUmdiYSgkc2NoZW1lLWludmVydCwgMC4xKVxcbiAgICAgICAgICBsaS5pcy1hY3RpdmUgYVxcbiAgICAgICAgICAgICYsXFxuICAgICAgICAgICAgJjpob3ZlclxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWludmVydFxcbiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAkY29sb3ItaW52ZXJ0XFxuICAgICAgICAgICAgICBjb2xvcjogJGNvbG9yXFxuICAgICAgLy8gTW9kaWZpZXJzXFxuICAgICAgQGlmIHR5cGUtb2YoJGNvbG9yKSA9PSAnY29sb3InXFxuICAgICAgICAmLmlzLWJvbGRcXG4gICAgICAgICAgJGdyYWRpZW50LXRvcC1sZWZ0OiBkYXJrZW4oc2F0dXJhdGUoYWRqdXN0LWh1ZSgkY29sb3IsIC0xMGRlZyksIDEwJSksIDEwJSlcXG4gICAgICAgICAgJGdyYWRpZW50LWJvdHRvbS1yaWdodDogbGlnaHRlbihzYXR1cmF0ZShhZGp1c3QtaHVlKCRjb2xvciwgMTBkZWcpLCA1JSksIDUlKVxcbiAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTQxZGVnLCAkZ3JhZGllbnQtdG9wLWxlZnQgMCUsICRjb2xvciA3MSUsICRncmFkaWVudC1ib3R0b20tcmlnaHQgMTAwJSlcXG4gICAgICAgICAgK21vYmlsZVxcbiAgICAgICAgICAgIC5uYXZiYXItbWVudVxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDE0MWRlZywgJGdyYWRpZW50LXRvcC1sZWZ0IDAlLCAkY29sb3IgNzElLCAkZ3JhZGllbnQtYm90dG9tLXJpZ2h0IDEwMCUpXFxuICAvLyBTaXplc1xcbiAgJi5pcy1zbWFsbFxcbiAgICAuaGVyby1ib2R5XFxuICAgICAgcGFkZGluZzogJGhlcm8tYm9keS1wYWRkaW5nLXNtYWxsXFxuICAmLmlzLW1lZGl1bVxcbiAgICArdGFibGV0XFxuICAgICAgLmhlcm8tYm9keVxcbiAgICAgICAgcGFkZGluZzogJGhlcm8tYm9keS1wYWRkaW5nLW1lZGl1bVxcbiAgJi5pcy1sYXJnZVxcbiAgICArdGFibGV0XFxuICAgICAgLmhlcm8tYm9keVxcbiAgICAgICAgcGFkZGluZzogJGhlcm8tYm9keS1wYWRkaW5nLWxhcmdlXFxuICAmLmlzLWhhbGZoZWlnaHQsXFxuICAmLmlzLWZ1bGxoZWlnaHQsXFxuICAmLmlzLWZ1bGxoZWlnaHQtd2l0aC1uYXZiYXJcXG4gICAgLmhlcm8tYm9keVxcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXJcXG4gICAgICBkaXNwbGF5OiBmbGV4XFxuICAgICAgJiA+IC5jb250YWluZXJcXG4gICAgICAgIGZsZXgtZ3JvdzogMVxcbiAgICAgICAgZmxleC1zaHJpbms6IDFcXG4gICYuaXMtaGFsZmhlaWdodFxcbiAgICBtaW4taGVpZ2h0OiA1MHZoXFxuICAmLmlzLWZ1bGxoZWlnaHRcXG4gICAgbWluLWhlaWdodDogMTAwdmhcXG5cXG4vLyBDb21wb25lbnRzXFxuXFxuLmhlcm8tdmlkZW9cXG4gIEBleHRlbmQgJW92ZXJsYXlcXG4gIG92ZXJmbG93OiBoaWRkZW5cXG4gIHZpZGVvXFxuICAgIGxlZnQ6IDUwJVxcbiAgICBtaW4taGVpZ2h0OiAxMDAlXFxuICAgIG1pbi13aWR0aDogMTAwJVxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGVcXG4gICAgdG9wOiA1MCVcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtNTAlLCAtNTAlLCAwKVxcbiAgLy8gTW9kaWZpZXJzXFxuICAmLmlzLXRyYW5zcGFyZW50XFxuICAgIG9wYWNpdHk6IDAuM1xcbiAgLy8gUmVzcG9uc2l2ZW5lc3NcXG4gICttb2JpbGVcXG4gICAgZGlzcGxheTogbm9uZVxcblxcbi5oZXJvLWJ1dHRvbnNcXG4gIG1hcmdpbi10b3A6IDEuNXJlbVxcbiAgLy8gUmVzcG9uc2l2ZW5lc3NcXG4gICttb2JpbGVcXG4gICAgLmJ1dHRvblxcbiAgICAgIGRpc3BsYXk6IGZsZXhcXG4gICAgICAmOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDAuNzVyZW1cXG4gICt0YWJsZXRcXG4gICAgZGlzcGxheTogZmxleFxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxcbiAgICAuYnV0dG9uOm5vdCg6bGFzdC1jaGlsZClcXG4gICAgICArbHRyLXByb3BlcnR5KFxcXCJtYXJnaW5cXFwiLCAxLjVyZW0pXFxuXFxuLy8gQ29udGFpbmVyc1xcblxcbi5oZXJvLWhlYWQsXFxuLmhlcm8tZm9vdFxcbiAgZmxleC1ncm93OiAwXFxuICBmbGV4LXNocmluazogMFxcblxcbi5oZXJvLWJvZHlcXG4gIGZsZXgtZ3JvdzogMVxcbiAgZmxleC1zaHJpbms6IDBcXG4gIHBhZGRpbmc6ICRoZXJvLWJvZHktcGFkZGluZ1xcbiAgK3RhYmxldFxcbiAgICBwYWRkaW5nOiAkaGVyby1ib2R5LXBhZGRpbmctdGFibGV0XFxuXCIsXCJAaW1wb3J0IFxcXCIuLi91dGlsaXRpZXMvbWl4aW5zXFxcIlxcblxcbiRzZWN0aW9uLXBhZGRpbmc6IDNyZW0gMS41cmVtICFkZWZhdWx0XFxuJHNlY3Rpb24tcGFkZGluZy1kZXNrdG9wOiAzcmVtIDNyZW0gIWRlZmF1bHRcXG4kc2VjdGlvbi1wYWRkaW5nLW1lZGl1bTogOXJlbSA0LjVyZW0gIWRlZmF1bHRcXG4kc2VjdGlvbi1wYWRkaW5nLWxhcmdlOiAxOHJlbSA2cmVtICFkZWZhdWx0XFxuXFxuLnNlY3Rpb25cXG4gIHBhZGRpbmc6ICRzZWN0aW9uLXBhZGRpbmdcXG4gIC8vIFJlc3BvbnNpdmVuZXNzXFxuICArZGVza3RvcFxcbiAgICBwYWRkaW5nOiAkc2VjdGlvbi1wYWRkaW5nLWRlc2t0b3BcXG4gICAgLy8gU2l6ZXNcXG4gICAgJi5pcy1tZWRpdW1cXG4gICAgICBwYWRkaW5nOiAkc2VjdGlvbi1wYWRkaW5nLW1lZGl1bVxcbiAgICAmLmlzLWxhcmdlXFxuICAgICAgcGFkZGluZzogJHNlY3Rpb24tcGFkZGluZy1sYXJnZVxcblwiLFwiQGltcG9ydCBcXFwiLi4vdXRpbGl0aWVzL2Rlcml2ZWQtdmFyaWFibGVzXFxcIlxcblxcbiRmb290ZXItYmFja2dyb3VuZC1jb2xvcjogJHNjaGVtZS1tYWluLWJpcyAhZGVmYXVsdFxcbiRmb290ZXItY29sb3I6IGZhbHNlICFkZWZhdWx0XFxuJGZvb3Rlci1wYWRkaW5nOiAzcmVtIDEuNXJlbSA2cmVtICFkZWZhdWx0XFxuXFxuLmZvb3RlclxcbiAgYmFja2dyb3VuZC1jb2xvcjogJGZvb3Rlci1iYWNrZ3JvdW5kLWNvbG9yXFxuICBwYWRkaW5nOiAkZm9vdGVyLXBhZGRpbmdcXG4gIEBpZiAkZm9vdGVyLWNvbG9yXFxuICAgIGNvbG9yOiAkZm9vdGVyLWNvbG9yXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBMb2Rhc2ggPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9vcGVuanNmLm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlLUVTNSBlbnZpcm9ubWVudHMuICovXG4gIHZhciB1bmRlZmluZWQ7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLiAqL1xuICB2YXIgVkVSU0lPTiA9ICc0LjE3LjIxJztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbiAgdmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbiAgLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xuICB2YXIgQ09SRV9FUlJPUl9URVhUID0gJ1Vuc3VwcG9ydGVkIGNvcmUtanMgdXNlLiBUcnkgaHR0cHM6Ly9ucG1zLmlvL3NlYXJjaD9xPXBvbnlmaWxsLicsXG4gICAgICBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbicsXG4gICAgICBJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUID0gJ0ludmFsaWQgYHZhcmlhYmxlYCBvcHRpb24gcGFzc2VkIGludG8gYF8udGVtcGxhdGVgJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW1TdGFydCA9IC9eXFxzKy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG4gIHZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3cmFwIGRldGFpbCBjb21tZW50cy4gKi9cbiAgdmFyIHJlV3JhcENvbW1lbnQgPSAvXFx7KD86XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAuK1xcXSBcXCpcXC8pP1xcbj8vLFxuICAgICAgcmVXcmFwRGV0YWlscyA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICAgIHJlU3BsaXREZXRhaWxzID0gLyw/ICYgLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHZhbGlkYXRlIHRoZSBgdmFsaWRhdGVgIG9wdGlvbiBpbiBgXy50ZW1wbGF0ZWAgdmFyaWFibGUuXG4gICAqXG4gICAqIEZvcmJpZHMgY2hhcmFjdGVycyB3aGljaCBjb3VsZCBwb3RlbnRpYWxseSBjaGFuZ2UgdGhlIG1lYW5pbmcgb2YgdGhlIGZ1bmN0aW9uIGFyZ3VtZW50IGRlZmluaXRpb246XG4gICAqIC0gXCIoKSxcIiAobW9kaWZpY2F0aW9uIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCI9XCIgKGRlZmF1bHQgdmFsdWUpXG4gICAqIC0gXCJbXXt9XCIgKGRlc3RydWN0dXJpbmcgb2YgZnVuY3Rpb24gcGFyYW1ldGVycylcbiAgICogLSBcIi9cIiAoYmVnaW5uaW5nIG9mIGEgY29tbWVudClcbiAgICogLSB3aGl0ZXNwYWNlXG4gICAqL1xuICB2YXIgcmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMgPSAvWygpPSx7fVxcW1xcXVxcL1xcc10vO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2hcbiAgICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAgICovXG4gIHZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUZsYWdzID0gL1xcdyokLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xuICB2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xuICB2YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xuICB2YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG4gIHZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbiAgdmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgICAgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbiAgdmFyIHJzTWlzY0xvd2VyID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICAgIHJzT3B0Q29udHJVcHBlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcSxcbiAgICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xuICB2YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICAgKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbiAgdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG4gIHZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gICAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgICByc09yZFVwcGVyLFxuICAgIHJzT3JkTG93ZXIsXG4gICAgcnNEaWdpdHMsXG4gICAgcnNFbW9qaVxuICBdLmpvaW4oJ3wnKSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezJ9W2Etel18WzAtOV1bYS16QS1aXXxbYS16QS1aXVswLTldfFteYS16QS1aMC05IF0vO1xuXG4gIC8qKiBVc2VkIHRvIGFzc2lnbiBkZWZhdWx0IGBjb250ZXh0YCBvYmplY3QgcHJvcGVydGllcy4gKi9cbiAgdmFyIGNvbnRleHRQcm9wcyA9IFtcbiAgICAnQXJyYXknLCAnQnVmZmVyJywgJ0RhdGFWaWV3JywgJ0RhdGUnLCAnRXJyb3InLCAnRmxvYXQzMkFycmF5JywgJ0Zsb2F0NjRBcnJheScsXG4gICAgJ0Z1bmN0aW9uJywgJ0ludDhBcnJheScsICdJbnQxNkFycmF5JywgJ0ludDMyQXJyYXknLCAnTWFwJywgJ01hdGgnLCAnT2JqZWN0JyxcbiAgICAnUHJvbWlzZScsICdSZWdFeHAnLCAnU2V0JywgJ1N0cmluZycsICdTeW1ib2wnLCAnVHlwZUVycm9yJywgJ1VpbnQ4QXJyYXknLFxuICAgICdVaW50OENsYW1wZWRBcnJheScsICdVaW50MTZBcnJheScsICdVaW50MzJBcnJheScsICdXZWFrTWFwJyxcbiAgICAnXycsICdjbGVhclRpbWVvdXQnLCAnaXNGaW5pdGUnLCAncGFyc2VJbnQnLCAnc2V0VGltZW91dCdcbiAgXTtcblxuICAvKiogVXNlZCB0byBtYWtlIHRlbXBsYXRlIHNvdXJjZVVSTHMgZWFzaWVyIHRvIGlkZW50aWZ5LiAqL1xuICB2YXIgdGVtcGxhdGVDb3VudGVyID0gLTE7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xuICB2YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbiAgdHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgdHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG4gIHZhciBjbG9uZWFibGVUYWdzID0ge307XG4gIGNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIGNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBtYXAgTGF0aW4gVW5pY29kZSBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuICovXG4gIHZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gICAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAgICdcXHhjMCc6ICdBJywgICdcXHhjMSc6ICdBJywgJ1xceGMyJzogJ0EnLCAnXFx4YzMnOiAnQScsICdcXHhjNCc6ICdBJywgJ1xceGM1JzogJ0EnLFxuICAgICdcXHhlMCc6ICdhJywgICdcXHhlMSc6ICdhJywgJ1xceGUyJzogJ2EnLCAnXFx4ZTMnOiAnYScsICdcXHhlNCc6ICdhJywgJ1xceGU1JzogJ2EnLFxuICAgICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgICAnXFx4ZDAnOiAnRCcsICAnXFx4ZjAnOiAnZCcsXG4gICAgJ1xceGM4JzogJ0UnLCAgJ1xceGM5JzogJ0UnLCAnXFx4Y2EnOiAnRScsICdcXHhjYic6ICdFJyxcbiAgICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAgICdcXHhjYyc6ICdJJywgICdcXHhjZCc6ICdJJywgJ1xceGNlJzogJ0knLCAnXFx4Y2YnOiAnSScsXG4gICAgJ1xceGVjJzogJ2knLCAgJ1xceGVkJzogJ2knLCAnXFx4ZWUnOiAnaScsICdcXHhlZic6ICdpJyxcbiAgICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICAgJ1xceGQyJzogJ08nLCAgJ1xceGQzJzogJ08nLCAnXFx4ZDQnOiAnTycsICdcXHhkNSc6ICdPJywgJ1xceGQ2JzogJ08nLCAnXFx4ZDgnOiAnTycsXG4gICAgJ1xceGYyJzogJ28nLCAgJ1xceGYzJzogJ28nLCAnXFx4ZjQnOiAnbycsICdcXHhmNSc6ICdvJywgJ1xceGY2JzogJ28nLCAnXFx4ZjgnOiAnbycsXG4gICAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgICAnXFx4ZjknOiAndScsICAnXFx4ZmEnOiAndScsICdcXHhmYic6ICd1JywgJ1xceGZjJzogJ3UnLFxuICAgICdcXHhkZCc6ICdZJywgICdcXHhmZCc6ICd5JywgJ1xceGZmJzogJ3knLFxuICAgICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICAgJ1xceGRlJzogJ1RoJywgJ1xceGZlJzogJ3RoJyxcbiAgICAnXFx4ZGYnOiAnc3MnLFxuICAgIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICAgJ1xcdTAxMDAnOiAnQScsICAnXFx1MDEwMic6ICdBJywgJ1xcdTAxMDQnOiAnQScsXG4gICAgJ1xcdTAxMDEnOiAnYScsICAnXFx1MDEwMyc6ICdhJywgJ1xcdTAxMDUnOiAnYScsXG4gICAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAgICdcXHUwMTA3JzogJ2MnLCAgJ1xcdTAxMDknOiAnYycsICdcXHUwMTBiJzogJ2MnLCAnXFx1MDEwZCc6ICdjJyxcbiAgICAnXFx1MDEwZSc6ICdEJywgICdcXHUwMTEwJzogJ0QnLCAnXFx1MDEwZic6ICdkJywgJ1xcdTAxMTEnOiAnZCcsXG4gICAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgICAnXFx1MDExMyc6ICdlJywgICdcXHUwMTE1JzogJ2UnLCAnXFx1MDExNyc6ICdlJywgJ1xcdTAxMTknOiAnZScsICdcXHUwMTFiJzogJ2UnLFxuICAgICdcXHUwMTFjJzogJ0cnLCAgJ1xcdTAxMWUnOiAnRycsICdcXHUwMTIwJzogJ0cnLCAnXFx1MDEyMic6ICdHJyxcbiAgICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICAgJ1xcdTAxMjQnOiAnSCcsICAnXFx1MDEyNic6ICdIJywgJ1xcdTAxMjUnOiAnaCcsICdcXHUwMTI3JzogJ2gnLFxuICAgICdcXHUwMTI4JzogJ0knLCAgJ1xcdTAxMmEnOiAnSScsICdcXHUwMTJjJzogJ0knLCAnXFx1MDEyZSc6ICdJJywgJ1xcdTAxMzAnOiAnSScsXG4gICAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgICAnXFx1MDEzNCc6ICdKJywgICdcXHUwMTM1JzogJ2onLFxuICAgICdcXHUwMTM2JzogJ0snLCAgJ1xcdTAxMzcnOiAnaycsICdcXHUwMTM4JzogJ2snLFxuICAgICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICAgJ1xcdTAxM2EnOiAnbCcsICAnXFx1MDEzYyc6ICdsJywgJ1xcdTAxM2UnOiAnbCcsICdcXHUwMTQwJzogJ2wnLCAnXFx1MDE0Mic6ICdsJyxcbiAgICAnXFx1MDE0Myc6ICdOJywgICdcXHUwMTQ1JzogJ04nLCAnXFx1MDE0Nyc6ICdOJywgJ1xcdTAxNGEnOiAnTicsXG4gICAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAgICdcXHUwMTRjJzogJ08nLCAgJ1xcdTAxNGUnOiAnTycsICdcXHUwMTUwJzogJ08nLFxuICAgICdcXHUwMTRkJzogJ28nLCAgJ1xcdTAxNGYnOiAnbycsICdcXHUwMTUxJzogJ28nLFxuICAgICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAgICdcXHUwMTU1JzogJ3InLCAgJ1xcdTAxNTcnOiAncicsICdcXHUwMTU5JzogJ3InLFxuICAgICdcXHUwMTVhJzogJ1MnLCAgJ1xcdTAxNWMnOiAnUycsICdcXHUwMTVlJzogJ1MnLCAnXFx1MDE2MCc6ICdTJyxcbiAgICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICAgJ1xcdTAxNjInOiAnVCcsICAnXFx1MDE2NCc6ICdUJywgJ1xcdTAxNjYnOiAnVCcsXG4gICAgJ1xcdTAxNjMnOiAndCcsICAnXFx1MDE2NSc6ICd0JywgJ1xcdTAxNjcnOiAndCcsXG4gICAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICAgJ1xcdTAxNjknOiAndScsICAnXFx1MDE2Yic6ICd1JywgJ1xcdTAxNmQnOiAndScsICdcXHUwMTZmJzogJ3UnLCAnXFx1MDE3MSc6ICd1JywgJ1xcdTAxNzMnOiAndScsXG4gICAgJ1xcdTAxNzQnOiAnVycsICAnXFx1MDE3NSc6ICd3JyxcbiAgICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgICAnXFx1MDE3OSc6ICdaJywgICdcXHUwMTdiJzogJ1onLCAnXFx1MDE3ZCc6ICdaJyxcbiAgICAnXFx1MDE3YSc6ICd6JywgICdcXHUwMTdjJzogJ3onLCAnXFx1MDE3ZSc6ICd6JyxcbiAgICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgICAnXFx1MDE1Mic6ICdPZScsICdcXHUwMTUzJzogJ29lJyxcbiAgICAnXFx1MDE0OSc6IFwiJ25cIiwgJ1xcdTAxN2YnOiAncydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xuICB2YXIgaHRtbEVzY2FwZXMgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy4gKi9cbiAgdmFyIGh0bWxVbmVzY2FwZXMgPSB7XG4gICAgJyZhbXA7JzogJyYnLFxuICAgICcmbHQ7JzogJzwnLFxuICAgICcmZ3Q7JzogJz4nLFxuICAgICcmcXVvdDsnOiAnXCInLFxuICAgICcmIzM5Oyc6IFwiJ1wiXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIC8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG4gIHZhciBmcmVlUGFyc2VGbG9hdCA9IHBhcnNlRmxvYXQsXG4gICAgICBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbiAgdmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbiAgLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG4gIHZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG4gIHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG4gIHZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbiAgLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbiAgdmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4gIC8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xuICB2YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICAgIGlmICh0eXBlcykge1xuICAgICAgICByZXR1cm4gdHlwZXM7XG4gICAgICB9XG5cbiAgICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSgpKTtcblxuICAvKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xuICB2YXIgbm9kZUlzQXJyYXlCdWZmZXIgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0FycmF5QnVmZmVyLFxuICAgICAgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZSxcbiAgICAgIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwLFxuICAgICAgbm9kZUlzUmVnRXhwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNSZWdFeHAsXG4gICAgICBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldCxcbiAgICAgIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VBZ2dyZWdhdG9yYCBmb3IgYXJyYXlzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUFnZ3JlZ2F0b3IoYXJyYXksIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoUmlnaHQoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmV2ZXJ5YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUV2ZXJ5KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gICAgfVxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlUmlnaHQoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5Wy0tbGVuZ3RoXTtcbiAgICB9XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGFuIEFTQ0lJIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICB2YXIgYXNjaWlTaXplID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYW4gQVNDSUkgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5maW5kS2V5YCBhbmQgYF8uZmluZExhc3RLZXlgLFxuICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gXG4gICAqIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQgb3IgaXRzIGtleSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kS2V5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZWFjaEZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgsIGZyb21SaWdodCkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mV2l0aChhcnJheSwgdmFsdWUsIGZyb21JbmRleCwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lYW5gIGFuZCBgXy5tZWFuQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VNZWFuKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gbGVuZ3RoID8gKGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSAvIGxlbmd0aCkgOiBOQU47XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAsIHdpdGhvdXQgc3VwcG9ydFxuICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRBY2N1bSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQgb2ZcbiAgICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VSZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGVhY2hGdW5jKSB7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAgICogc29ydCBvcmRlciBvZiBgYXJyYXlgIGFuZCByZXBsYWNlcyBjcml0ZXJpYSBvYmplY3RzIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZ1xuICAgKiB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhcnJheVtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnN1bWAgYW5kIGBfLnN1bUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIHJlc3VsdCxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdKTtcbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBjdXJyZW50IDogKHJlc3VsdCArIGN1cnJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAgICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1BhaXJzYCBhbmQgYF8udG9QYWlyc0luYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5XG4gICAqIG9mIGtleS12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUb1BhaXJzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIFtrZXksIG9iamVjdFtrZXldXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50cmltYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRyaW0oc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZ1xuICAgICAgPyBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJylcbiAgICAgIDogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gICAqL1xuICBmdW5jdGlvbiBjb3VudEhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gMDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICsrcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICAgKi9cbiAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICB2YXIgZGF0YSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICByZXN1bHQucHVzaChkYXRhLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGl0cyB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb1BhaXJzKHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW3ZhbHVlLCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubGFzdEluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gICAqIGNoYXJhY3RlciBvZiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGEgVW5pY29kZSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBgY29udGV4dGAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gQ3JlYXRlIGEgc3VwZWQtdXAgYGRlZmVyYCBpbiBOb2RlLmpzLlxuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgdmFyIHJ1bkluQ29udGV4dCA9IChmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSk7XG5cbiAgICAvKiogQnVpbHQtaW4gY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG4gICAgdmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgICAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xuICAgIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sLFxuICAgICAgICBVaW50OEFycmF5ID0gY29udGV4dC5VaW50OEFycmF5LFxuICAgICAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgICAgICBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICAgICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKSk7XG5cbiAgICAvKiogTW9ja2VkIGJ1aWx0LWlucy4gKi9cbiAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBjdHhOb3cgPSBEYXRlICYmIERhdGUubm93ICE9PSByb290LkRhdGUubm93ICYmIERhdGUubm93LFxuICAgICAgICBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgICAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luLFxuICAgICAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluLFxuICAgICAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICAgICAgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbiAgICB2YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUoY29udGV4dCwgJ0RhdGFWaWV3JyksXG4gICAgICAgIE1hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnTWFwJyksXG4gICAgICAgIFByb21pc2UgPSBnZXROYXRpdmUoY29udGV4dCwgJ1Byb21pc2UnKSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpLFxuICAgICAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbiAgICAvKiogVXNlZCB0byBzdG9yZSBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgICB2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cbiAgICAvKiogVXNlZCB0byBsb29rdXAgdW5taW5pZmllZCBmdW5jdGlvbiBuYW1lcy4gKi9cbiAgICB2YXIgcmVhbE5hbWVzID0ge307XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgICAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgICAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICAgICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xuICAgIHZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzLiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsXG4gICAgICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG4gICAgICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICAgICAqIGFuZCByZXR1cm4gdGhlIHVud3JhcHBlZCB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluIHNlcXVlbmNlcywgd2hpY2ggbXVzdCBiZSB1bndyYXBwZWQgd2l0aCBgXyN2YWx1ZWAsIG1heSBiZVxuICAgICAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuICAgICAqXG4gICAgICogVGhlIGV4ZWN1dGlvbiBvZiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgaXQncyBkZWZlcnJlZCB1bnRpbFxuICAgICAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uXG4gICAgICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcbiAgICAgKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBpdGVyYXRlZSBleGVjdXRpb25zLiBTZWN0aW9ucyBvZiBhIGNoYWluIHNlcXVlbmNlIHF1YWxpZnkgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuICAgICAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICAgICAqIGBmaW5kTGFzdGAsIGBoZWFkYCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcmVqZWN0YCwgYHJldmVyc2VgLCBgc2xpY2VgLFxuICAgICAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBtZXRob2RzIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG4gICAgICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICAgICAqIGBjb21taXRgLCBgY29tcGFjdGAsIGBjb25jYXRgLCBgY29uZm9ybXNgLCBgY29uc3RhbnRgLCBgY291bnRCeWAsIGBjcmVhdGVgLFxuICAgICAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuICAgICAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gICAgICogYGRyb3BSaWdodFdoaWxlYCwgYGRyb3BXaGlsZWAsIGBleHRlbmRgLCBgZXh0ZW5kV2l0aGAsIGBmaWxsYCwgYGZpbHRlcmAsXG4gICAgICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuICAgICAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAgICAgKiBgZnVuY3Rpb25zSW5gLCBgZ3JvdXBCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnRlcnNlY3Rpb25CeWAsXG4gICAgICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG4gICAgICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gICAgICogYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWVyZ2VXaXRoYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsIGBuZWdhdGVgLFxuICAgICAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuICAgICAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICAgICAqIGBwaWNrQnlgLCBgcGxhbnRgLCBgcHJvcGVydHlgLCBgcHJvcGVydHlPZmAsIGBwdWxsYCwgYHB1bGxBbGxgLCBgcHVsbEFsbEJ5YCxcbiAgICAgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuICAgICAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gICAgICogYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcbiAgICAgKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAgICAgKiBgdW5pb25gLCBgdW5pb25CeWAsIGB1bmlvbldpdGhgLCBgdW5pcWAsIGB1bmlxQnlgLCBgdW5pcVdpdGhgLCBgdW5zZXRgLFxuICAgICAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuICAgICAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAgICAgKiBgemlwT2JqZWN0YCwgYHppcE9iamVjdERlZXBgLCBhbmQgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsYW1wYCwgYGNsb25lYCxcbiAgICAgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcbiAgICAgKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICAgICAqIGBlc2NhcGVSZWdFeHBgLCBgZXZlcnlgLCBgZmluZGAsIGBmaW5kSW5kZXhgLCBgZmluZEtleWAsIGBmaW5kTGFzdGAsXG4gICAgICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuICAgICAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gICAgICogYGhhc0luYCwgYGhlYWRgLCBgaWRlbnRpdHlgLCBgaW5jbHVkZXNgLCBgaW5kZXhPZmAsIGBpblJhbmdlYCwgYGludm9rZWAsXG4gICAgICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG4gICAgICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gICAgICogYGlzRXF1YWxXaXRoYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc0ludGVnZXJgLCBgaXNMZW5ndGhgLFxuICAgICAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG4gICAgICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAgICAgKiBgaXNTYWZlSW50ZWdlcmAsIGBpc1NldGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBpc1R5cGVkQXJyYXlgLFxuICAgICAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuICAgICAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAgICAgKiBgbWluYCwgYG1pbkJ5YCwgYG11bHRpcGx5YCwgYG5vQ29uZmxpY3RgLCBgbm9vcGAsIGBub3dgLCBgbnRoYCwgYHBhZGAsXG4gICAgICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG4gICAgICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkSW5kZXhCeWAsIGBzb3J0ZWRMYXN0SW5kZXhgLFxuICAgICAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcbiAgICAgKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRpbWVzYCwgYHRvRmluaXRlYCwgYHRvSW50ZWdlcmAsIGB0b0pTT05gLCBgdG9MZW5ndGhgLFxuICAgICAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAgICAgKiBgdXBwZXJGaXJzdGAsIGB2YWx1ZWAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYW4gdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGNoYWluIHNlcXVlbmNlIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX19pbmRleF9fID0gMDtcbiAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICAgICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG5cbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsYXp5IHdyYXBwZXIgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGxhenkgZXZhbHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2Rpcl9fID0gMTtcbiAgICAgIHRoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7XG4gICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgIHRoaXMuX190YWtlQ291bnRfXyA9IE1BWF9BUlJBWV9MRU5HVEg7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBjb3B5QXJyYXkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCAoIWlzUmlnaHQgJiYgYXJyTGVuZ3RoID09IGxlbmd0aCAmJiB0YWtlQ291bnQgPT0gbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZShhcnJheSwgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgIGluZGV4ICs9IGRpcjtcblxuICAgICAgICB2YXIgaXRlckluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKytpdGVySW5kZXggPCBpdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRlZXNbaXRlckluZGV4XSxcbiAgICAgICAgICAgICAgaXRlcmF0ZWUgPSBkYXRhLml0ZXJhdGVlLFxuICAgICAgICAgICAgICB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09IExBWllfTUFQX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29tcHV0ZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09IExBWllfRklMVEVSX0ZMQUcpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBgTGF6eVdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgIEhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG4gICAgSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbiAgICBIYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC0tdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAgICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBhbGlhcyBwdXNoXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICAgICAgfVxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcbiAgICBTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG4gICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlU2l6ZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZVNpemUoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpLCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gICAgICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZ2dyZWdhdGVzIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBvbiBgYWNjdW11bGF0b3JgIHdpdGgga2V5cyB0cmFuc2Zvcm1lZFxuICAgICAqIGJ5IGBpdGVyYXRlZWAgYW5kIHZhbHVlcyBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBZ2dyZWdhdG9yKGNvbGxlY3Rpb24sIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAgICAgKiB2YWx1ZSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXQob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc2tpcCA/IHVuZGVmaW5lZCA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICAgICAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBEZWVwIGNsb25lXG4gICAgICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gICAgICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgICAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQ7XG4gICAgICB9XG4gICAgICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubnRoYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VOdGgoYXJyYXksIG4pIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuICs9IG4gPCAwID8gbGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiBpc0luZGV4KG4sIGxlbmd0aCkgPyBhcnJheVtuXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgaWYgKGl0ZXJhdGVlcy5sZW5ndGgpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIGlmIChpc0FycmF5KGl0ZXJhdGVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlR2V0KHZhbHVlLCBpdGVyYXRlZS5sZW5ndGggPT09IDEgPyBpdGVyYXRlZVswXSA6IGl0ZXJhdGVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpZGVudGl0eV07XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJyB8fCBrZXkgPT09ICdwcm90b3R5cGUnKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgIHZhciB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24gJiYgbmF0aXZlSXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICAgIC8vIFNoaWZ0IHdpdGggZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYXZvaWQgZmxvYXRpbmctcG9pbnQgaXNzdWVzLlxuICAgICAgICAgIC8vIFNlZSBbTUROXShodHRwczovL21kbi5pby9yb3VuZCNFeGFtcGxlcykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICB2YXIgcGFpciA9ICh0b1N0cmluZyhudW1iZXIpICsgJ2UnKS5zcGxpdCgnZScpLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmMocGFpclswXSArICdlJyArICgrcGFpclsxXSArIHByZWNpc2lvbikpO1xuXG4gICAgICAgICAgcGFpciA9ICh0b1N0cmluZyh2YWx1ZSkgKyAnZScpLnNwbGl0KCdlJyk7XG4gICAgICAgICAgcmV0dXJuICsocGFpclswXSArICdlJyArICgrcGFpclsxXSAtIHByZWNpc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jKG51bWJlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICAgICAqL1xuICAgIHZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiAoMSAvIHNldFRvQXJyYXkobmV3IFNldChbLC0wXSkpWzFdKSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8udG9QYWlyc2Agb3IgYF8udG9QYWlyc0luYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYWlycyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVUb1BhaXJzKGtleXNGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICAgICAgaWYgKHRhZyA9PSBtYXBUYWcpIHtcbiAgICAgICAgICByZXR1cm4gbWFwVG9BcnJheShvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvUGFpcnMob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzRnVuYyhvYmplY3QpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2Agd2l0aCBvcHRpb25hbFxuICAgICAqIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAgIDEgLSBgXy5iaW5kYFxuICAgICAqICAgIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICAgICAqICAgIDggLSBgXy5jdXJyeWBcbiAgICAgKiAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAgICAgKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAgICAgKiAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqICAxMjggLSBgXy5yZWFyZ2BcbiAgICAgKiAgMjU2IC0gYF8uYXJ5YFxuICAgICAqICA1MTIgLSBgXy5mbGlwYFxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFyeSA9IGFyeSA9PT0gdW5kZWZpbmVkID8gYXJ5IDogbmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLCAwKTtcbiAgICAgIGFyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZCA/IGFyaXR5IDogdG9JbnRlZ2VyKGFyaXR5KTtcbiAgICAgIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAoYml0bWFzayAmIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzUmlnaHQgPSBob2xkZXJzO1xuXG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKTtcblxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgICAgIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVyZ2VEYXRhKG5ld0RhdGEsIGRhdGEpO1xuICAgICAgfVxuICAgICAgZnVuYyA9IG5ld0RhdGFbMF07XG4gICAgICBiaXRtYXNrID0gbmV3RGF0YVsxXTtcbiAgICAgIHRoaXNBcmcgPSBuZXdEYXRhWzJdO1xuICAgICAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICAgICAgaG9sZGVycyA9IG5ld0RhdGFbNF07XG4gICAgICBhcml0eSA9IG5ld0RhdGFbOV0gPSBuZXdEYXRhWzldID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgICAgICA6IG5hdGl2ZU1heChuZXdEYXRhWzldIC0gbGVuZ3RoLCAwKTtcblxuICAgICAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJpdG1hc2sgfHwgYml0bWFzayA9PSBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpO1xuICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSksIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICAgICAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNBc3NpZ25JbihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICByZXR1cm4gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c0RlZXBgIHRvIGN1c3RvbWl6ZSBpdHMgYF8ubWVyZ2VgIHVzZSB0byBtZXJnZSBzb3VyY2VcbiAgICAgKiBvYmplY3RzIGludG8gZGVzdGluYXRpb24gb2JqZWN0cyB0aGF0IGFyZSBwYXNzZWQgdGhydS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHBhcmVudCBvYmplY3Qgb2YgYHNyY1ZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c01lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpWYWx1ZSkgJiYgaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG9ialZhbHVlKTtcbiAgICAgICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vbWl0YCB0byBjdXN0b21pemUgaXRzIGBfLmNsb25lRGVlcGAgdXNlIHRvIG9ubHkgY2xvbmUgcGxhaW5cbiAgICAgKiBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW5jbG9uZWQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgdG8gZGVmZXIgY2xvbmluZyB0byBgXy5jbG9uZURlZXBgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbU9taXRDbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICAgICAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICAgICAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAgICAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAgICAgKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICAgICAgY2FzZSBlcnJvclRhZzpcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIENvbWJpbmluZyBzZXZlcmFsIHByZWRpY2F0ZXMgdXNpbmcgYF8ub3ZlckV2ZXJ5YCBvciBgXy5vdmVyU29tZWAuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8ub3ZlclNvbWUoW3sgJ2FnZSc6IDM2IH0sIFsnYWdlJywgNDBdXSkpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKi9cbiAgICB2YXIgZmluZCA9IGNyZWF0ZUZpbmQoZmluZEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWNvbGxlY3Rpb24ubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0KFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdCA9IGNyZWF0ZUZpbmQoZmluZExhc3RJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmxhdHRlbmVkIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aHJ1IGBpdGVyYXRlZWAgYW5kIGZsYXR0ZW5pbmcgdGhlIG1hcHBlZCByZXN1bHRzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW24sIG5dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZWVwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVlcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIElORklOSVRZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZXB0aChbMSwgMl0sIGR1cGxpY2F0ZSwgMik7XG4gICAgICogLy8gPT4gW1sxLCAxXSwgWzIsIDJdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZXB0aChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgZGVwdGgpIHtcbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gICAgICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBlYWNoXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBhbGlhcyBlYWNoUmlnaHRcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2hSaWdodChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMmAgdGhlbiBgMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2hSaWdodCA6IGJhc2VFYWNoUmlnaHQ7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgb3JkZXIgb2YgZ3JvdXBlZCB2YWx1ZXNcbiAgICAgKiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIGBjb2xsZWN0aW9uYC4gVGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiB2YWx1ZSBvZiBlYWNoIGtleSBpcyBhbiBhcnJheSBvZiBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGVcbiAgICAgKiBrZXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi4zXSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmdyb3VwQnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogWydvbmUnLCAndHdvJ10sICc1JzogWyd0aHJlZSddIH1cbiAgICAgKi9cbiAgICB2YXIgZ3JvdXBCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcsIGl0J3NcbiAgICAgKiBjaGVja2VkIGZvciBhIHN1YnN0cmluZyBvZiBgdmFsdWVgLCBvdGhlcndpc2VcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGlzIHVzZWQgZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzXG4gICAgICogdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoeyAnYSc6IDEsICdiJzogMiB9LCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKCdhYmNkJywgJ2JjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCAmJiAhZ3VhcmQpID8gdG9JbnRlZ2VyKGZyb21JbmRleCkgOiAwO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKVxuICAgICAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKVxuICAgICAgICA6ICghIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAsIHJldHVybmluZ1xuICAgICAqIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mIGVhY2ggaW52b2tlZCBtZXRob2QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIGFyZSBwcm92aWRlZCB0byBlYWNoIGludm9rZWQgbWV0aG9kLiBJZiBgcGF0aGAgaXMgYSBmdW5jdGlvbiwgaXQncyBpbnZva2VkXG4gICAgICogZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbnxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBlYWNoIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoW1s1LCAxLCA3XSwgWzMsIDIsIDFdXSwgJ3NvcnQnKTtcbiAgICAgKiAvLyA9PiBbWzEsIDUsIDddLCBbMSwgMiwgM11dXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbMTIzLCA0NTZdLCBTdHJpbmcucHJvdG90eXBlLnNwbGl0LCAnJyk7XG4gICAgICogLy8gPT4gW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddXVxuICAgICAqL1xuICAgIHZhciBpbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBwYXRoLCBhcmdzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGlzRnVuYyA/IGFwcGx5KHBhdGgsIHZhbHVlLCBhcmdzKSA6IGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgZnVuY3Rpb24obykge1xuICAgICAqICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoby5jb2RlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdkJzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCAnZGlyJyk7XG4gICAgICogLy8gPT4geyAnbGVmdCc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAncmlnaHQnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIga2V5QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAgICAgKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAgICAgKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0QnlgIGV4Y2VwdCB0aGF0IGl0IGFsbG93cyBzcGVjaWZ5aW5nIHRoZSBzb3J0XG4gICAgICogb3JkZXJzIG9mIHRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS4gSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXNcbiAgICAgKiBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvclxuICAgICAqIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXIgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5W118RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3JkZXJzXSBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gU29ydCBieSBgdXNlcmAgaW4gYXNjZW5kaW5nIG9yZGVyIGFuZCBieSBgYWdlYCBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqIF8ub3JkZXJCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddLCBbJ2FzYycsICdkZXNjJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGl0ZXJhdGVlcyA9PSBudWxsID8gW10gOiBbaXRlcmF0ZWVzXTtcbiAgICAgIH1cbiAgICAgIG9yZGVycyA9IGd1YXJkID8gdW5kZWZpbmVkIDogb3JkZXJzO1xuICAgICAgaWYgKCFpc0FycmF5KG9yZGVycykpIHtcbiAgICAgICAgb3JkZXJzID0gb3JkZXJzID09IG51bGwgPyBbXSA6IFtvcmRlcnNdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gdHdvIGdyb3VwcywgdGhlIGZpcnN0IG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLCB0aGUgc2Vjb25kIG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkgZm9yLiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1sncGViYmxlcyddLCBbJ2Jhcm5leScsICdmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAncGViYmxlcyddLCBbJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICovXG4gICAgdmFyIHBhcnRpdGlvbiA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5ID8gMCA6IDFdLnB1c2godmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gW1tdLCBbXV07IH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy4gSWYgYGFjY3VtdWxhdG9yYFxuICAgICAqIGlzIG5vdCBnaXZlbiwgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIGlzIHVzZWQgYXMgdGhlIGluaXRpYWxcbiAgICAgKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAgICAgKiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8ucmVkdWNlYCwgYF8ucmVkdWNlUmlnaHRgLCBhbmQgYF8udHJhbnNmb3JtYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhc3NpZ25gLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGluY2x1ZGVzYCwgYG1lcmdlYCwgYG9yZGVyQnlgLFxuICAgICAqIGFuZCBgc29ydEJ5YFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAgICAgKiAgIHJldHVybiBzdW0gKyBuO1xuICAgICAqIH0sIDApO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogICByZXR1cm4gcmVzdWx0O1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2UgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJlZHVjZWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1swLCAxXSwgWzIsIDNdLCBbNCwgNV1dO1xuICAgICAqXG4gICAgICogXy5yZWR1Y2VSaWdodChhcnJheSwgZnVuY3Rpb24oZmxhdHRlbmVkLCBvdGhlcikge1xuICAgICAqICAgcmV0dXJuIGZsYXR0ZW5lZC5jb25jYXQob3RoZXIpO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgNSwgMiwgMywgMCwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlUmlnaHQgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgOyB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aGF0IGBwcmVkaWNhdGVgIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1dGh5IGZvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8uZmlsdGVyXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHJhbmRvbSBlbGVtZW50IGZyb20gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGUgOiBiYXNlU2FtcGxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBgbmAgcmFuZG9tIGVsZW1lbnRzIGF0IHVuaXF1ZSBrZXlzIGZyb20gYGNvbGxlY3Rpb25gIHVwIHRvIHRoZVxuICAgICAqIHNpemUgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszLCAxXVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgNCk7XG4gICAgICogLy8gPT4gWzIsIDMsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGVTaXplIDogYmFzZVNhbXBsZVNpemU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHNodWZmbGVkIHZhbHVlcywgdXNpbmcgYSB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNodWZmbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiBbNCwgMSwgMywgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2h1ZmZsZSA6IGJhc2VTaHVmZmxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc2l6ZSBvZiBgY29sbGVjdGlvbmAgYnkgcmV0dXJuaW5nIGl0cyBsZW5ndGggZm9yIGFycmF5LWxpa2VcbiAgICAgKiB2YWx1ZXMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKSA/IHN0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcoY29sbGVjdGlvbik7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzLCBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSByZXN1bHRzIG9mXG4gICAgICogcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uIHRocnUgZWFjaCBpdGVyYXRlZS4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAgICAgKiBlcXVhbCBlbGVtZW50cy4gVGhlIGl0ZXJhdGVlcyBhcmUgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiAzMCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgW2Z1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlcjsgfV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgMzBdXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0OF1dXG4gICAgICovXG4gICAgdmFyIHNvcnRCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAxICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaXRlcmF0ZWVzWzBdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAgICAgKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBEYXRlXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICAgICAqIH0sIF8ubm93KCkpO1xuICAgICAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGN0eE5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByb290LkRhdGUubm93KCk7XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5iZWZvcmVgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogYGZ1bmNgIG9uY2UgaXQncyBjYWxsZWQgYG5gIG9yIG1vcmUgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGJlZm9yZSBgZnVuY2AgaXMgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F2ZXMgPSBbJ3Byb2ZpbGUnLCAnc2V0dGluZ3MnXTtcbiAgICAgKlxuICAgICAqIHZhciBkb25lID0gXy5hZnRlcihzYXZlcy5sZW5ndGgsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ2RvbmUgc2F2aW5nIScpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHNhdmVzLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICogICBhc3luY1NhdmUoeyAndHlwZSc6IHR5cGUsICdjb21wbGV0ZSc6IGRvbmUgfSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnZG9uZSBzYXZpbmchJyBhZnRlciB0aGUgdHdvIGFzeW5jIHNhdmVzIGhhdmUgY29tcGxldGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB1cCB0byBgbmAgYXJndW1lbnRzLFxuICAgICAqIGlnbm9yaW5nIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy5hcnkocGFyc2VJbnQsIDEpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJ5KGZ1bmMsIG4sIGd1YXJkKSB7XG4gICAgICBuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBuO1xuICAgICAgbiA9IChmdW5jICYmIG4gPT0gbnVsbCkgPyBmdW5jLmxlbmd0aCA6IG47XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0FSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzXG4gICAgICogb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoaWxlIGl0J3MgY2FsbGVkIGxlc3MgdGhhbiBgbmAgdGltZXMuIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYXQgd2hpY2ggYGZ1bmNgIGlzIG5vIGxvbmdlciBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmJlZm9yZSg1LCBhZGRDb250YWN0VG9MaXN0KSk7XG4gICAgICogLy8gPT4gQWxsb3dzIGFkZGluZyB1cCB0byA0IGNvbnRhY3RzIHRvIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJlZm9yZShuLCBmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA+IDApIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPD0gMSkge1xuICAgICAgICAgIGZ1bmMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgXG4gICAgICogYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIG5hdGl2ZSBgRnVuY3Rpb24jYmluZGAsIHRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kKSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYG9iamVjdFtrZXldYCB3aXRoIGBwYXJ0aWFsc2BcbiAgICAgKiBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG8gcmVmZXJlbmNlXG4gICAgICogbWV0aG9kcyB0aGF0IG1heSBiZSByZWRlZmluZWQgb3IgZG9uJ3QgeWV0IGV4aXN0LiBTZWVcbiAgICAgKiBbUGV0ZXIgTWljaGF1eCdzIGFydGljbGVdKGh0dHA6Ly9wZXRlci5taWNoYXV4LmNhL2FydGljbGVzL2xhenktZnVuY3Rpb24tZGVmaW5pdGlvbi1wYXR0ZXJuKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZEtleS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludm9rZSB0aGUgbWV0aG9kIG9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ3VzZXInOiAnZnJlZCcsXG4gICAgICogICAnZ3JlZXQnOiBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogb2JqZWN0LmdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZEtleSA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwga2V5LCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmRLZXkpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGtleSwgYml0bWFzaywgb2JqZWN0LCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGFyZ3VtZW50cyBvZiBgZnVuY2AgYW5kIGVpdGhlciBpbnZva2VzXG4gICAgICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICAgICAqIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGhlIHJlbWFpbmluZyBgZnVuY2BcbiAgICAgKiBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBtYXkgYmUgc3BlY2lmaWVkIGlmIGBmdW5jLmxlbmd0aGBcbiAgICAgKiBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnkucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY3VycnlgIGV4Y2VwdCB0aGF0IGFyZ3VtZW50cyBhcmUgYXBwbGllZCB0byBgZnVuY2BcbiAgICAgKiBpbiB0aGUgbWFubmVyIG9mIGBfLnBhcnRpYWxSaWdodGAgaW5zdGVhZCBvZiBgXy5wYXJ0aWFsYC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeVJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5UmlnaHQoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMykoMikoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDIsIDMpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgzKSgxLCBfKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeVJpZ2h0KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnlSaWdodC5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gICAgICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gICAgICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICAgICAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICAgICAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICAgICAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAgICAgKiBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAgICAgKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KSk7XG4gICAgICpcbiAgICAgKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICAgICAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICAgICAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAgICAgKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsYXN0QXJncyxcbiAgICAgICAgICBsYXN0VGhpcyxcbiAgICAgICAgICBtYXhXYWl0LFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICB0aW1lcklkLFxuICAgICAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICAgICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICAgICAgcmV0dXJuIG1heGluZ1xuICAgICAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgICAgICA6IHRpbWVXYWl0aW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgICAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgICAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgICAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgICAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgaW52b2tpbmcgdGhlIGBmdW5jYCB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLiBBbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgJ2RlZmVycmVkJyk7XG4gICAgICogLy8gPT4gTG9ncyAnZGVmZXJyZWQnIGFmdGVyIG9uZSBtaWxsaXNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXIgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIDEsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgZnVuY2AgYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVsYXkoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgMTAwMCwgJ2xhdGVyJyk7XG4gICAgICogLy8gPT4gTG9ncyAnbGF0ZXInIGFmdGVyIG9uZSBzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlbGF5ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCB0b051bWJlcih3YWl0KSB8fCAwLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIHJldmVyc2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZmxpcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsaXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmbGlwcGVkID0gXy5mbGlwKGZ1bmN0aW9uKCkge1xuICAgICAqICAgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmxpcHBlZCgnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+IFsnZCcsICdjJywgJ2InLCAnYSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxpcChmdW5jKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0ZMSVBfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gICAgICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICAgICAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gICAgICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAgICAgKlxuICAgICAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogdmFsdWVzKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKlxuICAgICAqIG9iamVjdC5hID0gMjtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICAgICAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICpcbiAgICAgKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICAgICAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG4gICAgbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbmVnYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmVkaWNhdGUgYGZ1bmNgLiBUaGVcbiAgICAgKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG5lZ2F0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzRXZlbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIF8ubmVnYXRlKGlzRXZlbikpO1xuICAgICAqIC8vID0+IFsxLCAzLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBpbnZva2luZyBgZnVuY2Agb25jZS4gUmVwZWF0IGNhbGxzXG4gICAgICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGludm9jYXRpb24uIFRoZSBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyA9PiBgY3JlYXRlQXBwbGljYXRpb25gIGlzIGludm9rZWQgb25jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgICAgcmV0dXJuIGJlZm9yZSgyLCBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudHMgdHJhbnNmb3JtZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbdHJhbnNmb3Jtcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm1zLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkb3VibGVkKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyQXJncyhmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4gW3gsIHldO1xuICAgICAqIH0sIFtzcXVhcmUsIGRvdWJsZWRdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoOSwgMyk7XG4gICAgICogLy8gPT4gWzgxLCA2XVxuICAgICAqXG4gICAgICogZnVuYygxMCwgNSk7XG4gICAgICogLy8gPT4gWzEwMCwgMTBdXG4gICAgICovXG4gICAgdmFyIG92ZXJBcmdzID0gY2FzdFJlc3QoZnVuY3Rpb24oZnVuYywgdHJhbnNmb3Jtcykge1xuICAgICAgdHJhbnNmb3JtcyA9ICh0cmFuc2Zvcm1zLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodHJhbnNmb3Jtc1swXSkpXG4gICAgICAgID8gYXJyYXlNYXAodHJhbnNmb3Jtc1swXSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKVxuICAgICAgICA6IGFycmF5TWFwKGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMsIDEpLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgZnVuY3NMZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGFyZ3MubGVuZ3RoLCBmdW5jc0xlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybXNbaW5kZXhdLmNhbGwodGhpcywgYXJnc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGVcbiAgICAgKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYmluZGAgZXhjZXB0IGl0IGRvZXMgKipub3QqKlxuICAgICAqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGVsbG8nKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsKGdyZWV0LCBfLCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAgICAgKiBhcmUgYXBwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbFJpZ2h0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsUmlnaHQpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIGFycmFuZ2VkIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBzcGVjaWZpZWQgYGluZGV4ZXNgIHdoZXJlIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgZmlyc3QgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfSwgWzIsIDAsIDFdKTtcbiAgICAgKlxuICAgICAqIHJlYXJnZWQoJ2InLCAnYycsICdhJylcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICB2YXIgcmVhcmcgPSBmbGF0UmVzdChmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1JFQVJHX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluZGV4ZXMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGZyb20gYHN0YXJ0YCBhbmQgYmV5b25kIHByb3ZpZGVkIGFzXG4gICAgICogYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3Jlc3QgcGFyYW1ldGVyXShodHRwczovL21kbi5pby9yZXN0X3BhcmFtZXRlcnMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnJlc3QoZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAgICAgKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAgICAgKiAgICAgKF8uc2l6ZShuYW1lcykgPiAxID8gJywgJiAnIDogJycpICsgXy5sYXN0KG5hbWVzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheSgnaGVsbG8nLCAnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcycpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09PSB1bmRlZmluZWQgPyBzdGFydCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuYywgc3RhcnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZSBmdW5jdGlvbiBhbmQgYW4gYXJyYXkgb2YgYXJndW1lbnRzIG11Y2ggbGlrZVxuICAgICAqIFtgRnVuY3Rpb24jYXBwbHlgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3ByZWFkIG9wZXJhdG9yXShodHRwczovL21kbi5pby9zcHJlYWRfb3BlcmF0b3IpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc3ByZWFkIGFyZ3VtZW50cyBvdmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzcHJlYWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnNwcmVhZChmdW5jdGlvbih3aG8sIHdoYXQpIHtcbiAgICAgKiAgIHJldHVybiB3aG8gKyAnIHNheXMgJyArIHdoYXQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoWydmcmVkJywgJ2hlbGxvJ10pO1xuICAgICAqIC8vID0+ICdmcmVkIHNheXMgaGVsbG8nXG4gICAgICpcbiAgICAgKiB2YXIgbnVtYmVycyA9IFByb21pc2UuYWxsKFtcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSg0MCksXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoMzYpXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBudW1iZXJzLnRoZW4oXy5zcHJlYWQoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIHggKyB5O1xuICAgICAqIH0pKTtcbiAgICAgKiAvLyA9PiBhIFByb21pc2Ugb2YgNzZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcHJlYWQoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKHN0YXJ0KSwgMCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSxcbiAgICAgICAgICAgIG90aGVyQXJncyA9IGNhc3RTbGljZShhcmdzLCAwLCBzdGFydCk7XG5cbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgYXJyYXlQdXNoKG90aGVyQXJncywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICAgICAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gICAgICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICAgICAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICAgICAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAgICAgKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gICAgICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICAgICAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICAgICAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAgICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byBvbmUgYXJndW1lbnQsIGlnbm9yaW5nIGFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLnVuYXJ5KHBhcnNlSW50KSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuYXJ5KGZ1bmMpIHtcbiAgICAgIHJldHVybiBhcnkoZnVuYywgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byBgd3JhcHBlcmAgYXMgaXRzIGZpcnN0XG4gICAgICogYXJndW1lbnQuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24gYXJlIGFwcGVuZGVkXG4gICAgICogdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGB3cmFwcGVyYC4gVGhlIHdyYXBwZXIgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbd3JhcHBlcj1pZGVudGl0eV0gVGhlIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBwID0gXy53cmFwKF8uZXNjYXBlLCBmdW5jdGlvbihmdW5jLCB0ZXh0KSB7XG4gICAgICogICByZXR1cm4gJzxwPicgKyBmdW5jKHRleHQpICsgJzwvcD4nO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcCgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnPHA+ZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGFydGlhbChjYXN0RnVuY3Rpb24od3JhcHBlciksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIGFzIGFuIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KDEpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW251bGxdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWRdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICogY29uc29sZS5sb2coXy5jYXN0QXJyYXkoYXJyYXkpID09PSBhcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gICAgICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICAgICAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gICAgICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICAgICAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZS4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsXG4gICAgICogY2xvbmluZyBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB1cCB0byBmb3VyIGFyZ3VtZW50czsgKHZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZVdpdGhgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lRGVlcFdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG9iamVjdGAgY29uZm9ybXMgdG8gYHNvdXJjZWAgYnkgaW52b2tpbmcgdGhlIHByZWRpY2F0ZVxuICAgICAqIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDI7IH0gfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtc1RvKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlID09IG51bGwgfHwgYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcShOYU4sIE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZ3QoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3QgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VHdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID49IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlCdWZmZXJgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXlCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXlCdWZmZXIgPSBub2RlSXNBcnJheUJ1ZmZlciA/IGJhc2VVbmFyeShub2RlSXNBcnJheUJ1ZmZlcikgOiBiYXNlSXNBcnJheUJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAgICAgKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gICAgICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICAgICAqIGlzIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBib29sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KCc8Ym9keT4nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gICAgICpcbiAgICAgKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gICAgICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICAgICAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHRydWUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICAgICAgfVxuICAgICAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICAgKiBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICAgICAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAgICAgKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICAgICAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICAgICAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIG9iamVjdCA9PT0gb3RoZXI7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0VxdWFsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggdXAgdG9cbiAgICAgKiBzaXggYXJndW1lbnRzOiAob2JqVmFsdWUsIG90aFZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKG90aFZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2hlbGxvJywgJ2dvb2RieWUnXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbFdpdGgoYXJyYXksIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbFdpdGgodmFsdWUsIG90aGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIodmFsdWUsIG90aGVyKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgdW5kZWZpbmVkLCBjdXN0b21pemVyKSA6ICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gICAgICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZS5uYW1lID09ICdzdHJpbmcnICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgcHJpbWl0aXZlIG51bWJlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzRmluaXRlYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzRmluaXRlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgICAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICAgICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICAgICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAgICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgICAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2Uoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYG9iamVjdGAgYW5kIGBzb3VyY2VgIHRvXG4gICAgICogZGV0ZXJtaW5lIGlmIGBvYmplY3RgIGNvbnRhaW5zIGVxdWl2YWxlbnQgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8ubWF0Y2hlc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNNYXRjaGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIGZpdmVcbiAgICAgKiBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGluZGV4fGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKHNyY1ZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnZ3JlZXRpbmcnOiAnaGVsbG8nIH07XG4gICAgICogdmFyIHNvdXJjZSA9IHsgJ2dyZWV0aW5nJzogJ2hpJyB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzTmFOKSBhbmQgaXMgbm90IHRoZSBzYW1lIGFzXG4gICAgICogZ2xvYmFsIFtgaXNOYU5gXShodHRwczovL21kbi5pby9pc05hTikgd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgICAgIC8vIEFuIGBOYU5gIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgICAgIC8vIEFjdGl2ZVggb2JqZWN0cyBpbiBJRS5cbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJpc3RpbmUgbmF0aXZlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGNhbid0IHJlbGlhYmx5IGRldGVjdCBuYXRpdmUgZnVuY3Rpb25zIGluIHRoZSBwcmVzZW5jZVxuICAgICAqIG9mIHRoZSBjb3JlLWpzIHBhY2thZ2UgYmVjYXVzZSBjb3JlLWpzIGNpcmN1bXZlbnRzIHRoaXMga2luZCBvZiBkZXRlY3Rpb24uXG4gICAgICogRGVzcGl0ZSBtdWx0aXBsZSByZXF1ZXN0cywgdGhlIGNvcmUtanMgbWFpbnRhaW5lciBoYXMgbWFkZSBpdCBjbGVhcjogYW55XG4gICAgICogYXR0ZW1wdCB0byBmaXggdGhlIGRldGVjdGlvbiB3aWxsIGJlIG9ic3RydWN0ZWQuIEFzIGEgcmVzdWx0LCB3ZSdyZSBsZWZ0XG4gICAgICogd2l0aCBsaXR0bGUgY2hvaWNlIGJ1dCB0byB0aHJvdyBhbiBlcnJvci4gVW5mb3J0dW5hdGVseSwgdGhpcyBhbHNvIGFmZmVjdHNcbiAgICAgKiBwYWNrYWdlcywgbGlrZSBbYmFiZWwtcG9seWZpbGxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JhYmVsLXBvbHlmaWxsKSxcbiAgICAgKiB3aGljaCByZWx5IG9uIGNvcmUtanMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoXyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKGlzTWFza2FibGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihDT1JFX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbnVsbGlzaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAgICAgKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjguMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICAgIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gICAgICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgUmVnRXhwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLiBBbiBpbnRlZ2VyIGlzIHNhZmUgaWYgaXQncyBhbiBJRUVFLTc1NFxuICAgICAqIGRvdWJsZSBwcmVjaXNpb24gbnVtYmVyIHdoaWNoIGlzbid0IHRoZSByZXN1bHQgb2YgYSByb3VuZGVkIHVuc2FmZSBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNTYWZlSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc1NhZmVJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAtTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHdlYWtNYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSB3ZWFrU2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdCgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlTHQpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdGUoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHRlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb0FycmF5KHZhbHVlKSA6IGNvcHlBcnJheSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbc3ltSXRlcmF0b3JdKCkpO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgZnVuYyA9IHRhZyA9PSBtYXBUYWcgPyBtYXBUb0FycmF5IDogKHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzKTtcblxuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTIuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIgc3VpdGFibGUgZm9yIHVzZSBhcyB0aGUgbGVuZ3RoIG9mIGFuXG4gICAgICogYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA0Mjk0OTY3Mjk1XG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAwLCBNQVhfQVJSQVlfTEVOR1RIKSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBJbmZpbml0eVxuICAgICAqXG4gICAgICogXy50b051bWJlcignMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBiYXNlVHJpbSh2YWx1ZSk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgICAgIC8vIHRvIG5vcm1hbGl6ZSBhbGwga2luZHMgb2Ygd2hpdGVzcGFjZSwgc28gZS5nLiBuZXdsaW5lcyAoYW5kIHVuaWNvZGUgdmVyc2lvbnMgb2YgaXQpIGNhbid0IHNuZWFrIGluXG4gICAgICAvLyBhbmQgZXNjYXBlIHRoZSBjb21tZW50LCB0aHVzIGluamVjdGluZyBjb2RlIHRoYXQgZ2V0cyBldmFsZWQuXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgICAgICAgID8gKG9wdGlvbnMuc291cmNlVVJMICsgJycpLnJlcGxhY2UoL1xccy9nLCAnICcpXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3ZhcmlhYmxlJykgJiYgb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiBhIGZvcmJpZGRlbiBjaGFyYWN0ZXIgd2FzIGZvdW5kIGluIGB2YXJpYWJsZWAsIHRvIHByZXZlbnRcbiAgICAgIC8vIHBvdGVudGlhbCBjb21tYW5kIGluamVjdGlvbiBhdHRhY2tzLlxuICAgICAgZWxzZSBpZiAocmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMudGVzdCh2YXJpYWJsZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfVEVNUExfVkFSX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VUcmltKHN0cmluZyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGNoclN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KGNoYXJzKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICctXy1hYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbUVuZChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSkgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMgICdcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjLV8tJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1TdGFydChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1TdGFydCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSk7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRydW5jYXRlcyBgc3RyaW5nYCBpZiBpdCdzIGxvbmdlciB0aGFuIHRoZSBnaXZlbiBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogVGhlIGxhc3QgY2hhcmFjdGVycyBvZiB0aGUgdHJ1bmNhdGVkIHN0cmluZyBhcmUgcmVwbGFjZWQgd2l0aCB0aGUgb21pc3Npb25cbiAgICAgKiBzdHJpbmcgd2hpY2ggZGVmYXVsdHMgdG8gXCIuLi5cIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubGVuZ3RoPTMwXSBUaGUgbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vbWlzc2lvbj0nLi4uJ10gVGhlIHN0cmluZyB0byBpbmRpY2F0ZSB0ZXh0IGlzIG9taXR0ZWQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbb3B0aW9ucy5zZXBhcmF0b3JdIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byB0cnVuY2F0ZSB0by5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cnVuY2F0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJyk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hiby4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogJyAnXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6IC8sPyArL1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ29taXNzaW9uJzogJyBbLi4uXSdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnIFsuLi5dJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRydW5jYXRlKHN0cmluZywgb3B0aW9ucykge1xuICAgICAgdmFyIGxlbmd0aCA9IERFRkFVTFRfVFJVTkNfTEVOR1RILFxuICAgICAgICAgIG9taXNzaW9uID0gREVGQVVMVF9UUlVOQ19PTUlTU0lPTjtcblxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSAnc2VwYXJhdG9yJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zZXBhcmF0b3IgOiBzZXBhcmF0b3I7XG4gICAgICAgIGxlbmd0aCA9ICdsZW5ndGgnIGluIG9wdGlvbnMgPyB0b0ludGVnZXIob3B0aW9ucy5sZW5ndGgpIDogbGVuZ3RoO1xuICAgICAgICBvbWlzc2lvbiA9ICdvbWlzc2lvbicgaW4gb3B0aW9ucyA/IGJhc2VUb1N0cmluZyhvcHRpb25zLm9taXNzaW9uKSA6IG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAoaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpO1xuICAgICAgICBzdHJMZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChsZW5ndGggPj0gc3RyTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgZW5kID0gbGVuZ3RoIC0gc3RyaW5nU2l6ZShvbWlzc2lvbik7XG4gICAgICBpZiAoZW5kIDwgMSkge1xuICAgICAgICByZXR1cm4gb21pc3Npb247XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gc3RyU3ltYm9sc1xuICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpXG4gICAgICAgIDogc3RyaW5nLnNsaWNlKDAsIGVuZCk7XG5cbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgICB9XG4gICAgICBpZiAoc3RyU3ltYm9scykge1xuICAgICAgICBlbmQgKz0gKHJlc3VsdC5sZW5ndGggLSBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgaWYgKHN0cmluZy5zbGljZShlbmQpLnNlYXJjaChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgdmFyIG1hdGNoLFxuICAgICAgICAgICAgICBzdWJzdHJpbmcgPSByZXN1bHQ7XG5cbiAgICAgICAgICBpZiAoIXNlcGFyYXRvci5nbG9iYWwpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCB0b1N0cmluZyhyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSkgKyAnZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbmQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIG5ld0VuZCA9PT0gdW5kZWZpbmVkID8gZW5kIDogbmV3RW5kKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdHJpbmcuaW5kZXhPZihiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKSwgZW5kKSAhPSBlbmQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLmVzY2FwZWA7IHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzXG4gICAgICogYCZhbXA7YCwgYCZsdDtgLCBgJmd0O2AsIGAmcXVvdDtgLCBhbmQgYCYjMzk7YCBpbiBgc3RyaW5nYCB0b1xuICAgICAqIHRoZWlyIGNvcnJlc3BvbmRpbmcgY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBIVE1MIGVudGl0aWVzIGFyZSB1bmVzY2FwZWQuIFRvIHVuZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBIVE1MIGVudGl0aWVzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjYuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuZXNjYXBlKCdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNFc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJy0tZm9vLWJhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHVwcGVyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZSRUQnXG4gICAgICovXG4gICAgdmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBhdHRlcm4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IHBhdHRlcm47XG5cbiAgICAgIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gaW52b2tlIGBmdW5jYCwgcmV0dXJuaW5nIGVpdGhlciB0aGUgcmVzdWx0IG9yIHRoZSBjYXVnaHQgZXJyb3JcbiAgICAgKiBvYmplY3QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhdHRlbXB0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBgZnVuY2AgcmVzdWx0IG9yIGVycm9yIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgdGhyb3dpbmcgZXJyb3JzIGZvciBpbnZhbGlkIHNlbGVjdG9ycy5cbiAgICAgKiB2YXIgZWxlbWVudHMgPSBfLmF0dGVtcHQoZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgKiB9LCAnPl8+Jyk7XG4gICAgICpcbiAgICAgKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICAgICAqICAgZWxlbWVudHMgPSBbXTtcbiAgICAgKiB9XG4gICAgICovXG4gICAgdmFyIGF0dGVtcHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGlzRXJyb3IoZSkgPyBlIDogbmV3IEVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQmluZHMgbWV0aG9kcyBvZiBhbiBvYmplY3QgdG8gdGhlIG9iamVjdCBpdHNlbGYsIG92ZXJ3cml0aW5nIHRoZSBleGlzdGluZ1xuICAgICAqIG1ldGhvZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBiaW5kIGFuZCBhc3NpZ24gdGhlIGJvdW5kIG1ldGhvZHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gbWV0aG9kTmFtZXMgVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG8gYmluZC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdmlldyA9IHtcbiAgICAgKiAgICdsYWJlbCc6ICdkb2NzJyxcbiAgICAgKiAgICdjbGljayc6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uYmluZEFsbCh2aWV3LCBbJ2NsaWNrJ10pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB2aWV3LmNsaWNrKTtcbiAgICAgKiAvLyA9PiBMb2dzICdjbGlja2VkIGRvY3MnIHdoZW4gY2xpY2tlZC5cbiAgICAgKi9cbiAgICB2YXIgYmluZEFsbCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgbWV0aG9kTmFtZXMpIHtcbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGtleSA9IHRvS2V5KGtleSk7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgYmluZChvYmplY3Rba2V5XSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpdGVyYXRlcyBvdmVyIGBwYWlyc2AgYW5kIGludm9rZXMgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiBmdW5jdGlvbiBvZiB0aGUgZmlyc3QgcHJlZGljYXRlIHRvIHJldHVybiB0cnV0aHkuIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb25cbiAgICAgKiBwYWlycyBhcmUgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb24gcGFpcnMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8uY29uZChbXG4gICAgICogICBbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCAgICAgICAgICAgXy5jb25zdGFudCgnbWF0Y2hlcyBBJyldLFxuICAgICAqICAgW18uY29uZm9ybXMoeyAnYic6IF8uaXNOdW1iZXIgfSksIF8uY29uc3RhbnQoJ21hdGNoZXMgQicpXSxcbiAgICAgKiAgIFtfLnN0dWJUcnVlLCAgICAgICAgICAgICAgICAgICAgICBfLmNvbnN0YW50KCdubyBtYXRjaCcpXVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEEnXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAwLCAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQidcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6ICcxJywgJ2InOiAnMicgfSk7XG4gICAgICogLy8gPT4gJ25vIG1hdGNoJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmQocGFpcnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICB0b0l0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoKTtcblxuICAgICAgcGFpcnMgPSAhbGVuZ3RoID8gW10gOiBhcnJheU1hcChwYWlycywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICBpZiAodHlwZW9mIHBhaXJbMV0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RvSXRlcmF0ZWUocGFpclswXSksIHBhaXJbMV1dO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICAgIGlmIChhcHBseShwYWlyWzBdLCB0aGlzLCBhcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHBhaXJbMV0sIHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgcHJlZGljYXRlIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aFxuICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBhIGdpdmVuIG9iamVjdCwgcmV0dXJuaW5nIGB0cnVlYCBpZlxuICAgICAqIGFsbCBwcmVkaWNhdGVzIHJldHVybiB0cnV0aHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zVG9gIHdpdGhcbiAgICAgKiBgc291cmNlYCBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAyLCAnYic6IDEgfSxcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLmNvbmZvcm1zKHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlQ29uZm9ybXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBgdmFsdWVgIHRvIGRldGVybWluZSB3aGV0aGVyIGEgZGVmYXVsdCB2YWx1ZSBzaG91bGQgYmUgcmV0dXJuZWQgaW5cbiAgICAgKiBpdHMgcGxhY2UuIFRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBgbnVsbGAsXG4gICAgICogb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKDEsIDEwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbyh1bmRlZmluZWQsIDEwKTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlZmF1bHRUbyh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gKHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgZ2l2ZW4gZnVuY3Rpb25zXG4gICAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1JpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvdyhbXy5hZGQsIHNxdWFyZV0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3cgPSBjcmVhdGVGbG93KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsb3dgIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0XG4gICAgICogaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvd1JpZ2h0KFtzcXVhcmUsIF8uYWRkXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvd1JpZ2h0ID0gY3JlYXRlRmxvdyh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi4gSWYgYGZ1bmNgIGlzIGEgcHJvcGVydHkgbmFtZSwgdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyB0aGVcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBnaXZlbiBlbGVtZW50LiBJZiBgZnVuY2AgaXMgYW4gYXJyYXkgb3Igb2JqZWN0LCB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnRcbiAgICAgKiBzb3VyY2UgcHJvcGVydGllcywgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSBbZnVuYz1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FsbGJhY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKFsndXNlcicsICdmcmVkJ10pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgXy5pdGVyYXRlZSgndXNlcicpKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIENyZWF0ZSBjdXN0b20gaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKiBfLml0ZXJhdGVlID0gXy53cmFwKF8uaXRlcmF0ZWUsIGZ1bmN0aW9uKGl0ZXJhdGVlLCBmdW5jKSB7XG4gICAgICogICByZXR1cm4gIV8uaXNSZWdFeHAoZnVuYykgPyBpdGVyYXRlZShmdW5jKSA6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAqICAgICByZXR1cm4gZnVuYy50ZXN0KHN0cmluZyk7XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIoWydhYmMnLCAnZGVmJ10sIC9lZi8pO1xuICAgICAqIC8vID0+IFsnZGVmJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpdGVyYXRlZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmFzZUl0ZXJhdGVlKHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicgPyBmdW5jIDogYmFzZUNsb25lKGZ1bmMsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBhIGdpdmVuXG4gICAgICogb2JqZWN0IGFuZCBgc291cmNlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGhhcyBlcXVpdmFsZW50XG4gICAgICogcHJvcGVydHkgdmFsdWVzLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5pc01hdGNoYCB3aXRoIGBzb3VyY2VgXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTXVsdGlwbGUgdmFsdWVzIGNhbiBiZSBjaGVja2VkIGJ5IGNvbWJpbmluZyBzZXZlcmFsIG1hdGNoZXJzXG4gICAgICogdXNpbmcgYF8ub3ZlclNvbWVgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ubWF0Y2hlcyh7ICdhJzogNCwgJ2MnOiA2IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm92ZXJTb21lKFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksIF8ubWF0Y2hlcyh7ICdhJzogNCB9KV0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZVxuICAgICAqIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdCB0byBgc3JjVmFsdWVgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZVxuICAgICAqIG9iamVjdCB2YWx1ZSBpcyBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3RcbiAgICAgKiBgc3JjVmFsdWVgIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlXG4gICAgICogYF8uaXNFcXVhbGAgZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTXVsdGlwbGUgdmFsdWVzIGNhbiBiZSBjaGVja2VkIGJ5IGNvbWJpbmluZyBzZXZlcmFsIG1hdGNoZXJzXG4gICAgICogdXNpbmcgYF8ub3ZlclNvbWVgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZChvYmplY3RzLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCAxKSwgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KV0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyU29tZShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIG1hdGNoZXNGdW5jID0gXy5vdmVyU29tZShbeyAnYSc6IDEgfSwgeyAnYSc6IDIgfV0pXG4gICAgICogdmFyIG1hdGNoZXNQcm9wZXJ0eUZ1bmMgPSBfLm92ZXJTb21lKFtbJ2EnLCAxXSwgWydhJywgMl1dKVxuICAgICAqL1xuICAgIHZhciBvdmVyU29tZSA9IGNyZWF0ZU92ZXIoYXJyYXlTb21lKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICAgIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5wcm9wZXJ0eWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdmFsdWUgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFswLCAxLCAyXSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICAgICAqIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gQSBzdGVwIG9mIGAtMWAgaXMgdXNlZCBpZiBhIG5lZ2F0aXZlXG4gICAgICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gICAgICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgtNCk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmFuZ2VgIGV4Y2VwdCB0aGF0IGl0IHBvcHVsYXRlcyB2YWx1ZXMgaW5cbiAgICAgKiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCg0KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgtNCk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNSk7XG4gICAgICogLy8gPT4gWzQsIDMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFsxNSwgMTAsIDUsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZVJpZ2h0ID0gY3JlYXRlUmFuZ2UodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gICAgICogLy8gPT4gW1tdLCBbXV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAgICAgKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLnN0dWJPYmplY3QpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3t9LCB7fV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1Yk9iamVjdCgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnJywgJyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlN0cmluZygpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJUcnVlKTtcbiAgICAgKiAvLyA9PiBbdHJ1ZSwgdHJ1ZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViVHJ1ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIGl0ZXJhdGVlIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mXG4gICAgICogZWFjaCBpbnZvY2F0aW9uLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMScsICcyJ11cbiAgICAgKlxuICAgICAqICBfLnRpbWVzKDQsIF8uY29uc3RhbnQoMCkpO1xuICAgICAqIC8vID0+IFswLCAwLCAwLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgaWYgKG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IE1BWF9BUlJBWV9MRU5HVEgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlKTtcbiAgICAgIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VUaW1lcyhsZW5ndGgsIGl0ZXJhdGVlKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICBpdGVyYXRlZShpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXVnZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0b3RhbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hZGQoNiwgNCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICB2YXIgYWRkID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihhdWdlbmQsIGFkZGVuZCkge1xuICAgICAgcmV0dXJuIGF1Z2VuZCArIGFkZGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdXAgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIHVwIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jZWlsKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiBfLmNlaWwoNi4wMDQsIDIpO1xuICAgICAqIC8vID0+IDYuMDFcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2MDQwLCAtMik7XG4gICAgICogLy8gPT4gNjEwMFxuICAgICAqL1xuICAgIHZhciBjZWlsID0gY3JlYXRlUm91bmQoJ2NlaWwnKTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlkZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aXNvciBUaGUgc2Vjb25kIG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHF1b3RpZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpdmlkZSg2LCA0KTtcbiAgICAgKiAvLyA9PiAxLjVcbiAgICAgKi9cbiAgICB2YXIgZGl2aWRlID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgcmV0dXJuIGRpdmlkZW5kIC8gZGl2aXNvcjtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgZG93biB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCBkb3duLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgZG93biB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIGRvd24gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDAuMDQ2LCAyKTtcbiAgICAgKiAvLyA9PiAwLjA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MDAwXG4gICAgICovXG4gICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoJ2Zsb29yJyk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1heChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWF4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heEJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1lYW4gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWVhbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuKGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGlkZW50aXR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lYW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBhdmVyYWdlZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLm1pbihbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGljYW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcHJvZHVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tdWx0aXBseSg2LCA0KTtcbiAgICAgKiAvLyA9PiAyNFxuICAgICAqL1xuICAgIHZhciBtdWx0aXBseSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obXVsdGlwbGllciwgbXVsdGlwbGljYW5kKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbGllciAqIG11bHRpcGxpY2FuZDtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNiwgMik7XG4gICAgICogLy8gPT4gNC4wMVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDEwMFxuICAgICAqL1xuICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3QgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW51ZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3VidHJhaGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VidHJhY3QoNiwgNCk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obWludWVuZCwgc3VidHJhaGVuZCkge1xuICAgICAgcmV0dXJuIG1pbnVlbmQgLSBzdWJ0cmFoZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIHN1bSBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1bShbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBpZGVudGl0eSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc3VtYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgc3VtbWVkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5zdW1CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW1CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtcbiAgICBsb2Rhc2guYXJ5ID0gYXJ5O1xuICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247XG4gICAgbG9kYXNoLmFzc2lnbkluID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtcbiAgICBsb2Rhc2guYXNzaWduV2l0aCA9IGFzc2lnbldpdGg7XG4gICAgbG9kYXNoLmF0ID0gYXQ7XG4gICAgbG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtcbiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7XG4gICAgbG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO1xuICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICBsb2Rhc2guY2FzdEFycmF5ID0gY2FzdEFycmF5O1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29uY2F0ID0gY29uY2F0O1xuICAgIGxvZGFzaC5jb25kID0gY29uZDtcbiAgICBsb2Rhc2guY29uZm9ybXMgPSBjb25mb3JtcztcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VCeSA9IGRpZmZlcmVuY2VCeTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZVdpdGggPSBkaWZmZXJlbmNlV2l0aDtcbiAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgbG9kYXNoLmRyb3BSaWdodCA9IGRyb3BSaWdodDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0V2hpbGUgPSBkcm9wUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgIGxvZGFzaC5maWxsID0gZmlsbDtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0TWFwID0gZmxhdE1hcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlZXAgPSBmbGF0TWFwRGVlcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlcHRoID0gZmxhdE1hcERlcHRoO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZmxhdHRlbkRlZXAgPSBmbGF0dGVuRGVlcDtcbiAgICBsb2Rhc2guZmxhdHRlbkRlcHRoID0gZmxhdHRlbkRlcHRoO1xuICAgIGxvZGFzaC5mbGlwID0gZmxpcDtcbiAgICBsb2Rhc2guZmxvdyA9IGZsb3c7XG4gICAgbG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtcbiAgICBsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO1xuICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9uc0luID0gZnVuY3Rpb25zSW47XG4gICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25XaXRoID0gaW50ZXJzZWN0aW9uV2l0aDtcbiAgICBsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O1xuICAgIGxvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O1xuICAgIGxvZGFzaC5pbnZva2VNYXAgPSBpbnZva2VNYXA7XG4gICAgbG9kYXNoLml0ZXJhdGVlID0gaXRlcmF0ZWU7XG4gICAgbG9kYXNoLmtleUJ5ID0ga2V5Qnk7XG4gICAgbG9kYXNoLmtleXMgPSBrZXlzO1xuICAgIGxvZGFzaC5rZXlzSW4gPSBrZXlzSW47XG4gICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICBsb2Rhc2gubWFwS2V5cyA9IG1hcEtleXM7XG4gICAgbG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbiAgICBsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgbG9kYXNoLm1hdGNoZXNQcm9wZXJ0eSA9IG1hdGNoZXNQcm9wZXJ0eTtcbiAgICBsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7XG4gICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgbG9kYXNoLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbiAgICBsb2Rhc2gubWV0aG9kID0gbWV0aG9kO1xuICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5uZWdhdGUgPSBuZWdhdGU7XG4gICAgbG9kYXNoLm50aEFyZyA9IG50aEFyZztcbiAgICBsb2Rhc2gub21pdCA9IG9taXQ7XG4gICAgbG9kYXNoLm9taXRCeSA9IG9taXRCeTtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLm9yZGVyQnkgPSBvcmRlckJ5O1xuICAgIGxvZGFzaC5vdmVyID0gb3ZlcjtcbiAgICBsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztcbiAgICBsb2Rhc2gub3ZlckV2ZXJ5ID0gb3ZlckV2ZXJ5O1xuICAgIGxvZGFzaC5vdmVyU29tZSA9IG92ZXJTb21lO1xuICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICBsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O1xuICAgIGxvZGFzaC5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgIGxvZGFzaC5waWNrQnkgPSBwaWNrQnk7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucHVsbEFsbCA9IHB1bGxBbGw7XG4gICAgbG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtcbiAgICBsb2Rhc2gucHVsbEFsbFdpdGggPSBwdWxsQWxsV2l0aDtcbiAgICBsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yYW5nZVJpZ2h0ID0gcmFuZ2VSaWdodDtcbiAgICBsb2Rhc2gucmVhcmcgPSByZWFyZztcbiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgIGxvZGFzaC5yZW1vdmUgPSByZW1vdmU7XG4gICAgbG9kYXNoLnJlc3QgPSByZXN0O1xuICAgIGxvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBsb2Rhc2guc2FtcGxlU2l6ZSA9IHNhbXBsZVNpemU7XG4gICAgbG9kYXNoLnNldCA9IHNldDtcbiAgICBsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zbGljZSA9IHNsaWNlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXEgPSBzb3J0ZWRVbmlxO1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxQnkgPSBzb3J0ZWRVbmlxQnk7XG4gICAgbG9kYXNoLnNwbGl0ID0gc3BsaXQ7XG4gICAgbG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtcbiAgICBsb2Rhc2gudGFpbCA9IHRhaWw7XG4gICAgbG9kYXNoLnRha2UgPSB0YWtlO1xuICAgIGxvZGFzaC50YWtlUmlnaHQgPSB0YWtlUmlnaHQ7XG4gICAgbG9kYXNoLnRha2VSaWdodFdoaWxlID0gdGFrZVJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbiAgICBsb2Rhc2gudGFwID0gdGFwO1xuICAgIGxvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO1xuICAgIGxvZGFzaC50aHJ1ID0gdGhydTtcbiAgICBsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgbG9kYXNoLnRvUGFpcnMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLnRvUGF0aCA9IHRvUGF0aDtcbiAgICBsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5hcnkgPSB1bmFyeTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7XG4gICAgbG9kYXNoLnVuaW9uV2l0aCA9IHVuaW9uV2l0aDtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtcbiAgICBsb2Rhc2gudW5pcVdpdGggPSB1bmlxV2l0aDtcbiAgICBsb2Rhc2gudW5zZXQgPSB1bnNldDtcbiAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICBsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO1xuICAgIGxvZGFzaC51cGRhdGUgPSB1cGRhdGU7XG4gICAgbG9kYXNoLnVwZGF0ZVdpdGggPSB1cGRhdGVXaXRoO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53b3JkcyA9IHdvcmRzO1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC54b3JCeSA9IHhvckJ5O1xuICAgIGxvZGFzaC54b3JXaXRoID0geG9yV2l0aDtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnppcE9iamVjdERlZXAgPSB6aXBPYmplY3REZWVwO1xuICAgIGxvZGFzaC56aXBXaXRoID0gemlwV2l0aDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lbnRyaWVzID0gdG9QYWlycztcbiAgICBsb2Rhc2guZW50cmllc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guZXh0ZW5kV2l0aCA9IGFzc2lnbkluV2l0aDtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBtaXhpbihsb2Rhc2gsIGxvZGFzaCk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWRkID0gYWRkO1xuICAgIGxvZGFzaC5hdHRlbXB0ID0gYXR0ZW1wdDtcbiAgICBsb2Rhc2guY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xuICAgIGxvZGFzaC5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbiAgICBsb2Rhc2guY2VpbCA9IGNlaWw7XG4gICAgbG9kYXNoLmNsYW1wID0gY2xhbXA7XG4gICAgbG9kYXNoLmNsb25lID0gY2xvbmU7XG4gICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICBsb2Rhc2guY2xvbmVEZWVwV2l0aCA9IGNsb25lRGVlcFdpdGg7XG4gICAgbG9kYXNoLmNsb25lV2l0aCA9IGNsb25lV2l0aDtcbiAgICBsb2Rhc2guY29uZm9ybXNUbyA9IGNvbmZvcm1zVG87XG4gICAgbG9kYXNoLmRlYnVyciA9IGRlYnVycjtcbiAgICBsb2Rhc2guZGVmYXVsdFRvID0gZGVmYXVsdFRvO1xuICAgIGxvZGFzaC5kaXZpZGUgPSBkaXZpZGU7XG4gICAgbG9kYXNoLmVuZHNXaXRoID0gZW5kc1dpdGg7XG4gICAgbG9kYXNoLmVxID0gZXE7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmZsb29yID0gZmxvb3I7XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmdldCA9IGdldDtcbiAgICBsb2Rhc2guZ3QgPSBndDtcbiAgICBsb2Rhc2guZ3RlID0gZ3RlO1xuICAgIGxvZGFzaC5oYXMgPSBoYXM7XG4gICAgbG9kYXNoLmhhc0luID0gaGFzSW47XG4gICAgbG9kYXNoLmhlYWQgPSBoZWFkO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmNsdWRlcyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaW5SYW5nZSA9IGluUmFuZ2U7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7XG4gICAgbG9kYXNoLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZU9iamVjdCA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzQnVmZmVyID0gaXNCdWZmZXI7XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRXF1YWxXaXRoID0gaXNFcXVhbFdpdGg7XG4gICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc0xlbmd0aCA9IGlzTGVuZ3RoO1xuICAgIGxvZGFzaC5pc01hcCA9IGlzTWFwO1xuICAgIGxvZGFzaC5pc01hdGNoID0gaXNNYXRjaDtcbiAgICBsb2Rhc2guaXNNYXRjaFdpdGggPSBpc01hdGNoV2l0aDtcbiAgICBsb2Rhc2guaXNOYU4gPSBpc05hTjtcbiAgICBsb2Rhc2guaXNOYXRpdmUgPSBpc05hdGl2ZTtcbiAgICBsb2Rhc2guaXNOaWwgPSBpc05pbDtcbiAgICBsb2Rhc2guaXNOdWxsID0gaXNOdWxsO1xuICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgIGxvZGFzaC5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGxvZGFzaC5pc09iamVjdExpa2UgPSBpc09iamVjdExpa2U7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1NhZmVJbnRlZ2VyID0gaXNTYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNTZXQgPSBpc1NldDtcbiAgICBsb2Rhc2guaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBsb2Rhc2guaXNTeW1ib2wgPSBpc1N5bWJvbDtcbiAgICBsb2Rhc2guaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuICAgIGxvZGFzaC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGxvZGFzaC5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG4gICAgbG9kYXNoLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcbiAgICBsb2Rhc2guam9pbiA9IGpvaW47XG4gICAgbG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtcbiAgICBsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7XG4gICAgbG9kYXNoLmx0ID0gbHQ7XG4gICAgbG9kYXNoLmx0ZSA9IGx0ZTtcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5tYXhCeSA9IG1heEJ5O1xuICAgIGxvZGFzaC5tZWFuID0gbWVhbjtcbiAgICBsb2Rhc2gubWVhbkJ5ID0gbWVhbkJ5O1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm1pbkJ5ID0gbWluQnk7XG4gICAgbG9kYXNoLnN0dWJBcnJheSA9IHN0dWJBcnJheTtcbiAgICBsb2Rhc2guc3R1YkZhbHNlID0gc3R1YkZhbHNlO1xuICAgIGxvZGFzaC5zdHViT2JqZWN0ID0gc3R1Yk9iamVjdDtcbiAgICBsb2Rhc2guc3R1YlN0cmluZyA9IHN0dWJTdHJpbmc7XG4gICAgbG9kYXNoLnN0dWJUcnVlID0gc3R1YlRydWU7XG4gICAgbG9kYXNoLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgbG9kYXNoLm50aCA9IG50aDtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhZCA9IHBhZDtcbiAgICBsb2Rhc2gucGFkRW5kID0gcGFkRW5kO1xuICAgIGxvZGFzaC5wYWRTdGFydCA9IHBhZFN0YXJ0O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgIGxvZGFzaC5yZXBsYWNlID0gcmVwbGFjZTtcbiAgICBsb2Rhc2gucmVzdWx0ID0gcmVzdWx0O1xuICAgIGxvZGFzaC5yb3VuZCA9IHJvdW5kO1xuICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNuYWtlQ2FzZSA9IHNuYWtlQ2FzZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4QnkgPSBzb3J0ZWRJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleE9mID0gc29ydGVkSW5kZXhPZjtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4ID0gc29ydGVkTGFzdEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhCeSA9IHNvcnRlZExhc3RJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhPZiA9IHNvcnRlZExhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5zdGFydENhc2UgPSBzdGFydENhc2U7XG4gICAgbG9kYXNoLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuICAgIGxvZGFzaC5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIGxvZGFzaC5zdW0gPSBzdW07XG4gICAgbG9kYXNoLnN1bUJ5ID0gc3VtQnk7XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvRmluaXRlID0gdG9GaW5pdGU7XG4gICAgbG9kYXNoLnRvSW50ZWdlciA9IHRvSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9MZW5ndGggPSB0b0xlbmd0aDtcbiAgICBsb2Rhc2gudG9Mb3dlciA9IHRvTG93ZXI7XG4gICAgbG9kYXNoLnRvTnVtYmVyID0gdG9OdW1iZXI7XG4gICAgbG9kYXNoLnRvU2FmZUludGVnZXIgPSB0b1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGxvZGFzaC50b1VwcGVyID0gdG9VcHBlcjtcbiAgICBsb2Rhc2gudHJpbSA9IHRyaW07XG4gICAgbG9kYXNoLnRyaW1FbmQgPSB0cmltRW5kO1xuICAgIGxvZGFzaC50cmltU3RhcnQgPSB0cmltU3RhcnQ7XG4gICAgbG9kYXNoLnRydW5jYXRlID0gdHJ1bmNhdGU7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgbG9kYXNoLnVwcGVyQ2FzZSA9IHVwcGVyQ2FzZTtcbiAgICBsb2Rhc2gudXBwZXJGaXJzdCA9IHVwcGVyRmlyc3Q7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZmlyc3QgPSBoZWFkO1xuXG4gICAgbWl4aW4obG9kYXNoLCAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge307XG4gICAgICBiYXNlRm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLnByb3RvdHlwZSwgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpKSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbG9kYXNoLlZFUlNJT04gPSBWRVJTSU9OO1xuXG4gICAgLy8gQXNzaWduIGRlZmF1bHQgcGxhY2Vob2xkZXJzLlxuICAgIGFycmF5RWFjaChbJ2JpbmQnLCAnYmluZEtleScsICdjdXJyeScsICdjdXJyeVJpZ2h0JywgJ3BhcnRpYWwnLCAncGFydGlhbFJpZ2h0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIGxvZGFzaFttZXRob2ROYW1lXS5wbGFjZWhvbGRlciA9IGxvZGFzaDtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmRyb3BgIGFuZCBgXy50YWtlYCB2YXJpYW50cy5cbiAgICBhcnJheUVhY2goWydkcm9wJywgJ3Rha2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgbiA9IG4gPT09IHVuZGVmaW5lZCA/IDEgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKG4pLCAwKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuX19maWx0ZXJlZF9fICYmICFpbmRleClcbiAgICAgICAgICA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKVxuICAgICAgICAgIDogdGhpcy5jbG9uZSgpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSBuYXRpdmVNaW4obiwgcmVzdWx0Ll9fdGFrZUNvdW50X18pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5fX3ZpZXdzX18ucHVzaCh7XG4gICAgICAgICAgICAnc2l6ZSc6IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKSxcbiAgICAgICAgICAgICd0eXBlJzogbWV0aG9kTmFtZSArIChyZXN1bHQuX19kaXJfXyA8IDAgPyAnUmlnaHQnIDogJycpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgJ1JpZ2h0J10gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0aGF0IGFjY2VwdCBhbiBgaXRlcmF0ZWVgIHZhbHVlLlxuICAgIGFycmF5RWFjaChbJ2ZpbHRlcicsICdtYXAnLCAndGFrZVdoaWxlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSxcbiAgICAgICAgICBpc0ZpbHRlciA9IHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRyB8fCB0eXBlID09IExBWllfV0hJTEVfRkxBRztcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18ucHVzaCh7XG4gICAgICAgICAgJ2l0ZXJhdGVlJzogZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLFxuICAgICAgICAgICd0eXBlJzogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHJlc3VsdC5fX2ZpbHRlcmVkX18gfHwgaXNGaWx0ZXI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaGVhZGAgYW5kIGBfLmxhc3RgLlxuICAgIGFycmF5RWFjaChbJ2hlYWQnLCAnbGFzdCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHRha2VOYW1lID0gJ3Rha2UnICsgKGluZGV4ID8gJ1JpZ2h0JyA6ICcnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmluaXRpYWxgIGFuZCBgXy50YWlsYC5cbiAgICBhcnJheUVhY2goWydpbml0aWFsJywgJ3RhaWwnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkcm9wTmFtZSA9ICdkcm9wJyArIChpbmRleCA/ICcnIDogJ1JpZ2h0Jyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzW2Ryb3BOYW1lXSgxKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihwcmVkaWNhdGUpLmhlYWQoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmRMYXN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzO1xuICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18gJiYgKHN0YXJ0ID4gMCB8fCBlbmQgPCAwKSkge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC50YWtlUmlnaHQoLXN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRyb3Aoc3RhcnQpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHRvSW50ZWdlcihlbmQpO1xuICAgICAgICByZXN1bHQgPSBlbmQgPCAwID8gcmVzdWx0LmRyb3BSaWdodCgtZW5kKSA6IHJlc3VsdC50YWtlKGVuZCAtIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLnRha2VXaGlsZShwcmVkaWNhdGUpLnJldmVyc2UoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2UoTUFYX0FSUkFZX0xFTkdUSCk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGlzVGFrZXIgPSAvXig/OmhlYWR8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbaXNUYWtlciA/ICgndGFrZScgKyAobWV0aG9kTmFtZSA9PSAnbGFzdCcgPyAnUmlnaHQnIDogJycpKSA6IG1ldGhvZE5hbWVdLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IGlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBpZiAoIWxvZGFzaEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgYXJncyA9IGlzVGFrZXIgPyBbMV0gOiBhcmd1bWVudHMsXG4gICAgICAgICAgICBpc0xhenkgPSB2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLFxuICAgICAgICAgICAgaXRlcmF0ZWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcblxuICAgICAgICB2YXIgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2hGdW5jLmFwcGx5KGxvZGFzaCwgYXJyYXlQdXNoKFt2YWx1ZV0sIGFyZ3MpKTtcbiAgICAgICAgICByZXR1cm4gKGlzVGFrZXIgJiYgY2hhaW5BbGwpID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh1c2VMYXp5ICYmIGNoZWNrSXRlcmF0ZWUgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAvLyBBdm9pZCBsYXp5IHVzZSBpZiB0aGUgaXRlcmF0ZWUgaGFzIGEgXCJsZW5ndGhcIiB2YWx1ZSBvdGhlciB0aGFuIGAxYC5cbiAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICBpc0h5YnJpZCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICBpc1Vud3JhcHBlZCA9IHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwsXG4gICAgICAgICAgICBvbmx5TGF6eSA9IGlzTGF6eSAmJiAhaXNIeWJyaWQ7XG5cbiAgICAgICAgaWYgKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSkge1xuICAgICAgICAgIHZhbHVlID0gb25seUxhenkgPyB2YWx1ZSA6IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fLnB1c2goeyAnZnVuYyc6IHRocnUsICdhcmdzJzogW2ludGVyY2VwdG9yXSwgJ3RoaXNBcmcnOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vud3JhcHBlZCAmJiBvbmx5TGF6eSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgIHJldHVybiBpc1Vud3JhcHBlZCA/IChpc1Rha2VyID8gcmVzdWx0LnZhbHVlKClbMF0gOiByZXN1bHQudmFsdWUoKSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBBcnJheWAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYXJyYXlFYWNoKFsncG9wJywgJ3B1c2gnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UHJvdG9bbWV0aG9kTmFtZV0sXG4gICAgICAgICAgY2hhaW5OYW1lID0gL14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpID8gJ3RhcCcgOiAndGhydScsXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gL14oPzpwb3B8c2hpZnQpJC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tjaGFpbk5hbWVdKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gTWFwIG1pbmlmaWVkIG1ldGhvZCBuYW1lcyB0byB0aGVpciByZWFsIG5hbWVzLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgIGlmIChsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHZhciBrZXkgPSBsb2Rhc2hGdW5jLm5hbWUgKyAnJztcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywga2V5KSkge1xuICAgICAgICAgIHJlYWxOYW1lc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmVhbE5hbWVzW2tleV0ucHVzaCh7ICduYW1lJzogbWV0aG9kTmFtZSwgJ2Z1bmMnOiBsb2Rhc2hGdW5jIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhbE5hbWVzW2NyZWF0ZUh5YnJpZCh1bmRlZmluZWQsIFdSQVBfQklORF9LRVlfRkxBRykubmFtZV0gPSBbe1xuICAgICAgJ25hbWUnOiAnd3JhcHBlcicsXG4gICAgICAnZnVuYyc6IHVuZGVmaW5lZFxuICAgIH1dO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExhenlXcmFwcGVyYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY2xvbmUgPSBsYXp5Q2xvbmU7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJldmVyc2UgPSBsYXp5UmV2ZXJzZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBsYXp5VmFsdWU7XG5cbiAgICAvLyBBZGQgY2hhaW4gc2VxdWVuY2UgbWV0aG9kcyB0byB0aGUgYGxvZGFzaGAgd3JhcHBlci5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmF0ID0gd3JhcHBlckF0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY2hhaW4gPSB3cmFwcGVyQ2hhaW47XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb21taXQgPSB3cmFwcGVyQ29tbWl0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUubmV4dCA9IHdyYXBwZXJOZXh0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucGxhbnQgPSB3cmFwcGVyUGxhbnQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b0pTT04gPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlO1xuXG4gICAgLy8gQWRkIGxhenkgYWxpYXNlcy5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmZpcnN0ID0gbG9kYXNoLnByb3RvdHlwZS5oZWFkO1xuXG4gICAgaWYgKHN5bUl0ZXJhdG9yKSB7XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW3N5bUl0ZXJhdG9yXSA9IHdyYXBwZXJUb0l0ZXJhdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9KTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgbG9kYXNoLlxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgTG9kYXNoIG9uIHRoZSBnbG9iYWwgb2JqZWN0IHRvIHByZXZlbnQgZXJyb3JzIHdoZW4gTG9kYXNoIGlzXG4gICAgLy8gbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EIGxvYWRlci5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIC8vIFVzZSBgXy5ub0NvbmZsaWN0YCB0byByZW1vdmUgTG9kYXNoIGZyb20gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIENoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGl0LlxuICBlbHNlIGlmIChmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBOb2RlLmpzLlxuICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIHN1cHBvcnQuXG4gICAgZnJlZUV4cG9ydHMuXyA9IF87XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9idWxtYS5zYXNzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2J1bG1hLnNhc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuaW1wb3J0ICdidWxtYSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbmltcG9ydCB7IGNyZWF0ZUxpc3QgfSBmcm9tICcuL21vZHVsZSc7XG5cbmltcG9ydCB7IGZpc2hlcyB9IGZyb20gJy4vZGF0YS9maXNoLy9hbGxmaXNoLmpzJztcblxuaW1wb3J0IHsgbG9hZEM0cm4gfSBmcm9tICcuL2M0cm4uanMnO1xuXG5cblxuXG5cbmZ1bmN0aW9uIHRyYWNrRGF0YUlkQ2xpY2tzKGRhdGFJZFZhbHVlKSB7XG4gICAgZ3RhZygnZXZlbnQnLCAnY2xpYycsIHtcbiAgICAgICAgJ2V2ZW50X2NhdGVnb3J5JzogJ2JvdXRvbicsXG4gICAgICAgICdldmVudF9hY3Rpb24nOiAnY2xpYycsXG4gICAgICAgICdldmVudF9sYWJlbCc6IGRhdGFJZFZhbHVlXG4gICAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBnZXRRdWVyeVBhcmFtVmFsdWUoa2V5KSB7XG4gICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICBjb25zdCBwYXJhbSA9IHVybFBhcmFtcy5nZXQoa2V5KTtcbiAgICByZXR1cm4gcGFyYW07XG59XG5cblxuZnVuY3Rpb24gZ2V0Q29va2llVmFsdWUobmFtZSkgeyAgICBcbiAgICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBjb29raWVzW2ldLnRyaW0oKTtcbiAgICAgIGlmIChjb29raWUuc3RhcnRzV2l0aChuYW1lICsgJz0nKSkge1xuICAgICAgICByZXR1cm4gY29va2llLnN1YnN0cmluZyhuYW1lLmxlbmd0aCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgXG4gIFxud2luZG93LmxhbmcgPSBnZXRDb29raWVWYWx1ZShcImxhbmd1YWdlXCIpID8gZ2V0Q29va2llVmFsdWUoXCJsYW5ndWFnZVwiKSA6IFwiZW5cIjtcblxuXG5mdW5jdGlvbiBmaW5kTWF0Y2hpbmdJZChvcmlnaW5hbElkLCB0b2xlcmFuY2UpIHtcbiAgICBjb25zdCBvcmlnaW5hbEZpc2ggPSBfLmZpbmQoZmlzaGVzLCB7IGlkOiBvcmlnaW5hbElkIH0pO1xuXG4gICAgaWYgKCFvcmlnaW5hbEZpc2gpIHtcbiAgICAgICAgcmV0dXJuIFtdOyAvLyBBdWN1bmUgY29ycmVzcG9uZGFuY2UgdHJvdXbDqWVcbiAgICB9XG5cbiAgICBjb25zdCBvcmlnaW5hbFBvc2l0aW9ucyA9IG9yaWdpbmFsRmlzaC5wb3NpdGlvbnM7XG5cbiAgICBjb25zdCBtYXRjaGluZ0Zpc2ggPSBfLmZpbHRlcihmaXNoZXMsIChmKSA9PiB7XG4gICAgICAgIGlmIChmLmlkID09PSBvcmlnaW5hbElkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIElnbm9yZXIgbCdJRCBkJ29yaWdpbmVcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlzTWF0Y2hpbmdQb3NpdGlvbiA9IF8uc29tZShmLnBvc2l0aW9ucywgKHBvcykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIF8uc29tZShvcmlnaW5hbFBvc2l0aW9ucywgKG9yaWdpbmFsUG9zLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWF0Y2hpbmcgPSAoXG4gICAgICAgICAgICAgICAgICAgIHBvcy54ID4gKG9yaWdpbmFsUG9zLnggLSB0b2xlcmFuY2UpICYmXG4gICAgICAgICAgICAgICAgICAgIHBvcy54IDwgKG9yaWdpbmFsUG9zLnggKyB0b2xlcmFuY2UpICYmXG4gICAgICAgICAgICAgICAgICAgIHBvcy55ID4gKG9yaWdpbmFsUG9zLnkgLSB0b2xlcmFuY2UpICYmXG4gICAgICAgICAgICAgICAgICAgIHBvcy55IDwgKG9yaWdpbmFsUG9zLnkgKyB0b2xlcmFuY2UpXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc01hdGNoaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGYub3JpZ2luYWxQb3NpdGlvbiA9IGluZGV4OyAvLyBBam91dGVyIG9yaWdpbmFsUG9zaXRpb24gw6AgbCdvYmpldCBjb3JyZXNwb25kYW50XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTWF0Y2hpbmc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGlzTWF0Y2hpbmdQb3NpdGlvbiAmJiBmLm1hcCA9PT0gb3JpZ2luYWxGaXNoLm1hcDtcbiAgICB9KTtcblxuICAgIHJldHVybiBfLm1hcChtYXRjaGluZ0Zpc2gsIChmaXNoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nUG9zaXRpb25zID0gXy5maWx0ZXIoZmlzaC5wb3NpdGlvbnMsIChwb3MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgcG9zLnggPiAob3JpZ2luYWxQb3NpdGlvbnNbMF0ueCAtIHRvbGVyYW5jZSkgJiZcbiAgICAgICAgICAgICAgICBwb3MueCA8IChvcmlnaW5hbFBvc2l0aW9uc1swXS54ICsgdG9sZXJhbmNlKSAmJlxuICAgICAgICAgICAgICAgIHBvcy55ID4gKG9yaWdpbmFsUG9zaXRpb25zWzBdLnkgLSB0b2xlcmFuY2UpICYmXG4gICAgICAgICAgICAgICAgcG9zLnkgPCAob3JpZ2luYWxQb3NpdGlvbnNbMF0ueSArIHRvbGVyYW5jZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG5laWdoYm9yUG9zaXRpb25zID0gXy5tYXAobWF0Y2hpbmdQb3NpdGlvbnMsIChwb3MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogcG9zLngsXG4gICAgICAgICAgICAgICAgeTogcG9zLnlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogZmlzaC5pZCxcbiAgICAgICAgICAgIG5laWdoYm9yUG9zaXRpb25zOiBuZWlnaGJvclBvc2l0aW9ucyxcbiAgICAgICAgICAgIG5hbWU6IGZpc2gubmFtZSxcbiAgICAgICAgICAgIG9yaWdpbmFsUG9zaXRpb246IGZpc2gub3JpZ2luYWxQb3NpdGlvblxuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcblxuICAgIGxldCBjdXJyZW50SWQgPSBcIjAxXCI7XG4gICAgbGV0IGN1cnJlbnRGaXNoID0gXy5maW5kKGZpc2hlcywgeyBpZDogY3VycmVudElkIH0pO1xuICAgIGxldCBjdXJyZW50TWluUG9pbnRzID0gKGN1cnJlbnRGaXNoLnR5cGUgPT0gXCJjb21tb25cIiA/IDMwMCA6IGN1cnJlbnRGaXNoLnR5cGUgPT0gXCJyYXJlXCIgPyA0MDAgOiBjdXJyZW50RmlzaC50eXBlID09IFwiZXBpY1wiID8gNTAwIDogNTAwMClcbiAgICBsZXQgdW5pdCA9IFwia2dzXCI7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53ZWlnaHQtdG9nZ2xlLWNvbnRhaW5lciBpbnB1dFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlKSA9PiB7XG4gICAgICAgIHVuaXQgPSBlLnRhcmdldC5jaGVja2VkID8gXCJrZ3NcIiA6IFwibGJzXCI7XG4gICAgICAgIEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXVuaXRcIikpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtdW5pdFwiLCB1bml0KTtcbiAgICAgICAgfSlcbiAgICAgICAgbG9hZEZpc2goY3VycmVudElkLCB3aW5kb3cubGFuZyk7XG4gICAgfSlcblxuICAgIC8vIEZ1bmN0aW9ucyB0byBvcGVuIGFuZCBjbG9zZSBhIG1vZGFsXG4gICAgZnVuY3Rpb24gb3Blbk1vZGFsKCRlbCkge1xuICAgICAgICAkZWwuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2VNb2RhbCgkZWwpIHtcbiAgICAgICAgJGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlQWxsTW9kYWxzKCkge1xuICAgICAgICAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsJykgfHwgW10pLmZvckVhY2goKCRtb2RhbCkgPT4ge1xuICAgICAgICAgICAgY2xvc2VNb2RhbCgkbW9kYWwpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgYSBjbGljayBldmVudCBvbiBidXR0b25zIHRvIG9wZW4gYSBzcGVjaWZpYyBtb2RhbFxuICAgIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtbW9kYWwtdHJpZ2dlcicpIHx8IFtdKS5mb3JFYWNoKCgkdHJpZ2dlcikgPT4ge1xuICAgICAgICBjb25zdCBtb2RhbCA9ICR0cmlnZ2VyLmRhdGFzZXQudGFyZ2V0O1xuICAgICAgICBjb25zdCAkdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kYWwpO1xuICAgICAgICAkdHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIG9wZW5Nb2RhbCgkdGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYSBjbGljayBldmVudCBvbiB2YXJpb3VzIGNoaWxkIGVsZW1lbnRzIHRvIGNsb3NlIHRoZSBwYXJlbnQgbW9kYWxcbiAgICAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsLWJhY2tncm91bmQsIC5tb2RhbC1jbG9zZSwgLm1vZGFsLWNhcmQtaGVhZCAuZGVsZXRlLCAubW9kYWwtY2FyZC1mb290IC5idXR0b24nKSB8fCBbXSkuZm9yRWFjaCgoJGNsb3NlKSA9PiB7XG4gICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkY2xvc2UuY2xvc2VzdCgnLm1vZGFsJyk7XG5cbiAgICAgICAgJGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY2xvc2VNb2RhbCgkdGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYSBrZXlib2FyZCBldmVudCB0byBjbG9zZSBhbGwgbW9kYWxzXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBlID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xuXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3KSB7IC8vIEVzY2FwZSBrZXlcbiAgICAgICAgICAgIGNsb3NlQWxsTW9kYWxzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlU2lkZU1lbnUoKSB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY3NpZGViYXJcIikuY2xhc3NMaXN0LnRvZ2dsZShcInZpc2libGVcIik7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVudS10b2dnbGVcIikuY2xhc3NMaXN0LnRvZ2dsZShcInRvZ2dsZS1pcy12aXNpYmxlXCIpO1xuICAgIH1cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lbnUtdG9nZ2xlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHRvZ2dsZVNpZGVNZW51KCk7XG4gICAgfSlcblxuICAgIC8qKlNXSVBFICovXG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSwgZmFsc2UpO1xuXG4gICAgdmFyIHhEb3duID0gbnVsbDtcbiAgICB2YXIgeURvd24gPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChldnQpIHtcbiAgICAgICAgY29uc3QgZmlyc3RUb3VjaCA9IGV2dC50b3VjaGVzWzBdO1xuICAgICAgICB4RG93biA9IGZpcnN0VG91Y2guY2xpZW50WDtcbiAgICAgICAgeURvd24gPSBmaXJzdFRvdWNoLmNsaWVudFk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZShldnQpIHtcbiAgICAgICAgaWYgKCF4RG93biB8fCAheURvd24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB4VXAgPSBldnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICB2YXIgeVVwID0gZXZ0LnRvdWNoZXNbMF0uY2xpZW50WTtcblxuICAgICAgICB2YXIgeERpZmYgPSB4RG93biAtIHhVcDtcbiAgICAgICAgdmFyIHlEaWZmID0geURvd24gLSB5VXA7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHhEaWZmKSA+IE1hdGguYWJzKHlEaWZmKSkge1xuICAgICAgICAgICAgaWYgKHhEaWZmID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFN3aXBlIHRvIHRoZSBsZWZ0XG4gICAgICAgICAgICAgICAgaWYgKCFpc1RhcmdldEVsZW1lbnRSYW5nZShldnQudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyU3dpcGVMZWZ0RXZlbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFN3aXBlIHRvIHRoZSByaWdodFxuICAgICAgICAgICAgICAgIGlmICghaXNUYXJnZXRFbGVtZW50UmFuZ2UoZXZ0LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlclN3aXBlUmlnaHRFdmVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc2V0IHZhbHVlc1xuICAgICAgICB4RG93biA9IG51bGw7XG4gICAgICAgIHlEb3duID0gbnVsbDtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaXNUYXJnZXRFbGVtZW50UmFuZ2UodGFyZ2V0RWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0RWxlbWVudC5pZCA9PT0gJ3JhbmdlJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyU3dpcGVMZWZ0RXZlbnQoKSB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY3NpZGViYXJcIikuY2xhc3NMaXN0LnJlbW92ZShcInZpc2libGVcIilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyU3dpcGVSaWdodEV2ZW50KCkge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNzaWRlYmFyXCIpLmNsYXNzTGlzdC5hZGQoXCJ2aXNpYmxlXCIpXG4gICAgfVxuXG5cbiAgICBmaXNoZXMuZm9yRWFjaChmaXNoID0+IHsgICAgXG4gICAgICAgIGNyZWF0ZUxpc3QoZmlzaCwgd2luZG93LmxhbmcpO1xuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBiaW5kRXZlbnRMaXN0ZW5lclRvSXRlbSgpIHtcbiAgICAgICAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLml0ZW1cIikpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3VycmVudElkID0gaXRlbS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIpXG4gICAgICAgICAgICAgICAgbG9hZEZpc2goY3VycmVudElkLCB3aW5kb3cubGFuZykgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdHJpZ2dlclN3aXBlUmlnaHRFdmVudCgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGJpbmRFdmVudExpc3RlbmVyVG9JdGVtKCk7XG5cbiAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1sYW5nXCIpKS5mb3JFYWNoKGVsZW0gPT4ge1xuICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZC1sYW5ndWFnZVwiKTtcbiAgICB9KTtcbiAgICBcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtbGFuZz0nXCIgKyB3aW5kb3cubGFuZyArIFwiJ1wiKS5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWQtbGFuZ3VhZ2VcIilcblxuICAgIEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWxhbmdcIikpLmZvckVhY2gobGFuZ0J0biA9PiB7XG4gICAgICAgIGxhbmdCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHsgICAgIFxuICAgICAgICAgICAgd2luZG93LmxhbmcgPSBsYW5nQnRuLmdldEF0dHJpYnV0ZShcImRhdGEtbGFuZ1wiKSAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1sYW5nXCIpKS5mb3JFYWNoKGVsZW0gPT4ge1xuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkLWxhbmd1YWdlXCIpO1xuICAgICAgICAgICAgICAgIGxhbmdCdG4uY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkLWxhbmd1YWdlXCIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gXCJsYW5ndWFnZT1cIiArIHdpbmRvdy5sYW5nICsgXCI7IGV4cGlyZXM9RnJpLCAzMSBEZWMgOTk5OSAyMzo1OTo1OSBHTVRcIjsgIFxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmaXNoLWxpc3RcIikuaW5uZXJIVE1MID0gXCJcIjsgXG4gICAgICAgICAgICBmaXNoZXMuZm9yRWFjaChmaXNoID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY3JlYXRlTGlzdChmaXNoLCB3aW5kb3cubGFuZylcbiAgICAgICAgICAgIH0pOyAgICAgICAgIFxuICAgICAgICAgICAgYmluZEV2ZW50TGlzdGVuZXJUb0l0ZW0od2luZG93LmxhbmcpOyAgICAgICAgICAgICBcbiAgICAgICAgICAgIGxvYWRGaXNoKGN1cnJlbnRJZCwgd2luZG93LmxhbmcpICAgIFxuICAgICAgICB9KVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBsb2FkRmlzaChpZCkge1xuXG4gICAgICAgIC8vIFRPRE8gTkVJR0hCT1JcbiAgICAgICAgY29uc29sZS5sb2coZmluZE1hdGNoaW5nSWQoaWQsIDEwKSk7XG5cblxuXG4gICAgICAgIGNvbnN0IGZpc2ggPSBfLmZpbmQoZmlzaGVzLCB7IGlkOiBpZCB9KTtcbiAgICAgICAgY3VycmVudEZpc2ggPSBmaXNoO1xuXG4gICAgICAgIGN1cnJlbnRNaW5Qb2ludHMgPSAoY3VycmVudEZpc2gudHlwZSA9PSBcImNvbW1vblwiID8gMzAwIDogY3VycmVudEZpc2gudHlwZSA9PSBcInJhcmVcIiA/IDQwMCA6IGN1cnJlbnRGaXNoLnR5cGUgPT0gXCJlcGljXCIgPyA1MDAgOiA1MDAwKVxuXG4gICAgICAgIHVwZGF0ZVJhbmdlKCk7XG4gICAgICAgIEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi51bml0XCIpKS5mb3JFYWNoKGVsZW0gPT4ge1xuICAgICAgICAgICAgZWxlbS5pbm5lckhUTUwgPSB1bml0O1xuICAgICAgICB9KVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJhbmdlXCIpLnZhbHVlID0gNTA7XG5cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jZGF0YS1jb250YWluZXJcIikuc2V0QXR0cmlidXRlKFwiZGF0YS1tYXBcIiwgZmlzaC5tYXApO1xuXG4gICAgICAgIGNvbnN0IGlzSW4gPSBmaXNoLnNlYXNvbnNbbmV3IERhdGUoKS5nZXRNb250aCgpXSA/IFwiaW5cIiA6IFwib3V0XCI7XG5cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFzb24tbWVzc2FnZVwiKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBpc0luKTtcblxuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2Vhc29uLW1heC13ZWlnaHQgLm1tLXZhbHVlXCIpLmlubmVySFRNTCA9IChjdXJyZW50RmlzaFt1bml0XS5taW4gKyAoKGN1cnJlbnRGaXNoW3VuaXRdLm1heCAtIGN1cnJlbnRGaXNoW3VuaXRdLm1pbikgKiAwLjIpKS50b0ZpeGVkKDIpO1xuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2Vhc29uLW1heC1wb2ludHMgLm1tLXZhbHVlXCIpLmlubmVySFRNTCA9IGN1cnJlbnRNaW5Qb2ludHMgKyBjdXJyZW50TWluUG9pbnRzICogMC4yO1xuXG5cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuby1zaGFkb3dcIikuc2V0QXR0cmlidXRlKFwiZGF0YS1ub3NoYWRvd1wiLCB0eXBlb2YgY3VycmVudEZpc2guYXR0cmlidXRlc1swXS5zaGFkb3dbMF0gPT0gXCJ1bmRlZmluZWRcIiA/IHRydWUgOiBmYWxzZSk7XG5cbiAgICAgICAgY3VycmVudEZpc2guYXR0cmlidXRlcy5mb3JFYWNoKGF0dHJpYnV0ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVOYW1lID0gT2JqZWN0LmtleXMoYXR0cmlidXRlKVswXTtcbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1maXNoYXR0cmlidXRlPScke2F0dHJpYnV0ZU5hbWV9J11gKSB8fCBmYWxzZTtcbiAgICAgICAgICAgIGlmIChlbGVtKSB7XG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbShlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3ZnLWNvbnRhaW5lclwiKSkuZm9yRWFjaCgoc3ZnLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKFwiZGF0YS1jdXJyZW50LXN2Z1wiLCBhdHRyaWJ1dGVbYXR0cmlidXRlTmFtZV0uaW5jbHVkZXMoaW5kZXgpIHx8IGZhbHNlKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmlzaE5hbWVcIikuaW5uZXJIVE1MID0gZmlzaC5uYW1lW3dpbmRvdy5sYW5nXSA/IGZpc2gubmFtZVt3aW5kb3cubGFuZ10gOiBmaXNoLm5hbWUuZW47XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmlzaFR5cGVcIikuaW5uZXJIVE1MID0gZmlzaC50eXBlO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hcFwiKS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgYC4vaW1hZ2VzL21hcC0ke2Zpc2gubWFwfS5qcGdgKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYXBOYW1lXCIpLmlubmVySFRNTCA9IGZpc2gubWFwO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hcE5hbWVcIikuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgYG1hcC0ke2Zpc2gubWFwfWApXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9zaXRpb25Ob3RlXCIpLmlubmVySFRNTCA9IGZpc2gucG9zaXRpb25Ob3RlXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9zaXRpb25zLWNvbnRhaW5lclwiKS5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpc2gucG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBwb3NpdGlvbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNjcm9zc1wiKTtcbiAgICAgICAgICAgIHBvc2l0aW9uLnNldEF0dHJpYnV0ZShcImRhdGEtZmlzaGlkXCIsIGlkKVxuICAgICAgICAgICAgcG9zaXRpb24uc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgYGJhY2tncm91bmQtaW1hZ2U6dXJsKFwiLi9pbWFnZXMvJHtpZH0ucG5nXCIpO3RvcDoke2Zpc2gucG9zaXRpb25zW2ldLnh9JTtsZWZ0OiR7ZmlzaC5wb3NpdGlvbnNbaV0ueX0lYClcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9zaXRpb25zLWNvbnRhaW5lclwiKS5hcHBlbmRDaGlsZChwb3NpdGlvbilcbiAgICAgICAgfVxuXG4gICAgICAgIGZpc2guc2Vhc29ucy5mb3JFYWNoKChtb250aCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIG1vbnRoID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb250aHMtY29udGFpbmVyID4gZGl2XCIpW2luZGV4XS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInNlYXNvblwiKSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9udGhzLWNvbnRhaW5lciA+IGRpdlwiKVtpbmRleF0ucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWlubWF4LW1pbi1wb2ludHNcIikuaW5uZXJIVE1MID0gY3VycmVudE1pblBvaW50cztcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtaW5tYXgtbWF4LXBvaW50c1wiKS5pbm5lckhUTUwgPSBjdXJyZW50TWluUG9pbnRzICogMjtcblxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNkYXRhLWNvbnRhaW5lclwiKS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNlYXNvblwiLCBjdXJyZW50RmlzaC5zZWFzb25zW25ldyBEYXRlKCkuZ2V0TW9udGgoKV0pXG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaXNoLWltYWdlXCIpLnNldEF0dHJpYnV0ZShcInNyY1wiLCBgLi9pbWFnZXMvJHtmaXNoLmlkfS5wbmdgKTtcblxuICAgICAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjbWlud2VpZ2h0LCAjbWlubWF4LW1pbi13ZWlnaHRcIikpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGZpc2hbdW5pdF0ubWluO1xuICAgICAgICB9KTtcblxuICAgICAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjbWF4d2VpZ2h0LCAjbWlubWF4LW1heC13ZWlnaHRcIikpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGZpc2hbdW5pdF0ubWF4O1xuICAgICAgICB9KVxuXG5cbiAgICAgICAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN0ZXAtd2VpZ2h0XCIpKS5mb3JFYWNoKChzdGVwLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlmdGggPSAoZmlzaFt1bml0XS5tYXggLSBmaXNoW3VuaXRdLm1pbikgKiAwLjI7XG4gICAgICAgICAgICBzdGVwLmlubmVySFRNTCA9IChmaXNoW3VuaXRdLm1pbiArIGZpZnRoICogKGluZGV4ICogMSkpLnRvRml4ZWQoMik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN0ZXAtcG9pbnRzXCIpKS5mb3JFYWNoKChzdGVwLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlmdGggPSBjdXJyZW50TWluUG9pbnRzIC8gNTtcbiAgICAgICAgICAgIHN0ZXAuaW5uZXJIVE1MID0gY3VycmVudE1pblBvaW50cyArIChmaWZ0aCAqIChpbmRleCkpO1xuICAgICAgICB9KVxuXG5cbiAgICAgICAgaWYgKGN1cnJlbnRGaXNoLnR5cGUgPT0gXCJtb25zdGVyXCIpIHtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0VG9kYXlTcG90KGRhdGUsIGNvbGxlY3Rpb24sIHJlZmVyZW5jZURhdGUpIHtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuIFxuXG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGVOID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVOLnNldERhdGUoZGF0ZU4uZ2V0RGF0ZSgpICsgKGkgLSAxKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVUZXh0ID0gKGRhdGVOLmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKSArIFwiL1wiICsgZGF0ZU4uZ2V0RGF0ZSgpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpXG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZURpZmYgPSBNYXRoLmZsb29yKChkYXRlTiAtIHJlZmVyZW5jZURhdGUpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aW1lRGlmZiA+PSAwID8gdGltZURpZmYgJSBjb2xsZWN0aW9uLmxlbmd0aCA6IChjb2xsZWN0aW9uLmxlbmd0aCArIHRpbWVEaWZmKSAlIGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25baW5kZXhdLnNldEF0dHJpYnV0ZSgnZGF0YS10b2RheS1zcG90JywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25baW5kZXhdLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zcG90LWRheScpOyBcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZU4uZ2V0RGF0ZSgpID09IG5ldyBEYXRlKGRhdGUpLmdldERhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbltpbmRleF0uc2V0QXR0cmlidXRlKCdkYXRhLXRvZGF5LXNwb3QnLCAndHJ1ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbltpbmRleF0uc2V0QXR0cmlidXRlKCdkYXRhLXNwb3QtZGF5JywgZGF0ZVRleHQpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKS5zZXREYXRlKG5ldyBEYXRlKCkuZ2V0RGF0ZSgpICsgMCk7XG4gICAgICAgICAgICBjb25zdCBodG1sQ29sbGVjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Njcm9zcycpO1xuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlRGF0ZSA9IG5ldyBEYXRlKDIwMjMsIDUsIDEpO1xuXG4gICAgICAgICAgICBzZXRUb2RheVNwb3QoY3VycmVudERhdGUsIGh0bWxDb2xsZWN0aW9uLCByZWZlcmVuY2VEYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWN0aXZlXCIpPy5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pZD1cIiR7aWR9XCJdYCkuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcblxuXG4gICAgICAgIGlmIChjdXJyZW50RmlzaC5kaWZmaWN1bHR5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmRpZmZpY3VsdHlcIikpLmZvckVhY2goKGVsZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGaXNoLmRpZmZpY3VsdHkgPT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJodG1sXCIpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGN1cnJlbnRGaXNoLnR5cGUpXG5cblxuICAgICAgICBpZiAoZ2V0UXVlcnlQYXJhbVZhbHVlKFwiYzRyblwiKSkge1xuICAgICAgICAgICAgbG9hZEM0cm4oaWQpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG5cblxuICAgIGxvYWRGaXNoKGN1cnJlbnRJZCwgd2luZG93LmxhbmcpXG5cblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9udGhzLWNvbnRhaW5lciA+IGRpdlwiKVtuZXcgRGF0ZSgpLmdldE1vbnRoKCldLnNldEF0dHJpYnV0ZShcImRhdGEtY3VycmVudFwiLCBcInRydWVcIik7XG5cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVJhbmdlKHBlcmNlbnQgPSAxMCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJhbmdlLXZhbHVlcy1jb250YWluZXJcIikuc3R5bGUubGVmdCA9IHBlcmNlbnQgKyBcIiVcIjtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwZXJjZW50XCIpLmlubmVySFRNTCA9IE51bWJlcihwZXJjZW50KS50b0ZpeGVkKDIpO1xuXG4gICAgICAgIEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zdGFycy1jb250YWluZXIgLnN2Zy1jb250YWluZXJcIikpLmZvckVhY2goKGNvbnRhaW5lciwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJkYXRhLWN1cnJlbnQtc3ZnXCIsIHBlcmNlbnQgPiAoaW5kZXgpICogMjApXG4gICAgICAgIH0pXG5cblxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3dlaWdodFwiKS52YWx1ZSA9ICgoY3VycmVudEZpc2hbdW5pdF0ubWF4IC0gY3VycmVudEZpc2hbdW5pdF0ubWluKSAqIChOdW1iZXIocGVyY2VudCkgLyAxMDApICsgY3VycmVudEZpc2hbdW5pdF0ubWluKS50b0ZpeGVkKDMpO1xuXG5cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwb2ludHNcIikudmFsdWUgPSAoY3VycmVudE1pblBvaW50cyArIGN1cnJlbnRNaW5Qb2ludHMgKiAocGVyY2VudCAvIDEwMCkpLnRvRml4ZWQoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyYW5nZS1jb2xvclwiKS5zdHlsZS53aWR0aCA9IHBlcmNlbnQgKyBcIiVcIlxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJhbmdlXCIpLnZhbHVlID0gcGVyY2VudDtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3JhbmdlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZSkgPT4ge1xuICAgICAgICB1cGRhdGVSYW5nZShlLnRhcmdldC52YWx1ZSlcbiAgICB9KVxuXG5cbiAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmFuZ2UtaW5wdXRcIikpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKCkgPT4ge1xuXG4gICAgICAgICAgICBpZiAoaW5wdXQuZ2V0QXR0cmlidXRlKFwiaWRcIikgPT0gXCJwb2ludHNcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZSA+PSBjdXJyZW50TWluUG9pbnRzICYmIGlucHV0LnZhbHVlIDw9IChjdXJyZW50TWluUG9pbnRzICogMikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFBlcmNlbnQgPSAoKGlucHV0LnZhbHVlIC0gY3VycmVudE1pblBvaW50cykgLyBjdXJyZW50TWluUG9pbnRzKSAqIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2UoY3VycmVudFBlcmNlbnQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5wdXQuZ2V0QXR0cmlidXRlKFwiaWRcIikgPT0gXCJ3ZWlnaHRcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZSA+PSBjdXJyZW50RmlzaFt1bml0XS5taW4gJiYgaW5wdXQudmFsdWUgPD0gY3VycmVudEZpc2hbdW5pdF0ubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgvXlxcZCsoXFwuXFxkezN9KSQvLnRlc3QoaW5wdXQudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50UGVyY2VudCA9ICgoaW5wdXQudmFsdWUgLSBjdXJyZW50RmlzaFt1bml0XS5taW4pIC8gKGN1cnJlbnRGaXNoW3VuaXRdLm1heCAtIGN1cnJlbnRGaXNoW3VuaXRdLm1pbikpICogMTAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZShjdXJyZW50UGVyY2VudClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxuXG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImxpc3QtdGl0bGVcIikpIHtcbiAgICAgICAgICAgIGUudGFyZ2V0LmNsb3Nlc3QoXCIubGlzdC1jb250YWluZXJcIikuY2xhc3NMaXN0LnRvZ2dsZShcImhpZGRlbi1saXN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJmaXNocFwiKSkge1xuICAgICAgICAgICAgY29uc3QgY2xpY2tlZElkID0gZS50YXJnZXQuY2xvc2VzdChcIi5pdGVtXCIpLmdldEF0dHJpYnV0ZShcImRhdGEtaWRcIik7XG4gICAgICAgICAgICB0cmFja0RhdGFJZENsaWNrcyhjbGlja2VkSWQpXG4gICAgICAgIH1cbiAgICB9KVxuXG5cbiAgICBjb25zdCBpdGVtcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5pdGVtXCIpKTtcblxuXG4gICAgZnVuY3Rpb24gY2hlY2tTY3JlZW5XaWR0aCgpIHtcbiAgICAgICAgdmFyIHNjcmVlbldpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIHx8IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBpc0xlc3NUaGFuNzY4ID0gc2NyZWVuV2lkdGggPCA3Njg7XG4gICAgICAgIGlmIChpc0xlc3NUaGFuNzY4KSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNzaWRlYmFyXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJ2aXNpYmxlXCIpO1xuXG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jc2lkZWJhclwiKS5jbGFzc0xpc3QucmVtb3ZlKFwidmlzaWJsZVwiKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjaGVja1NjcmVlbldpZHRoKCk7XG4gICAgfSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjaGVja1NjcmVlbldpZHRoKCk7XG4gICAgfSk7XG5cblxuXG4gICAgdmFyIHNjcm9sbGFibGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlY3Rpb24uY3Njcm9sbGFibGUnKTtcblxuICAgIHNjcm9sbGFibGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gZXZlbnQudGFyZ2V0LnNjcm9sbFRvcDtcblxuICAgICAgICBpZiAoc2Nyb2xsVG9wID4gNTApIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaGVhZGVyIC5pcy1mbGV4OmZpcnN0LW9mLXR5cGVcIikuY2xhc3NMaXN0LmFkZChcInN0aWNreVwiKVxuICAgICAgICAgICAgdmFyIGV2ZW50U2Nyb2xsTW9yZVRoYW41MCA9IG5ldyBDdXN0b21FdmVudCgnc2Nyb2xsTW9yZVRoYW41MEV2ZW50Jyk7XG4gICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50U2Nyb2xsTW9yZVRoYW41MCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsVG9wID49IDAgJiYgc2Nyb2xsVG9wIDw9IDUwKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2hlYWRlciAuaXMtZmxleDpmaXJzdC1vZi10eXBlXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJzdGlja3lcIilcbiAgICAgICAgICAgIHZhciBldmVudFNjcm9sbEJldHdlZW4wQW5kNTAgPSBuZXcgQ3VzdG9tRXZlbnQoJ3Njcm9sbEJldHdlZW4wQW5kNTBFdmVudCcpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudFNjcm9sbEJldHdlZW4wQW5kNTApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbn0pO1xuXG5cbmZ1bmN0aW9uIG9uUGFnZUxvYWQoY2FsbGJhY2spIHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwpKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGNhbGxiYWNrKTtcbiAgICB9XG59XG5vblBhZ2VMb2FkKGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtbG9hZGluZ1wiKTtcblxuICAgIH0sIDUwMClcbn0pO1xuXG5cbmlmIChnZXRRdWVyeVBhcmFtVmFsdWUoXCJjNHJuXCIpKSB7XG4gICAgY29uc3Qgc3RlaW5TY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgIHN0ZWluU2NyaXB0LnNldEF0dHJpYnV0ZShcInNyY1wiLCBcImh0dHBzOi8vdW5wa2cuY29tL3N0ZWluLWpzLWNsaWVudFwiKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0ZWluU2NyaXB0KTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRRdWVyeVBhcmFtVmFsdWUoXCJjNHJuXCIpO1xuICAgICAgICBjb25zdCBzdG9yZSA9IG5ldyBTdGVpblN0b3JlKFxuICAgICAgICAgICAgXCJodHRwczovL2FwaS5zdGVpbmhxLmNvbS92MS9zdG9yYWdlcy9cIiArIGtleVxuICAgICAgICApO1xuICAgICAgICBzdG9yZS5yZWFkKFwiYzRybmFcIiwgeyBsaW1pdDogMTAwLCBvZmZzZXQ6IDAgfSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5jNHJuID0gZGF0YTtcbiAgICAgICAgfSlcbiAgICB9LCA4MDApXG59XG5cblxuIl0sIm5hbWVzIjpbImxvYWRDNHJuIiwiZmlzaElkIiwiZmluZE9iamVjdEJ5SWQiLCJhcnJheSIsImlkIiwiXyIsImZpbmQiLCJjb252ZXJ0VG9KU09OIiwianNvblN0cmluZyIsImZpeGVkU3RyaW5nIiwicmVwbGFjZSIsImpzb25BcnJheVN0cmluZyIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJqc29uIiwic3RyaW5naWZ5IiwiZXJyb3IiLCJjb25zb2xlIiwidGVzdFdpbmRvd0M0cm4iLCJjb3VudCIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ3aW5kb3ciLCJjNHJuIiwidW5kZWZpbmVkIiwiYzRybk5vdGUiLCJjbGVhckludGVydmFsIiwibG9nIiwiYzRybkZpc2giLCJub3RlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsImNvbnZlcnRlZEpTT04iLCJwb3MiLCJjNHJuUG9zIiwiZm9yRWFjaCIsInBvc0VsZW0iLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwic3R5bGUiLCJsZWZ0IiwieCIsInRvcCIsInkiLCJhcHBlbmRDaGlsZCIsImFsYXNrYUZpc2giLCJ0eXBlIiwibmFtZSIsImVuIiwiZnIiLCJwdCIsImRpZmZpY3VsdHkiLCJhdHRyaWJ1dGVzIiwic2hhZG93Iiwicm9kcyIsIm1vbWVudCIsInNlYXNvbnMiLCJrZ3MiLCJtaW4iLCJtYXgiLCJsYnMiLCJtYXAiLCJwb3NpdGlvbnMiLCJwb3NpdGlvbk5vdGUiLCJwYXJhZGlzZUZpc2giLCJnbEZpc2giLCJjckZpc2giLCJhdXN0cmFsaWFGaXNoIiwic2NvdGxhbmRGaXNoIiwiZmlzaGVzIiwiZGF5IiwibmlnaHQiLCJ0cnVzdGVkIiwic3BvdCIsImNyZWF0ZUxpc3QiLCJmaXNoIiwibGFuZ3VhZ2UiLCJxdWVyeVNlbGVjdG9yIiwibGlzdENvbnRhaW5lciIsImxpc3RUaXRsZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwidXJsIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJvbmxvYWQiLCJzdGF0dXMiLCJzdmdFbGVtZW50IiwicmVzcG9uc2VYTUwiLCJkb2N1bWVudEVsZW1lbnQiLCJzZW5kIiwiaWNvbkFycm93IiwiY3JlYXRlRWxlbWVudE5TIiwicGF0aEFycm93IiwidGl0bGVUZXh0IiwiaW5uZXJMaXN0IiwiaXRlbSIsIkRhdGUiLCJnZXRNb250aCIsImlucHJvZ3Jlc3MiLCJmaWd1cmUiLCJpbWciLCJwIiwidHJhY2tEYXRhSWRDbGlja3MiLCJkYXRhSWRWYWx1ZSIsImd0YWciLCJnZXRRdWVyeVBhcmFtVmFsdWUiLCJrZXkiLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJsb2NhdGlvbiIsInNlYXJjaCIsInBhcmFtIiwiZ2V0IiwiZ2V0Q29va2llVmFsdWUiLCJjb29raWVzIiwiY29va2llIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwidHJpbSIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJsYW5nIiwiZmluZE1hdGNoaW5nSWQiLCJvcmlnaW5hbElkIiwidG9sZXJhbmNlIiwib3JpZ2luYWxGaXNoIiwib3JpZ2luYWxQb3NpdGlvbnMiLCJtYXRjaGluZ0Zpc2giLCJmaWx0ZXIiLCJmIiwiaXNNYXRjaGluZ1Bvc2l0aW9uIiwic29tZSIsIm9yaWdpbmFsUG9zIiwiaW5kZXgiLCJpc01hdGNoaW5nIiwib3JpZ2luYWxQb3NpdGlvbiIsIm1hdGNoaW5nUG9zaXRpb25zIiwibmVpZ2hib3JQb3NpdGlvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwiY3VycmVudElkIiwiY3VycmVudEZpc2giLCJjdXJyZW50TWluUG9pbnRzIiwidW5pdCIsImUiLCJ0YXJnZXQiLCJjaGVja2VkIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImVsZW1lbnQiLCJsb2FkRmlzaCIsIm9wZW5Nb2RhbCIsIiRlbCIsImNsYXNzTGlzdCIsImFkZCIsImNsb3NlTW9kYWwiLCJyZW1vdmUiLCJjbG9zZUFsbE1vZGFscyIsIiRtb2RhbCIsIiR0cmlnZ2VyIiwibW9kYWwiLCJkYXRhc2V0IiwiJHRhcmdldCIsIiRjbG9zZSIsImNsb3Nlc3QiLCJldmVudCIsImtleUNvZGUiLCJ0b2dnbGVTaWRlTWVudSIsInRvZ2dsZSIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaE1vdmUiLCJ4RG93biIsInlEb3duIiwiZXZ0IiwiZmlyc3RUb3VjaCIsInRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsInhVcCIsInlVcCIsInhEaWZmIiwieURpZmYiLCJNYXRoIiwiYWJzIiwiaXNUYXJnZXRFbGVtZW50UmFuZ2UiLCJ0cmlnZ2VyU3dpcGVMZWZ0RXZlbnQiLCJ0cmlnZ2VyU3dpcGVSaWdodEV2ZW50IiwidGFyZ2V0RWxlbWVudCIsImJpbmRFdmVudExpc3RlbmVyVG9JdGVtIiwiZ2V0QXR0cmlidXRlIiwiZWxlbSIsImxhbmdCdG4iLCJ1cGRhdGVSYW5nZSIsInZhbHVlIiwiaXNJbiIsInRvRml4ZWQiLCJhdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOYW1lIiwiT2JqZWN0Iiwia2V5cyIsInN2ZyIsImluY2x1ZGVzIiwicG9zaXRpb24iLCJtb250aCIsInJlbW92ZUF0dHJpYnV0ZSIsInN0ZXAiLCJmaWZ0aCIsInNldFRvZGF5U3BvdCIsImRhdGUiLCJjb2xsZWN0aW9uIiwicmVmZXJlbmNlRGF0ZSIsImRhdGVOIiwic2V0RGF0ZSIsImdldERhdGUiLCJkYXRlVGV4dCIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJ0aW1lRGlmZiIsImZsb29yIiwiY3VycmVudERhdGUiLCJodG1sQ29sbGVjdGlvbiIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJkaXNwbGF5IiwicGVyY2VudCIsIk51bWJlciIsImNvbnRhaW5lciIsIndpZHRoIiwiaW5wdXQiLCJjdXJyZW50UGVyY2VudCIsInRlc3QiLCJjb250YWlucyIsImNsaWNrZWRJZCIsIml0ZW1zIiwiY2hlY2tTY3JlZW5XaWR0aCIsInNjcmVlbldpZHRoIiwiaW5uZXJXaWR0aCIsImNsaWVudFdpZHRoIiwiYm9keSIsImlzTGVzc1RoYW43NjgiLCJzY3JvbGxhYmxlRWxlbWVudCIsInNjcm9sbFRvcCIsImV2ZW50U2Nyb2xsTW9yZVRoYW41MCIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImV2ZW50U2Nyb2xsQmV0d2VlbjBBbmQ1MCIsIm9uUGFnZUxvYWQiLCJjYWxsYmFjayIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsInNldFRpbWVvdXQiLCJzdGVpblNjcmlwdCIsInN0b3JlIiwiU3RlaW5TdG9yZSIsInJlYWQiLCJsaW1pdCIsIm9mZnNldCIsInRoZW4iXSwic291cmNlUm9vdCI6IiJ9